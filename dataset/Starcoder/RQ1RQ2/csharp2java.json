{"question": "[ClassInitialize]\npublic static void CreateEntityManagerFactory(TestContext context)\n{\n    Environment.SetEnvironmentVariable(\"db.port\", \"3306\");\n    Environment.SetEnvironmentVariable(\"db.name\", DATABASE_NAME);\n    managerFactory = Persistence.CreateEntityManagerFactory(\"mysql-test\");\n}", "answer": "@BeforeAll\n\tpublic static void createEntityManagerFactory() {\n\t\tSystem.setProperty(\"db.port\", \"3306\");\n\t\tSystem.setProperty(\"db.name\", DATABASE_NAME);\n\t\tmanagerFactory = Persistence.createEntityManagerFactory(\"mysql-test\");\n\t}"}
{"question": "private void PersistObjects(List<object> objects)\n{\n    _entityManager.GetTransaction().Begin();\n    foreach (var obj in objects)\n        _entityManager.Persist(obj);\n    _entityManager.GetTransaction().Commit();\n}", "answer": "private void persistObjects(List<Object> objects) {\n\t\tentityManager.getTransaction().begin();\n\t\tfor (Object obj : objects)\n\t\t\tentityManager.persist(obj);\n\t\tentityManager.getTransaction().commit();\n\t}"}
{"question": "private Stock NewStockWithId(string id, Product product, int quantity)\n{\n    Stock s = new Stock(product, quantity);\n    s.Id = id;\n    return s;\n}", "answer": "private Stock newStockWithId(String id, Product product, int quantity) {\n\t\tStock s = new Stock(product, quantity);\n\t\ts.setId(id);\n\t\treturn s;\n\t}"}
{"question": "public void NewExtensionPoint()\n{\n    object target = GetTarget();\n\n    if (ModelFacade.IsAUseCase(target))\n    {\n        TargetManager.GetInstance().SetTarget(UseCasesFactory.GetFactory().BuildExtensionPoint(target));\n    }\n}", "answer": "public void newExtensionPoint() {\n        Object target = getTarget();\n\n        if (ModelFacade.isAUseCase(target)) {\n            TargetManager.getInstance().setTarget(UseCasesFactory.getFactory().buildExtensionPoint(target));\n        }\n    }"}
{"question": "public override void OnFailure(ICall<JSONResponse.LessonReview> call, Exception t)\n{\n    HideDialog();\n    Debug.LogError(\"lessonGagal\" + t.ToString());\n}", "answer": "@Override\n            public void onFailure(Call<JSONResponse.LessonReview> call, Throwable t) {\n                hideDialog();\n                Log.e(\"lessonGagal\",t.toString());\n\n            }"}
{"question": "private static bool IsListOfFiles(ResolvedType parameterType)\n{\n    return IsContainerType(parameterType) && IsFileType(CollectionElementType(parameterType));\n}", "answer": "private static boolean isListOfFiles(ResolvedType parameterType) {\n    return isContainerType(parameterType) && isFileType(collectionElementType(parameterType));\n  }"}
{"question": "public override void CheckListNow(int size)\n{\n    if (size == 0)\n    {\n        emptyIndicator.Visibility = ViewStates.Visible;\n    }\n    else\n    {\n        emptyIndicator.Visibility = ViewStates.Gone;\n    }\n}", "answer": "@Override\n    public void checkListNow(int size) {\n        if(size == 0){\n            emptyIndicator.setVisibility(View.VISIBLE);\n        } else {\n            emptyIndicator.setVisibility(View.GONE);\n        }\n    }"}
{"question": "[HttpPost(\"refresh/{token}\")]\npublic AccessTokenDTO TokenPostRefresh([FromRoute(Name = \"token\")] string token)\n{\n    AccessTokenDTO dto = userService.RefreshAccessToken(token).OrElse(null);\n    if (dto == null)\n        throw new InvalidRefreshTokenException();\n    return dto;\n}", "answer": "@PostMapping(\"/refresh/{token}\")\n\tpublic AccessTokenDTO tokenPostRefresh(@PathVariable(value = \"token\") final String token) {\n\t\tAccessTokenDTO dto = userService.refreshAccessToken(token).orElse(null);\n\t\tif (dto == null)\n\t\t\tthrow new InvalidRefreshTokenException();\n\t\treturn dto;\n\t}"}
{"question": "[HttpGet(\"/isValidPasswordToken/{token}\")]\npublic IActionResult IsValidPasswordToken([FromRoute] string token)\n{\n    userService.LoadUserWithPasswordResetToken(token);\n    return Ok(\"{ \\\"message\\\": \\\"valid token\\\" }\");\n}", "answer": "@GetMapping(\"/isValidPasswordToken/{token}\")\n\tpublic ResponseEntity<String> isValidPasswordToken(@PathVariable(value = \"token\") final String token) {\n\t\tuserService.loadUserWithPasswordResetToken(token);\n\t\treturn new ResponseEntity<>(\"{ \\\"message\\\": \\\"valid token\\\" }\", HttpStatus.OK);\n\n\t}"}
{"question": "private void SendMail(User user, string subject, string message)\n{\n    new Thread(new ThreadStart(() => new MailService(user.Username, subject, message))).Start();\n}", "answer": "private void sendMail(User user, String object, String message) {\n\t\tnew Thread(new MailService(user.getUsername(), object, message)).start();\n\t}"}
{"question": "public static SerializeableRealmListWrapper FromRealmList(RealmList<RealmModel> inList)\n{\n    SerializeableRealmListWrapper wrapper = new SerializeableRealmListWrapper();\n    foreach (RealmModel rm in inList)\n    {\n        wrapper.list.Add(rm);\n    }\n    return wrapper;\n}", "answer": "public static SerializeableRealmListWrapper fromRealmList(RealmList<RealmModel> inList){\n        SerializeableRealmListWrapper wrapper = new SerializeableRealmListWrapper();\n        for(RealmModel rm: inList){\n            wrapper.list.add(rm);\n        }\n        return wrapper;\n    }"}
{"question": "public override object Unwrap()\n{\n    var result = new RealmList<RealmModel>();\n    foreach (var rm in list)\n    {\n        result.Add(rm);\n    }\n    return result;\n}", "answer": "@Override\n    public Object unwrap() {\n        RealmList<RealmModel> result = new RealmList<>();\n        for(RealmModel rm: list){\n            result.add(rm);\n        }\n        return result;\n    }"}
{"question": "void HandleMessage(DeviceOperator deviceOperator, DeviceMessage deviceMessage)\n{\n    string messageId = deviceMessage.MessageId;\n    if (string.IsNullOrWhiteSpace(messageId))\n    {\n        return;\n    }\n    if (Accept(messageId))\n    {\n        SaveMessage(deviceMessage);\n    }\n}", "answer": "default void handleMessage(DeviceOperator deviceOperator, DeviceMessage deviceMessage) {\n        String messageId = deviceMessage.getMessageId();\n        if(StringUtils.isBlank(messageId)){\n            return;\n        }\n        if(accept(messageId)){\n            saveMessage(deviceMessage);\n        }\n    }"}
{"question": "public override void OnActivityCreated(Bundle savedInstanceState)\n{\n    base.OnActivityCreated(savedInstanceState);\n    mController.InitController(mControllerDelegate, Arguments);\n}", "answer": "@Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        mController.initController(mControllerDelegate, getArguments());\n    }"}
{"question": "private void SendData()\n{\n    var data = new byte[2 + queue.Count * 2];\n    int offset = 0;\n    data[offset++] = head;\n    data[offset++] = tail;\n    foreach (short value in queue)\n    {\n        BitConverter.GetBytes(value).CopyTo(data, offset);\n        offset += 2;\n    }\n    GetCasing().SendData(GetFace(), data, DATA_TYPE_UPDATE);\n}", "answer": "private void sendData() {\n        final ByteBuf data = Unpooled.buffer();\n        data.writeByte(head);\n        data.writeByte(tail);\n        for (final short value : queue) {\n            data.writeShort(value);\n        }\n        getCasing().sendData(getFace(), data, DATA_TYPE_UPDATE);\n    }"}
{"question": "[Test]\npublic void Convert()\n{\n    var query = Builders<BsonDocument>.Filter.And(\n        Builders<BsonDocument>.Filter.Gte(\"_id\", new ObjectId(\"609285a90000000000000000\")),\n        Builders<BsonDocument>.Filter.Lt(\"_id\", new ObjectId(\"6092868a0000000000000000\")));\n\n    var json = BsonToJsonConverter.Convert(query);\n    Console.WriteLine(query.ToBsonDocument().ToJson());\n    Assert.AreEqual(query.ToBsonDocument().ToJson().Replace(\" \", \"\"), json.ToString());\n}", "answer": "@Test\n    public void convert() throws IOException {\n        Bson query = Filters.and(Filters.gte(\"_id\", new ObjectId(\"609285a90000000000000000\")),Filters.lt(\"_id\", new ObjectId(\"6092868a0000000000000000\")));\n\n        JsonNode json = new BsonToJsonConverter().convert(query);\n        System.out.println(query.toBsonDocument().toJson());\n        assertEquals(query.toBsonDocument().toJson().replace(\" \", \"\"), json.toString());\n    }"}
{"question": "public void End()\n{\n    foreach (Command command in commandList)\n    {\n        if (commandInitializedMap[command] == true) command.End();\n    }\n}", "answer": "public void end() {\n        for (Command command : commandList) {\n            if (commandInitializedMap.get(command) == true) command.end();\n        }\n    }"}
{"question": "public override int GetHashCode()\n{\n    if (this.Nombre != null)\n    {\n        return this.Nombre.GetHashCode();\n    }\n    return base.GetHashCode();\n}", "answer": "@Override\n    public int hashCode(){\n        if(this.getNombre()!=null){\n            return this.getNombre().hashCode();\n        }\n        return super.hashCode();\n    }"}
{"question": "[Test]\npublic void TestGetIdentifier()\n{\n    DbTableBasedDataTable<DbTestObject> table = new DbTableBasedDataTable<DbTestObject>(DbTestObject.TABLE);\n    DataTableIdentifier identifier = table.GetIdentifier();\n\n    Assert.AreEqual(\"database.table\", identifier.ToString());\n}", "answer": "@Test\n\tpublic void testGetIdentifier() {\n\n\t\tDbTableBasedDataTable<DbTestObject> table = new DbTableBasedDataTable<>(DbTestObject.TABLE);\n\t\tDataTableIdentifier identifier = table.getIdentifier();\n\n\t\tassertEquals(\"database.table\", identifier.toString());\n\t}"}
{"question": "protected override void ExecuteVdsBrokerCommand()\n{\n    status = GetBroker().Reset(GetParameters().VmId.ToString());\n    ProceedProxyReturnValue();\n}", "answer": "@Override\n    protected void executeVdsBrokerCommand() {\n        status = getBroker().reset(getParameters().getVmId().toString());\n        proceedProxyReturnValue();\n    }"}
{"question": "public IEnumerator<T> FindAllFields(List<Uri> ids, List<string> columnField)\n{\n    return client.FindAllFields(clazz, ids, columnField);\n}", "answer": "public Iterator<T> findAllFields(final List<URI> ids, final List<String> columnField) {\n        return client.findAllFields(clazz, ids, columnField);\n    }"}
{"question": "public IState Reset(BlockPartyNPC npc) {\n    foreach (Condition condition in Enum.GetValues(typeof(Condition))) {\n        if (this.timeouts[condition] < 0) { continue; }\n        if (condition.IsTrue(npc)) {\n            this.SetState(npc, condition.GetStemState());\n        }\n    }\n    return this.state;\n}", "answer": "public IState reset(BlockPartyNPC npc) {\n        for (Condition condition : Condition.values()) {\n            if (this.timeouts.get(condition) < 0) { continue; }\n            if (condition.isTrue(npc)) {\n                this.setState(npc, condition.getStemState());\n            }\n        }\n        return this.state;\n    }"}
{"question": "public SCPClient CreateSCPClient()\n{\n    return this.conn != null ? this.conn.CreateSCPClient() : null;\n}", "answer": "public SCPClient createSCPClient() throws Exception {\n        return this.conn != null ? this.conn.createSCPClient() : null;\n    }"}
{"question": "protected bool IsIE(HttpRequest request)\n{\n    return request.Headers[\"USER-AGENT\"].ToString().ToLower().IndexOf(\"msie\") > 0 || request.Headers[\"USER-AGENT\"].ToString().ToLower().IndexOf(\"rv:11.0\") > 0;\n}", "answer": "protected boolean isIE(HttpServletRequest request) {\n        return request.getHeader(\"USER-AGENT\").toLowerCase().indexOf(\"msie\") > 0 || request.getHeader(\"USER-AGENT\").toLowerCase().indexOf(\"rv:11.0\") > 0;\n    }"}
{"question": "public static void Validate(File file, ResourceFolderType resourceType)\n{\n    string error = GetErrorTextForFileResource(file.Name, resourceType);\n    if (error != null)\n    {\n        throw new MergingException(error).WithFile(file);\n    }\n}", "answer": "public static void validate(@NonNull File file, @NonNull ResourceFolderType resourceType)\n            throws MergingException {\n        String error = getErrorTextForFileResource(file.getName(), resourceType);\n        if (error != null) {\n            throw MergingException.withMessage(error).withFile(file).build();\n        }\n    }"}
{"question": "private static string RemoveSingleExtension(string fileNameWithExt)\n{\n    int lastDot = fileNameWithExt.LastIndexOf('.');\n    if (lastDot != -1)\n    {\n        return fileNameWithExt.Substring(0, lastDot);\n    }\n    else\n    {\n        return fileNameWithExt;\n    }\n}", "answer": "private static String removeSingleExtension(String fileNameWithExt) {\n        int lastDot = fileNameWithExt.lastIndexOf('.');\n        if (lastDot != -1) {\n            return fileNameWithExt.substring(0, lastDot);\n        } else {\n            return fileNameWithExt;\n        }\n    }"}
{"question": "private Criterion<O> ParseCriteria<E>(Property<O, E> property, object[] values)\n{\n    var type = (Criterion.Type)Enum.Parse(typeof(Criterion.Type), (string)values[0]);\n    var parser = Criteria.ParserFor(type);\n    return parser.Parse(property, values);\n}", "answer": "private <E> Criterion<O> parseCriteria(Property<O, E> property,\n\t\t\tObject[] values) {\n\t\tfinal Criterion.Type type = Criterion.Type.valueOf((String) values[0]);\n\t\tfinal Parser<O, Criterion<O>> parser = Criteria.parserFor(type);\n\t\treturn parser.parse(property, values);\n\t}"}
{"question": "protected override void OnCreate(Bundle savedInstanceState)\n{\n    base.OnCreate(savedInstanceState);\n    game = new HangmanManager(\"medium\");\n}", "answer": "@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        game = new HangmanManager(\"medium\");\n    }"}
{"question": "[Test]\npublic void SystemContract()\n{\n    var system = new SystemContract();\n    var stub = new ChaincodeStubNaiveImpl();\n    system.GetMetadata(new Context(stub));\n}", "answer": "@Test\n    public void systemContract() {\n\n        final SystemContract system = new SystemContract();\n        final ChaincodeStub stub = new ChaincodeStubNaiveImpl();\n        system.getMetadata(new Context(stub));\n    }"}
{"question": "private CommentThread CreateThreadWithPolicies(string userEmail)\n{\n    CommentThread thread = new CommentThread();\n    User user = new User();\n    user.Email = userEmail;\n\n    Dictionary<string, Policy> policyMap = PolicyUtils.GeneratePolicyFromPermission(new HashSet<AclPermission> { AclPermission.READ_THREAD }, user);\n    thread.Policies = new HashSet<Policy>(policyMap.Values);\n    return thread;\n}", "answer": "private CommentThread createThreadWithPolicies(String userEmail) {\n        CommentThread thread = new CommentThread();\n        User user = new User();\n        user.setEmail(userEmail);\n\n        Map<String, Policy> policyMap = policyUtils.generatePolicyFromPermission(Set.of(AclPermission.READ_THREAD), user);\n        thread.setPolicies(Set.copyOf(policyMap.values()));\n        return thread;\n    }"}
{"question": "public DiagnosticsRecordStatus FindById(long id)\n{\n    var o = repo.FindById(id);\n    return o == null ? null : o;\n}", "answer": "@Override\n\tpublic DiagnosticsRecordStatus findById(long id) {\n\t\t\n\t\tOptional<DiagnosticsRecordStatus> o = repo.findById(id);\n\t\t\n\t\treturn o.isEmpty()?null : o.get();\n\t\t\n\t}"}
{"question": "public static Status FromValue(string text)\n{\n    foreach (Status b in Enum.GetValues(typeof(Status)))\n    {\n        if (b.value.ToString() == text)\n        {\n            return b;\n        }\n    }\n    return null;\n}", "answer": "public static Status fromValue(String text) {\n      for (Status b : Status.values()) {\n        if (String.valueOf(b.value).equals(text)) {\n          return b;\n        }\n      }\n      return null;\n    }"}
{"question": "public void OnCallback(List<ResultArr> value, Experiment exp, int whichCase)\n{\n    resultArrArrayList = value;\n    foreach (ResultArr result in value)\n    {\n        viewResultsFrom.Add(result);\n    }\n    resAdapter.NotifyDataSetChanged();\n}", "answer": "public void onCallback(ArrayList<ResultArr> value,Experiment exp, int whichCase){\n        resultArrArrayList = value;\n        for (ResultArr result :value){\n            viewResultsFrom.add(result);\n        }\n        resAdapter.notifyDataSetChanged();\n    }"}
{"question": "protected override void OnPostExecute(string html)\n{\n    base.OnPostExecute(html);\n    StartActivity(activity, result, result.Extras);\n}", "answer": "@Override\n    protected void onPostExecute(String html) {\n        super.onPostExecute(html);\n        startActivity(activity,result,result.getExtras());\n    }"}
{"question": "public bool IsValid(string s, ConstraintValidatorContext constraintValidatorContext)\n{\n    try\n    {\n        return System.Text.RegularExpressions.Regex.IsMatch(s, REGEX_TEL);\n    }\n    catch\n    {\n        return false;\n    }\n}", "answer": "@Override\n    public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {\n        try {\n            return Pattern.matches(REGEX_TEL, s);\n        } catch (Exception e) {\n            return false;\n        }\n    }"}
{"question": "public override bool IsPotionApplicable(PotionEffect potion)\n{\n    return potion.GetPotion() != MPPotions.INFECTED_PURLONITE && base.IsPotionApplicable(potion);\n}", "answer": "@Override\n    public boolean isPotionApplicable(PotionEffect potion)\n    {\n        return potion.getPotion() == MPPotions.INFECTED_PURLONITE ? false : super.isPotionApplicable(potion);\n    }"}
{"question": "public override void OnResume()\n{\n    EventBusSingleton.Instance.Register(this);\n    base.OnResume();\n}", "answer": "@Override\n    public void onResume() {\n        EventBusSingleton.getInstance().register(this);\n        super.onResume();\n    }"}
{"question": "private void InitGooglePlaces()\n{\n    placesApiManager = PlaceApiManager\n        .GetInstance(new WeakReference<PlaceApiManager.OnHandlePlaceApiResult>(this),\n            new WeakReference(GetContext()));\n}", "answer": "private void initGooglePlaces() {\n        placesApiManager = PlaceApiManager\n                .getInstance(new WeakReference<PlaceApiManager.OnHandlePlaceApiResult>(this),\n                        new WeakReference<>(getContext()));\n\n    }"}
{"question": "public override void OnCreateOptionsMenu(IMenu menu, MenuInflater menuInflater)\n{\n    base.OnCreateOptionsMenu(menu, menuInflater);\n    menuInflater.Inflate(Resource.Menu.review, menu);\n}", "answer": "@Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {\n        super.onCreateOptionsMenu(menu, menuInflater);\n        menuInflater.inflate(R.menu.review, menu);\n    }"}
{"question": "public override void OnPlaceApiSuccess(object result, RequestType type)\n{\n    if (type == RequestType.PLACE_REVIEWS)\n    {\n        HandleReviewOnListCallback((List<Review>)result);\n    }\n}", "answer": "@Override\n    public void onPlaceApiSuccess(Object result, RequestType type) {\n//        Log.e(\"REVIEW\", type.toString());\n        if (type == RequestType.PLACE_REVIEWS) {\n            handleReviewOnListCallback((ArrayList<Review>) result);\n        }\n    }"}
{"question": "public override void OnItemClick(int pos, View v)\n{\n    ((ExpandableTextView)v.FindViewById(Resource.Id.reviewTextId)).ToggleEllipsize();\n}", "answer": "@Override\n    public void onItemClick(int pos, View v) {\n        ((ExpandableTextView) v.findViewById(R.id.reviewTextId)).toggleEllipsize();\n    }"}
{"question": "private static bool IsCorrectIP(string ip)\n{\n    return !string.IsNullOrWhiteSpace(ip) && !UNKNOWN_HOST.Equals(ip, StringComparison.OrdinalIgnoreCase);\n}", "answer": "private static boolean isCorrectIP(String ip) {\n        return StringUtils.isNotBlank(ip) && !UNKNOWN_HOST.equalsIgnoreCase(ip);\n    }"}
{"question": "public static void WriteToResponse(string content)\n{\n    try\n    {\n        GetResponse().GetResponseStream().Write(Encoding.UTF8.GetBytes(content), 0, content.Length);\n    }\n    catch (IOException e)\n    {\n        throw new Exception(e.Message, e);\n    }\n}", "answer": "public static void writeToResponse(String content) {\n        try {\n            getResponse().getWriter().write(content);\n        } catch (IOException e) {\n            new RuntimeException(e);\n        }\n    }"}
{"question": "public static string Encode(string str)\n{\n    return System.Web.HttpUtility.UrlEncode(str);\n}", "answer": "public static String encode(String str) {\n        try {\n            return URLEncoder.encode(str, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            log.warn(\"Failed to encode string.\", e);\n        }\n        return null;\n    }"}
{"question": "public static void Cookie(string name, string value, int expiry)\n{\n    HttpCookie cookie = new HttpCookie(name, value);\n    cookie.Expires = DateTime.Now.AddSeconds(expiry);\n    cookie.Path = \"/\";\n    HttpContext.Current.Response.Cookies.Add(cookie);\n}", "answer": "public static void cookie(String name, String value, int expiry) {\n        Cookie cookie = new Cookie(name, value);\n        cookie.setMaxAge(expiry);\n        cookie.setPath(\"/\");\n        WebUtil.getResponse().addCookie(cookie);\n    }"}
{"question": "public void AddDefaultKryoSerializer<T>(Type type, T serializer) where T : ISerializer, ISerializable\n{\n    this.config.AddDefaultKryoSerializer(type, serializer);\n}", "answer": "public <T extends Serializer<?> & Serializable> void addDefaultKryoSerializer(Class<?> type, T serializer) {\n        this.config.addDefaultKryoSerializer(type, serializer);\n    }"}
{"question": "public JobClient ExecuteAsync()\n{\n    return this.ExecuteAsync(GetDefaultName());\n}", "answer": "@PublicEvolving\n    public final JobClient executeAsync() throws Exception {\n        return this.executeAsync(getDefaultName());\n    }"}
{"question": "public override void DestroyItem(Android.Views.View container, int position, Java.Lang.Object object)\n{\n    ((AndroidX.ViewPager.Widget.ViewPager)container).RemoveView((Android.Widget.RelativeLayout)object);\n}", "answer": "@Override\n    public void destroyItem(View container, int position, Object object) {\n        ((ViewPager) container).removeView((RelativeLayout) object);\n\n    }"}
{"question": "public static void Save()\n{\n    Database.SerCourses();\n    Database.SerStudents();\n    Database.SerTech();\n    Database.SerTechers();\n    Database.SerMan();\n}", "answer": "public static void save() throws IOException {\n\t\tDatabase.serCourses();\n\t\tDatabase.serStudents();\n\t\tDatabase.serTech();\n\t\tDatabase.serTechers();\n\t\tDatabase.serMan();\n\t}"}
{"question": "private bool BytesCheck(IFormFile file, HashSet<FileType> fileTypeSet, string message)\n{\n    string hexNumber = ReadFileHeader(file);\n    foreach (FileType fileType in fileTypeSet)\n    {\n        if (!string.IsNullOrEmpty(hexNumber) && hexNumber.StartsWith(fileType.HexNumber))\n        {\n            return true;\n        }\n    }\n    throw new HttpBizException(message);\n}", "answer": "private boolean bytesCheck(MultipartFile file, Set<FileType> fileTypeSet, String message) {\n        String hexNumber = readFileHeader(file);\n        for (FileType fileType : fileTypeSet) {\n            if (!StringUtils.isEmpty(hexNumber)&&hexNumber.startsWith(fileType.getHexNumber())) {\n                return true;\n            }\n        }\n        throw new HttpBizException(message);\n    }"}
{"question": "public override T Remove(int index)\n{\n    ChildLink<T> link = delegate.Remove(index);\n    T node = link.Get();\n    link.Set(null);\n    return node;\n}", "answer": "@Override\n  public T remove(int index) {\n    ChildLink<T> link = delegate.remove(index);\n    T node = link.get();\n    link.set(null);\n    return node;\n  }"}
{"question": "public void CopyFrom(List<T> other)\n{\n    foreach (T elem in other)\n    {\n        Add((T)elem.Copy());\n    }\n}", "answer": "@SuppressWarnings(\"unchecked\")\n  public void copyFrom(List<T> other) {\n    for (T elem : other) {\n      add((T) elem.copy());\n    }\n  }"}
{"question": "private static string LoadResource(string name)\n{\n    try\n    {\n        return ResourceLoader.GetContent(name);\n    }\n    catch (IOException e)\n    {\n        logger.Warning(\"Could not find resource: \" + name);\n        return null;\n    }\n}", "answer": "private static String loadResource(String name) {\n     try {\n       return ResourceLoader.getContent(name);\n     } catch (IOException e) {\n       logger.warning(\"Could not find resource: \" + name);\n       return null;\n     }\n  }"}
{"question": "private void ShortPause()\n{\n    try\n    {\n        Thread.Sleep(100);\n    }\n    catch (ThreadInterruptedException e)\n    {\n        throw new RuntimeException(e.Message);\n    }\n}", "answer": "private void shortPause() {\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e.getMessage());\n        }\n    }"}
{"question": "public override bool Include(Entry<TestTableModel, int> entry)\n{\n    return entry.Identifier % 2 == 0;\n}", "answer": "@Override\n            public boolean include(Entry<? extends TestTableModel, ? extends Integer> entry) {\n                return entry.getIdentifier() % 2 == 0;\n            }"}
{"question": "[PostConstruct]\npublic void Foo()\n{\n    Console.WriteLine(\"Bean is initialized!\");\n}", "answer": "@PostConstruct\n  public void foo() {\n    System.out.println(\"Bean is initialized!\");\n  }"}
{"question": "public override void WriteToParcel(Parcel out, int flags)\n{\n    base.WriteToParcel(out, flags);\n    out.WriteInt(mSelectedDay);\n    out.WriteString(mStartDateString);\n    out.WriteString(mEndDateString);\n}", "answer": "@Override\n        public void writeToParcel(Parcel out, int flags) {\n            super.writeToParcel(out, flags);\n            out.writeInt(mSelectedDay);\n            out.writeString(mStartDateString);\n            out.writeString(mEndDateString);\n        }"}
{"question": "private void Validate(string email)\n{\n    if (email == null)\n    {\n        throw new ArgumentException(\"'email' should NOT be null.\");\n    }\n    int length = email.Trim().Length;\n    if (length == 0)\n    {\n        throw new ArgumentException(\"'email' should NOT be blank.\");\n    }\n}", "answer": "private void validate(String email) {\n        if (email == null) {\n            throw new IllegalArgumentException(\"'email' should NOT be null.\");\n        }\n        int length = email.trim().length();\n        if (length == 0) {\n            throw new IllegalArgumentException(\"'email' should NOT be blank.\");\n        }\n    }"}
{"question": "public void Debug(string msg)\n{\n    Console.WriteLine(\"Ctp \" + (this.serverMode ? \"Server\" : \"Client\") + \" - \" + msg);\n}", "answer": "public void debug(String msg) {\n\t\tSystem.out.println(\"Ctp \" + (this.serverMode ? \"Server\" : \"Client\") + \" - \" + msg);\n\t}"}
{"question": "[Test]\npublic void TestListNeverReturnNull()\n{\n    List<Profile> list = service.List();\n    Assert.NotNull(list);\n}", "answer": "@Test\n\tpublic void testListNeverReturnNull() {\n\t\tList<Profile> list = service.list();\n\t\tAssert.assertNotNull(list);\n\t}"}
{"question": "[Test]\npublic void ConstraintString()\n{\n    var expect = XPathResultType.String;\n\n    var xpath = new MatchXPathExpression(\n        \"concat('CLASS', ' = ', //classification-cpc/class)\");\n    Assert.AreEqual(expect, xpath.GetXpathConstraint());\n}", "answer": "@Test\n\tpublic void ConstraintString() throws XPathExpressionException {\n\t\tQName expect = XPathConstants.STRING;\n\n\t\tMatchXPathExpression xpath = new MatchXPathExpression(\n\t\t\t\t\"concat('CLASS', ' = ', //classification-cpc/class)\");\n\t\tassertEquals(expect, xpath.getXpathConstraint());\n\t}"}
{"question": "protected override void LoadEntry(long offset, string line)\n{\n    Entry<K, V> entry = ParseLine(line);\n    internalDict.Put(entry.GetKey(), entry.GetValue());\n}", "answer": "@Override\n\tprotected void loadEntry(long offset, String line) throws IOException {\n\t\tEntry<K, V> entry = parseLine(line);\n\t\tinternal.put(entry.getKey(), entry.getValue());\n\t}"}
{"question": "public override synchronized V Remove(object key)\n{\n    WriteLine((K)key, null);\n    return internal.Remove(key);\n}", "answer": "@Override\n\tpublic synchronized V remove(Object key) {\n\t\twriteLine((K) key, null);\n\t\treturn internal.remove(key);\n\t}"}
{"question": "private readonly bool TryToComputeNext()\n{\n    this.state = State.Failed;\n    ComputeNext();\n    return this.state == State.Ready;\n}", "answer": "private final boolean tryToComputeNext() {\n        this.state = State.Failed;\n        computeNext();\n        return this.state == State.Ready;\n    }"}
{"question": "protected override ICollection<Type> NodePlugins()\n{\n    return new List<Type> { typeof(GeoHeatmapSearchPlugin) };\n}", "answer": "@Override\n    protected Collection<Class<? extends Plugin>> nodePlugins() {\n        return  Collections.singleton(GeoHeatmapSearchPlugin.class);\n    }"}
{"question": "protected override ICollection<Type> TransportClientPlugins()\n{\n    return new List<Type> { typeof(GeoHeatmapSearchPlugin) }.AsReadOnly();\n}", "answer": "@Override\n    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n        return  Collections.singleton(GeoHeatmapSearchPlugin.class);\n    }"}
{"question": "public override bool CanHandle(FileInfo artifact)\n{\n    return \"feeds\".Equals(artifact.Directory.Name) && artifact.Name.EndsWith(\".properties\");\n}", "answer": "@Override\n  public boolean canHandle(File artifact) {\n    return \"feeds\".equals(artifact.getParentFile().getName()) && artifact.getName().endsWith(\".properties\");\n  }"}
{"question": "public Expression Rewrite(object obj, Translator tr)\n{\n    return tr.SyntaxError(\"define-alias is only allowed in a <body>\");\n}", "answer": "public Expression rewrite(Object obj, Translator tr) {\n        return tr.syntaxError(\"define-alias is only allowed in a <body>\");\n    }"}
{"question": "public List<Comment> CommentsByCriteria(User user, Text text)\n{\n    return this.comments\n        .Where(comment => comment.Contains(text) && comment.UserIs(user))\n        .ToList();\n}", "answer": "public List<Comment> commentsByCriteria(final User user, final Text text) {\n        return new ListOf<>(\n            new Filtered<>(\n                this.comments,\n                comment -> comment.contains(text) && comment.userIs(user)\n            )\n        );\n    }"}
{"question": "protected void AddCriterion(string condition)\n{\n    if (condition == null)\n    {\n        throw new System.Exception(\"Value for condition cannot be null\");\n    }\n    criteria.Add(new Criterion(condition));\n}", "answer": "protected void addCriterion(String condition) {\n            if (condition == null) {\n                throw new RuntimeException(\"Value for condition cannot be null\");\n            }\n            criteria.add(new Criterion(condition));\n        }"}
{"question": "public void Changed(ObservableValue<Number> observable, Number oldValue, Number newValue)\n{\n    if (!changing)\n    {\n        changing = true;\n        text.Text = string.Format(isDecimal ? \"{0:F2}\" : \"{0:F0}\", newValue);\n        changing = false;\n    }\n}", "answer": "@Override\n            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n                if (!changing) {\n                    changing = true;\n                    text.setText(String.format((isDecimal ? \"%.2f\" : \"%.0f\"), newValue));\n                    changing = false;\n                }\n            }"}
{"question": "public void AddValuePropertyListener(ChangeListener<Number> listener)\n{\n    slider.ValueProperty().AddListener(listener);\n}", "answer": "public void addValuePropertyListener(ChangeListener<? super Number> listener) {\n        slider.valueProperty().addListener(listener);\n    }"}
{"question": "public void Delete()\n{\n    foreach (Rtt aRt in GetRt_Rtt())\n    {\n        SetEr(aRt, null);\n    }\n    Clear_rt();\n    base.Delete();\n}", "answer": "public void delete()\n  {\n    for(Rtt aRt : getRt_Rtt())\n    {\n      setEr(aRt,null);\n    }\n    clear_rt();\n    super.delete();\n  }"}
{"question": "private TileEntityType<T> RegisterTileDataParameters<T>(TileEntityType<T> t) where T : TileEntity\n{\n    BaseTile tile = (BaseTile)t.Create();\n    tile.GetDataManager().GetParameters().ForEach(TileDataManager.RegisterParameter);\n    return t;\n}", "answer": "private <T extends TileEntity> TileEntityType<T> registerTileDataParameters(TileEntityType<T> t) {\n        BaseTile tile = (BaseTile) t.create();\n        tile.getDataManager().getParameters().forEach(TileDataManager::registerParameter);\n        return t;\n    }"}
{"question": "public override Property<T> Next()\n{\n    Property<?> p = this.iter.Next();\n    return (Property<T>)p;\n}", "answer": "@Override\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic Property<T> next() {\n\t\t\tProperty<?> p = this.iter.next();\n\t\t\treturn (Property<T>) p;\n\t\t}"}
{"question": "private void AssertTermInfo(List<TermInfo> list, TermInfo expected)\n{\n    TermInfo anyTerm = list.FirstOrDefault(x => x.Term.Equals(expected.Term, StringComparison.OrdinalIgnoreCase));\n    Assert.NotNull(anyTerm);\n    Assert.AreEqual(expected.RawIndexed, anyTerm.RawIndexed);\n    Assert.AreEqual(expected.InterpretedIndexed, anyTerm.InterpretedIndexed);\n}", "answer": "private void assertTermInfo(List<TermInfo> list, TermInfo expected) {\n    Optional<TermInfo> anyTerm =\n        list.stream().filter(x -> x.getTerm().equalsIgnoreCase(expected.getTerm())).findAny();\n    assertTrue(anyTerm.isPresent());\n    TermInfo info = anyTerm.get();\n    assertEquals(expected.getRawIndexed(), info.getRawIndexed());\n    assertEquals(expected.getInterpretedIndexed(), info.getInterpretedIndexed());\n  }"}
{"question": "private static Dictionary<Key<object>, ICollection<object>> CreateSampleMap()\n{\n    var map = new Dictionary<Key<object>, ICollection<object>>();\n    map.Add(K_STRING, new List<object> { \"1\" });\n    map.Add(K_INTEGER, new List<object> { 2 });\n    map.Add(K_DATETIME, new List<object> { LOCAL_DATE });\n    return map;\n}", "answer": "@Nonnull\n    private static Map<Key<?>, Collection<?>> createSampleMap()\n      {\n        final Map<Key<?>, Collection<?>> map = new HashMap<>();\n        map.put(K_STRING, singletonList(\"1\"));\n        map.put(K_INTEGER, singletonList(2));\n        map.put(K_DATETIME, singletonList(LOCAL_DATE));\n        return map;\n      }"}
{"question": "public void TestTrimLeadingWhitespace() {\n    string htmlName = CreateHtmlDisplayName(\"   public\", \"public\");\n    Assert.AreEqual(\"<b>public</b>\", htmlName);\n}", "answer": "public void testTrimLeadingWhitespace() {\n        String htmlName = createHtmlDisplayName(\"   public\", \"public\");\n        assertEquals(\"<b>public</b>\", htmlName);\n    }"}
{"question": "public void ActionPerformed(object sender, EventArgs e)\n{\n    if (sender is FileOrURLImporterMenuItem importerMI)\n    {\n        myController.ImportSpecific(importerMI.GetImporter(), importerMI.GetImportType());\n    }\n}", "answer": "@Override\n    public void actionPerformed(ActionEvent e)\n    {\n        if (e.getSource() instanceof FileOrURLImporterMenuItem)\n        {\n            FileOrURLImporterMenuItem importerMI = (FileOrURLImporterMenuItem)e.getSource();\n            myController.importSpecific(importerMI.getImporter(), importerMI.getImportType());\n        }\n    }"}
{"question": "private ICollection<Plugin> LookupPlugin(string key)\n{\n    var plugins = (List<Plugin>)this.mojo.GetProject().GetBuildPlugins();\n    return FCollection.Filter(plugins, HasKey(key));\n}", "answer": "private Collection<Plugin> lookupPlugin(final String key) {\n        final List<Plugin> plugins = (List<Plugin>)this.mojo.getProject().getBuildPlugins();\n        return FCollection.filter(plugins, hasKey(key));\n    }"}
{"question": "private void AddOwnDependenciesToClassPath(List<string> classPath)\n{\n    foreach (var dependency in this.FilteredDependencies())\n    {\n        this.log.Info($\"Adding {dependency.GroupId}:{dependency.ArtifactId} to SUT classpath\");\n        classPath.Add(dependency.File.AbsolutePath);\n    }\n}", "answer": "private void addOwnDependenciesToClassPath(final List<String> classPath) {\n        for (final Artifact dependency : this.filteredDependencies()) {\n            this.log.info(\"Adding \" + dependency.getGroupId() + \":\" + dependency.getArtifactId() + \" to SUT classpath\");\n            classPath.add(dependency.getFile().getAbsolutePath());\n        }\n    }"}
{"question": "private ICollection<string> DetermineOutputFormats()\n{\n    if (HasValue(this.mojo.OutputFormats))\n    {\n        return this.mojo.OutputFormats;\n    }\n    return new List<string> { \"HTML\" };\n}", "answer": "private Collection<String> determineOutputFormats() {\n        if (this.hasValue(this.mojo.getOutputFormats())) {\n            return this.mojo.getOutputFormats();\n        }\n        return Arrays.asList(\"HTML\");\n    }"}
{"question": "private Properties CreatePluginProperties()\n{\n    var p = new Properties();\n    if (this.mojo.PluginProperties != null)\n    {\n        p.PutAll(this.mojo.PluginProperties);\n    }\n    return p;\n}", "answer": "private Properties createPluginProperties() {\n        final Properties p = new Properties();\n        if (this.mojo.getPluginProperties() != null) {\n            p.putAll(this.mojo.getPluginProperties());\n        }\n        return p;\n    }"}
{"question": "public override void triggerOnGlowCheck()\n{\n    base.triggerOnGlowCheck();\n    checkIfActive();\n}", "answer": "@Override\n    public void triggerOnGlowCheck() {\n        super.triggerOnGlowCheck();\n        checkIfActive();\n    }"}
{"question": "[Test]\npublic void JustReturnsGivenValue()\n{\n    object input = new object();\n    underTest = new ConstantExpression(Mock.Of<Position>(), input);\n\n    JtwigValue result = underTest.Calculate(context);\n\n    Assert.That(result.AsObject(), Is.EqualTo(input));\n}", "answer": "@Test\n    public void justReturnsGivenValue() throws Exception {\n        Object input = new Object();\n        underTest = new ConstantExpression(mock(Position.class), input);\n\n        JtwigValue result = underTest.calculate(context);\n\n        assertThat(result.asObject(), is(input));\n    }"}
{"question": "[Test]\npublic void TestConnect()\n{\n    Console.WriteLine(\"Simple Connect/Disconnect test\");\n    bool b1 = instance.Connect();\n    bool b2 = instance.Disconnect();\n    Assert.IsTrue(b1);\n    Assert.IsTrue(b2);\n}", "answer": "@Test\n    public void testConnect() throws Exception {\n        System.out.println(\"Simple Connect/Disconnect test\");\n        boolean b1 = instance.connect();\n        boolean b2 = instance.disconnect();\n        assertTrue(b1);\n        assertTrue(b2);\n    }"}
{"question": "public PrivilegeBits Unmodifiable()\n{\n    if (d is ModifiableData)\n    {\n        return (d.IsSimple()) ? GetInstance(d.LongValue()) : GetInstance(d.LongValues());\n    }\n    else\n    {\n        return this;\n    }\n}", "answer": "public PrivilegeBits unmodifiable() {\n        if (d instanceof ModifiableData) {\n            return (d.isSimple()) ? getInstance(d.longValue()) : getInstance(d.longValues());\n        } else {\n            return this;\n        }\n    }"}
{"question": "public void Diff(PrivilegeBits other)\n{\n    if (d is ModifiableData)\n    {\n        ((ModifiableData)d).Diff(other.d);\n    }\n    else\n    {\n        throw new InvalidOperationException(\"immutable privilege bits\");\n    }\n}", "answer": "public void diff(PrivilegeBits other) {\n        if (d instanceof ModifiableData) {\n            ((ModifiableData) d).diff(other.d);\n        } else {\n            throw new UnsupportedOperationException(\"immutable privilege bits\");\n        }\n    }"}
{"question": "protected override bool Includes(Data other)\n{\n    if (isSimple)\n    {\n        return other.IsSimple() ? Includes(bits, other.LongValue()) : false;\n    }\n    else\n    {\n        return Includes(bitsArr, other.LongValues());\n    }\n}", "answer": "@Override\n        boolean includes(Data other) {\n            if (isSimple) {\n                return (other.isSimple()) ? includes(bits, other.longValue()) : false;\n            } else {\n                return includes(bitsArr, other.longValues());\n            }\n        }"}
{"question": "public override int GetHashCode()\n{\n    return isSimple ? bits.GetHashCode() : bitsArr.GetHashCode();\n}", "answer": "@Override\n        public int hashCode() {\n            return (isSimple) ? new Long(bits).hashCode() : Arrays.hashCode(bitsArr);\n        }"}
{"question": "public override bool Includes(Data other)\n{\n    if (bits.Length == 1)\n    {\n        return other.IsSimple() && Includes(bits[0], other.LongValue());\n    }\n    else\n    {\n        return Includes(bits, other.LongValues());\n    }\n}", "answer": "@Override\n        boolean includes(Data other) {\n            if (bits.length == 1) {\n                return other.isSimple() && includes(bits[0], other.longValue());\n            } else {\n                return includes(bits, other.longValues());\n            }\n        }"}
{"question": "private static void Fill(int n)\n{\n    List<JConsoleTest> jlist = new List<JConsoleTest>();\n    for (int i = 0; i < n; i++)\n    {\n        Thread.Sleep(100);\n        Console.WriteLine(\"new instance...\");\n        jlist.Add(new JConsoleTest());\n    }\n}", "answer": "private static void fill(int n) throws InterruptedException {\n        List<JConsoleTest> jlist = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            Thread.sleep(100);\n            System.out.println(\"new instance...\");\n            jlist.add(new JConsoleTest());\n        }\n    }"}
{"question": "private static string ReadLicenseFilePath()\n{\n    Console.Write(\"Please enter license file path: \");\n    return Console.ReadLine();\n}", "answer": "private static String readLicenseFilePath() {\n        System.out.print(\"Please enter license file path: \");\n\n        return scanner.nextLine();\n    }"}
{"question": "private static void AssertEquals(string expect, string actual)\n{\n    if (expect != actual)\n    {\n        throw new AssertionError($\"is not equal,expect:{expect},actual:{actual}\");\n    }\n}", "answer": "private static void assertEquals(String expect, String actual) {\n        if (!expect.equals(actual)) {\n            throw new AssertionError(\"is not equal,expect:\" + expect + \",actual:\" + actual);\n        }\n    }"}
{"question": "public XMLEvent Peek()\n{\n    if (HasNext())\n        return eventReader.Peek();\n    return null;\n}", "answer": "public XMLEvent peek() throws XMLStreamException\n    {\n        if (hasNext())\n            return eventReader.peek();\n        return null;\n    }"}
{"question": "public override string ApiFilename(string templateName, string tag)\n{\n    if (\"apiController.mustache\".Equals(templateName))\n    {\n        string suffix = ApiTemplateFiles()[templateName];\n        return ControllerFileFolder() + '/' + ToApiFilename(tag) + suffix;\n    }\n    else\n    {\n        return base.ApiFilename(templateName, tag);\n    }\n}", "answer": "@Override\n    public String apiFilename(String templateName, String tag) {\n        if (\"apiController.mustache\".equals(templateName)) {\n            String suffix = apiTemplateFiles().get(templateName);\n            return controllerFileFolder() + '/' + toApiFilename(tag) + suffix;\n        } else {\n            return super.apiFilename(templateName, tag);\n        }\n    }"}
{"question": "public void PrintHandleMap()\n{\n    Console.WriteLine(\"Entering here\");\n    foreach (var key in handlerMap.Keys)\n    {\n        Console.WriteLine(key + \" ----> \" + handlerMap[key]);\n    }\n}", "answer": "public void printHandleMap() {\n        System.out.println(\"Entering here\");\n        Iterator<String> iterator = handlerMap.keySet().iterator();\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n            System.out.println(key + \" ----> \" + handlerMap.get(key));\n        }\n    }"}
{"question": "public static string Message(string key, params object[] parameters)\n{\n    return JavaDebuggerBundle.Message(key, parameters);\n}", "answer": "@NotNull\n  public static String message(@NotNull String key, Object @NotNull ... params) {\n    return JavaDebuggerBundle.message(key, params);\n  }"}
{"question": "public override List<Usuario> BuscarTodos()\n{\n    List<Usuario> usuarios = new List<Usuario>();\n    usuarios.Add(new Usuario(1L, \"Jornada Colaborativa\", \"jornada.colaborativa\", \"contato@jornadas.io\"));\n    usuarios.Add(new Usuario(2L, \"Bruno Kaufmann\", \"bruno.kaufmann\", \"bruno.kaufmann@jornadas.io\"));\n    usuarios.Add(new Usuario(3L, \"Jonas Santos\", \"jonas.santos\", \"jonas.santos@jornadas.io\"));\n    return usuarios;\n}", "answer": "@Override\n\tpublic List<Usuario> buscarTodos() {\n\t\tList<Usuario> usuarios = new ArrayList<Usuario>();\n\t\tusuarios.add(new Usuario(1l, \"Jornada Colaborativa\", \"jornada.colaborativa\", \"contato@jornadas.io\"));\n\t\tusuarios.add(new Usuario(2l, \"Bruno Kaufmann\", \"bruno.kaufmann\", \"bruno.kaufmann@jornadas.io\"));\n\t\tusuarios.add(new Usuario(3l, \"Jonas Santos\", \"jonas.santos\", \"jonas.santos@jornadas.io\"));\n\t\treturn usuarios;\n\t}"}
{"question": "private bool CheckKeywords(string[] keywords)\n{\n    foreach (var s in keywords)\n    {\n        if (s.Trim().Length == 0)\n        {\n            throw new ParseException(string.Format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));\n        }\n    }\n    return true;\n}", "answer": "private boolean checkKeywords(String[] keywords) throws ParseException {\n        for (String s : keywords) {\n            if (s.trim().length() == 0) {\n                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));\n            }\n        }\n        return true;\n    }"}
