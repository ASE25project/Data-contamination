{"description": "Sets the time it took to complete the drill on the first time it was passed. @param completionTime the time it took to complete the drill on the first time it was passed.", "code": "public void setCompletionTime(int completionTime) {\n\t\tthis.completionTime = completionTime;\n\t}"}
{"description": "Description: Sets value from given SbName, which must contain the name of a valid enumerator. Use: public java port", "code": "public void\n\tsetValue( String name) {\n\t\tsetValue(new SbName(name));\n\t}"}
{"description": "Get the current time for this ProgressStats instance. This exists as a test fixture, but if you want to do something more exciting with it, go right ahead.", "code": "protected long getTime() {\n\t\treturn System.currentTimeMillis();\n\t}"}
{"description": "Set the resource repository to use for this request. @param resourceRepositoryServer resource repository server to utilize", "code": "public void setRepositoryServer(ResourceRepositoryServer resourceRepositoryServer) {\n    this.resourceRepositoryServer = resourceRepositoryServer;\n  }"}
{"description": "Returns the User record for the currently authenticated user based off of the supplied access token <br>Example: <a href=\"http://localhost:2019/users/getuserinfo\">http://localhost:2019/users/getuserinfo</a> @param authentication The authenticated user object provided by Spring Security @return JSON of the current user. Status of OK @see UserService#findByName(String) UserService.findByName(authenticated user)", "code": "@GetMapping(value = \"/getuserinfo\",\n        produces = {\"application/json\"})\n    public ResponseEntity<?> getCurrentUserInfo(Authentication authentication)\n    {\n        User u = userService.findByName(authentication.getName());\n        return new ResponseEntity<>(u,\n            HttpStatus.OK);\n    }"}
{"description": "Feature that determines whether gwt-jackson code should catch and wrap {@link RuntimeException}s (but never {@link Error}s!) to add additional information about location (within input) of problem or not. If enabled, exceptions will be caught and re-thrown; this can be convenient both in that all exceptions will be checked and declared, and so there is more contextual information. However, sometimes calling application may just want \"raw\" unchecked exceptions passed as is. <br> <br> Feature is enabled by default. @param wrapExceptions true if should wrapExceptions @return the builder", "code": "public Builder wrapExceptions(boolean wrapExceptions) {\n            this.wrapExceptions = wrapExceptions;\n            return this;\n        }"}
{"description": "Feature that specifies whether dates that doesn't contain timezone information are interpreted using the browser timezone or being relative to UTC (the default). @param useBrowserTimezone true if should use browser timezone @return the builder", "code": "public Builder useBrowserTimezone(boolean useBrowserTimezone) {\n            this.useBrowserTimezone = useBrowserTimezone;\n            return this;\n        }"}
{"description": "Answers whether the getInstance() method has previously been called. @return True if a static instance is available, else false.", "code": "public static boolean isInstanceAvailable() {\n\t\treturn uebManager != null;\n\t}"}
{"description": "Adds the default ECOMP message ID to the message and sends the message to the topic. @param msg @throws UebException", "code": "public void publish(UebMsg msg) throws UebException {\n\t\tmsg.putMsgId(PortalApiConstants.ECOMP_DEFAULT_MSG_ID);\n\t\tappPublisher.send(msg);\n\t}"}
{"description": "Enables the fast mode. <br>In this mode JProcesses does not try to retrieve time consuming data as the use percentage or the owner of the process in Windows implementation.<br> <b>This flag has no effect in Linux implementation as it is fast enough</b>. @return JProcesses instance", "code": "public JProcesses fastMode() {\r\n        this.fastMode = true;\r\n        return this;\r\n    }"}
{"description": "Enables/disables the fast mode. <br>In this mode JProcesses does not try to retrieve time consuming data as the use percentage or the owner of the process in Windows implementation.<br> <b>This flag has no effect in Linux implementation as it is fast enough</b>. @param enabled boolean true or false @return JProcesses instance", "code": "public JProcesses fastMode(boolean enabled) {\r\n        this.fastMode = enabled;\r\n        return this;\r\n    }"}
{"description": "Return the list of processes running in the system.<br> For each process some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @return List of processes", "code": "public List<ProcessInfo> listProcesses() {\r\n        return getService().getList(fastMode);\r\n    }"}
{"description": "Return the list of processes that match with the provided name.<br> For each process some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @param name The name of the searched process @return List of found processes", "code": "public List<ProcessInfo> listProcesses(String name) {\r\n        return getService().getList(name, fastMode);\r\n    }"}
{"description": "Convenience static method that returns the list of processes that match with the provided name.<br> For each process some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @return List of found processes", "code": "public static List<ProcessInfo> getProcessList() {\r\n        return getService().getList();\r\n    }"}
{"description": "Convenience static method that returns the list of processes that match with the provided name.<br> For each process some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @param name The name of the searched process @return List of found processes", "code": "public static List<ProcessInfo> getProcessList(String name) {\r\n        return getService().getList(name);\r\n    }"}
{"description": "Static method that returns the information of a process<br> Some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @param pid The PID of the searched process @return {@link JProcesses} object with the information of the process", "code": "public static ProcessInfo getProcess(int pid) {\r\n        return getService().getProcess(pid);\r\n    }"}
{"description": "Static method that kills a process, letting it the necessary time to finish<br> If the process does not finish with this method, try with the stronger killProcess()<p> For further details see {@link ProcessInfo} @param pid The PID of the process to kill @return {@link JProcessesResponse} response object that contains information about the result of the operation", "code": "public static JProcessesResponse killProcessGracefully(int pid) {\r\n        return getService().killProcessGracefully(pid);\r\n    }"}
{"description": "Parse the given script source. The return value is a {@link SequenceNode} representing all of the statements in the source string. @param source non-null; the source to parse @return non-null; the parsed script", "code": "static public SequenceNode parseScript (String source)\n    {\n\tStringReader stream = new StringReader (source);\n\treturn parseScript (stream);\n    }"}
{"description": "Parse the given template source. The return value is a {@link TemplateNode} representing the template contents. @param source non-null; the source to parse @return non-null; the parsed template", "code": "static public TemplateNode parseTemplate (String source)\n    {\n\tStringReader stream = new StringReader (source);\n\treturn parseTemplate (stream);\n    }"}
{"description": "Package private method used by <code>PrivilegeRegistry</code> to handle built-in privileges and calculate internal permissions. @return long representation of this instance. @see PrivilegeRegistry#calculatePermissions(PrivilegeBits, PrivilegeBits, boolean, boolean)", "code": "long longValue() {\n        return d.longValue();\n    }"}
{"description": "Adds the other privilege bits to this instance. @param other The other privilege bits to be added. @throws UnsupportedOperationException if this instance is immutable.", "code": "public void add(PrivilegeBits other) {\n        if (d instanceof ModifiableData) {\n            ((ModifiableData) d).add(other.d);\n        } else {\n            throw new UnsupportedOperationException(\"immutable privilege bits\");\n        }\n    }"}
{"description": "Subtracts the other PrivilegeBits from the this.<br> If the specified bits do not intersect with this, it isn't modified.<br> If <code>this</code> is included in <code>other</code> {@link #EMPTY empty} privilege bits is returned. @param other The other privilege bits to be substracted from this instance. @throws UnsupportedOperationException if this instance is immutable.", "code": "public void diff(PrivilegeBits other) {\n        if (d instanceof ModifiableData) {\n            ((ModifiableData) d).diff(other.d);\n        } else {\n            throw new UnsupportedOperationException(\"immutable privilege bits\");\n        }\n    }"}
{"description": "Subtracts the <code>b</code> from <code>a</code> and adds the result (diff) to this instance. @param a An instance of privilege bits. @param b An instance of privilege bits. @throws UnsupportedOperationException if this instance is immutable.", "code": "public void addDifference(PrivilegeBits a, PrivilegeBits b) {\n        if (d instanceof ModifiableData) {\n            ((ModifiableData) d).addDifference(a.d, b.d);\n        } else {\n            throw new UnsupportedOperationException(\"immutable privilege bits\");\n        }\n    }"}
{"description": "Returns a string representation of this IP address. When this string representation is used with {@link IPAddressFormatter#parse(CharSequence)}, the resulting IP address should be equal to this IP address.", "code": "@Override\n    public String toString() {\n        if (ipAddress == null) {\n            ipAddress = format();\n        }\n        return ipAddress;\n    }"}
{"description": "Returns an IP address represented by a {@code CharSequence}. @param address The IP address as a {@code CharSequence}. @return An IP address that represents the given address. @throws NullPointerException If the given {@code CharSequence} is {@code null}. @throws IllegalArgumentException If the given {@code CharSequence} does not represent a valid IP address.", "code": "public static IPAddress<?> valueOf(CharSequence address) {\n        return valueOf(address, 0, address.length());\n    }"}
{"description": "Returns a predicate that checks whether or not {@code CharSequence}s are valid IP addresses that match a specific predicate. This predicate can handle {@code null} values, which do not match the predicate. @param predicate The predicate to check if {@code CharSequence}s are valid IP addresses. @return A predicate that checks whether or not {@code CharSequence}s are valid IP addresses that match the given predicate. @see #isIPAddress(CharSequence)", "code": "public static Predicate<CharSequence> ifValidIPAddress(Predicate<? super IPAddress<?>> predicate) {\n        Objects.requireNonNull(predicate);\n        return s -> s != null && IPAddressFormatter.anyVersionWithDefaults().testIfValid(s, predicate);\n    }"}
{"description": "Getter method for the instance variable {@link #date}. @return value of instance variable {@link #date}", "code": "public DateTime getDate()\n        {\n            return this.date;\n        }"}
{"description": "Return whether or not the given Broker implementation is registered @param broker to check if registered @return true if the Broker is registered, false if not", "code": "public synchronized final boolean isRegistered(Broker<?> broker) {\n\t\treturn isRegistered(broker.getId());\n\t}"}
{"description": "Return whether or not the Broker implementation with the given ID is registered @param brokerID the ID of the Broker to check if registered @return true if the Broker is registered, false if not", "code": "public synchronized final boolean isRegistered(String brokerID) {\n\t\treturn brokers.containsKey(brokerID);\n\t}"}
{"description": "Given the name of a class, answer the CPClass associated with that class. Answer null if the class doesn't exist. @param name Class name to look for (form: java/lang/Object) @return CPClass for that class name, or null if not found.", "code": "public ConstantPoolEntry getClassPoolEntry(String name) {\n        String classes[] = bands.getCpClass();\n        int index = matchSpecificPoolEntryIndex(classes, name, 0);\n        if (index == -1) {\n            return null;\n        }\n        try {\n            return getConstantPoolEntry(CP_CLASS, index);\n        } catch (Pack200Exception ex) {\n            throw new Error(\"Error getting class pool entry\");\n        }\n    }"}
{"description": "The method to mark the given key as modified @param key A String representing the key @param modification An Integer representing the modification", "code": "public void setKeyModified(String key, Integer modification)\n\t{\n\t\t this.keyModified.put(key, modification);\n\n\t}"}
{"description": "The method to check if the user has modified the given key @param key A String representing the key @return An Integer representing the modification", "code": "public Integer isKeyModified(String key)\n\t{\n\t\tif((( this.keyModified.containsKey(key))))\n\t\t{\n\t\t\treturn  this.keyModified.get(key);\n\n\t\t}\n\t\treturn null;\n\n\t}"}
{"description": "Returns a string with all non-alphanumeric characters in the given string replaced with underscrores. This is to create a valid identifier based on the given text. @param inputText the text to create an identifier from @return the new string that can be used as in identifier", "code": "static String createIdentifierFromText(String inputText) {\n    return inputText.replaceAll(\"[^\\\\p{Alnum}]\", \"_\");\n  }"}
{"description": "Get the relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string). @return the filePath value", "code": "public Object filePath() {\n        return this.filePath;\n    }"}
{"description": "Set the relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string). @param filePath the filePath value to set @return the AzureMLWebServiceFile object itself.", "code": "public AzureMLWebServiceFile withFilePath(Object filePath) {\n        this.filePath = filePath;\n        return this;\n    }"}
{"description": "Get reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located. @return the linkedServiceName value", "code": "public LinkedServiceReference linkedServiceName() {\n        return this.linkedServiceName;\n    }"}
{"description": "Set reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located. @param linkedServiceName the linkedServiceName value to set @return the AzureMLWebServiceFile object itself.", "code": "public AzureMLWebServiceFile withLinkedServiceName(LinkedServiceReference linkedServiceName) {\n        this.linkedServiceName = linkedServiceName;\n        return this;\n    }"}
{"description": "Determines the order in which manipulators are run, with the lowest number running first. Uses a 100-point scale. @return the execution index for {@code PluginRemovalManipulator} which is 52", "code": "@Override\n    public int getExecutionIndex()\n    {\n        return 52;\n    }"}
{"description": "Reset current bean path and start from a bean of specified class. @param <T> type of the bean @param clazz class of the bean @return instance of the bean class instrumented to capture getters and setters invocations", "code": "public static <T> T root(Class<T> clazz) {\n        BeanPaths.reset();\n        return expr(clazz);\n    }"}
{"description": "Gets an instance to access a remote endpoint using the specified template. This factory method should be used instead of a constructor. @param webapiUrl URL of the web endpoint with host and port @param restTemplate REST template @return Instance of ICommonDataServiceRestClient", "code": "public static ICommonDataServiceRestClient getInstance(String webapiUrl, RestTemplate restTemplate) {\n\t\treturn new CommonDataServiceRestClientImpl(webapiUrl, restTemplate);\n\t}"}
{"description": "Returns the sum of values recorded, or zero if no values have been recorded. <p> @return the sum of values, or zero if none", "code": "public final long getSum()\n    {\n        return sum;\n    }"}
{"description": "Returns the minimum value recorded, or {@code Long.MAX_VALUE} if no values have been recorded. <p> @return the minimum value, or {@code Long.MAX_VALUE} if none", "code": "public final long getMin()\n    {\n        return min;\n    }"}
{"description": "Returns the maximum value recorded, or {@code Long.MIN_VALUE} if no values have been recorded <p> @return the maximum value, or {@code Long.MIN_VALUE} if none", "code": "public final long getMax()\n    {\n        return max;\n    }"}
{"description": "Create a new Station. @param name The name of the station, not null nor an empty string. @param description The description of the station. @param stationType The station type. @param latitude The station's latitude. @param longitude The station's longitude. @param elevation The station's elevation. @param sites A collection of associated processing site UUIDs. @throws IllegalArgumentException @throws NullPointerException", "code": "public static Station create(String name, String description, StationType stationType, double latitude, double longitude,\n                               double elevation, Set<Site> sites) {\n    return new Station(UUID.randomUUID(), name, description, stationType, latitude, longitude, elevation, sites);\n  }"}
{"description": "Returns the input string which caused the exception to be thrown. @return The input string.", "code": "public String getInput() {\n        return this.input;\n    }"}
{"description": "Displays a message in the standard error stream. @param message the error message. @return <code>false</code>;", "code": "public static boolean fail(String message) {\n\n\t\tstdErr.print(\"** Test failure \");\n\t\tstdErr.println(message);\n\n\t\treturn false;\n\t}"}
{"description": "Returns the last Element in the FragmentList. @return the first Element in the FragmentList, or null if the list is empty.", "code": "public Fragment getLastElement() {\n        return this.lastElement.getFragment();\n    }"}
{"description": "Returns true if there are no Fragments in the list, false otherwise. @return true if there are no Fragments in the list, false otherwise.", "code": "public boolean isEmpty() {\n        return firstElement == null;\n    }"}
{"description": "Returns the number of Fragments in the list. Note, that this does not return the total number of characters. @return The number of Fragments in the list.", "code": "public int size() {\n        int result = 0;\n        Element nextElement = firstElement;\n        while (nextElement != null) {\n            result++;\n            nextElement = nextElement.getNext();\n        }\n        return result;\n    }"}
{"description": "Returns true if there is another Fragment in the list after the current fragment. @return True if there is another Fragment in the list after the current fragment.", "code": "public boolean hasNext() {\n            return currentElement.getNext() != null;\n        }"}
{"description": "Returns the next element in the list and moves the cursor to the next fragment. Aborts if there is no next fragment. @return This Element's successor Element.", "code": "public Fragment next() {\n            Helper.abortIf(!hasNext(),\n                    \"the cursor has no next element\");\n\n            currentElement = currentElement.getNext();\n            return currentElement.getFragment();\n        }"}
{"description": "Add new card listener to be notified on card insertion/removal. Listeners should assume that the card is removed in default state. @param listener Card listener object to be added", "code": "public void addCardListener(DeviceListener listener) {\n        LOGGER.debug(\"Add listener \" + listener.getClass().getName());\n        listeners.add(listener);\n        notifyCardListener(listener, true);\n    }"}
{"description": "Remove card listener from the list of listeners. Does nothing if the listener is not present in the list. @param listener Previously added card listener object to be removed @return true if the removal succeeded; false otherwise", "code": "public boolean removeCardListener(DeviceListener listener) {\n        LOGGER.debug(\"Remove listener \" + listener.getClass().getName());\n        return listeners.remove(listener);\n    }"}
{"description": "Return the suite of tests to test the changes made in 10.12. @param phase an integer that indicates the current phase in the upgrade test. @return the test suite created.", "code": "public static Test suite(int phase) {\n        return new BaseTestSuite(Changes10_12.class, \"Upgrade test for 10.12\");\n    }"}
{"description": "Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method @param number the number of characters to be read again. This number must not be greater than yylength()!", "code": "public void yypushback(int number)  {\n    if ( number > yylength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= number;\n  }"}
{"description": "Get the text source of the given file. @param file the {@link PsiFile} to process. @return the file text.", "code": "@Nullable @Override\n    public String collectInformation(@NotNull PsiFile file) {\n        return file.getText();\n    }"}
{"description": "Cast and return the wrapped value, if possible. <p> @throws ClassCastException if the value cannot be converted in T @return the value", "code": "public final native <T> T as()/*-{\n        return this.datum;\n    }-*/;"}
{"description": "Forces query to keep portable object representation even if query was created on plain projection. @param keepPortable Keep portable flag.", "code": "public void keepPortable(boolean keepPortable) {\n        this.keepPortable = keepPortable;\n    }"}
{"description": "Returns the base scheme of this file type. Basically, this is the scheme with same public name, as it's type. @return File type base scheme, to be used as root scheme of text parsing.", "code": "public Scheme getBaseScheme() {\r\n\t\treturn getBaseScheme(iptr);\r\n\t}"}
{"description": "Returns parameter's default value of this file type. Default values are the values, explicitly pointed with \\c value attribute. @param name Parameter's name @return Default value of this parameter", "code": "public String getParameterDefaultValue(String name) {\r\n\t\treturn getParamDefaultValue(iptr, name);\r\n\t}"}
{"description": "Changes value of the parameter with specified name. Note, that changed parameter values are not stored in HRC base - they remains active only during this HRC session. Application should use its own mechanism to save these values between sessions (if needed). @param name Parameter's name @param value New value of this parameter.", "code": "public void setParameterValue(String name, String value) {\r\n\t\tsetParamValue(iptr, name, value);\r\n\t}"}
{"description": "Create an user info for test(random number for user name and empty email, not allowed in deployment server) @return The user info for test @see UserInfo#create(String, String)", "code": "public static @NotNull UserInfo createTest() {\n        return create(String.valueOf(Math.random()), \"\");\n    }"}
{"description": "Returns the date format used to format date in the backup files' name @return the date format used to format date in the backup files' name", "code": "public DateFormat getDateFormat() {\n        return DATE_FORMAT;\n    }"}
{"description": "Returns the task associated with the given file @param file the name of the file @return the task associated with the given file or <code>null</code> if there is no task for this file", "code": "public AutoBackupTask getTask(String file) {\n        return getTask(new File(file));\n    }"}
{"description": "Returns the task associated with the given file @param file the file @return the task associated with the given file or <code>null</code> if there is no task for this file", "code": "public AutoBackupTask getTask(File file) {\n        return TASKS.get(file);\n    }"}
{"description": "Returns the text of the argument passed on the command line <p> If this method returns 'foo', the argument passed on the command line would be '--foo' @return the argument text", "code": "public String getArgument() {\n        return argument;\n    }"}
{"description": "Retrieves the action for the given command line argument. <p> The argument should be passed without the leading '--' @param argument the argument text @return the corresponding Option or null if the argument is not recognised as an action", "code": "public static Option getByArgument(String argument) {\n        for (Option option : Option.values()) {\n            if (option.argument.equals(argument)) {\n                return option;\n            }\n        }\n        return null;\n    }"}
{"description": "get child in children list by given index @param index index of child @return returns child_index in children list", "code": "public INode getChild(int index){\n\t\treturn this.children.get(index);\n\t}"}
{"description": "The cursor that defines the first result after this partition. {@code null} if this is the last partition. @return a cursor value that can be used with {@link Query#endBefore(Object...)} or {@code null} if this is the last partition.", "code": "@Nullable\n  public Object[] getEndBefore() {\n    return endBefore;\n  }"}
{"description": "Check if container is still accepting comments. <p> A container that still accept comments does not contain any other data. </p> @return true if container is still accepting comments", "code": "public boolean acceptComments() {\n        return acceptComments;\n    }"}
{"description": "Add comment. <p> Comments are accepted only at start. Once other content is stored in the same section, comments are refused. </p> @param comment comment line @return true if comment was accepted", "code": "public boolean addComment(final String comment) {\n        if (acceptComments) {\n            comments.add(comment);\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"description": "Return an IUnknown instance that wraps a Com4jObject. This can be used for passing Com4jObjects back to Jinx methods requiring an IUnknown instance. @param object COM object to be wrapped as an IUnknown. @return Instance implementing IUnknown.", "code": "public static IUnknown getIUnknown(Com4jObject object) {\n        return new IUnknownAdaptor(object);\n    }"}
{"description": "Gets a body location by index @param index the index to remove @return the body location at the given index", "code": "public BodyLocation getBodyLocationPhoto(int index){\n        return bodyLocations.get(index);\n    }"}
{"description": "Returns the element at the specified location in this list. @param location The index of the element to return. @return The element at the specified index.", "code": "@Override\n    public MPDCommand get(final int location) {\n        return mCommandQueue.get(location);\n    }"}
{"description": "Removes the object at the specified location from this list. @param location the index of the object to remove. @return the removed object.", "code": "@SuppressWarnings(\"RefusedBequest\") // Must not call super for this method.\n    @Override\n    public MPDCommand remove(final int location) {\n        return mCommandQueue.remove(location);\n    }"}
{"description": "Returns the number of elements in this {@code CommandQueue}. @return The number of elements in this {@code CommandQueue}.", "code": "@Override\n    public int size() {\n        return mCommandQueue.size();\n    }"}
{"description": "This generates and returns the CommandQueue string used to get a response with separated results, @return This CommandQueue string used to get a response with separated results,", "code": "public String toStringSeparated() {\n        return toString(true);\n    }"}
{"description": "Gets the SalesCreditMemoLine from the service @return the SalesCreditMemoLine from the request @throws ClientException this exception occurs if the request was unable to complete for any reason", "code": "@Nullable\n    public SalesCreditMemoLine get() throws ClientException {\n       return send(HttpMethod.GET, null);\n    }"}
{"description": "Delete this item from the service @return the resulting response if the service returns anything on deletion @throws ClientException if there was an exception during the delete operation", "code": "@Nullable\n    public SalesCreditMemoLine delete() throws ClientException {\n        return send(HttpMethod.DELETE, null);\n    }"}
{"description": "Searches for the root test runner. @return Root test runner or self in case if there is no hierarchy specified", "code": "public TestRunner getRoot() {\n        if(parent==null) {\n            return this;\n        }\n        else return parent.getRoot();\n    }"}
{"description": "Checks if an update is required by checking if flags set is empty. @return Flags set is not empty.", "code": "public boolean isUpdateRequired() {\n\t\treturn !flags.isEmpty();\n\t}"}
{"description": "returns the source id of the object which have created this temp destination at first place. It might be a specific MessageProducer or MessageConsumere etc. @return sourceID", "code": "public String getSourceID() {\n        return sourceID;\n    }"}
{"description": "Returns a {@link MemberClient} that performs requests against Dropbox API user endpoints as the given team member. @param teamMemberId team member ID of member in this client's team. @return dropbox client that as the given team member.", "code": "public MemberClient asMember(String teamMemberId) {\n    return new MemberClient(client.asMember(teamMemberId));\n  }"}
{"description": "Gets the render layer this block will render on. SOLID for solid blocks, CUTOUT or CUTOUT_MIPPED for on-off transparency (glass, reeds), TRANSLUCENT for fully blended transparency (stained glass)", "code": "@SideOnly(Side.CLIENT)\n    public BlockRenderLayer getRenderLayer()\n    {\n        return BlockRenderLayer.CUTOUT;\n    }"}
{"description": "Get the delegate iterator. If one does not yet exist, or reset has been called, a new iterator will be allocated from the current internal list. @return the delegate iterator", "code": "public Iterator<Object[]> getIterator() {\n        if (null == delegate) {\n            delegate = tests.iterator();\n        }\n        return delegate;\n    }"}
{"description": "Standard Thrift clients require ordered responses, so even though Smart can run multiple requests from the same client at the same time, the responses have to be held until all previous responses are ready and have been written. However, through the use of extended protocols and codecs, a request can indicate that the client understands out-of-order responses. @return {@code true} if ordered responses are required", "code": "public static boolean isOrderedResponsesRequired()\n    {\n        return true;\n    }"}
{"description": "Creates an InputStream that reads from the audio input stream provided, and first provides WAVE header information Note, the passed in stream should have length information associated with it", "code": "public static InputStream createInputStreamWithWaveHeader(\n\t\t\tAudioInputStream audioIn) throws IOException {\n\t\treturn new ByteArrayInputStream(createByteArrayWithWaveHeader(audioIn));\n\t}"}
{"description": " Asserts that an object is null. @param message The detail message for this assertion @param object The object to test", "code": "public void assertNull(String message, Object object)\r\n\t{\r\n\t\tassertTrue(message, object == null);\r\n\t}"}
{"description": "Retrieve the Properties for a specific skin. If they are not yet loaded they will be. If the specified skin does not exist properties for the default skin configured for the webapp will be returned and an error level message will be written to the log. If the webapp skin does not exist the default skin will be used and id that doesn't exist an empty Properties will be returned. @param skinName the name of the skin whose properties are to be retrieved. @return the Properties for the named skin or the properties for the default skin configured for the webapp if the named skin does not exist.", "code": "private Properties getSkinProperties(String skinName)\n    {\n        Properties skinProperties = (Properties) skins.get(skinName);\n        return null != skinProperties ? skinProperties : loadSkin(skinName); \n    }"}
{"description": "Get the name of the default skin name for the web application from the TurbineResources.propertiess file. If the property is not present the name of the default skin will be returned. Note that the web application skin name may be something other than default, in which case its properties will default to the skin with the name \"default\". @return the name of the default skin for the web application.", "code": "public String getWebappSkinName()\n    {\n        return Turbine.getConfiguration()\n                .getString(SKIN_PROPERTY_KEY, SKIN_PROPERTY_DEFAULT);\n    }"}
{"description": "Returns the constraints that a {@code String} representing a {@code Priority} should adhere to. @return constraint message.", "code": "public static String getMessageConstraints() {\n        return MESSAGE_CONSTRAINTS;\n    }"}
{"description": "Prints given message or format with \"[DEBUG]\" prefix on console stream and logging stream if they're not null and given parameter allows. <br/> Enabled parameter overrides the debug mode @param enabled Message will be printed if this parameter is true @param msg Message to be printed or format to be formatted with given args @param args Arguments to format given string @see {@link #setDebugMode(boolean)} @see {@link #toggleDebugMode()}", "code": "public static void debug(boolean enabled, String msg, Object...args) {\n\t\tif(!enabled) return;\n\t\telse debug(msg, args);\n\t}"}
{"description": "Returns an iterator over the flood measure entries. @return an iterator over the flood measure entries.", "code": "public Iterator<FloodMeasure> iterator() {\n\t\treturn connections.values().iterator();\n\t}"}
{"description": "Adds another quaternion to this one. @param q The quaternion to add @return A new quaternion, which is the sum of both", "code": "public Quaternionf add(Quaternionf q) {\n        return add(q.x, q.y, q.z, q.w);\n    }"}
{"description": "Divides the components of this quaternion by a double scalar. @param a The division scalar @return A new quaternion, which has each component divided by the scalar", "code": "public Quaternionf div(double a) {\n        return div((float) a);\n    }"}
{"description": "Returns the dot product of this quaternion with another one. @param q The quaternion to calculate the dot product with @return The dot product of the two quaternions", "code": "public float dot(Quaternionf q) {\n        return dot(q.x, q.y, q.z, q.w);\n    }"}
{"description": "Rotates the double components of a vector by this quaternion. @param x The x component of the vector @param y The y component of the vector @param z The z component of the vector @return The rotated vector", "code": "public Vector3f rotate(double x, double y, double z) {\n        return rotate((float) x, (float) y, (float) z);\n    }"}
{"description": "Sets this frame visible or invisible @param b the boolean value that is true to set visible, false set invisible", "code": "public void setVisible(boolean b) {\n      frame.setVisible(b);\n   }"}
{"description": "Get the timestamp associated with a key, or null if the key is not stored in the cache. @param key the key @return the timestamp, or null", "code": "public long getTimestampOfKey(K key) {\n\t\tLRUNode node = map.get(key);\n\t\treturn node.timestamp;\n\t}"}
{"description": "Re-create this Cat from the given Parcel. @param in The Parcel containing information on the Cat to re-create. @return The re-created Cat.", "code": "@Override\n        public Cat createFromParcel(Parcel in) {\n            return new Cat(in);\n        }"}
