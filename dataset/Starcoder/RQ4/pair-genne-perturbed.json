{"description": "Sets the duration it took to finish the drill on the initial attempt it was cleared. @param elapsedTime the duration it took to finish the drill on the initial attempt it was cleared.", "code": "public void setElapsedTime(int elapsedTime) {\n\t\tthis.elapsedTime = elapsedTime;\n\t}"}
{"description": "Assigns value from provided SbTitle, which must include the title of a proper enumerator. Use: public java port", "code": "public void\n\tassignValue( String title) {\n\t\tassignValue(new SbTitle(title));\n\t}"}
{"description": "Fetch the present moment for this ProgressMetrics instance. This exists as a test fixture, but if you want to do something more thrilling with it, go right ahead.", "code": "protected long fetchTime() {\n\t\treturn System.currentTimeMillis();\n\t}"}
{"description": "Set the asset storage to use for this request. @param assetStorageServer asset storage server to utilize", "code": "public void setStorageServer(AssetStorageServer assetStorageServer) {\n    this.assetStorageServer = assetStorageServer;\n  }"}
{"description": "Returns the Client record for the currently logged-in client based off of the provided access token <br>Example: <a href=\"http://localhost:2019/users/getclientinfo\">http://localhost:2019/users/getclientinfo</a> @param authentication The logged-in client object provided by Spring Security @return JSON of the current client. Status of OK @see ClientService#findByName(String) ClientService.findByName(authenticated client)", "code": "@GetMapping(value = \"/getclientinfo\",\n        produces = {\"application/json\"})\n    public ResponseEntity<?> getCurrentClientInfo(Authentication authentication)\n    {\n        Client c = clientService.findByName(authentication.getName());\n        return new ResponseEntity<>(c,\n            HttpStatus.OK);\n    }"}
{"description": "Feature that determines whether gwt-jackson code should catch and encapsulate {@link RuntimeException}s (but never {@link Error}s!) to append supplementary details about position (within input) of issue or not. If activated, exceptions will be captured and re-thrown; this can be useful both in that all exceptions will be verified and specified, and so there is more contextual data. However, sometimes invoking program may just desire \"raw\" unchecked exceptions passed as is. <br> <br> Feature is activated by default. @param encapsulateExceptions true if should encapsulateExceptions @return the constructor", "code": "public Constructor encapsulateExceptions(boolean encapsulateExceptions) {\n            this.encapsulateExceptions = encapsulateExceptions;\n            return this;\n        }"}
{"description": "Feature that specifies whether dates that doesn't contain timezone data are interpreted using the client timezone or being relative to UTC (the default). @param employClientTimezone true if should employ client timezone @return the builder", "code": "public Builder employClientTimezone(boolean employClientTimezone) {\n            this.employClientTimezone = employClientTimezone;\n            return this;\n        }"}
{"description": "Answers whether the fetchInstance() method has previously been invoked. @return True if a static reference is present, else false.", "code": "public static boolean isReferencePresent() {\n\t\treturn uebHandler != null;\n\t}"}
{"description": "Adds the standard ECOMP message identifier to the message and dispatches the message to the topic. @param msg @throws UebException", "code": "public void publish(UebMsg msg) throws UebException {\n\t\tmsg.putMsgId(PortalApiConstants.ECOMP_STANDARD_MSG_ID);\n\t\tappPublisher.dispatch(msg);\n\t}"}
{"description": "Activates the quick mode. <br>In this mode JProcesses does not attempt to fetch time intensive data as the usage percentage or the creator of the process in Windows implementation.<br> <b>This flag has no effect in Linux implementation as it is quick enough</b>. @return JProcesses instance", "code": "public JProcesses quickMode() {\n        this.quickMode = true;\n        return this;\n    }"}
{"description": "Enables/disables the quick mode. <br>In this mode JProcesses does not attempt to fetch time intensive data as the usage percentage or the holder of the process in Windows implementation.<br> <b>This flag has no effect in Linux implementation as it is quick enough</b>. @param enabled boolean true or false @return JProcesses instance", "code": "public JProcesses quickMode(boolean enabled) {\r\n        this.quickMode = enabled;\r\n        return this;\r\n    }"}
{"description": "Return the collection of tasks executing in the system.<br> For each task some details are fetched: <ul> <li>TaskID</li> <li>Label</li> <li>Consumed RAM</li> <li>Timestamp</li> <li>Rank</li> </ul> [...]<p> For further information see {@link TaskData} @return Collection of tasks", "code": "public List<TaskData> collectTasks() {\n        return getService().fetchList(quickMode);\n    }"}
{"description": "Return the collection of procedures that correspond with the supplied title.<br> For each procedure some data is fetched: <ul> <li>ProcessID</li> <li>Title</li> <li>Consumed RAM</li> <li>Timestamp</li> <li>Rank</li> </ul> [...]<p> For additional information see {@link ProcessInfo} @param title The title of the queried procedure @return Collection of located procedures", "code": "public List<ProcessInfo> collectProcedures(String title) {\n        return getService().fetchList(title, quickMode);\n    }"}
{"description": "Utility static function that returns the collection of processes that correspond with the given name.<br> For each process certain details are obtained: <ul> <li>ProcessID</li> <li>Title</li> <li>Consumed memory</li> <li>Timestamp</li> <li>Precedence</li> </ul> [...]<p> For more information see {@link ProcessInfo} @return Collection of located processes", "code": "public static Collection<ProcessInfo> fetchProcessCollection() {\n        return fetchService().fetchCollection();\n    }"}
{"description": "Convenience static method that returns the list of procedures that match with the supplied name.<br> For each procedure some information is retrieved: <ul> <li>PID</li> <li>Name</li> <li>Used memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessInfo} @param name The name of the searched procedure @return List of found procedures", "code": "public static List<ProcessInfo> getProcedureList(String name) {\n        return getService().getList(name);\n    }"}
{"description": "Static method that returns the details of a process<br> Some details are retrieved: <ul> <li>ProcessID</li> <li>Title</li> <li>Consumed memory</li> <li>Date/time</li> <li>Priority</li> </ul> [...]<p> For further details see {@link ProcessDetails} @param processID The ProcessID of the searched process @return {@link JProcesses} object with the details of the process", "code": "public static ProcessDetails fetchProcess(int processID) {\n        return getService().fetchProcess(processID);\n    }"}
{"description": "Static method that terminates a process, allowing it the required time to complete<br> If the process does not complete with this method, attempt with the more forceful terminateProcess()<p> For further details see {@link ProcessInfo} @param pid The PID of the process to terminate @return {@link JProcessesResponse} response object that contains information about the result of the operation", "code": "public static JProcessesResponse terminateProcessGracefully(int pid) {\n        return getService().terminateProcessGracefully(pid);\n    }"}
{"description": "Parse the provided script content. The return value is a {@link SequenceNode} representing all of the statements in the content string. @param content non-null; the content to parse @return non-null; the parsed script", "code": "static public SequenceNode parseScript (String content)\n    {\n\tStringReader stream = new StringReader (content);\n\treturn parseScript (stream);\n    }"}
{"description": "Process the provided template source. The return value is a {@link TemplateNode} representing the template contents. @param source non-null; the source to process @return non-null; the processed template", "code": "static public TemplateNode processTemplate (String source)\n    {\n\tStringReader input = new StringReader (source);\n\treturn processTemplate (input);\n    }"}
{"description": "Package private method used by <code>PrivilegeCatalog</code> to manage built-in privileges and compute internal permissions. @return long representation of this instance. @see PrivilegeCatalog#computePermissions(PrivilegeBits, PrivilegeBits, boolean, boolean)", "code": "long numericValue() {\n        return d.numericValue();\n    }"}
{"description": "Appends the additional access rights to this instance. @param additional The additional access rights to be appended. @throws UnsupportedOperationException if this instance is unmodifiable.", "code": "public void append(AccessRights additional) {\n        if (d instanceof ChangeableData) {\n            ((ChangeableData) d).append(additional.d);\n        } else {\n            throw new UnsupportedOperationException(\"unmodifiable access rights\");\n        }\n    }"}
{"description": "Subtracts the alternate PermissionFlags from the this.<br> If the specified flags do not intersect with this, it isn't modified.<br> If <code>this</code> is contained in <code>alternate</code> {@link #VOID void} permission flags is returned. @param alternate The alternate permission flags to be removed from this instance. @throws UnsupportedOperationException if this instance is unchangeable.", "code": "public void subtract(PermissionFlags alternate) {\n        if (d instanceof ChangeableData) {\n            ((ChangeableData) d).subtract(alternate.d);\n        } else {\n            throw new UnsupportedOperationException(\"unchangeable permission flags\");\n        }\n    }"}
{"description": "Subtracts the <code>privilegeB</code> from <code>privilegeA</code> and appends the result (difference) to this instance. @param privilegeA An instance of privilege bits. @param privilegeB An instance of privilege bits. @throws UnsupportedOperationException if this instance is immutable.", "code": "public void appendDifference(PrivilegeBits privilegeA, PrivilegeBits privilegeB) {\n        if (data instanceof ModifiableData) {\n            ((ModifiableData) data).appendDifference(privilegeA.data, privilegeB.data);\n        } else {\n            throw new UnsupportedOperationException(\"immutable privilege bits\");\n        }\n    }"}
{"description": "Returns a character sequence representation of this network address. When this character sequence representation is used with {@link IPAddressFormatter#parse(CharSequence)}, the resulting network address should be equal to this network address.", "code": "@Override\n    public String toString() {\n        if (networkAddr == null) {\n            networkAddr = format();\n        }\n        return networkAddr;\n    }"}
{"description": "Returns an IP location represented by a {@code CharSequence}. @param location The IP location as a {@code CharSequence}. @return An IP location that represents the given location. @throws NullPointerException If the given {@code CharSequence} is {@code null}. @throws IllegalArgumentException If the given {@code CharSequence} does not represent a valid IP location.", "code": "public static IPLocation<?> valueOf(CharSequence location) {\n        return valueOf(location, 0, location.length());\n    }"}
{"description": "Returns a predicate that verifies whether or not {@code CharSequence}s are correct IP addresses that satisfy a particular condition. This predicate can manage {@code null} values, which fail the condition. @param condition The predicate to verify if {@code CharSequence}s are correct IP addresses. @return A predicate that verifies whether or not {@code CharSequence}s are correct IP addresses that satisfy the given condition. @see #isIPAddress(CharSequence)", "code": "public static Predicate<CharSequence> whenCorrectIPAddress(Predicate<? super IPAddress<?>> condition) {\n        Objects.requireNonNull(condition);\n        return s -> s != null && IPAddressFormatter.anyVersionWithDefaults().testIfValid(s, condition);\n    }"}
{"description": "Getter method for the instance variable {@link #time}. @return value of instance variable {@link #time}", "code": "public DateTime getTime()\n        {\n            return this.time;\n        }"}
{"description": "Return whether or not the given Dealer implementation is enrolled @param dealer to check if enrolled @return true if the Dealer is enrolled, false if not", "code": "public synchronized final boolean isEnrolled(Dealer<?> dealer) {\n\t\treturn isEnrolled(dealer.getId());\n\t}"}
{"description": "Return whether or not the Dealer implementation with the given ID is enrolled @param dealerID the ID of the Dealer to check if enrolled @return true if the Dealer is enrolled, false if not", "code": "public synchronized final boolean isEnrolled(String dealerID) {\n\t\treturn dealers.containsValue(dealerID);\n\t}"}
{"description": "Given the identifier of a type, answer the ConstantPoolType associated with that type. Answer null if the type doesn't exist. @param identifier Type identifier to look for (form: java/lang/Object) @return ConstantPoolType for that type identifier, or null if not found.", "code": "public ConstantPoolEntry getTypePoolEntry(String identifier) {\n        String types[] = bands.getCpClass();\n        int position = matchSpecificPoolEntryIndex(types, identifier, 0);\n        if (position == -1) {\n            return null;\n        }\n        try {\n            return getConstantPoolEntry(CP_CLASS, position);\n        } catch (Pack200Exception ex) {\n            throw new Error(\"Error getting type pool entry\");\n        }\n    }"}
{"description": "The method to flag the specified identifier as altered @param identifier A String representing the identifier @param alteration An Integer representing the alteration", "code": "public void flagIdentifierAltered(String identifier, Integer alteration)\n\t{\n\t\t this.identifierAltered.put(identifier, alteration);\n\n\t}"}
{"description": "The method to verify if the user has altered the provided key @param key A String representing the key @return An Integer indicating the alteration", "code": "public Integer isKeyAltered(String key)\n\t{\n\t\tif((( this.keyAltered.containsKey(key))))\n\t\t{\n\t\t\treturn  this.keyAltered.get(key);\n\n\t\t}\n\t\treturn null;\n\n\t}"}
{"description": "Returns a string with all non-alphanumeric characters in the provided string substituted with underscores. This is to generate a legal identifier based on the supplied text. @param sourceString the text to generate an identifier from @return the resulting string that can be utilized as in identifier", "code": "static String generateIdentifierFromString(String sourceString) {\n    return sourceString.replaceAll(\"[^\\\\p{Alnum}]\", \"_\");\n  }"}
{"description": "Obtain the relative file path, including container title, in the Azure Blob Storage indicated by the LinkedService. Type: string (or Expression with resultType string). @return the filePath value", "code": "public Object filePath() {\n        return this.filePath;\n    }"}
{"description": "Set the relative document location, including folder name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string). @param docPath the docPath value to set @return the AzureMLWebServiceFile object itself.", "code": "public AzureMLWebServiceFile withDocPath(Object docPath) {\n        this.docPath = docPath;\n        return this;\n    }"}
{"description": "Get reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file resides. @return the linkedServiceRef value", "code": "public LinkedServiceReference linkedServiceRef() {\n        return this.linkedServiceRef;\n    }"}
{"description": "Set pointer to an Azure Storage LinkedService, where Azure ML WebService Input/Output document located. @param linkedServicePointer the linkedServicePointer value to set @return the AzureMLWebServiceFile object itself.", "code": "public AzureMLWebServiceFile withLinkedServicePointer(LinkedServiceReference linkedServicePointer) {\n        this.linkedServicePointer = linkedServicePointer;\n        return this;\n    }"}
{"description": "Determines the sequence in which handlers are executed, with the smallest digit running first. Uses a 100-point scale. @return the processing order for {@code ModuleRemovalHandler} which is 48", "code": "@Override\n    public int getProcessingOrder()\n    {\n        return 48;\n    }"}
{"description": "Reset current bean route and begin from a bean of designated class. @param <T> type of the bean @param clazz class of the bean @return instance of the bean class instrumented to record getters and setters calls", "code": "public static <T> T base(Class<T> clazz) {\n        BeanRoutes.clear();\n        return expression(clazz);\n    }"}
{"description": "Obtains an instance to connect to a distant endpoint utilizing the given blueprint. This factory function should be employed in place of a constructor. @param serviceUrl URL of the web endpoint with host and port @param httpTemplate HTTP template @return Instance of ICommonDataServiceRestClient", "code": "public static ICommonDataServiceRestClient obtainInstance(String serviceUrl, HttpTemplate httpTemplate) {\n\t\treturn new CommonDataServiceRestClientImpl(serviceUrl, httpTemplate);\n\t}"}
{"description": "Returns the total of amounts recorded, or zero if no amounts have been recorded. <p> @return the total of amounts, or zero if none", "code": "public final long getTotal()\n    {\n        return total;\n    }"}
{"description": "Returns the smallest value recorded, or {@code Long.MAX_VALUE} if no values have been recorded. <p> @return the smallest value, or {@code Long.MAX_VALUE} if none", "code": "public final long getSmallest()\n    {\n        return smallest;\n    }"}
{"description": "Returns the highest value recorded, or {@code Long.MIN_VALUE} if no values have been recorded <p> @return the greatest value, or {@code Long.MIN_VALUE} if none", "code": "public final long getGreatest()\n    {\n        return greatest;\n    }"}
{"description": "Generate a new Stop. @param title The title of the stop, not null nor an empty string. @param details The details of the stop. @param stopCategory The stop category. @param lat The stop's latitude. @param lon The stop's longitude. @param altitude The stop's altitude. @param locations A collection of associated processing location UUIDs. @throws IllegalArgumentException @throws NullPointerException", "code": "public static Stop generate(String title, String details, StopCategory stopCategory, double lat, double lon,\n                               double altitude, Set<Location> locations) {\n    return new Stop(UUID.randomUUID(), title, details, stopCategory, lat, lon, altitude, locations);\n  }"}
{"description": "Returns the provided string which triggered the exception to be raised. @return The provided string.", "code": "public String getProvided() {\n        return this.provided;\n    }"}
{"description": "Displays a notification in the standard error stream. @param notification the error notification. @return <code>false</code>;", "code": "public static boolean fail(String notification) {\n\n\t\tstdErr.print(\"** Test failure \");\n\t\tstdErr.println(notification);\n\n\t\treturn false;\n\t}"}
{"description": "Returns the final Item in the FragmentList. @return the initial Item in the FragmentList, or null if the list is empty.", "code": "public Fragment getFinalItem() {\n        return this.lastItem.getFragment();\n    }"}
{"description": "Returns true if there are no Segments in the list, false otherwise. @return true if there are no Segments in the list, false otherwise.", "code": "public boolean isEmpty() {\n        return initialItem == null;\n    }"}
{"description": "Returns the count of Segments in the list. Note, that this does not return the total number of characters. @return The count of Segments in the list.", "code": "public int count() {\n        int output = 0;\n        Node currentNode = headNode;\n        while (currentNode != null) {\n            output += 1;\n            currentNode = currentNode.getNext();\n        }\n        return output;\n    }"}
{"description": "Returns true if there is another Segment in the list after the current segment. @return True if there is another Segment in the list after the current segment.", "code": "public boolean hasNext() {\n            return currentItem.getNext() != null;\n        }"}
{"description": "Returns the subsequent entry in the sequence and advances the pointer to the following segment. Terminates if there is no following segment. @return This Entry's subsequent Entry.", "code": "public Segment next() {\n            Helper.terminateIf(!hasNext(),\n                    \"the pointer has no subsequent entry\");\n\n            currentEntry = currentEntry.getSubsequent();\n            return currentEntry.getSegment();\n        }"}
{"description": "Add new card observer to be notified on card insertion/removal. Observers should assume that the card is removed in default state. @param observer Card observer object to be added", "code": "public void addCardObserver(DeviceObserver observer) {\n        LOGGER.debug(\"Add observer \" + observer.getClass().getName());\n        observers.add(observer);\n        notifyCardObserver(observer, true);\n    }"}
{"description": "Delete card observer from the collection of observers. Does nothing if the observer is not present in the collection. @param observer Previously added card observer object to be deleted @return true if the deletion succeeded; false otherwise", "code": "public boolean deleteCardObserver(DeviceObserver observer) {\n        LOGGER.debug(\"Delete observer \" + observer.getClass().getName());\n        return observers.delete(observer);\n    }"}
{"description": "Return the collection of tests to verify the modifications implemented in 10.12. @param stage an integer that denotes the present stage in the update test. @return the test suite generated.", "code": "public static Test suite(int stage) {\n        return new BaseTestSuite(Changes10_12.class, \"Update test for 10.12\");\n    }"}
{"description": "Pushes the indicated count of characters back into the input stream. They will be read again by the subsequent call of the scanning method @param count the quantity of characters to be read again. This quantity must not exceed yylength()!", "code": "public void yypushback(int count)  {\n    if ( count > yylength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= count;\n  }"}
{"description": "Fetch the text content of the specified file. @param document the {@link PsiFile} to handle. @return the file content.", "code": "@Nullable @Override\n    public String gatherData(@NotNull PsiFile document) {\n        return document.getText();\n    }"}
{"description": "Convert and return the enclosed value, if possible. <p> @throws ClassCastException if the value cannot be transformed to T @return the value", "code": "public final native <T> T convert()/*-{\n        return this.value;\n    }-*/;"}
{"description": "Forces query to maintain portable object representation even if query was created on plain projection. @param retainPortable Retain portable flag.", "code": "public void retainPortable(boolean retainPortable) {\n        this.retainPortable = retainPortable;\n    }"}
{"description": "Returns the fundamental schema of this document format. Essentially, this is the schema with identical public name, as it's type. @return Document format root schema, to be utilized as primary schema of text processing.", "code": "public Schema getRootSchema() {\n\t\treturn getRootSchema(ipos);\n\t}"}
{"description": "Returns argument's preset value of this document type. Preset values are the values, explicitly indicated with \\c value attribute. @param title Argument's name @return Preset value of this argument", "code": "public String getArgumentPresetValue(String title) {\n\t\treturn getArgPresetValue(iptr, title);\n\t}"}
{"description": "Modifies value of the argument with given identifier. Note, that altered argument values are not persisted in HRC database - they stays active solely during this HRC session. Program should employ its own method to preserve these values across sessions (if required). @param identifier Argument's identifier @param val New value of this argument.", "code": "public void modifyArgumentValue(String identifier, String val) {\n    setArgValue(iptr, identifier, val);\n}"}
{"description": "Generate an user profile for testing(pseudo-random value for profile name and blank email, prohibited in production environment) @return The user profile for test @see UserProfile#generate(String, String)", "code": "public static @NotNull UserProfile generateTest() {\n        return generate(String.valueOf(Math.random()), \"\");\n    }"}
{"description": "Returns the date pattern employed to format date in the backup files' name @return the date pattern employed to format date in the backup files' name", "code": "public DateFormat getDatePattern() {\n        return DATE_PATTERN;\n    }"}
{"description": "Returns the job linked to the specified document @param document the name of the document @return the job linked to the specified document or <code>null</code> if there is no job for this document", "code": "public AutoSaveJob getJob(String document) {\n        return getJob(new File(document));\n    }"}
{"description": "Returns the job linked to the specified document @param document the document @return the job linked to the specified document or <code>null</code> if there is no job for this document", "code": "public AutoSaveJob getJob(Document document) {\n        return JOBS.get(document);\n    }"}
{"description": "Returns the text of the parameter passed on the command line <p> If this method returns 'bar', the parameter passed on the command line would be '--bar' @return the parameter text", "code": "public String getParameter() {\n        return parameter;\n    }"}
{"description": "Fetches the operation for the provided command line parameter. <p> The parameter should be supplied without the preceding '--' @param parameter the parameter text @return the matching Choice or null if the parameter is not identified as an operation", "code": "public static Choice fetchByParameter(String parameter) {\n        for (Choice choice : Choice.values()) {\n            if (choice.parameter.equals(parameter)) {\n                return choice;\n            }\n        }\n        return null;\n    }"}
{"description": "fetch offspring in offsprings list by specified position @param position position of offspring @return returns offspring_position in offsprings list", "code": "public INode fetchOffspring(int position){\n\t\treturn this.offsprings.get(position);\n\t}"}
{"description": "The pointer that specifies the initial outcome following this segment. {@code null} if this is the final segment. @return a pointer value that can be utilized with {@link Query#finishPrior(Object...)} or {@code null} if this is the final segment.", "code": "@Nullable\n  public Object[] getFinishPrior() {\n    return finishPrior;\n  }"}
{"description": "Check if holder is still receiving remarks. <p> A holder that still receive remarks does not contain any other data. </p> @return true if holder is still receiving remarks", "code": "public boolean receiveRemarks() {\n        return receiveRemarks;\n    }"}
{"description": "Add remark. <p> Remarks are accepted only at start. Once other content is stored in the same section, remarks are refused. </p> @param remark remark line @return true if remark was accepted", "code": "public boolean addRemark(final String remark) {\n        if (acceptRemarks) {\n            remarks.add(remark);\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"description": "Return an IUnknown instance that encapsulates a Com4jEntity. This can be used for passing Com4jEntities back to Jinx functions needing an IUnknown instance. @param entity COM entity to be encapsulated as an IUnknown. @return Instance implementing IUnknown.", "code": "public static IUnknown obtainIUnknown(Com4jEntity entity) {\n        return new IUnknownWrapper(entity);\n    }"}
{"description": "Fetches a physique position by index @param index the index to retrieve @return the physique position at the specified index", "code": "public PhysiquePosition fetchPhysiquePositionPhoto(int index){\n        return physiquePositions.get(index);\n    }"}
{"description": "Returns the item at the designated position in this list. @param position The index of the item to return. @return The item at the specified index.", "code": "@Override\n    public MPDCommand fetch(final int position) {\n        return mCommandList.get(position);\n    }"}
{"description": "Removes the item at the given position from this collection. @param position the index of the item to remove. @return the deleted item.", "code": "@SuppressWarnings(\"RefusedBequest\") // Must not call super for this method.\n    @Override\n    public MPDInstruction delete(final int position) {\n        return mInstructionList.delete(position);\n    }"}
{"description": "Returns the count of items in this {@code InstructionList}. @return The count of items in this {@code InstructionList}.", "code": "@Override\n    public int size() {\n        return mInstructionList.size();\n    }"}
{"description": "This generates and returns the InstructionList string used to fetch a reply with divided outcomes, @return This InstructionList string used to fetch a reply with divided outcomes,", "code": "public String toStringDivided() {\n        return toString(false);\n    }"}
{"description": "Fetches the SalesInvoiceLine from the service @return the SalesInvoiceLine from the request @throws ClientException this exception occurs if the request was unable to complete for any reason", "code": "@Nullable\n    public SalesInvoiceLine fetch() throws ClientException {\n       return transmit(HttpMethod.GET, null);\n    }"}
{"description": "Remove this entry from the service @return the outcome response if the service returns any data on removal @throws ClientError if there was an error during the remove operation", "code": "@Nullable\n    public SalesDebitMemoLine remove() throws ClientError {\n        return transmit(HttpMethod.DELETE, null);\n    }"}
{"description": "Searches for the primary test executor. @return Primary test executor or self in case if there is no hierarchy specified", "code": "public TestExecutor getPrimary() {\n        if(superior==null) {\n            return this;\n        }\n        else return superior.getPrimary();\n    }"}
{"description": "Checks if a refresh is needed by verifying if indicators set is empty. @return Indicators set is not empty.", "code": "public boolean isRefreshNeeded() {\n\t\treturn !indicators.isEmpty();\n\t}"}
{"description": "returns the origin id of the entity which have generated this temporary target at initial stage. It might be a particular MessageSender or MessageReceiver etc. @return originID", "code": "public String getOriginID() {\n        return originID;\n    }"}
{"description": "Returns a {@link MemberClient} that executes requests against Dropbox API user endpoints as the specified team member. @param memberId team member ID of member in this client's team. @return dropbox client that as the specified team member.", "code": "public MemberClient asMember(String memberId) {\n    return new MemberClient(client.asMember(memberId));\n  }"}
{"description": "Fetches the display tier this tile will draw on. SOLID for solid tiles, CUTOUT or CUTOUT_MIPPED for binary transparency (panes, stems), TRANSLUCENT for fully mixed transparency (colored panes)", "code": "@SideOnly(Side.CLIENT)\n    public BlockRenderTier getDisplayTier()\n    {\n        return BlockRenderTier.CUTOUT;\n    }"}
{"description": "Obtain the proxy iterator. If one does not yet exist, or refresh has been invoked, a fresh iterator will be created from the present internal collection. @return the proxy iterator", "code": "public Iterator<Object[]> fetchIterator() {\n        if (null == proxy) {\n            proxy = items.iterator();\n        }\n        return proxy;\n    }"}
{"description": "Standard Thrift clients demand sequenced replies, so even though Smart can execute multiple requests from the same client concurrently, the replies must be retained until all prior replies are prepared and have been sent. However, through the utilization of enhanced protocols and encoders, a request can specify that the client comprehends unordered replies. @return {@code true} if sequenced replies are mandatory", "code": "public static boolean isSequencedRepliesMandatory()\n    {\n        return true;\n    }"}
{"description": "Creates an InputFlow that reads from the sound input flow provided, and first supplies WAVE header details Note, the passed in flow should have size details associated with it", "code": "public static InputFlow generateInputFlowWithWaveHeader(\n\t\t\tSoundInputFlow soundIn) throws IOException {\n\t\treturn new ByteArrayInputFlow(generateByteArrayWithWaveHeader(soundIn));\n\t}"}
{"description": "Asserts that an item is null. @param note The detail note for this assertion @param item The item to test", "code": "public void assertNull(String note, Object item)\r\n\t{\r\n\t\tassertTrue(note, item == null);\r\n\t}"}
{"description": "Fetch the Attributes for a particular theme. If they are not yet loaded they will be. If the specified theme does not exist attributes for the default theme configured for the webapp will be returned and a warning level message will be written to the log. If the webapp theme does not exist the default theme will be used and id that doesn't exist an empty Attributes will be returned. @param themeName the name of the theme whose attributes are to be fetched. @return the Attributes for the named theme or the attributes for the default theme configured for the webapp if the named theme does not exist.", "code": "private Attributes getThemeAttributes(String themeName)\n    {\n        Attributes themeAttributes = (Attributes) themes.get(themeName);\n        return null != themeAttributes ? themeAttributes : loadTheme(themeName); \n    }"}
{"description": "Fetch the title of the preset theme for the web platform from the TurbineResources.properties file. If the attribute is not found the title of the preset theme will be returned. Note that the web platform theme title may be something other than preset, in which case its attributes will fall back to the theme with the title \"preset\". @return the title of the preset theme for the web platform.", "code": "public String fetchWebappThemeTitle()\n    {\n        return Turbine.getSettings()\n                .getString(THEME_ATTRIBUTE_KEY, THEME_ATTRIBUTE_PRESET);\n    }"}
{"description": "Returns the restrictions that a {@code String} representing a {@code Priority} should follow. @return restriction message.", "code": "public static String getRestrictionConstraints() {\n        return RESTRICTION_CONSTRAINTS;\n    }"}
{"description": "Outputs provided message or format with \"[DEBUG]\" prefix on console stream and logging stream if they're not null and provided parameter permits. <br/> Active parameter supersedes the debug mode @param active Message will be outputted if this parameter is true @param message Message to be outputted or format to be formatted with provided args @param arguments Arguments to format provided string @see {@link #setDebugMode(boolean)} @see {@link #toggleDebugMode()}", "code": "public static void debug(boolean active, String message, Object...arguments) {\n\t\tif(!active) return;\n\t\telse debug(message, arguments);\n\t}"}
{"description": "Returns an enumerator over the flood gauge entries. @return an enumerator over the flood gauge entries.", "code": "public Enumerator<FloodGauge> enumerator() {\n\t\treturn links.values().enumerator();\n\t}"}
{"description": "Appends another quaternion to this one. @param q The quaternion to append @return A fresh quaternion, which is the total of both", "code": "public Quaternionf append(Quaternionf q) {\n        return append(q.x, q.y, q.z, q.w);\n    }"}
{"description": "Divides the elements of this quaternion by a double scale. @param b The division scale @return A new quaternion, which has each element divided by the scale", "code": "public Quaternionf divide(double b) {\n        return divide((float) b);\n    }"}
{"description": "Returns the scalar product of this quaternion with another one. @param q The quaternion to compute the scalar product with @return The scalar product of the two quaternions", "code": "public float scalar(Quaternionf q) {\n        return scalar(q.x, q.y, q.z, q.w);\n    }"}
{"description": "Spins the double elements of a vector by this quaternion. @param a The a element of the vector @param b The b element of the vector @param c The c element of the vector @return The spun vector", "code": "public Vector3f spin(double a, double b, double c) {\n        return spin((float) a, (float) b, (float) c);\n    }"}
{"description": "Sets this window visible or invisible @param flag the boolean value that is true to set visible, false set invisible", "code": "public void setVisible(boolean flag) {\n      window.setVisible(flag);\n   }"}
{"description": "Get the timestamp linked with a key, or null if the key is not present in the cache. @param key the key @return the timestamp, or null", "code": "public long getTimeOfKey(K key) {\n\t\tLRUEntry entry = map.get(key);\n\t\treturn entry.time;\n\t}"}
{"description": "Re-construct this Feline from the provided Bundle. @param source The Bundle containing details on the Feline to re-construct. @return The re-constructed Feline.", "code": "@Override\n        public Feline constructFromBundle(Bundle source) {\n            return new Feline(source);\n        }"}
