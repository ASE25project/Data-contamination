{"question": "protected internal virtual void EnsureUnderlyingObjectHasIndirectReference() {\n            if (GetPdfObject().GetIndirectReference() == null) {\n                throw new PdfException(PdfException.ToFlushThisWrapperUnderlyingObjectMustBeAddedToDocument);\n            }\n        }", "answer": "protected void ensureUnderlyingObjectHasIndirectReference() {\n        if (getPdfObject().getIndirectReference() == null) {\n            throw new PdfException(PdfException.ToFlushThisWrapperUnderlyingObjectMustBeAddedToDocument);\n        }\n    }"}
{"question": "protected internal static void MarkObjectAsIndirect(PdfObject pdfObject) {\n            if (pdfObject.GetIndirectReference() == null) {\n                pdfObject.SetState(PdfObject.MUST_BE_INDIRECT);\n            }\n        }", "answer": "protected static void markObjectAsIndirect(PdfObject pdfObject) {\n        if (pdfObject.getIndirectReference() == null) {\n            pdfObject.setState(PdfObject.MUST_BE_INDIRECT);\n        }\n    }"}
{"question": "public override bool OnOptionsItemSelected(IMenuItem item)\n\t\t{\n\t\t\t// Handle action bar item clicks here. The action bar will\n\t\t\t// automatically handle clicks on the Home/Up button, so long\n\t\t\t// as you specify a parent activity in AndroidManifest.xml.\n\t\t\tint id = item.ItemId;\n\n\t\t\t//noinspection SimplifiableIfStatement\n\t\t\tif (id == Resource.Id.action_settings)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn base.OnOptionsItemSelected(item);\n\t\t}", "answer": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }"}
{"question": "private bool Check(TokenType type)\n        {\n            if (IsAtEnd())\n            {\n                return false;\n            }\n            return Peek().type == type;\n        }", "answer": "private boolean check(TokenType type) {\n        if (isAtEnd()) return false;\n\n        return peek().type == type;\n    }"}
{"question": "public override bool OnCreateOptionsMenu(IMenu menu)\n\t\t{\n\t\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\t\tgetMenuInflater.Inflate(Resource.Menu.main, menu);\n\t\t\treturn true;\n\t\t}", "answer": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }"}
{"question": "protected internal static void EnsureObjectIsAddedToDocument(PdfObject @object) {\n            if (@object.GetIndirectReference() == null) {\n                throw new PdfException(PdfException.ObjectMustBeIndirectToWorkWithThisWrapper);\n            }\n        }", "answer": "protected static void ensureObjectIsAddedToDocument(PdfObject object) {\n        if (object.getIndirectReference() == null) {\n            throw new PdfException(PdfException.ObjectMustBeIndirectToWorkWithThisWrapper);\n        }\n    }"}
{"question": "public override bool CheckShowJsonItemName()\n\t\t{\n\t\t\treturn false;\n\t\t}", "answer": "@Override\n\tpublic boolean checkShowJsonItemName() {\n\t\treturn false;\n\t}"}
{"question": "private Token Consume(TokenType type, string errorMessage)\n        {\n            if (Check(type))\n            {\n                return Advance();\n            }\n            throw Error(Peek(), errorMessage);\n        }", "answer": "private Token consume(TokenType type, String errorMsg) {\n        if (check(type)) return advance();\n\n        throw error(peek(), errorMsg);\n    }"}
{"question": "public IByteBuffer Allocate(IByteBufferAllocator alloc)\n            {\n                return alloc.Buffer(Guess());\n            }", "answer": "@Override\n        public ByteBuf allocate(ByteBufAllocator alloc) {\n            return alloc.buffer(guess());\n        }"}
{"question": "public void OnDestroy()\n        {\n            base.OnDestroy();\n        }", "answer": "@Override\n    public void onDestroy() {\n        super.onDestroy();\n    }"}
{"question": "public override void OnBackPressed()\n\t\t{\n\t\t\tvar drawer = FindViewById<DrawerLayout>(Resource.Id.drawer_layout);\n\n\t\t\tif (drawer.IsDrawerOpen(GravityCompat.Start))\n\t\t\t{\n\t\t\t\tdrawer.CloseDrawer(GravityCompat.Start);}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbase.OnBackPressed();\n\t\t\t}\n\t\t}", "answer": "@Override\n    public void onBackPressed() {\n        DrawerLayout drawer = findViewById(R.id.drawer_layout);\n        if (drawer.isDrawerOpen(GravityCompat.START)) {\n            drawer.closeDrawer(GravityCompat.START);\n        } else {\n            super.onBackPressed();\n        }\n    }"}
{"question": "public override bool OnCreateOptionsMenu(IMenu menu)\n        {\n            getMenuInflater.Inflate(Resource.Menu.menu_main, menu);\n            return true;\n        }", "answer": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }"}
{"question": "public override void startAndWaitUntilControlIsReturned()\n\t\t{\n\t\t\tlock (this)\n\t\t\t{\n\t\t\t  activeThread = this;\n\t\t\t  base.startAndWaitUntilControlIsReturned();\n\t\t\t}\n\t\t}", "answer": "@Override\n    public synchronized void startAndWaitUntilControlIsReturned() {\n      activeThread = this;\n      super.startAndWaitUntilControlIsReturned();\n    }"}
{"question": "protected override void OnResume()\n        {\n            base.OnResume();\n            View.OnResume();\n        }", "answer": "@Override protected void onResume()\n    {\n        super.onResume();\n        view.onResume();\n    }"}
{"question": "protected override void OnMeasure(int widthMeasureSpec, int heightMeasureSpec)\n\t\t{\n\t\t\tbase.OnMeasure(widthMeasureSpec, heightMeasureSpec);\n\t\t}", "answer": "@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }"}
{"question": "public bool Contains (string item)\n\t\t{\n\t\t\treturn items.Contains (item);\n\t\t}", "answer": "public boolean contains(String item) {\n        return items.contains(item);\n    }"}
{"question": "public override View OnCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\n\t\t{\n\t\t\treturn inflater.Inflate (Resource.Layout.fragment_authenticated_webview, container, false);\n\t\t}", "answer": "@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_authenticated_webview, container, false);\n    }"}
{"question": "static void printReceiptHeader()\n        {\n            Console.WriteLine(\"CASH RECEIPT\");\n            Console.WriteLine(\"------------------------------\");\n        }", "answer": "public static void printReceiptHeader(){\n        System.out.println(\"CASH RECEIPT\");\n        System.out.println(\"------------------------------\");\n    }"}
{"question": "static void printReceiptFooter()\n        {\n            Console.WriteLine(\"------------------------------\");\n            Console.WriteLine($\"\\u00A9 SoftUni\");\n        }", "answer": "public static void printReceiptFooter(){\n        System.out.println(\"------------------------------\");\n        System.out.println(\"\\u00A9 SoftUni\");\n    }"}
{"question": "private void Print(int[] array)\n        {\n            for (int i = 0; i < array.Length; i++)\n            {\n                Console.Write(array[i] + \" \");\n            }\n Console.WriteLine();       }", "answer": "public void Print(int[] array){\n\t\tfor(int i=0; i<a.length; i++){\n\t\t\tSystem.out.print(array[i]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t}"}
{"question": "public LiteralContext literal() {\n\t\t\treturn GetRuleContext<LiteralContext>(0);\n\t\t}", "answer": "public LiteralContext literal() {\n\t\t\treturn getRuleContext(LiteralContext.class,0);\n\t\t}"}
{"question": "public override void OnCreate (Bundle savedInstanceState)\n\t\t{\n\t\t\tbase.OnCreate (savedInstanceState);\n\t\t}", "answer": "@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }"}
{"question": "protected long TilNextMillis(long lastTimestamp)\n    {\n        long timestamp = TimeGen();\n        while (timestamp <= lastTimestamp) {\n            timestamp = TimeGen();\n        }\n        return timestamp;\n    }", "answer": "protected long tilNextMillis(long lastTimestamp) {\n\n\t\tlong timestamp = timeGen();\n\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timeGen();\n\t\t}\n\n\t\treturn timestamp;\n\t}"}
{"question": "public bool IsServer()\n        {\n            return false;\n        }", "answer": "public boolean isServer()\n    {\n        return false;\n    }"}
{"question": "public override bool ShouldOverrideUrlLoading (WebView view, string url)\n\t\t{\n\t\t\tview.LoadUrl (url);\n\t\t\treturn true;\n\t\t}", "answer": "@Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                view.loadUrl(url);\n                return true;\n            }"}
{"question": "private static bool isLetter(char c) {\n            return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')|| (c == '_');\n        }", "answer": "private static boolean isLetter(char c) {\n    return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || (c == '_');\n  }"}
{"question": "public void Remove(object key)\n        {\n            throw new NotSupportedException();\n        }", "answer": "public Object remove(Object key) {\n        throw new UnsupportedOperationException();\n    }"}
{"question": "public bool IsAvailable()\n        {\n           return true;\n        }", "answer": "public boolean isAvailable()\n        {\n            return true;\n        }"}
{"question": "public override IBinder OnBind(Intent intent)\n        {\n            return null;\n        }", "answer": "@Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }"}
{"question": "public override void Shutdown()\n            {\n                throw new NotImplementedException();\n            }", "answer": "@Override\n\tpublic void shutdown() {\n\t\tthrow new UnsupportedOperationException();\n\t}"}
{"question": "public Comparator<K> comparator()\n        {\n            return m.comparator();\n        }", "answer": "public Comparator<? super K> comparator() {\n            return m.comparator();\n        }"}
{"question": "void printArray(int []arr) \n    { \n        int n = arr.Length; \n        for (int i=0; i<n; ++i) \n            Console.Write(arr[i]+\" \"); \n        Console.WriteLine(); \n    }", "answer": "void printArray(int arr[])\n     {\n         int n = arr.length;\n         for (int i=0; i<n; ++i)\n             System.out.print(arr[i] + \" \");\n         System.out.println();\n     }"}
{"question": "protected override void propertySet(Bean bean, string propertyName, object newValue, bool quiet)\n\t\t{\n\t\t  metaProperty(propertyName);\n\t\t  if (quiet)\n\t\t  {\n\t\t\treturn;\n\t\t  }\n\t\t  throw new System.NotSupportedException(\"Property cannot be written: \" + propertyName);\n\t\t}", "answer": "@Override\n    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {\n      metaProperty(propertyName);\n      if (quiet) {\n        return;\n      }\n      throw new UnsupportedOperationException(\"Property cannot be written: \" + propertyName);\n    }"}
{"question": "public override string ReadLine()\n        {\n            return Console.ReadLine();\n        }", "answer": "@Override\n\t\tpublic String readLine() {\n\t\t\treturn console.readLine();\n\t\t}"}
{"question": "public static void Warning(string message)\n        {\n            Log(LogLevel.Warning, message);\n        }", "answer": "public static void warning(String message) {\n    log(Level.WARNING, message);\n  }"}
{"question": "public void Disconnect()\n        {\n            Connection.Close();\n        }", "answer": "public void disconnect() {\n\t\t\n\t\tconnection.closeNow();\n\t\t\n\t}"}
{"question": "static string sha256(string s) {\n\treturn sha256(utf8.GetBytes(s));\n}", "answer": "public static String SHA256(String s)\n  {\n    return SHA256(s.getBytes());\n  }"}
{"question": "public override IDictionary<string, MetaProperty<object>> metaPropertyMap()\n\t\t{\n\t\t  return metaPropertyMap$;\n\t\t}", "answer": "@Override\n    public Map<String, MetaProperty<?>> metaPropertyMap() {\n      return metaPropertyMap$;\n    }"}
{"question": "public void AddParameter(string key, string value)\n        {\n            params.Add(new IniParameter(key, value));\n        }", "answer": "public void addParameter(String key, String value) {\n        params.put(key, value);\n    }"}
{"question": "public override bool ContainsKey(Object key)\n        {\n            return map.ContainsKey(key);\n        }", "answer": "@Override\n\t\tpublic boolean containsKey(Object key) {\n\t\t\treturn map.containsKey(key);\n\t\t}"}
{"question": "public override bool containsValue(Object value)\n        {\n            return map.containsValue(value);\n        }", "answer": "@Override\n\t\tpublic boolean containsValue(Object value) {\n\t\t\treturn map.containsValue(value);\n\t\t}"}
{"question": "public override bool CachedFieldSourceEquals(FieldCacheSource o)\n\t\t{\n\t\t\tif (o.GetType() != typeof(ByteFieldSource))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tByteFieldSource other = (ByteFieldSource) o;\n\t\t\treturn this.parser == null?other.parser == null:this.parser.GetType() == other.parser.GetType();\n\t\t}", "answer": "@Override\n\t\tpublic boolean cachedFieldSourceEquals(FieldCacheSource o) {\n    if (o.getClass() !=  ShortFieldSource.class) {\n      return false;\n    }\n    ShortFieldSource other = (ShortFieldSource)o;\n    return this.parser==null ? \n      other.parser==null :\n      this.parser.getClass() == other.parser.getClass();\n  }"}
{"question": "public int CachedFieldSourceHashCode()\n\t\t{\n\t\t\treturn parser == null?typeof(System.Short).GetHashCode():parser.GetType().GetHashCode();\n\t\t}", "answer": "public int cachedFieldSourceHashCode() {\n    return parser==null ? \n      Short.class.hashCode() : parser.getClass().hashCode();\n  }"}
{"question": "public void Inorder(TreeNode<T> root)\n        {\n            if (root != null)\n            {\n                Inorder(root.Left);\n                    Console.WriteLine(root.Data + \" \");\n                Inorder(root.Right);\n            }\n        }", "answer": "static void inorder(Node root) \n\t{ \n\t\tif (root != null) { \n\t\t\tinorder(root.left); \n\t\t\tSystem.out.print(root.data + \" \"); \n\t\t\tinorder(root.right); \n\t\t} \n\t}"}
{"question": "public static void CopyFile(FilePath sourceFile, FilePath destFile)\n        {\n            if (!destFile.Exists())\n            {\n                destFile.CreateNewFile();\n            }\n            FileChannel source = null;\n            FileChannel destination = null;\n            try\n            {\n                source = new FileInputStream(sourceFile).GetChannel();\n                destination = new FileOutputStream(destFile).GetChannel();\n                destination.TransferFrom(source, 0, source.Size());\n            }\n            finally\n            {\n                if (source != null)\n                {\n                    source.Close();\n                }\n                if (destination != null)\n                {\n                    destination.Close();\n                }\n            }\n        }", "answer": "private static void copyFile(File sourceFile, File destFile) throws IOException {\n\t\tif (!destFile.exists()) {\n\t\t\tdestFile.createNewFile();\n\t\t}\n\n\t\tFileChannel source = null;\n\t\tFileChannel destination = null;\n\t\ttry {\n\t\t\tsource = new FileInputStream(sourceFile).getChannel();\n\t\t\tdestination = new FileOutputStream(destFile).getChannel();\n\t\t\tdestination.transferFrom(source, 0, source.size());\n\t\t} finally {\n\t\t\tif (source != null) {\n\t\t\t\tsource.close();\n\t\t\t}\n\t\t\tif (destination != null) {\n\t\t\t\tdestination.close();\n\t\t\t}\n\t\t}\n\t}"}
{"question": "public void SwitchTo(int lexState) {\n   if (lexState >= 5 || lexState < 0)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.InvalidLexicalState);\n   else\n      curLexState = lexState;\n}", "answer": "public void SwitchTo(int lexState)\n  {\n    if (lexState >= 5 || lexState < 0)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\n    else\n      curLexState = lexState;\n  }"}
{"question": "public AtomContext atom(int i) {\n\t\t\treturn GetRuleContext<AtomContext>(i);\n\t\t}", "answer": "public AtomContext atom(int i) {\n\t\t\treturn getRuleContext(AtomContext.class,i);\n\t\t}"}
{"question": "public override void OnReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, string host, string realm)\n        {\n            base.OnReceivedHttpAuthRequest(view, handler, host, realm);\n        }", "answer": "@Override\n\t\t\t\t\t\tpublic void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,\n\t\t\t\t\t\t\t\tString realm) {\n\t\t\t\t\t\t\tsuper.onReceivedHttpAuthRequest(view, handler, host, realm);\n\t\t\t\t\t\t}"}
{"question": "public string CloseAlertAndGetItsText()\n        {\n            try\n            {\n                IAlert alert = driver.SwitchTo().Alert();\n                string alertText = alert.Text;\n                if (acceptNextAlert)\n                {\n                    alert.Accept();\n                }\n                else\n                {\n                    alert.Dismiss();\n                }\n                return alertText;\n            }\n            finally\n            {\n                acceptNextAlert = true;\n            }\n        }", "answer": "private String closeAlertAndGetItsText() {\n\t\ttry {\n\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\tString alertText = alert.getText();\n\t\t\tif (acceptNextAlert) {\n\t\t\t\talert.accept();\n\t\t\t} else {\n\t\t\t\talert.dismiss();\n\t\t\t}\n\t\t\treturn alertText;\n\t\t} finally {\n\t\t\tacceptNextAlert = true;\n\t\t}\n\t}"}
{"question": "public sealed bool IsZero() {\n\t\t\treturn x == 0 && y == 0 && z == 0;\n\t\t}", "answer": "public final boolean isZero()\n\t{\n\t\treturn x == 0 && y == 0 && z == 0;\n\t}"}
{"question": "public Builder AddProperty(string key, string value)\n            {\n                _properties.Add(key, value);\n                return this;\n            }", "answer": "public Builder addProperty(String key, String value) {\n      properties.put(key, value);\n      return this;\n    }"}
{"question": "public override bool IsChildSelectable(int groupPosition, int childPosition)\n        {\n            return true;\n        }", "answer": "@Override\n    public boolean isChildSelectable(int groupPosition, int childPosition) {\n        return true;\n    }"}
{"question": "public static void display(Node head)\n        {\n            Node start = head;\n            while (start != null)\n            {\n                Console.Write(start.data + \" \");\n                start = start.next;\n            }\n        }", "answer": "public static void display(Node head)\n  {\n    Node start = head;\n    while (start != null)\n    {\n      System.out.print(start.data + \" \");\n      start = start.next;\n    }\n  }"}
{"question": "public override bool OnMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target)\n        {\n            return false;\n        }", "answer": "@Override\n            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {\n                return false;\n            }"}
{"question": "public override bool AreAllItemsEnabled()\n        {\n            return false;\n        }", "answer": "@Override\n    public boolean areAllItemsEnabled() {\n        return false;\n    }"}
{"question": "public static IDictionary<string, string> SplitUrlQuery(string query)\n        {\n            IDictionary<string, string> result = new Dictionary<string, string>();\n\n            string[] pairs = query.Split(new char[] { '&' });\n            if (pairs != null && pairs.Length > 0)\n            {\n                foreach (string pair in pairs)\n                {\n                    string[] oneParam = pair.Split(new char[] { '=' }, 2);\n                    if (oneParam != null && oneParam.Length == 2)\n                    {\n                        result.Add(oneParam[0], oneParam[1]);\n                    }\n                }\n            }\n\n            return result;\n        }", "answer": "public static Map<String, String> splitUrlQuery(String query) {\n\t\tMap<String, String> result = new HashMap<String, String>();\n\n\t\tString[] pairs = query.split(\"&\");\n\t\tif (pairs != null && pairs.length > 0) {\n\t\t\tfor (String pair : pairs) {\n\t\t\t\tString[] param = pair.split(\"=\", 2);\n\t\t\t\tif (param != null && param.length == 2) {\n\t\t\t\t\tresult.put(param[0], param[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}"}
{"question": "public override void PrintLeft(TextWriter writer)\n        {\n            writer.Write(\"throw(\");\n            Child.Print(writer);\n            writer.Write(\")\");\n        }", "answer": "@Override\n    public void printLeft(StringWriter writer) {\n        writer.write(\"throw(\");\n        child.print(writer);\n        writer.write(\")\");\n    }"}
{"question": "public void LogError(string msg)\n        {\n            Console.Error.WriteLine(msg);\n        }", "answer": "public void logError(String msg) {\n        System.err.println(msg);\n    }"}
{"question": "public void Log(string message)\n        {\n            System.Console.WriteLine(message);\n        }", "answer": "private void log(String message) {\n        System.out.println(message);\n    }"}
{"question": "private void showMessage(string message)\n        {\n            Toast.MakeText(this, message, ToastLength.Long).Show();\n        }", "answer": "@Override\n    public void showMessage(String message) {\n        Toast.makeText(context, message, Toast.LENGTH_LONG).show();\n    }"}
{"question": "public void Weep()\n        {\n            Console.WriteLine(\"weeping...\");\n        }", "answer": "void weep() {\n        System.out.println(\"weeping...\");\n    }"}
{"question": "public void Method()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }", "answer": "public void method() {\n\t\tSystem.out.println(\"hello world!\");\n\t}"}
{"question": "public static void LoadAndSaveEncryptedODT(string dataDir)\n        {\n            // ExStart:LoadAndSaveEncryptedODT  \n            Document doc = new Document(dataDir + @\"encrypted.odt\", new Aspose.Words.LoadOptions(\"password\"));\n\n            doc.Save(dataDir + \"out.odt\", new OdtSaveOptions(\"newpassword\"));\n            // ExEnd:LoadAndSaveEncryptedODT \n            Console.WriteLine(\"\\nLoad and save encrypted document successfully.\\nFile saved at \" + dataDir);\n        }", "answer": "public static void loadAndSaveEncryptedODT(String dataDir) throws Exception {\n\t\t// ExStart:LoadAndSaveEncryptedODT\n\t\tDocument doc = new Document(dataDir + \"encrypted.odt\", new com.aspose.words.LoadOptions(\"password\"));\n\t\tdoc.save(dataDir + \"out.odt\", new OdtSaveOptions(\"newpassword\"));\n\t\t// ExEnd:LoadAndSaveEncryptedODT\n\t\tSystem.out.println(\"\\nLoad and save encrypted document successfully.\\nFile saved at \" + dataDir);\n\t}"}
{"question": "public static void Exit(int exitCode)\n        {\n            Environment.Exit(exitCode);\n        }", "answer": "public static void exit(int exitCode)\n\t{\n\t\tSystem.exit(exitCode);\n\t}"}
{"question": "public static void VerifyODTdocument(string dataDir)\n        {\n            // ExStart:VerifyODTdocument  \n            FileFormatInfo info = FileFormatUtil.DetectFileFormat(dataDir + @\"encrypted.odt\");\n            Console.WriteLine(info.IsEncrypted);\n            // ExEnd:VerifyODTdocument \n        }", "answer": "public static void verifyODTdocument(String dataDir) throws Exception {\n\t\t// ExStart:VerifyODTdocument\n\t\tFileFormatInfo info = FileFormatUtil.detectFileFormat(dataDir + \"encrypted.odt\");\n\t\tSystem.out.println(info.isEncrypted());\n\t\t// ExEnd:VerifyODTdocument\n\t}"}
{"question": "public string ReadLine()\n        {\n           return Console.ReadLine();\n        }", "answer": "public String readLine() {\n        return scanner.nextLine();\n    }"}
{"question": "protected override void OnNewIntent(Intent intent)\n\t\t{\n\t\t\tbase.OnNewIntent(intent);\n\t\t\tmBlaubot.OnNewIntent(intent);\n\t\t}", "answer": "@Override\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        mBlaubot.onNewIntent(intent);\n    }"}
{"question": "public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {\n\t\tswitch (ruleIndex) {\n\t\tcase 4: return expr_sempred((ExprContext)_localctx, predIndex);\n\t\t}\n\t\treturn true;\n\t}", "answer": "public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {\n\t\tswitch (ruleIndex) {\n\t\tcase 10:\n\t\t\treturn expression_sempred((ExpressionContext)_localctx, predIndex);\n\t\t}\n\t\treturn true;\n\t}"}
{"question": "public override bool OnCreateOptionsMenu(Menu menu)\n        {\n            GetMenuInflater().Inflate(R.Menu.image_view, menu);\n            return true;\n        }", "answer": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }"}
{"question": "private bool IsAjaxRequest(HttpRequest request)\n        {\n            string header = request.Headers[\"X-Requested-With\"];\n            return \"XMLHttpRequest\".Equals(header);\n        }", "answer": "public boolean isAjaxRequest(HttpServletRequest request) {\n        String header = request.getHeader(\"x-requested-with\");\n        return \"XMLHttpRequest\".equals(header);\n    }"}
{"question": "public void DidReceiveMemoryWarning()\n        {\n            base.DidReceiveMemoryWarning();\n        }", "answer": "public void didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning();\n    }"}
{"question": "public int FindMaxConsecutiveOnes(int[] nums)\n        {\n            int count = 0, maxCount = 0;\n            foreach (var num in nums)\n            {\n                if (num == 0)\n                {\n                    maxCount = Math.Max(maxCount, count);\n                    count = 0;\n                }\n                else\n                    count++;\n            }\n\n            return Math.Max(maxCount, count);\n        }", "answer": "public int findMaxConsecutiveOnes(int[] nums) {\n        int result = 0;\n        int count = 0;\n\n        for (int num : nums) {\n            if (num == 1) {\n                count++;\n            } else {\n                result = Math.max(result, count);\n                count = 0;\n            }\n        }\n\n        return Math.max(result, count);\n    }"}
{"question": "public static void print(int[] arr, int n)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tConsole.Write(arr[i] + \" \");\n\t}", "answer": "public static void print(int arr[],int n){\n        for(int i =0; i < n; i++)\n            System.out.print(arr[i] + \" \");\n    }"}
{"question": "private void AddAlign(Node node, string align)\n\t\t{\n\t\t\t/* force alignment value to lower case */\n\t\t\tAddStyleProperty(node, \"text-align: \" + align.ToLower());\n\t\t}", "answer": "private void addAlign(Node node, String align)\n    {\n        // force alignment value to lower case\n        addStyleProperty(node, \"text-align: \" + align.toLowerCase());\n    }"}
{"question": "public bool IsZero() {\n\t\t\treturn x == 0 && y == 0 && z == 0;\n\t\t}", "answer": "public boolean isZero() {\n\t\treturn x == 0 && y == 0 && z == 0;\n\t}"}
{"question": "protected object ExtractMessage(Message message)\n        {\n            IMessageConverter converter = getMessageConverter;\n            if (converter != null)\n            {\n                return converter.FromMessage(message);\n            }\n            return message;\n        }", "answer": "protected Object extractMessage(Message message) throws JMSException {\n\t\tMessageConverter converter = getMessageConverter();\n\t\tif (converter != null) {\n\t\t\treturn converter.fromMessage(message);\n\t\t}\n\t\treturn message;\n\t}"}
{"question": "public void remove()\n            {\n                throw new InvalidOperationException();\n            }", "answer": "public void remove() {\n                    throw new IllegalStateException();\n                }"}
{"question": "protected override void Prepare()\n        {\n            ProcessInfoParameter[] para = GetParameter();\n            for (int i = 0; i < para.Length; i++)\n            {\n                String name = para[i].GetParameterName();\n                if (para[i].GetParameter() == null)\n                {\n                    ;\n                }\n                \n                else\n                {\n                    log.Log(Level.SEVERE, \"Unknown Parameter: \" + name);\n                }\n            }\n            _C_RfQ_ID = GetRecord_ID();\n        }", "answer": "@Override\n\tprotected void prepare() {\n\t\tProcessInfoParameter[] para = getParameter();\n\t\tfor (int i = 0; i < para.length; i++) {\n\t\t\tString name = para[i].getParameterName();\n\t\t\tif (para[i].getParameter() == null)\n\t\t\t\t;\n\t\t\telse\n\t\t\t\tlog.log(Level.SEVERE, \"Unknown Parameter: \" + name);\n\t\t}\n\t\tHC_JobDataChange_ID = getRecord_ID();\n\t}"}
{"question": "public string HelloWorld()\n        {\n            return \"Hello World!\";\n        }", "answer": "public String helloWorld() throws Exception {\n        return \"Hello world !\";\n    }"}
{"question": "public void Validate()\n        {\n            if (Sku != null)\n            {\n                Sku.Validate();\n            }\n        }", "answer": "public void validate() {\n        if (sku() != null) {\n            sku().validate();\n        }\n    }"}
{"question": "public String Description()\n\t\t{\n\t\t\treturn \"short(\" + base.Description() + ')';\n\t\t}", "answer": "public String description() {\n    return \"short(\" + super.description() + ')';\n  }"}
{"question": "private static bool IsMediaDocument(Uri uri)\n        {\n            return \"com.android.providers.media.documents\".Equals(uri.Authority);\n        }", "answer": "private static boolean isMediaDocument(Uri uri){\n        return \"com.android.provides.media.documents\".equals(uri.getAuthority());\n     }"}
{"question": "public static void IsTrue(bool expression)\n        {\n            IsTrue(expression, \"[Assertion failed] - this expression must be true\");\n        }", "answer": "public static void isTrue(boolean expression) {\n\t\tisTrue(expression, \"[Assertion failed] - this expression must be true!\");\n\t}"}
{"question": "public override void Reset()\n        {\n            throw new NotSupportedException(\"Reset not supported.\");\n        }", "answer": "@Override\n        public void reset() {\n            throw new UnsupportedOperationException(\"Reset not supported.\");\n        }"}
{"question": "public bool IsElementPresent(By by)\n        {\n            try\n            {\n                driver.FindElement(by);\n                return true;\n            }\n            catch (NoSuchElementException)\n            {\n                return false;\n            }\n        }", "answer": "private boolean isElementPresent(By by) {\n\t\ttry {\n\t\t\tdriver.findElement(by);\n\t\t\treturn true;\n\t\t} catch (NoSuchElementException e) {\n\t\t\treturn false;\n\t\t}\n\t}"}
{"question": "public object Replace(object original, object target, object owner)\n        {\n            return original;\n        }", "answer": "public Object replace(Object original, Object target, Object owner) throws HibernateException {\n\t\treturn original;\n\t}"}
{"question": "public DeclarationContext declaration(int i) {\n\t\t\treturn GetRuleContext<DeclarationContext>(i);\n\t\t}", "answer": "public DeclarationContext declaration(int i) {\n\t\t\treturn getRuleContext(DeclarationContext.class,i);\n\t\t}"}
{"question": "public AttributeContext attribute(int i) {\n\t\t\treturn GetRuleContext<AttributeContext>(i);\n\t\t}", "answer": "public AttributeContext attribute(int i) {\n\t\t\treturn getRuleContext(AttributeContext.class,i);\n\t\t}"}
{"question": "public StatementContext statement(int i) {\n\t\t\treturn GetRuleContext<StatementContext>(i);\n\t\t}", "answer": "public StatementContext statement(int i) {\n\t\t\treturn getRuleContext(StatementContext.class,i);\n\t\t}"}
{"question": "public ExpressionContext expression(int i) {\n\t\t\treturn GetRuleContext<ExpressionContext>(i);\n\t\t}", "answer": "public ExpressionContext expression(int i) {\n\t\t\treturn getRuleContext(ExpressionContext.class,i);\n\t\t}"}
{"question": "public void Print()\n        {\n            Console.WriteLine(ToString());\n        }", "answer": "public void print() {\n\t\tSystem.out.print(toString());\n\t}"}
{"question": "protected override LayoutArea UpdateCurrentArea(LayoutResult overflowResult) {\n                return null;\n            }", "answer": "@Override\n            protected LayoutArea updateCurrentArea(LayoutResult overflowResult) {\n                return null;\n            }"}
{"question": "public override bool IsPersistent() {\n            return true;\n        }", "answer": "@Override\n    public boolean isPersistent() {\n        return true;\n    }"}
{"question": "private static void DisallowOverridingGroundTypes(Dictionary<string, IReadHandler> handlers)\n        {\n            if (handlers != null)\n            {\n                string[] groundTypeTags = { \"_\", \"s\", \"?\", \"i\", \"d\", \"b\", \"'\", \"map\", \"array\" };\n                foreach (string tag in groundTypeTags)\n                {\n                    if (handlers.ContainsKey(tag))\n                    {\n                        throw new TransitException(\"Cannot override decoding for transit ground type, tag \" + tag);\n                    }\n                }\n            }\n        }", "answer": "private static void disallowOverridingGroundTypes(Map<String, ReadHandler<?,?>> handlers) {\n        if (handlers != null) {\n            String groundTypeTags[] = {\"_\", \"s\", \"?\", \"i\", \"d\", \"b\", \"'\", \"map\", \"array\"};\n            for (String tag : groundTypeTags) {\n                if (handlers.containsKey(tag)) {\n                    throw new IllegalArgumentException(\"Cannot override decoding for transit ground type, tag \" + tag);\n                }\n            }\n        }\n    }"}
{"question": "public void SayHello()\n        {\n            Console.WriteLine(\"Hello\");\n        }", "answer": "public void sayHello() {\n\t\tSystem.out.println(\"Hello\");\n\t}"}
{"question": "public override void OnAttach(Activity activity)\n        {\n            base.OnAttach(activity);\n\n            mActivity = activity;\n        }", "answer": "@Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n\n        mActivity = activity;\n    }"}
{"question": "public override bool OnUnbind(Intent intent)\n        {\n            return base.OnUnbind(intent);\n        }", "answer": "@Override\n    public boolean onUnbind(Intent intent) {\n        return super.onUnbind(intent);\n    }"}
{"question": "public static IDictionary<string, string> SplitUrlQuery(string query)\n        {\n            IDictionary<string, string> result = new Dictionary<string, string>();\n\n            string[] pairs = query.Split(new char[] { '&' });\n            if (pairs != null && pairs.Length > 0)\n            {\n                foreach (string pair in pairs)\n                {\n                    string[] oneParam = pair.Split(new char[] { '=' }, 2);\n                    if (oneParam != null && oneParam.Length == 2)\n                    {\n                        result.Add(oneParam[0], oneParam[1]);\n                    }\n                }\n            }\n\n            return result;\n        }", "answer": "public static Map<String, String> splitUrlQuery(String query) {\n\t\tMap<String, String> result = new HashMap<String, String>();\n\n\t\tString[] pairs = query.split(\"&\");\n\t\tif (pairs != null && pairs.length > 0) {\n\t\t\tfor (String pair : pairs) {\n\t\t\t\tString[] param = pair.split(\"=\", 2);\n\t\t\t\tif (param != null && param.length == 2) {\n\t\t\t\t\tresult.put(param[0], param[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}"}
{"question": "public bool IsRoot()\n        {\n            return (Parent == null);\n        }", "answer": "public boolean isRoot() {\n\t\treturn (parent() == null);\n\t}"}
{"question": "public override void OnSubscribe(IDisposable d)\n            {\n                DisposableHelper.SetOnce(ref upstream, d);\n            }", "answer": "@Override\n        public void onSubscribe(Disposable d) {\n            DisposableHelper.setOnce(upstream, d);\n        }"}
