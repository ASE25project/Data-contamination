{"question": "protected void verifyUnderlyingObjectHasIndirectReference() {\n        if (getPdfObject().getIndirectReference() == null) {\n            throw new PdfException(PdfException.ToFlushThisWrapperUnderlyingObjectMustBeAddedToDocument);\n        }\n    }", "answer": "protected internal virtual void VerifyUnderlyingObjectHasIndirectReference() {\n            if (GetPdfObject().GetIndirectReference() == null) {\n                throw new PdfException(PdfException.ToFlushThisWrapperUnderlyingObjectMustBeAddedToDocument);\n            }\n        }"}
{"question": "protected static void flagObjectAsIndirect(PdfObject pdfObj) {\n        if (pdfObj.getIndirectReference() == null) {\n            pdfObj.setState(PdfObject.MUST_BE_INDIRECT);\n        }\n    }", "answer": "protected internal static void FlagObjectAsIndirect(PdfObject pdfObj) {\n            if (pdfObj.GetIndirectReference() == null) {\n                pdfObj.SetState(PdfObject.MUST_BE_INDIRECT);\n            }\n        }"}
{"question": "@Override\n    public boolean onOptionsItemSelected(MenuItem menu) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int Id = menu.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (Id == R.id.action_preferences) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(menu);\n    }", "answer": "public override bool OnOptionsItemSelected(IMenuItem menu)\n\t\t{\n\t\t\t// Handle action bar item clicks here. The action bar will\n\t\t\t// automatically handle clicks on the Home/Up button, so long\n\t\t\t// as you specify a parent activity in AndroidManifest.xml.\n\t\t\tint Id = menu.ItemId;\n\n\t\t\t//noinspection SimplifiableIfStatement\n\t\t\tif (Id == Resource.Id.action_preferences)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn base.OnOptionsItemSelected(menu);\n\t\t}"}
{"question": "private boolean verify(TokenCategory category) {\n        if (isAtEnd()) return false;\n\n        return peek().category == category;\n    }", "answer": "private bool Verify(TokenCategory category)\n        {\n            if (IsAtEnd())\n            {\n                return false;\n            }\n            return Peek().category == category;\n        }"}
{"question": "@Override\n    public boolean onGenerateOptionsMenu(Menu options) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.primary, options);\n        return true;\n    }", "answer": "public override bool OnGenerateOptionsMenu(IMenu options)\n\t\t{\n\t\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\t\tgetMenuInflater.Inflate(Resource.Menu.primary, options);\n\t\t\treturn true;\n\t\t}"}
{"question": "protected static void verifyObjectIsAddedToDocument(PdfObject obj) {\n        if (obj.getIndirectReference() == null) {\n            throw new PdfException(PdfException.ObjectMustBeIndirectToWorkWithThisWrapper);\n        }\n    }", "answer": "protected internal static void VerifyObjectIsAddedToDocument(PdfObject obj) {\n            if (obj.GetIndirectReference() == null) {\n                throw new PdfException(PdfException.ObjectMustBeIndirectToWorkWithThisWrapper);\n            }\n        }"}
{"question": "@Override\n\tpublic boolean verifPlayJsonItemName() {\n\t\treturn false;\n\t}", "answer": "public override bool VerifyPlayJsonItemName()\n\t\t{\n\t\t\treturn false;\n\t\t}"}
{"question": "private Token obtain(TokenType kind, String errorText) {\n        if (verify(kind)) return proceed();\n\n        throw mistake(look(), errorText);\n    }", "answer": "private Token Obtain(TokenType kind, string errorText)\n        {\n            if (Verify(kind))\n            {\n                return Proceed();\n            }\n            throw Mistake(Look(), errorText);\n        }"}
{"question": "@Override\n        public ByteBuf allocate(ByteBufAllocator allocator) {\n            return allocator.buffer(estimate());\n        }", "answer": "public IByteBuffer Allocate(IByteBufferAllocator allocator)\n            {\n                return allocator.Buffer(Estimate());\n            }"}
{"question": "@Override\n    public void onTerminate() {\n        super.onTerminate();\n    }", "answer": "public void OnTerminate()\n        {\n            base.OnTerminate();\n        }"}
{"question": "@Override\n    public void onBackPressed() {\n        DrawerLayout panel = findViewById(R.id.drawer_layout);\n        if (panel.isDrawerOpen(GravityCompat.START)) {\n            panel.closeDrawer(GravityCompat.START);\n        } else {\n            super.onBackPressed();\n        }\n    }", "answer": "public override void OnBackPressed()\n\t\t{\n\t\t\tvar panel = FindViewById<DrawerLayout>(Resource.Id.drawer_layout);\n\n\t\t\tif (panel.IsDrawerOpen(GravityCompat.Start))\n\t\t\t{\n\t\t\t\tpanel.CloseDrawer(GravityCompat.Start);}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbase.OnBackPressed();\n\t\t\t}\n\t\t}"}
{"question": "@Override\n    public boolean onInitializeOptionsMenu(Menu options) {\n        getMenuInflater().inflate(R.menu.menu_primary, options);\n        return true;\n    }", "answer": "public override bool OnInitializeOptionsMenu(IMenu options)\n        {\n            getMenuInflater.Inflate(Resource.Menu.menu_primary, options);\n            return true;\n        }"}
{"question": "@Override\n    public synchronized void beginAndWaitUntilCommandIsReturned() {\n      currentThread = this;\n      super.beginAndWaitUntilCommandIsReturned();\n    }", "answer": "public override void beginAndWaitUntilCommandIsReturned()\n\t\t{\n\t\t\tlock (this)\n\t\t\t{\n\t\t\t  currentThread = this;\n\t\t\t  base.beginAndWaitUntilCommandIsReturned();\n\t\t\t}\n\t\t}"}
{"question": "@Override protected void withResume()\n    {\n        super.withResume();\n        display.withResume();\n    }", "answer": "protected override void WithResume()\n        {\n            base.WithResume();\n            Display.WithResume();\n        }"}
{"question": "@Override\n    protected void onMeasure(int widthDimension, int heightDimension) {\n        super.onMeasure(widthDimension, heightDimension);\n    }", "answer": "protected override void OnMeasure(int widthDimension, int heightDimension)\n\t\t{\n\t\t\tbase.OnMeasure(widthDimension, heightDimension);\n\t\t}"}
{"question": "public boolean includes(String element) {\n        return items.contains(element);\n    }", "answer": "public bool Includes (string element)\n\t\t{\n\t\t\treturn items.Contains (element);\n\t\t}"}
{"question": "@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup holder,\n                             Bundle savedState) {\n        return inflater.inflate(R.layout.fragment_authenticated_webview, holder, false);\n    }", "answer": "public override View OnCreateView (LayoutInflater inflater, ViewGroup holder, Bundle savedState)\n\t\t{\n\t\t\treturn inflater.Inflate (Resource.Layout.fragment_authenticated_webview, holder, false);\n\t\t}"}
{"question": "public static void displayReceiptHeader(){\n        System.out.println(\"CASH RECEIPT\");\n        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n    }", "answer": "static void displayReceiptHeader()\n        {\n            Console.WriteLine(\"CASH RECEIPT\");\n            Console.WriteLine(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n        }"}
{"question": "public static void displayReceiptEnd(){\n        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n        System.out.println(\"\\u00A9 SoftUni\");\n    }", "answer": "static void displayReceiptEnd()\n        {\n            Console.WriteLine(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n            Console.WriteLine($\"\\u00A9 SoftUni\");\n        }"}
{"question": "public void Show(int[] list){\n\t\tfor(int j=0; j<list.length; j++){\n\t\t\tSystem.out.print(list[j]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t}", "answer": "private void Show(int[] list)\n        {\n            for (int j = 0; j < list.Length; j++)\n            {\n                Console.Write(list[j] + \" \");\n            }\n            Console.WriteLine();\n        }"}
{"question": "public LiteralContext token() {\n\t\t\treturn getRuleContext(LiteralContext.class,0);\n\t\t}", "answer": "public LiteralContext token() {\n\t\t\treturn GetRuleContext<LiteralContext>(0);\n\t\t}"}
{"question": "@Override\n    public void onCreate(Bundle savedState) {\n        super.onCreate(savedState);\n    }", "answer": "public override void OnCreate (Bundle savedState)\n\t\t{\n\t\t\tbase.OnCreate (savedState);\n\t\t}"}
{"question": "protected long untilNextMillis(long previousTimestamp) {\n    long currentTimestamp = timeGen();\n    while (currentTimestamp <= previousTimestamp) {\n        currentTimestamp = timeGen();\n    }\n    return currentTimestamp;\n}", "answer": "protected long UntilNextMillis(long previousTimestamp)\n{\n    long currentTimestamp = TimeGen();\n    while (currentTimestamp <= previousTimestamp) {\n        currentTimestamp = TimeGen();\n    }\n    return currentTimestamp;\n}"}
{"question": "public boolean isHost()\n    {\n        return false;\n    }", "answer": "public bool IsHost()\n        {\n            return false;\n        }"}
{"question": "@Override\n            public boolean shouldOverrideUrlLoading(WebView browser, String link) {\n                browser.loadUrl(link);\n                return true;\n            }", "answer": "public override bool ShouldOverrideUrlLoading (WebView browser, string link)\n        {\n            browser.LoadUrl (link);\n            return true;\n        }"}
{"question": "private static boolean isAlphabetic(char ch) {\n    return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || (ch == '_');\n}", "answer": "private static bool isAlphabetic(char ch) {\n            return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || (ch == '_');\n        }"}
{"question": "public Object delete(Object value) {\n        throw new UnsupportedOperationException();\n    }", "answer": "public void Delete(object value)\n        {\n            throw new NotSupportedException();\n        }"}
{"question": "public boolean isAccessible()\n        {\n            return true;\n        }", "answer": "public bool IsAccessible()\n        {\n           return true;\n        }"}
{"question": "@Override\n    public IBinder onBind(Intent purpose) {\n        return null;\n    }", "answer": "public override IBinder OnBind(Intent purpose)\n        {\n            return null;\n        }"}
{"question": "@Override\n\tpublic void terminate() {\n\t\tthrow new UnsupportedOperationException();\n\t}", "answer": "public override void Terminate()\n            {\n                throw new NotImplementedException();\n            }"}
{"question": "public Comparator<? super K> comparer() {\n            return m.comparer();\n        }", "answer": "public Comparator<K> comparer()\n        {\n            return m.comparer();\n        }"}
{"question": "void displayArray(int elements[])\n     {\n         int size = elements.length;\n         for (int j=0; j<size; ++j)\n             System.out.print(elements[j] + \" \");\n         System.out.println();\n     }", "answer": "void displayArray(int []elements) \n    { \n        int size = elements.Length; \n        for (int j=0; j<size; ++j) \n            Console.Write(elements[j]+\" \"); \n        Console.WriteLine(); \n    }"}
{"question": "@Override\n    protected void attributeSet(Bean bean, String attributeName, Object updatedValue, boolean silent) {\n      metaProperty(attributeName);\n      if (silent) {\n        return;\n      }\n      throw new UnsupportedOperationException(\"Property cannot be written: \" + attributeName);\n    }", "answer": "protected override void attributeSet(Bean bean, string attributeName, object updatedValue, bool silent)\n\t\t{\n\t\t  metaProperty(attributeName);\n\t\t  if (silent)\n\t\t  {\n\t\t\treturn;\n\t\t  }\n\t\t  throw new System.NotSupportedException(\"Property cannot be written: \" + attributeName);\n\t\t}"}
{"question": "@Override\n\t\tpublic String fetchLine() {\n\t\t\treturn console.readLine();\n\t\t}", "answer": "public override string FetchLine()\n        {\n            return Console.ReadLine();\n        }"}
{"question": "public static void alert(String notification) {\n    log(Level.WARNING, notification);\n  }", "answer": "public static void Alert(string notification)\n        {\n            Log(LogLevel.Warning, notification);\n        }"}
{"question": "public void terminate() {\n\t\t\n\t\tlink.closeNow();\n\t\t\n\t}", "answer": "public void Terminate()\n        {\n            Link.Close();\n        }"}
{"question": "public static String computeHash(String input) {\n    return computeHash(input.getBytes());\n}", "answer": "static string computeHash(string input) {\n\treturn computeHash(utf8.GetBytes(input));\n}"}
{"question": "@Override\n    public Map<String, MetaProperty<?>> propertyMetaMap() {\n      return propertyMetaMap$;\n    }", "answer": "public override IDictionary<string, MetaProperty<object>> propertyMetaMap()\n\t\t{\n\t\t  return propertyMetaMap$;\n\t\t}"}
{"question": "public void insertParameter(String id, String data) {\n        params.put(id, data);\n    }", "answer": "public void InsertParameter(string id, string data)\n        {\n            params.Add(new IniParameter(id, data));\n        }"}
{"question": "@Override\n\t\tpublic boolean includesKey(Object key) {\n\t\t\treturn map.includesKey(key);\n\t\t}", "answer": "public override bool IncludesKey(Object key)\n        {\n            return map.IncludesKey(key);\n        }"}
{"question": "@Override\n\t\tpublic boolean includesValue(Object value) {\n\t\t\treturn map.includesValue(value);\n\t\t}", "answer": "public override bool includesValue(Object value)\n        {\n            return map.includesValue(value);\n        }"}
{"question": "@Override\n\t\tpublic boolean cachedFieldSourceEquals(FieldCacheSource obj) {\n    if (obj.getClass() !=  ShortFieldSource.class) {\n      return false;\n    }\n    ShortFieldSource another = (ShortFieldSource)obj;\n    return this.parser==null ? \n      another.parser==null :\n      this.parser.getClass() == another.parser.getClass();\n  }", "answer": "public override bool CachedFieldSourceEquals(FieldCacheSource obj)\n\t\t{\n\t\t\tif (obj.GetType() != typeof(ByteFieldSource))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tByteFieldSource another = (ByteFieldSource) obj;\n\t\t\treturn this.parser == null?another.parser == null:this.parser.GetType() == another.parser.GetType();\n\t\t}"}
{"question": "public int cachedFieldSourceHashValue() {\n    return analyzer==null ? \n      Byte.class.hashCode() : analyzer.getClass().hashCode();\n  }", "answer": "public int CachedFieldSourceHashValue()\n\t\t{\n\t\t\treturn analyzer == null?typeof(System.Byte).GetHashCode():analyzer.GetType().GetHashCode();\n\t\t}"}
{"question": "static void withorder(Node node) \n\t{ \n\t\tif (node != null) { \n\t\t\twithorder(node.left); \n\t\t\tSystem.out.print(node.value + \" \"); \n\t\t\twithorder(node.right); \n\t\t} \n\t}", "answer": "public void Withorder(TreeNode<T> node)\n        {\n            if (node != null)\n            {\n                Withorder(node.Left);\n                    Console.WriteLine(node.Value + \" \");\n                Withorder(node.Right);\n            }\n        }"}
{"question": "private static void duplicateFile(File originFile, File targetFile) throws IOException {\n\t\tif (!targetFile.exists()) {\n\t\t\ttargetFile.createNewFile();\n\t\t}\n\n\t\tFileChannel origin = null;\n\t\tFileChannel target = null;\n\t\ttry {\n\t\t\torigin = new FileInputStream(originFile).getChannel();\n\t\t\ttarget = new FileOutputStream(targetFile).getChannel();\n\t\t\ttarget.transferFrom(origin, 0, origin.size());\n\t\t} finally {\n\t\t\tif (origin != null) {\n\t\t\t\torigin.close();\n\t\t\t}\n\t\t\tif (target != null) {\n\t\t\t\ttarget.close();\n\t\t\t}\n\t\t}\n\t}", "answer": "public static void DuplicateFile(FilePath originFile, FilePath targetFile)\n        {\n            if (!targetFile.Exists())\n            {\n                targetFile.CreateNewFile();\n            }\n            FileChannel origin = null;\n            FileChannel target = null;\n            try\n            {\n                origin = new FileInputStream(originFile).GetChannel();\n                target = new FileOutputStream(targetFile).GetChannel();\n                target.TransferFrom(origin, 0, origin.Size());\n            }\n            finally\n            {\n                if (origin != null)\n                {\n                    origin.Close();\n                }\n                if (target != null)\n                {\n                    target.Close();\n                }\n            }\n        }"}
{"question": "public void TransitionTo(int calState)\n  {\n    if (calState >= 6 || calState < -1)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + calState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\n    else\n      rentLexState = calState;\n  }", "answer": "public void TransitionTo(int calState) {\n   if (calState >= 6 || calState < -1)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + calState + \". State unchanged.\", TokenMgrError.InvalidLexicalState);\n   else\n      rentLexState = calState;\n}"}
{"question": "public ParticleContext particle(int index) {\n\t\t\treturn getRuleContext(ParticleContext.class,index);\n\t\t}", "answer": "public ParticleContext particle(int index) {\n\t\t\treturn GetRuleContext<ParticleContext>(index);\n\t\t}"}
{"question": "@Override\n\t\t\t\t\t\tpublic void onReceivedHttpAuthRequest(WebView browser, HttpAuthHandler authHandler, String server,\n\t\t\t\t\t\t\t\tString domain) {\n\t\t\t\t\t\t\tsuper.onReceivedHttpAuthRequest(browser, authHandler, server, domain);\n\t\t\t\t\t\t}", "answer": "public override void OnReceivedHttpAuthRequest(WebView browser, HttpAuthHandler authHandler, string server, string domain)\n        {\n            base.OnReceivedHttpAuthRequest(browser, authHandler, server, domain);\n        }"}
{"question": "private String shutAlertAndObtainItsText() {\n\t\ttry {\n\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\tString alertMessage = alert.getText();\n\t\t\tif (acceptNextAlert) {\n\t\t\t\talert.accept();\n\t\t\t} else {\n\t\t\t\talert.dismiss();\n\t\t\t}\n\t\t\treturn alertMessage;\n\t\t} finally {\n\t\t\tacceptNextAlert = true;\n\t\t}\n\t}", "answer": "public string ShutAlertAndObtainItsText()\n        {\n            try\n            {\n                IAlert alert = driver.SwitchTo().Alert();\n                string alertMessage = alert.Text;\n                if (acceptNextAlert)\n                {\n                    alert.Accept();\n                }\n                else\n                {\n                    alert.Dismiss();\n                }\n                return alertMessage;\n            }\n            finally\n            {\n                acceptNextAlert = true;\n            }\n        }"}
{"question": "public final boolean isNull()\n\t{\n\t\treturn x == 0 || y == 0 || z == 0;\n\t}", "answer": "public sealed bool IsNull() {\n\t\t\treturn x == 0 || y == 0 || z == 0;\n\t\t}"}
{"question": "public Builder insertProperty(String name, String val) {\n      properties.put(name, val);\n      return this;\n    }", "answer": "public Builder InsertProperty(string name, string val)\n            {\n                _properties.Add(name, val);\n                return this;\n            }"}
{"question": "@Override\n    public boolean iskidsSelectable(int parentIndex, int kidsIndex) {\n        return true;\n    }", "answer": "public override bool IsKidsSelectable(int parentIndex, int kidsIndex)\n        {\n            return true;\n        }"}
{"question": "public static void show(Node root)\n  {\n    Node current = root;\n    while (current != null)\n    {\n      System.out.print(current.data + \" \");\n      current = current.next;\n    }\n  }", "answer": "public static void show(Node root)\n        {\n            Node current = root;\n            while (current != null)\n            {\n                Console.Write(current.data + \" \");\n                current = current.next;\n            }\n        }"}
{"question": "@Override\n            public boolean onShift(RecyclerView recyclerList, RecyclerView.ViewHolder viewContainer, RecyclerView.ViewHolder destination) {\n                return false;\n            }", "answer": "public override bool OnShift(RecyclerView recyclerList, RecyclerView.ViewHolder viewContainer, RecyclerView.ViewHolder destination)\n        {\n            return false;\n        }"}
{"question": "@Override\n    public boolean areAllElementsEnabled() {\n        return false;\n    }", "answer": "public override bool AreAllElementsEnabled()\n        {\n            return false;\n        }"}
{"question": "public static Map<String, String> divideUrlQuery(String query) {\n\t\tMap<String, String> output = new HashMap<String, String>();\n\n\t\tString[] segments = query.split(\"&\");\n\t\tif (segments != null && segments.length > 0) {\n\t\t\tfor (String segment : segments) {\n\t\t\t\tString[] parameter = segment.split(\"=\", 2);\n\t\t\t\tif (parameter != null && parameter.length == 2) {\n\t\t\t\t\toutput.put(parameter[0], parameter[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}", "answer": "public static IDictionary<string, string> DivideUrlQuery(string query)\n        {\n            IDictionary<string, string> output = new Dictionary<string, string>();\n\n            string[] segments = query.Split(new char[] { '&' });\n            if (segments != null && segments.Length > 0)\n            {\n                foreach (string segment in segments)\n                {\n                    string[] parameter = segment.Split(new char[] { '=' }, 2);\n                    if (parameter != null && parameter.Length == 2)\n                    {\n                        output.Add(parameter[0], parameter[1]);\n                    }\n                }\n            }\n\n            return output;\n        }"}
{"question": "@Override\n    public void displayLeft(StringWriter writer) {\n        writer.write(\"throw(\");\n        kids.print(writer);\n        writer.write(\")\");\n    }", "answer": "public override void DisplayLeft(TextWriter writer)\n        {\n            writer.Write(\"throw(\");\n            kids.Print(writer);\n            writer.Write(\")\");\n        }"}
{"question": "public void recordError(String message) {\n        System.err.println(message);\n    }", "answer": "public void RecordError(string message)\n        {\n            Console.Error.WriteLine(message);\n        }"}
{"question": "private void record(String message) {\n        System.out.println(message);\n    }", "answer": "public void Record(string message)\n        {\n            System.Console.WriteLine(message);\n        }"}
{"question": "@Override\n    public void displayNotification(String notification) {\n        Toast.makeText(context, notification, Toast.LENGTH_LONG).show();\n    }", "answer": "private void displayNotification(string notification)\n        {\n            Toast.MakeText(this, notification, ToastLength.Long).Show();\n        }"}
{"question": "void sob() {\n        System.out.println(\"weeping...\");\n    }", "answer": "public void Sob()\n        {\n            Console.WriteLine(\"weeping...\");\n        }"}
{"question": "public void display() {\n\t\tSystem.out.println(\"hello world!\");\n\t}", "answer": "public void Display()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }"}
{"question": "public static void loadAndStoreEncryptedODT(String dataPath) throws Exception {\n\t\t// ExStart:LoadAndSaveEncryptedODT\n\t\tDocument file = new Document(dataPath + \"encrypted.odt\", new com.aspose.words.LoadOptions(\"secret\"));\n\t\tfile.save(dataPath + \"output.odt\", new OdtSaveOptions(\"newsecret\"));\n\t\t// ExEnd:LoadAndSaveEncryptedODT\n\t\tSystem.out.println(\"\\nLoad and store encrypted document successfully.\\nFile saved at \" + dataPath);\n\t}", "answer": "public static void LoadAndStoreEncryptedODT(string dataPath)\n        {\n            // ExStart:LoadAndSaveEncryptedODT  \n            Document file = new Document(dataPath + @\"encrypted.odt\", new Aspose.Words.LoadOptions(\"secret\"));\n\n            file.Save(dataPath + \"output.odt\", new OdtSaveOptions(\"newsecret\"));\n            // ExEnd:LoadAndSaveEncryptedODT \n            Console.WriteLine(\"\\nLoad and store encrypted document successfully.\\nFile saved at \" + dataPath);\n        }"}
{"question": "public static void terminate(int statusCode)\n\t{\n\t\tSystem.exit(statusCode);\n\t}", "answer": "public static void Terminate(int statusCode)\n        {\n            Environment.Exit(statusCode);\n        }"}
{"question": "public static void validateODTfile(String directoryPath) throws Exception {\n\t\t// ExStart:VerifyODTdocument\n\t\tFileFormatInfo formatInfo = FileFormatUtil.detectFileFormat(directoryPath + \"encrypted.odt\");\n\t\tSystem.out.println(formatInfo.isEncrypted());\n\t\t// ExEnd:VerifyODTdocument\n\t}", "answer": "public static void ValidateODTfile(string directoryPath)\n        {\n            // ExStart:VerifyODTdocument  \n            FileFormatInfo formatInfo = FileFormatUtil.DetectFileFormat(directoryPath + @\"encrypted.odt\");\n            Console.WriteLine(formatInfo.IsEncrypted);\n            // ExEnd:VerifyODTdocument \n        }"}
{"question": "public String fetchLine() {\n        return scanner.nextLine();\n    }", "answer": "public string FetchLine()\n        {\n           return Console.ReadLine();\n        }"}
{"question": "@Override\n    protected void onUpdatedIntent(Intent purpose) {\n        super.onUpdatedIntent(purpose);\n        mBlaubot.onUpdatedIntent(purpose);\n    }", "answer": "protected override void OnUpdatedIntent(Intent purpose)\n\t\t{\n\t\t\tbase.OnUpdatedIntent(purpose);\n\t\t\tmBlaubot.OnUpdatedIntent(purpose);\n\t\t}"}
{"question": "public boolean predicate(RuleContext context, int ruleIdx, int predIdx) {\n\t\tswitch (ruleIdx) {\n\t\tcase 10:\n\t\t\treturn expression_predicate((ExpressionContext)context, predIdx);\n\t\t}\n\t\treturn true;\n\t}", "answer": "public override bool Predicate(RuleContext context, int ruleIdx, int predIdx) {\n\t\tswitch (ruleIdx) {\n\t\tcase 4: return expr_predicate((ExprContext)context, predIdx);\n\t\t}\n\t\treturn true;\n\t}"}
{"question": "@Override\n    public boolean onCreateOptionsMenu(Menu options) {\n        getMenuInflater().inflate(R.menu.primary, options);\n        return true;\n    }", "answer": "public override bool OnCreateOptionsMenu(Menu options)\n        {\n            GetMenuInflater().Inflate(R.Menu.primary_view, options);\n            return true;\n        }"}
{"question": "public boolean isAjaxCall(HttpServletRequest req) {\n        String hdr = req.getHeader(\"x-requested-with\");\n        return \"XMLHttpRequest\".equals(hdr);\n    }", "answer": "private bool IsAjaxCall(HttpRequest req)\n        {\n            string hdr = req.Headers[\"X-Requested-With\"];\n            return \"XMLHttpRequest\".Equals(hdr);\n        }"}
{"question": "public void didhandleMemoryAlert() {\n        super.didhandleMemoryAlert();\n    }", "answer": "public void didHandleMemoryAlert()\n        {\n            base.didHandleMemoryAlert();\n        }"}
{"question": "public int discoverLongestConsecutiveOnes(int[] nums) {\n        int outcome = 0;\n        int tally = 0;\n\n        for (int digit : nums) {\n            if (digit == 1) {\n                tally++;\n            } else {\n                outcome = Math.max(outcome, tally);\n                tally = 0;\n            }\n        }\n\n        return Math.max(outcome, tally);\n    }", "answer": "public int DiscoverLongestConsecutiveOnes(int[] nums)\n        {\n            int tally = 0, longestTally = 0;\n            foreach (var digit in nums)\n            {\n                if (digit == 0)\n                {\n                    longestTally = Math.Max(longestTally, tally);\n                    tally = 0;\n                }\n                else\n                    tally++;\n            }\n\n            return Math.Max(longestTally, tally);\n        }"}
{"question": "public static void display(int elements[], int count){\n        for(int j = 0; j < count; j++)\n            System.out.print(elements[j] + \" \");\n    }", "answer": "public static void display(int[] elements, int count)\n\t{\n\t\tfor (int j = 0; j < count; j++)\n\t\t\tConsole.Write(elements[j] + \" \");\n\t}"}
{"question": "private void appendAlignment(Node element, String alignment)\n    {\n        // force alignment value to lower case\n        appendStyleAttribute(element, \"text-align: \" + alignment.toLowerCase());\n    }", "answer": "private void AppendAlignment(Node element, string alignment)\n\t\t{\n\t\t\t/* force alignment value to lower case */\n\t\t\tAppendStyleAttribute(element, \"text-align: \" + alignment.ToLower());\n\t\t}"}
{"question": "public boolean isNull() {\n\t\treturn x == 0 && y == 0 && z == 0;\n\t}", "answer": "public bool IsNull() {\n\t\t\treturn x == 0 && y == 0 && z == 0;\n\t\t}"}
{"question": "protected Object retrieveMessage(Message msg) throws JMSException {\n\t\tMessageConverter transformer = getMessageConverter();\n\t\tif (transformer != null) {\n\t\t\treturn transformer.fromMessage(msg);\n\t\t}\n\t\treturn msg;\n\t}", "answer": "protected object RetrieveMessage(Message msg)\n        {\n            IMessageConverter transformer = getMessageConverter;\n            if (transformer != null)\n            {\n                return transformer.FromMessage(msg);\n            }\n            return msg;\n        }"}
{"question": "public void eliminate() {\n                    throw new IllegalStateException();\n                }", "answer": "public void eliminate()\n            {\n                throw new InvalidOperationException();\n            }"}
{"question": "@Override\n\tprotected void ready() {\n\t\tProcessInfoParameter[] param = getParameter();\n\t\tfor (int j = 0; j < param.length; j++) {\n\t\t\tString title = param[j].getParameterName();\n\t\t\tif (param[j].getParameter() == null)\n\t\t\t\t;\n\t\t\telse\n\t\t\t\tlog.log(Level.SEVERE, \"Unrecognized Parameter: \" + title);\n\t\t}\n\t\tHC_JobDataModify_ID = getRecord_ID();\n\t}", "answer": "protected override void Ready()\n        {\n            ProcessInfoParameter[] param = GetParameter();\n            for (int j = 0; j < param.Length; j++)\n            {\n                String title = param[j].GetParameterName();\n                if (param[j].GetParameter() == null)\n                {\n                    ;\n                }\n                \n                else\n                {\n                    log.Log(Level.SEVERE, \"Unrecognized Parameter: \" + title);\n                }\n            }\n            _C_RfQ_ID = GetRecord_ID();\n        }"}
{"question": "public String greetPlanet() throws Exception {\n        return \"Hello world !\";\n    }", "answer": "public string GreetPlanet()\n        {\n            return \"Hello World!\";\n        }"}
{"question": "public void verify() {\n        if (productCode() != null) {\n            productCode().verify();\n        }\n    }", "answer": "public void Verify()\n        {\n            if (ProductCode != null)\n            {\n                ProductCode.Verify();\n            }\n        }"}
{"question": "public String depiction() {\n    return \"brief(\" + super.depiction() + ')';\n}", "answer": "public String Depiction()\n\t\t{\n\t\t\treturn \"brief(\" + base.Depiction() + ')';\n\t\t}"}
{"question": "private static boolean isMediaFile(Uri url){\n        return \"com.android.provides.media.documents\".equals(url.getAuthority());\n     }", "answer": "private static bool IsMediaFile(Uri url)\n        {\n            return \"com.android.providers.media.documents\".Equals(url.Authority);\n        }"}
{"question": "public static void verifyTrue(boolean condition) {\n\t\tverifyTrue(condition, \"[Assertion failed] - this expression must be true!\");\n\t}", "answer": "public static void VerifyTrue(bool condition)\n        {\n            VerifyTrue(condition, \"[Assertion failed] - this expression must be true\");\n        }"}
{"question": "@Override\n        public void clear() {\n            throw new UnsupportedOperationException(\"Clear not supported.\");\n        }", "answer": "public override void Clear()\n        {\n            throw new NotSupportedException(\"Clear not supported.\");\n        }"}
{"question": "private boolean isComponentPresent(By locator) {\n\t\ttry {\n\t\t\tdriver.findElement(locator);\n\t\t\treturn true;\n\t\t} catch (NoSuchElementException e) {\n\t\t\treturn false;\n\t\t}\n\t}", "answer": "public bool IsComponentPresent(By locator)\n        {\n            try\n            {\n                driver.FindElement(locator);\n                return true;\n            }\n            catch (NoSuchElementException)\n            {\n                return false;\n            }\n        }"}
{"question": "public Object substitute(Object initial, Object destination, Object possessor) throws HibernateException {\n\t\treturn initial;\n\t}", "answer": "public object Substitute(object initial, object destination, object possessor)\n        {\n            return initial;\n        }"}
{"question": "public StatementContext statement(int j) {\n\t\t\treturn getRuleContext(StatementContext.class,j);\n\t\t}", "answer": "public StatementContext statement(int j) {\n\t\t\treturn GetRuleContext<StatementContext>(j);\n\t\t}"}
{"question": "public PropertyContext property(int index) {\n\t\t\treturn getRuleContext(PropertyContext.class,index);\n\t\t}", "answer": "public PropertyContext property(int index) {\n\t\t\treturn GetRuleContext<PropertyContext>(index);\n\t\t}"}
{"question": "public StatementContext declaration(int idx) {\n\t\t\treturn getRuleContext(StatementContext.class,idx);\n\t\t}", "answer": "public StatementContext declaration(int idx) {\n\t\t\treturn GetRuleContext<StatementContext>(idx);\n\t\t}"}
{"question": "public ExpressionContext statement(int j) {\n\t\t\treturn getRuleContext(ExpressionContext.class,j);\n\t\t}", "answer": "public ExpressionContext statement(int j) {\n\t\t\treturn GetRuleContext<ExpressionContext>(j);\n\t\t}"}
{"question": "public void display() {\n\t\tSystem.out.print(toString());\n\t}", "answer": "public void Display()\n        {\n            Console.WriteLine(ToString());\n        }"}
{"question": "@Override\n            protected LayoutRegion modifyActiveRegion(LayoutResult overflowOutput) {\n                return null;\n            }", "answer": "protected override LayoutRegion ModifyActiveRegion(LayoutResult overflowOutput) {\n                return null;\n            }"}
{"question": "@Override\n    public boolean isDurable() {\n        return true;\n    }", "answer": "public override bool IsDurable() {\n            return true;\n        }"}
{"question": "private static void prohibitOverridingPrimitiveTypes(Map<String, ReadHandler<?,?>> handlers) {\n        if (handlers != null) {\n            String primitiveTypeTags[] = {\"_\", \"s\", \"?\", \"i\", \"d\", \"b\", \"'\", \"map\", \"array\"};\n            for (String tag : primitiveTypeTags) {\n                if (handlers.containsKey(tag)) {\n                    throw new IllegalArgumentException(\"Cannot override decoding for transit ground type, tag \" + tag);\n                }\n            }\n        }\n    }", "answer": "private static void ProhibitOverridingPrimitiveTypes(Dictionary<string, IReadHandler> handlers)\n        {\n            if (handlers != null)\n            {\n                string[] primitiveTypeTags = { \"_\", \"s\", \"?\", \"i\", \"d\", \"b\", \"'\", \"map\", \"array\" };\n                foreach (string tag in primitiveTypeTags)\n                {\n                    if (handlers.ContainsKey(tag))\n                    {\n                        throw new TransitException(\"Cannot override decoding for transit ground type, tag \" + tag);\n                    }\n                }\n            }\n        }"}
{"question": "public void greetUser() {\n\t\tSystem.out.println(\"Hello\");\n\t}", "answer": "public void GreetUser()\n        {\n            Console.WriteLine(\"Hello\");\n        }"}
{"question": "@Override\n    public void onAttach(Activity context) {\n        super.onAttach(context);\n\n        mContext = context;\n    }", "answer": "public override void OnAttach(Activity context)\n        {\n            base.OnAttach(context);\n\n            mContext = context;\n        }"}
{"question": "@Override\n    public boolean onRelease(Intent purpose) {\n        return super.onRelease(purpose);\n    }", "answer": "public override bool OnRelease(Intent purpose)\n        {\n            return base.OnRelease(purpose);\n        }"}
{"question": "public static Map<String, String> parseUrlParameters(String query) {\n\t\tMap<String, String> output = new HashMap<String, String>();\n\n\t\tString[] segments = query.split(\"&\");\n\t\tif (segments != null && segments.length > 0) {\n\t\t\tfor (String segment : segments) {\n\t\t\t\tString[] keyValue = segment.split(\"=\", 2);\n\t\t\t\tif (keyValue != null && keyValue.length == 2) {\n\t\t\t\t\toutput.put(keyValue[0], keyValue[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}", "answer": "public static IDictionary<string, string> ParseUrlParameters(string query)\n        {\n            IDictionary<string, string> output = new Dictionary<string, string>();\n\n            string[] segments = query.Split(new char[] { '&' });\n            if (segments != null && segments.Length > 0)\n            {\n                foreach (string segment in segments)\n                {\n                    string[] keyValue = segment.Split(new char[] { '=' }, 2);\n                    if (keyValue != null && keyValue.Length == 2)\n                    {\n                        output.Add(keyValue[0], keyValue[1]);\n                    }\n                }\n            }\n\n            return output;\n        }"}
{"question": "public boolean isOrigin() {\n\t\treturn (ancestor() == null);\n\t}", "answer": "public bool IsOrigin()\n        {\n            return (Ancestor == null);\n        }"}
{"question": "@Override\n        public void onSubscribe(Disposable d) {\n            DisposableHelper.assignOnce(upstream, d);\n        }", "answer": "public override void OnSubscribe(IDisposable d)\n            {\n                DisposableHelper.AssignOnce(ref upstream, d);\n            }"}
