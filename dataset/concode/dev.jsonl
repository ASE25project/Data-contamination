{"code": "Map < String , ByteBuffer > function ( ) { if ( requestCallMeta == null ) { requestCallMeta = new HashMap < String , ByteBuffer > ( ) ; } return requestCallMeta ; }", "nl": "this is an access method for the per-call state provided by the client to the server . concode_field_sep Map<String,ByteBuffer> requestCallMeta concode_elem_sep Map<String,ByteBuffer> responseCallMeta concode_elem_sep Object response concode_elem_sep List<ByteBuffer> requestPayload concode_elem_sep List<ByteBuffer> responsePayload concode_elem_sep HandshakeRequest handshakeRequest concode_elem_sep HandshakeResponse handshakeResponse concode_elem_sep Exception error concode_elem_sep Message message concode_field_sep void setResponseCallMeta concode_elem_sep List<ByteBuffer> getRequestPayload concode_elem_sep void setRequestHandshakeMeta concode_elem_sep Map<String,ByteBuffer> requestHandshakeMeta concode_elem_sep void setRequestPayload concode_elem_sep void setResponsePayload concode_elem_sep Message getMessage concode_elem_sep void setResponse concode_elem_sep void setResponseHandshakeMeta concode_elem_sep void setRequestCallMeta concode_elem_sep Exception error concode_elem_sep void setMessage concode_elem_sep void setHandshakeRequest concode_elem_sep Map<String,ByteBuffer> responseHandshakeMeta concode_elem_sep boolean isError concode_elem_sep Map<String,ByteBuffer> responseCallMeta concode_elem_sep HandshakeRequest getHandshakeRequest concode_elem_sep Object response concode_elem_sep void setError concode_elem_sep void setHandshakeResponse concode_elem_sep HandshakeResponse getHandshakeResponse concode_elem_sep List<ByteBuffer> getResponsePayload", "code_tokens": ["Map", "<", "String", ",", "ByteBuffer", ">", "function", "(", ")", "{", "if", "(", "requestCallMeta", "==", "null", ")", "{", "requestCallMeta", "=", "new", "HashMap", "<", "String", ",", "ByteBuffer", ">", "(", ")", ";", "}", "return", "requestCallMeta", ";", "}"], "nl_tokens": ["this", "is", "an", "access", "method", "for", "the", "per", "-", "call", "state", "provided", "by", "the", "client", "to", "the", "server", ".", "concode_field_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "requestCallMeta", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseCallMeta", "concode_elem_sep", "Object", "response", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "requestPayload", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "responsePayload", "concode_elem_sep", "HandshakeRequest", "handshakeRequest", "concode_elem_sep", "HandshakeResponse", "handshakeResponse", "concode_elem_sep", "Exception", "error", "concode_elem_sep", "Message", "message", "concode_field_sep", "void", "setResponseCallMeta", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "getRequestPayload", "concode_elem_sep", "void", "setRequestHandshakeMeta", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "requestHandshakeMeta", "concode_elem_sep", "void", "setRequestPayload", "concode_elem_sep", "void", "setResponsePayload", "concode_elem_sep", "Message", "getMessage", "concode_elem_sep", "void", "setResponse", "concode_elem_sep", "void", "setResponseHandshakeMeta", "concode_elem_sep", "void", "setRequestCallMeta", "concode_elem_sep", "Exception", "error", "concode_elem_sep", "void", "setMessage", "concode_elem_sep", "void", "setHandshakeRequest", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseHandshakeMeta", "concode_elem_sep", "boolean", "isError", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseCallMeta", "concode_elem_sep", "HandshakeRequest", "getHandshakeRequest", "concode_elem_sep", "Object", "response", "concode_elem_sep", "void", "setError", "concode_elem_sep", "void", "setHandshakeResponse", "concode_elem_sep", "HandshakeResponse", "getHandshakeResponse", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "getResponsePayload"]}
{"code": "Integer function ( String arg0 , ResultSet arg1 ) { final Integer loc0 = columnNameToIndexCache . get ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } else { final Integer loc1 = Integer . valueOf ( arg1 . findColumn ( arg0 ) ) ; columnNameToIndexCache . put ( arg0 , loc1 ) ; return loc1 ; } }", "nl": "resolve the column name/alias to its index concode_field_sep ConcurrentHashMap<String,Integer> columnNameToIndexCache concode_elem_sep float LOAD_FACTOR concode_field_sep placeholderType placeHolder", "code_tokens": ["Integer", "function", "(", "String", "arg0", ",", "ResultSet", "arg1", ")", "{", "final", "Integer", "loc0", "=", "columnNameToIndexCache", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "else", "{", "final", "Integer", "loc1", "=", "Integer", ".", "valueOf", "(", "arg1", ".", "findColumn", "(", "arg0", ")", ")", ";", "columnNameToIndexCache", ".", "put", "(", "arg0", ",", "loc1", ")", ";", "return", "loc1", ";", "}", "}"], "nl_tokens": ["resolve", "the", "column", "name", "/", "alias", "to", "its", "index", "concode_field_sep", "ConcurrentHashMap", "<", "String", ",", "Integer", ">", "columnNameToIndexCache", "concode_elem_sep", "float", "LOAD_FACTOR", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "void function ( int arg0 ) { nodes = new Vertex [ arg0 ] ; Vertex loc0 = null ; for ( int loc1 = arg0 - 1 ; loc1 >= 0 ; loc1 -- ) { Vertex loc2 = nodes [ loc1 ] = new Vertex ( loc0 , arg0 ) ; loc0 = loc2 ; } addEdges ( arg0 ) ; }", "nl": "create a graph . this is just another method for creating the graph data structure . concode_field_sep Vertex[] nodes concode_elem_sep int CONST_m1 concode_elem_sep int CONST_b concode_elem_sep int RANGE concode_field_sep int random concode_elem_sep int mult concode_elem_sep void addEdges concode_elem_sep int computeDist concode_elem_sep Vertex firstNode", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "nodes", "=", "new", "Vertex", "[", "arg0", "]", ";", "Vertex", "loc0", "=", "null", ";", "for", "(", "int", "loc1", "=", "arg0", "-", "1", ";", "loc1", ">=", "0", ";", "loc1", "-", "-", ")", "{", "Vertex", "loc2", "=", "nodes", "[", "loc1", "]", "=", "new", "Vertex", "(", "loc0", ",", "arg0", ")", ";", "loc0", "=", "loc2", ";", "}", "addEdges", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "a", "graph", ".", "this", "is", "just", "another", "method", "for", "creating", "the", "graph", "data", "structure", ".", "concode_field_sep", "Vertex", "[", "]", "nodes", "concode_elem_sep", "int", "CONST_m1", "concode_elem_sep", "int", "CONST_b", "concode_elem_sep", "int", "RANGE", "concode_field_sep", "int", "random", "concode_elem_sep", "int", "mult", "concode_elem_sep", "void", "addEdges", "concode_elem_sep", "int", "computeDist", "concode_elem_sep", "Vertex", "firstNode"]}
{"code": "void function ( GridBagConstraints arg0 ) { this . constraints = arg0 ; }", "nl": "sets the constraints . concode_field_sep Component component concode_elem_sep GridBagConstraints constraints concode_field_sep GridBagConstraints getConstraints concode_elem_sep Component getComponent concode_elem_sep void setComponent", "code_tokens": ["void", "function", "(", "GridBagConstraints", "arg0", ")", "{", "this", ".", "constraints", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "constraints", ".", "concode_field_sep", "Component", "component", "concode_elem_sep", "GridBagConstraints", "constraints", "concode_field_sep", "GridBagConstraints", "getConstraints", "concode_elem_sep", "Component", "getComponent", "concode_elem_sep", "void", "setComponent"]}
{"code": "Query function ( Integer arg0 ) { return entityManager . createQuery ( \"srini_string\" ) . setParameter ( \"srini_string\" , arg0 ) ; }", "nl": "maybe return directly context concode_field_sep EntityManager entityManager concode_elem_sep SecurityScreenDomainService securityService concode_elem_sep Logger log concode_elem_sep ContextDomainService contextDomainService concode_elem_sep CommonDomainService commonService concode_elem_sep ResourceTypeProvider resourceTypeProvider concode_field_sep ContextEntity getContextByName concode_elem_sep void saveEnvironment concode_elem_sep String deleteContext concode_elem_sep ContextEntity getContextWithType concode_elem_sep ContextEntity createContextByName", "code_tokens": ["Query", "function", "(", "Integer", "arg0", ")", "{", "return", "entityManager", ".", "createQuery", "(", "\"srini_string\"", ")", ".", "setParameter", "(", "\"srini_string\"", ",", "arg0", ")", ";", "}"], "nl_tokens": ["maybe", "return", "directly", "context", "concode_field_sep", "EntityManager", "entityManager", "concode_elem_sep", "SecurityScreenDomainService", "securityService", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "ContextDomainService", "contextDomainService", "concode_elem_sep", "CommonDomainService", "commonService", "concode_elem_sep", "ResourceTypeProvider", "resourceTypeProvider", "concode_field_sep", "ContextEntity", "getContextByName", "concode_elem_sep", "void", "saveEnvironment", "concode_elem_sep", "String", "deleteContext", "concode_elem_sep", "ContextEntity", "getContextWithType", "concode_elem_sep", "ContextEntity", "createContextByName"]}
{"code": "JSObject function ( String arg0 ) { Object loc0 = engine . executeScript ( arg0 ) ; if ( loc0 instanceof JSObject ) { return ( JSObject ) loc0 ; } return null ; }", "nl": "execute the specified command returning a value if any concode_field_sep IJavascriptRuntime runtime concode_elem_sep IWebEngine engine concode_field_sep String getArrayFunction concode_elem_sep String getFunction concode_elem_sep String getFunction concode_elem_sep void setDefaultWebEngine concode_elem_sep String getArrayConstructor concode_elem_sep IJavascriptRuntime getInstance concode_elem_sep String getArgString concode_elem_sep String getConstructor", "code_tokens": ["JSObject", "function", "(", "String", "arg0", ")", "{", "Object", "loc0", "=", "engine", ".", "executeScript", "(", "arg0", ")", ";", "if", "(", "loc0", "instanceof", "JSObject", ")", "{", "return", "(", "JSObject", ")", "loc0", ";", "}", "return", "null", ";", "}"], "nl_tokens": ["execute", "the", "specified", "command", "returning", "a", "value", "if", "any", "concode_field_sep", "IJavascriptRuntime", "runtime", "concode_elem_sep", "IWebEngine", "engine", "concode_field_sep", "String", "getArrayFunction", "concode_elem_sep", "String", "getFunction", "concode_elem_sep", "String", "getFunction", "concode_elem_sep", "void", "setDefaultWebEngine", "concode_elem_sep", "String", "getArrayConstructor", "concode_elem_sep", "IJavascriptRuntime", "getInstance", "concode_elem_sep", "String", "getArgString", "concode_elem_sep", "String", "getConstructor"]}
{"code": "Color function ( final Graphics arg0 ) { Color loc0 = null ; if ( this . m_color != null ) { final Color loc1 = arg0 . getColor ( ) ; if ( ! loc1 . equals ( this . m_color ) ) { loc0 = loc1 ; arg0 . setColor ( this . m_color ) ; } } return loc0 ; }", "nl": "sets the color to the graphics context if it is different and returns the previous one of the graphics context or null if there was no change . concode_field_sep int m_red concode_elem_sep int m_blue concode_elem_sep int m_green concode_elem_sep int m_alpha concode_elem_sep Color m_color concode_field_sep Color applyColorUnconditionally concode_elem_sep Color getColor concode_elem_sep int setAlpha concode_elem_sep int getBlue concode_elem_sep int setGreen concode_elem_sep int setRed concode_elem_sep int getAlpha concode_elem_sep int getGreen concode_elem_sep int getRed concode_elem_sep Color setColor concode_elem_sep int setBlue concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep void assertColorValue", "code_tokens": ["Color", "function", "(", "final", "Graphics", "arg0", ")", "{", "Color", "loc0", "=", "null", ";", "if", "(", "this", ".", "m_color", "!=", "null", ")", "{", "final", "Color", "loc1", "=", "arg0", ".", "getColor", "(", ")", ";", "if", "(", "!", "loc1", ".", "equals", "(", "this", ".", "m_color", ")", ")", "{", "loc0", "=", "loc1", ";", "arg0", ".", "setColor", "(", "this", ".", "m_color", ")", ";", "}", "}", "return", "loc0", ";", "}"], "nl_tokens": ["sets", "the", "color", "to", "the", "graphics", "context", "if", "it", "is", "different", "and", "returns", "the", "previous", "one", "of", "the", "graphics", "context", "or", "null", "if", "there", "was", "no", "change", ".", "concode_field_sep", "int", "m_red", "concode_elem_sep", "int", "m_blue", "concode_elem_sep", "int", "m_green", "concode_elem_sep", "int", "m_alpha", "concode_elem_sep", "Color", "m_color", "concode_field_sep", "Color", "applyColorUnconditionally", "concode_elem_sep", "Color", "getColor", "concode_elem_sep", "int", "setAlpha", "concode_elem_sep", "int", "getBlue", "concode_elem_sep", "int", "setGreen", "concode_elem_sep", "int", "setRed", "concode_elem_sep", "int", "getAlpha", "concode_elem_sep", "int", "getGreen", "concode_elem_sep", "int", "getRed", "concode_elem_sep", "Color", "setColor", "concode_elem_sep", "int", "setBlue", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "assertColorValue"]}
{"code": "int function ( ) { return end ; }", "nl": "returns the end index . concode_field_sep int start concode_elem_sep int end concode_elem_sep char[] buffer concode_field_sep int getStart concode_elem_sep char[] getBuffer concode_elem_sep void setStart concode_elem_sep void adjust concode_elem_sep boolean hasMore concode_elem_sep int getLength concode_elem_sep void setEnd", "code_tokens": ["int", "function", "(", ")", "{", "return", "end", ";", "}"], "nl_tokens": ["returns", "the", "end", "index", ".", "concode_field_sep", "int", "start", "concode_elem_sep", "int", "end", "concode_elem_sep", "char", "[", "]", "buffer", "concode_field_sep", "int", "getStart", "concode_elem_sep", "char", "[", "]", "getBuffer", "concode_elem_sep", "void", "setStart", "concode_elem_sep", "void", "adjust", "concode_elem_sep", "boolean", "hasMore", "concode_elem_sep", "int", "getLength", "concode_elem_sep", "void", "setEnd"]}
{"code": "Grid function ( ) { return solutionGrid ; }", "nl": "return solutiongrid concode_field_sep int difficulty concode_elem_sep Grid playerGrid concode_elem_sep Grid initialGrid concode_elem_sep Grid solutionGrid concode_field_sep Grid getInitialGrid concode_elem_sep Set<Cell> getIncorrect concode_elem_sep void setInitialGrid concode_elem_sep int getSize concode_elem_sep boolean hasWon concode_elem_sep Object deepClone concode_elem_sep void reset concode_elem_sep Grid getPlayerGrid concode_elem_sep int getDifficulty concode_elem_sep void setDifficulty", "code_tokens": ["Grid", "function", "(", ")", "{", "return", "solutionGrid", ";", "}"], "nl_tokens": ["return", "solutiongrid", "concode_field_sep", "int", "difficulty", "concode_elem_sep", "Grid", "playerGrid", "concode_elem_sep", "Grid", "initialGrid", "concode_elem_sep", "Grid", "solutionGrid", "concode_field_sep", "Grid", "getInitialGrid", "concode_elem_sep", "Set", "<", "Cell", ">", "getIncorrect", "concode_elem_sep", "void", "setInitialGrid", "concode_elem_sep", "int", "getSize", "concode_elem_sep", "boolean", "hasWon", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "void", "reset", "concode_elem_sep", "Grid", "getPlayerGrid", "concode_elem_sep", "int", "getDifficulty", "concode_elem_sep", "void", "setDifficulty"]}
{"code": "Collection function ( ) { return tracker . getRootWindows ( ) ; }", "nl": "return all root components in the current awt hierarchy . concode_field_sep Collection EMPTY concode_elem_sep WindowTracker tracker concode_elem_sep Hierarchy defaultHierarchy concode_field_sep boolean contains concode_elem_sep Container getParent concode_elem_sep Collection getComponents concode_elem_sep Collection findInternalFramesFromIcons concode_elem_sep Hierarchy getDefault concode_elem_sep void dispose concode_elem_sep void setDefault", "code_tokens": ["Collection", "function", "(", ")", "{", "return", "tracker", ".", "getRootWindows", "(", ")", ";", "}"], "nl_tokens": ["return", "all", "root", "components", "in", "the", "current", "awt", "hierarchy", ".", "concode_field_sep", "Collection", "EMPTY", "concode_elem_sep", "WindowTracker", "tracker", "concode_elem_sep", "Hierarchy", "defaultHierarchy", "concode_field_sep", "boolean", "contains", "concode_elem_sep", "Container", "getParent", "concode_elem_sep", "Collection", "getComponents", "concode_elem_sep", "Collection", "findInternalFramesFromIcons", "concode_elem_sep", "Hierarchy", "getDefault", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "void", "setDefault"]}
{"code": "IUICondition function ( boolean arg0 ) { return new IsEnabledCondition ( this , arg0 ) ; }", "nl": "create a condition that tests if the given widget is enabled . concode_field_sep Widget widget concode_field_sep Object getWidget concode_elem_sep IWidgetLocator[] findAll concode_elem_sep boolean matches", "code_tokens": ["IUICondition", "function", "(", "boolean", "arg0", ")", "{", "return", "new", "IsEnabledCondition", "(", "this", ",", "arg0", ")", ";", "}"], "nl_tokens": ["create", "a", "condition", "that", "tests", "if", "the", "given", "widget", "is", "enabled", ".", "concode_field_sep", "Widget", "widget", "concode_field_sep", "Object", "getWidget", "concode_elem_sep", "IWidgetLocator", "[", "]", "findAll", "concode_elem_sep", "boolean", "matches"]}
{"code": "Object function ( Object arg0 ) { return null ; }", "nl": "children should override this . the default implementation returns null . concode_field_sep IPropertyDescriptor[] EMPTY_ARRAY concode_elem_sep PropertyChangeSupport pcsDelegate concode_elem_sep long serialVersionUID concode_field_sep void firePropertyChange concode_elem_sep void setPropertyValue concode_elem_sep Object getEditableValue concode_elem_sep IPropertyDescriptor[] getPropertyDescriptors concode_elem_sep void resetPropertyValue concode_elem_sep void addPropertyChangeListener concode_elem_sep boolean isPropertySet concode_elem_sep void removePropertyChangeListener concode_elem_sep void readObject", "code_tokens": ["Object", "function", "(", "Object", "arg0", ")", "{", "return", "null", ";", "}"], "nl_tokens": ["children", "should", "override", "this", ".", "the", "default", "implementation", "returns", "null", ".", "concode_field_sep", "IPropertyDescriptor", "[", "]", "EMPTY_ARRAY", "concode_elem_sep", "PropertyChangeSupport", "pcsDelegate", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "void", "firePropertyChange", "concode_elem_sep", "void", "setPropertyValue", "concode_elem_sep", "Object", "getEditableValue", "concode_elem_sep", "IPropertyDescriptor", "[", "]", "getPropertyDescriptors", "concode_elem_sep", "void", "resetPropertyValue", "concode_elem_sep", "void", "addPropertyChangeListener", "concode_elem_sep", "boolean", "isPropertySet", "concode_elem_sep", "void", "removePropertyChangeListener", "concode_elem_sep", "void", "readObject"]}
{"code": "void function ( ) { list . clear ( ) ; }", "nl": "empties the contents of the stack . concode_field_sep ArrayLongList list concode_field_sep long pop concode_elem_sep int search concode_elem_sep int size concode_elem_sep long get concode_elem_sep long push concode_elem_sep boolean empty concode_elem_sep long peek concode_elem_sep long peek", "code_tokens": ["void", "function", "(", ")", "{", "list", ".", "clear", "(", ")", ";", "}"], "nl_tokens": ["empties", "the", "contents", "of", "the", "stack", ".", "concode_field_sep", "ArrayLongList", "list", "concode_field_sep", "long", "pop", "concode_elem_sep", "int", "search", "concode_elem_sep", "int", "size", "concode_elem_sep", "long", "get", "concode_elem_sep", "long", "push", "concode_elem_sep", "boolean", "empty", "concode_elem_sep", "long", "peek", "concode_elem_sep", "long", "peek"]}
{"code": "Byte function ( @ NonNull Cursor arg0 , int arg1 ) { if ( arg0 . isNull ( arg1 ) ) { return null ; } return ( byte ) arg0 . getInt ( arg1 ) ; }", "nl": "gets byte value form cursor for column index . concode_field_sep PlaceHolder placeHolder concode_field_sep Long getLong concode_elem_sep Character getChar concode_elem_sep Integer getInt concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep void bind concode_elem_sep Short getShort concode_elem_sep byte[] getByteArray concode_elem_sep Double getDouble concode_elem_sep Boolean getBoolean concode_elem_sep Date getDate concode_elem_sep Date getDate concode_elem_sep Float getFloat concode_elem_sep String getString", "code_tokens": ["Byte", "function", "(", "@", "NonNull", "Cursor", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "arg0", ".", "isNull", "(", "arg1", ")", ")", "{", "return", "null", ";", "}", "return", "(", "byte", ")", "arg0", ".", "getInt", "(", "arg1", ")", ";", "}"], "nl_tokens": ["gets", "byte", "value", "form", "cursor", "for", "column", "index", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Long", "getLong", "concode_elem_sep", "Character", "getChar", "concode_elem_sep", "Integer", "getInt", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "void", "bind", "concode_elem_sep", "Short", "getShort", "concode_elem_sep", "byte", "[", "]", "getByteArray", "concode_elem_sep", "Double", "getDouble", "concode_elem_sep", "Boolean", "getBoolean", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "Float", "getFloat", "concode_elem_sep", "String", "getString"]}
{"code": "int function ( ) { return _list . size ( ) ; }", "nl": "returns the current depth of the stack . concode_field_sep TLongArrayList _list concode_elem_sep int DEFAULT_CAPACITY concode_field_sep long pop concode_elem_sep long[] toNativeArray concode_elem_sep void toNativeArray concode_elem_sep void clear concode_elem_sep void reset concode_elem_sep void push concode_elem_sep long peek", "code_tokens": ["int", "function", "(", ")", "{", "return", "_list", ".", "size", "(", ")", ";", "}"], "nl_tokens": ["returns", "the", "current", "depth", "of", "the", "stack", ".", "concode_field_sep", "TLongArrayList", "_list", "concode_elem_sep", "int", "DEFAULT_CAPACITY", "concode_field_sep", "long", "pop", "concode_elem_sep", "long", "[", "]", "toNativeArray", "concode_elem_sep", "void", "toNativeArray", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "reset", "concode_elem_sep", "void", "push", "concode_elem_sep", "long", "peek"]}
{"code": "char function ( int arg0 ) { return ( char ) ( arg0 + 'A' ) ; }", "nl": "convert integer to character concode_field_sep Cell[][] cells concode_elem_sep int width concode_elem_sep long serialVersionUID concode_elem_sep int height concode_field_sep Iterator<Cell> iterator concode_elem_sep int ctoi concode_elem_sep boolean equals concode_elem_sep Cell getCellAtLocation", "code_tokens": ["char", "function", "(", "int", "arg0", ")", "{", "return", "(", "char", ")", "(", "arg0", "+", "'A'", ")", ";", "}"], "nl_tokens": ["convert", "integer", "to", "character", "concode_field_sep", "Cell", "[", "]", "[", "]", "cells", "concode_elem_sep", "int", "width", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "int", "height", "concode_field_sep", "Iterator", "<", "Cell", ">", "iterator", "concode_elem_sep", "int", "ctoi", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Cell", "getCellAtLocation"]}
{"code": "void function ( String arg0 ) { this . catalogName = arg0 ; }", "nl": "set the name of the catalog to be searched , ornull to search the default catalog . concode_field_sep String name concode_elem_sep String catalogName concode_elem_sep boolean optional concode_elem_sep String nameKey concode_field_sep void setName concode_elem_sep String getNameKey concode_elem_sep String getName concode_elem_sep void setNameKey concode_elem_sep String getCatalogName concode_elem_sep boolean postprocess concode_elem_sep Command getCommand concode_elem_sep boolean isOptional concode_elem_sep boolean execute concode_elem_sep void setOptional", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "catalogName", "=", "arg0", ";", "}"], "nl_tokens": ["set", "the", "name", "of", "the", "catalog", "to", "be", "searched", ",", "ornull", "to", "search", "the", "default", "catalog", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "String", "catalogName", "concode_elem_sep", "boolean", "optional", "concode_elem_sep", "String", "nameKey", "concode_field_sep", "void", "setName", "concode_elem_sep", "String", "getNameKey", "concode_elem_sep", "String", "getName", "concode_elem_sep", "void", "setNameKey", "concode_elem_sep", "String", "getCatalogName", "concode_elem_sep", "boolean", "postprocess", "concode_elem_sep", "Command", "getCommand", "concode_elem_sep", "boolean", "isOptional", "concode_elem_sep", "boolean", "execute", "concode_elem_sep", "void", "setOptional"]}
{"code": "long function ( ) { return java . lang . System . currentTimeMillis ( ) ; }", "nl": "clock . returns the current cpu clock reading in milliseconds . intervalls are system dependent . concode_field_sep LIST<?> SIL concode_elem_sep Iterator<C> iter concode_elem_sep LinkedList<C> list concode_field_sep void SFIRST concode_elem_sep LIST<C> LIST1 concode_elem_sep LIST<C> RED3 concode_elem_sep LIST<C> LIST3 concode_elem_sep LIST<C> RED4 concode_elem_sep LIST<C> LIST2 concode_elem_sep C THIRD concode_elem_sep LIST<C> LIST5 concode_elem_sep int LENGTH concode_elem_sep LIST<C> RED2 concode_elem_sep LIST<C> LIST4 concode_elem_sep LIST<C> COMP concode_elem_sep LIST<C> INV concode_elem_sep LIST<C> COMP3 concode_elem_sep LIST<C> COMP3 concode_elem_sep int ORDER concode_elem_sep LIST<C> COMP2 concode_elem_sep int EXTENT concode_elem_sep void SRED concode_elem_sep C LELT concode_elem_sep boolean EQUAL concode_elem_sep LIST<C> LIST10 concode_elem_sep boolean isEmpty concode_elem_sep LIST<C> CCONC concode_elem_sep C FIRST concode_elem_sep LIST<C> REDUCT concode_elem_sep C FOURTH concode_elem_sep LIST<C> RED concode_elem_sep LIST<C> CINV concode_elem_sep boolean isNull concode_elem_sep String toString concode_elem_sep C SECOND concode_elem_sep LIST<C> CONC", "code_tokens": ["long", "function", "(", ")", "{", "return", "java", ".", "lang", ".", "System", ".", "currentTimeMillis", "(", ")", ";", "}"], "nl_tokens": ["clock", ".", "returns", "the", "current", "cpu", "clock", "reading", "in", "milliseconds", ".", "intervalls", "are", "system", "dependent", ".", "concode_field_sep", "LIST", "<", "?", ">", "SIL", "concode_elem_sep", "Iterator", "<", "C", ">", "iter", "concode_elem_sep", "LinkedList", "<", "C", ">", "list", "concode_field_sep", "void", "SFIRST", "concode_elem_sep", "LIST", "<", "C", ">", "LIST1", "concode_elem_sep", "LIST", "<", "C", ">", "RED3", "concode_elem_sep", "LIST", "<", "C", ">", "LIST3", "concode_elem_sep", "LIST", "<", "C", ">", "RED4", "concode_elem_sep", "LIST", "<", "C", ">", "LIST2", "concode_elem_sep", "C", "THIRD", "concode_elem_sep", "LIST", "<", "C", ">", "LIST5", "concode_elem_sep", "int", "LENGTH", "concode_elem_sep", "LIST", "<", "C", ">", "RED2", "concode_elem_sep", "LIST", "<", "C", ">", "LIST4", "concode_elem_sep", "LIST", "<", "C", ">", "COMP", "concode_elem_sep", "LIST", "<", "C", ">", "INV", "concode_elem_sep", "LIST", "<", "C", ">", "COMP3", "concode_elem_sep", "LIST", "<", "C", ">", "COMP3", "concode_elem_sep", "int", "ORDER", "concode_elem_sep", "LIST", "<", "C", ">", "COMP2", "concode_elem_sep", "int", "EXTENT", "concode_elem_sep", "void", "SRED", "concode_elem_sep", "C", "LELT", "concode_elem_sep", "boolean", "EQUAL", "concode_elem_sep", "LIST", "<", "C", ">", "LIST10", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "LIST", "<", "C", ">", "CCONC", "concode_elem_sep", "C", "FIRST", "concode_elem_sep", "LIST", "<", "C", ">", "REDUCT", "concode_elem_sep", "C", "FOURTH", "concode_elem_sep", "LIST", "<", "C", ">", "RED", "concode_elem_sep", "LIST", "<", "C", ">", "CINV", "concode_elem_sep", "boolean", "isNull", "concode_elem_sep", "String", "toString", "concode_elem_sep", "C", "SECOND", "concode_elem_sep", "LIST", "<", "C", ">", "CONC"]}
{"code": "WebArchive function ( ) { return createWar ( SD_DEFAULT ) ; }", "nl": "creates war with a secured servlet and basic authentication configured in web.xml deployment descriptor . it uses default security domain . concode_field_sep String SD_WITHOUT_LOGIN_PERMISSION concode_elem_sep SimpleSecurityDomain securityDomain concode_elem_sep UndertowDomainMapper applicationSecurityDomain concode_elem_sep String PASSWORD concode_elem_sep String EMPTY_PASSWORD concode_elem_sep String SUCCESSFUL_AUTH_EVENT concode_elem_sep String SUCCESSFUL_PERMISSION_CHECK_EVENT concode_elem_sep URL url concode_elem_sep String UNSUCCESSFUL_PERMISSION_CHECK_EVENT concode_elem_sep String USER concode_elem_sep String UNKNOWN_USER concode_elem_sep String NAME concode_elem_sep String WRONG_PASSWORD concode_elem_sep String UNSUCCESSFUL_AUTH_EVENT concode_elem_sep String SD_DEFAULT concode_field_sep WebArchive customizedDeployment concode_elem_sep SimpleSecurityDomain createSecurityDomainWithoutPermissionMapper concode_elem_sep WebArchive createWar concode_elem_sep void setup concode_elem_sep void setDefaultEventListenerOfApplicationDomain concode_elem_sep void setEventListenerOfApplicationDomain concode_elem_sep void tearDown", "code_tokens": ["WebArchive", "function", "(", ")", "{", "return", "createWar", "(", "SD_DEFAULT", ")", ";", "}"], "nl_tokens": ["creates", "war", "with", "a", "secured", "servlet", "and", "basic", "authentication", "configured", "in", "web", ".", "xml", "deployment", "descriptor", ".", "it", "uses", "default", "security", "domain", ".", "concode_field_sep", "String", "SD_WITHOUT_LOGIN_PERMISSION", "concode_elem_sep", "SimpleSecurityDomain", "securityDomain", "concode_elem_sep", "UndertowDomainMapper", "applicationSecurityDomain", "concode_elem_sep", "String", "PASSWORD", "concode_elem_sep", "String", "EMPTY_PASSWORD", "concode_elem_sep", "String", "SUCCESSFUL_AUTH_EVENT", "concode_elem_sep", "String", "SUCCESSFUL_PERMISSION_CHECK_EVENT", "concode_elem_sep", "URL", "url", "concode_elem_sep", "String", "UNSUCCESSFUL_PERMISSION_CHECK_EVENT", "concode_elem_sep", "String", "USER", "concode_elem_sep", "String", "UNKNOWN_USER", "concode_elem_sep", "String", "NAME", "concode_elem_sep", "String", "WRONG_PASSWORD", "concode_elem_sep", "String", "UNSUCCESSFUL_AUTH_EVENT", "concode_elem_sep", "String", "SD_DEFAULT", "concode_field_sep", "WebArchive", "customizedDeployment", "concode_elem_sep", "SimpleSecurityDomain", "createSecurityDomainWithoutPermissionMapper", "concode_elem_sep", "WebArchive", "createWar", "concode_elem_sep", "void", "setup", "concode_elem_sep", "void", "setDefaultEventListenerOfApplicationDomain", "concode_elem_sep", "void", "setEventListenerOfApplicationDomain", "concode_elem_sep", "void", "tearDown"]}
{"code": "StatementReplacer function ( ) { return statementReplacer ; }", "nl": "gets the statementreplacer for the replace statements in the file parsed . concode_field_sep String lineSep concode_elem_sep StatementReplacer statementReplacer concode_elem_sep String spinfoFileName concode_elem_sep String tempDir concode_elem_sep SplitterObject[][] splitterObjects concode_field_sep void readPptStatements concode_elem_sep boolean isComment concode_elem_sep SplitterObject[][] createSplitterObjects concode_elem_sep void setFormatting concode_elem_sep void readReplaceStatements concode_elem_sep void parseFile concode_elem_sep boolean isFormatting concode_elem_sep boolean isBlank concode_elem_sep SplitterObject[][] getSplitterObjects", "code_tokens": ["StatementReplacer", "function", "(", ")", "{", "return", "statementReplacer", ";", "}"], "nl_tokens": ["gets", "the", "statementreplacer", "for", "the", "replace", "statements", "in", "the", "file", "parsed", ".", "concode_field_sep", "String", "lineSep", "concode_elem_sep", "StatementReplacer", "statementReplacer", "concode_elem_sep", "String", "spinfoFileName", "concode_elem_sep", "String", "tempDir", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "splitterObjects", "concode_field_sep", "void", "readPptStatements", "concode_elem_sep", "boolean", "isComment", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "createSplitterObjects", "concode_elem_sep", "void", "setFormatting", "concode_elem_sep", "void", "readReplaceStatements", "concode_elem_sep", "void", "parseFile", "concode_elem_sep", "boolean", "isFormatting", "concode_elem_sep", "boolean", "isBlank", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "getSplitterObjects"]}
{"code": "StackKeeper function ( ) { try { return this . queue . removeFirst ( ) ; } catch ( NoSuchElementException loc0 ) { throw new NoStackException ( ) ; } }", "nl": "retrieves and removes the top of the stack . concode_field_sep Charset charset concode_elem_sep TagProcessorFactory tagFactory concode_elem_sep Map<String,Object> memory concode_elem_sep List<Element> ctn concode_elem_sep LinkProvider linkprovider concode_elem_sep boolean autoBookmark concode_elem_sep boolean acceptUnknown concode_elem_sep List<String> roottags concode_elem_sep String BOOKMARK_TREE concode_elem_sep String LAST_MARGIN_BOTTOM concode_elem_sep Rectangle pageSize concode_elem_sep String resourcesRootPath concode_elem_sep LinkedList<StackKeeper> queue concode_elem_sep CssAppliers cssAppliers concode_elem_sep ImageProvider imageProvider concode_field_sep ImageProvider getImageProvider concode_elem_sep HtmlPipelineContext setTagFactory concode_elem_sep HtmlPipelineContext setAcceptUnknown concode_elem_sep boolean acceptUnknown concode_elem_sep LinkProvider getLinkProvider concode_elem_sep String getResourcesRootPath concode_elem_sep CssAppliers getCssAppliers concode_elem_sep HtmlPipelineContext charSet concode_elem_sep Charset charSet concode_elem_sep void setLastMarginBottom concode_elem_sep HtmlPipelineContext setImageProvider concode_elem_sep boolean isEmpty concode_elem_sep void setResourcesRootPath concode_elem_sep HtmlPipelineContext setCssApplier concode_elem_sep Map<String,Object> getMemory concode_elem_sep StackKeeper peek concode_elem_sep boolean autoBookmark concode_elem_sep HtmlPipelineContext autoBookmark concode_elem_sep HtmlPipelineContext setLinkProvider concode_elem_sep Float getLastMarginBottom concode_elem_sep Rectangle getPageSize concode_elem_sep List<Element> currentContent concode_elem_sep TagProcessor resolveProcessor concode_elem_sep HtmlPipelineContext clone concode_elem_sep List<String> getRootTags concode_elem_sep void setCssAppliers concode_elem_sep HtmlPipelineContext setRootTags concode_elem_sep void addFirst concode_elem_sep HtmlPipelineContext setPageSize", "code_tokens": ["StackKeeper", "function", "(", ")", "{", "try", "{", "return", "this", ".", "queue", ".", "removeFirst", "(", ")", ";", "}", "catch", "(", "NoSuchElementException", "loc0", ")", "{", "throw", "new", "NoStackException", "(", ")", ";", "}", "}"], "nl_tokens": ["retrieves", "and", "removes", "the", "top", "of", "the", "stack", ".", "concode_field_sep", "Charset", "charset", "concode_elem_sep", "TagProcessorFactory", "tagFactory", "concode_elem_sep", "Map", "<", "String", ",", "Object", ">", "memory", "concode_elem_sep", "List", "<", "Element", ">", "ctn", "concode_elem_sep", "LinkProvider", "linkprovider", "concode_elem_sep", "boolean", "autoBookmark", "concode_elem_sep", "boolean", "acceptUnknown", "concode_elem_sep", "List", "<", "String", ">", "roottags", "concode_elem_sep", "String", "BOOKMARK_TREE", "concode_elem_sep", "String", "LAST_MARGIN_BOTTOM", "concode_elem_sep", "Rectangle", "pageSize", "concode_elem_sep", "String", "resourcesRootPath", "concode_elem_sep", "LinkedList", "<", "StackKeeper", ">", "queue", "concode_elem_sep", "CssAppliers", "cssAppliers", "concode_elem_sep", "ImageProvider", "imageProvider", "concode_field_sep", "ImageProvider", "getImageProvider", "concode_elem_sep", "HtmlPipelineContext", "setTagFactory", "concode_elem_sep", "HtmlPipelineContext", "setAcceptUnknown", "concode_elem_sep", "boolean", "acceptUnknown", "concode_elem_sep", "LinkProvider", "getLinkProvider", "concode_elem_sep", "String", "getResourcesRootPath", "concode_elem_sep", "CssAppliers", "getCssAppliers", "concode_elem_sep", "HtmlPipelineContext", "charSet", "concode_elem_sep", "Charset", "charSet", "concode_elem_sep", "void", "setLastMarginBottom", "concode_elem_sep", "HtmlPipelineContext", "setImageProvider", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "void", "setResourcesRootPath", "concode_elem_sep", "HtmlPipelineContext", "setCssApplier", "concode_elem_sep", "Map", "<", "String", ",", "Object", ">", "getMemory", "concode_elem_sep", "StackKeeper", "peek", "concode_elem_sep", "boolean", "autoBookmark", "concode_elem_sep", "HtmlPipelineContext", "autoBookmark", "concode_elem_sep", "HtmlPipelineContext", "setLinkProvider", "concode_elem_sep", "Float", "getLastMarginBottom", "concode_elem_sep", "Rectangle", "getPageSize", "concode_elem_sep", "List", "<", "Element", ">", "currentContent", "concode_elem_sep", "TagProcessor", "resolveProcessor", "concode_elem_sep", "HtmlPipelineContext", "clone", "concode_elem_sep", "List", "<", "String", ">", "getRootTags", "concode_elem_sep", "void", "setCssAppliers", "concode_elem_sep", "HtmlPipelineContext", "setRootTags", "concode_elem_sep", "void", "addFirst", "concode_elem_sep", "HtmlPipelineContext", "setPageSize"]}
{"code": "String function ( ) { StringBuilder loc0 = new StringBuilder ( ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . x ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . y ) ; loc0 . append ( \"srini_string\" ) ; loc0 . append ( this . z ) ; loc0 . append ( \"srini_string\" ) ; return loc0 . toString ( ) ; }", "nl": "returns a string representing the projpoint in the format : projcoordinate x y z . example : projcoordinate 6241.11 5218.25 12.3 concode_field_sep DecimalFormat DECIMAL_FORMAT concode_elem_sep double x concode_elem_sep String DECIMAL_FORMAT_PATTERN concode_elem_sep double y concode_elem_sep double z concode_field_sep String toShortString concode_elem_sep boolean areZOrdinatesEqual concode_elem_sep boolean hasValidZOrdinate concode_elem_sep int hashCode concode_elem_sep int hashCode concode_elem_sep void setValue concode_elem_sep void setValue concode_elem_sep void setValue concode_elem_sep boolean areYOrdinatesEqual concode_elem_sep boolean equals concode_elem_sep boolean areXOrdinatesEqual concode_elem_sep boolean hasValidXandYOrdinates concode_elem_sep void clearZ", "code_tokens": ["String", "function", "(", ")", "{", "StringBuilder", "loc0", "=", "new", "StringBuilder", "(", ")", ";", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "loc0", ".", "append", "(", "this", ".", "x", ")", ";", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "loc0", ".", "append", "(", "this", ".", "y", ")", ";", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "loc0", ".", "append", "(", "this", ".", "z", ")", ";", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl_tokens": ["returns", "a", "string", "representing", "the", "projpoint", "in", "the", "format", ":", "projcoordinate", "x", "y", "z", ".", "example", ":", "projcoordinate", "6241.11", "5218.25", "12.3", "concode_field_sep", "DecimalFormat", "DECIMAL_FORMAT", "concode_elem_sep", "double", "x", "concode_elem_sep", "String", "DECIMAL_FORMAT_PATTERN", "concode_elem_sep", "double", "y", "concode_elem_sep", "double", "z", "concode_field_sep", "String", "toShortString", "concode_elem_sep", "boolean", "areZOrdinatesEqual", "concode_elem_sep", "boolean", "hasValidZOrdinate", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "boolean", "areYOrdinatesEqual", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "areXOrdinatesEqual", "concode_elem_sep", "boolean", "hasValidXandYOrdinates", "concode_elem_sep", "void", "clearZ"]}
{"code": "void function ( ShakedownTestEntity arg0 ) { ShakedownTestEntity loc0 = shakedownTestService . updateShakedownInfo ( arg0 . getId ( ) , arg0 . getTestResult ( ) , shakedownTest_state . success ) ; log . info ( \"srini_string\" + loc0 . getId ( ) + \"srini_string\" ) ; }", "nl": "handles a successful execution concode_field_sep Logger log concode_elem_sep ShakedownTestService shakedownTestService concode_field_sep void handleUnsuccessfulShakedownTest concode_elem_sep void handleUnsuccessfulShakedownTest", "code_tokens": ["void", "function", "(", "ShakedownTestEntity", "arg0", ")", "{", "ShakedownTestEntity", "loc0", "=", "shakedownTestService", ".", "updateShakedownInfo", "(", "arg0", ".", "getId", "(", ")", ",", "arg0", ".", "getTestResult", "(", ")", ",", "shakedownTest_state", ".", "success", ")", ";", "log", ".", "info", "(", "\"srini_string\"", "+", "loc0", ".", "getId", "(", ")", "+", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["handles", "a", "successful", "execution", "concode_field_sep", "Logger", "log", "concode_elem_sep", "ShakedownTestService", "shakedownTestService", "concode_field_sep", "void", "handleUnsuccessfulShakedownTest", "concode_elem_sep", "void", "handleUnsuccessfulShakedownTest"]}
{"code": "void function ( int arg0 , ExecutionOutcome arg1 ) { if ( arg0 < 0 || arg0 >= theList . size ( ) ) throw new IllegalArgumentException ( \"srini_string\" + arg0 ) ; if ( arg1 == null ) throw new IllegalArgumentException ( \"srini_string\" ) ; theList . set ( arg0 , arg1 ) ; }", "nl": "set the i-th slot to the given outcome . concode_field_sep Sequence owner concode_elem_sep List<ExecutionOutcome> theList concode_field_sep int size concode_elem_sep ExecutionOutcome get", "code_tokens": ["void", "function", "(", "int", "arg0", ",", "ExecutionOutcome", "arg1", ")", "{", "if", "(", "arg0", "<", "0", "|", "|", "arg0", ">=", "theList", ".", "size", "(", ")", ")", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "if", "(", "arg1", "==", "null", ")", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "theList", ".", "set", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["set", "the", "i", "-", "th", "slot", "to", "the", "given", "outcome", ".", "concode_field_sep", "Sequence", "owner", "concode_elem_sep", "List", "<", "ExecutionOutcome", ">", "theList", "concode_field_sep", "int", "size", "concode_elem_sep", "ExecutionOutcome", "get"]}
{"code": "IUIContext function ( Display arg0 ) { IUIContext loc0 = createContext ( IUIContext . class , arg0 ) ; return loc0 ; }", "nl": "create a new user interface context . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["IUIContext", "function", "(", "Display", "arg0", ")", "{", "IUIContext", "loc0", "=", "createContext", "(", "IUIContext", ".", "class", ",", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["create", "a", "new", "user", "interface", "context", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "Menu function ( ) { return mMenu ; }", "nl": "returns the menu that is current being shown . concode_field_sep MenuPopup mMenuPopup concode_elem_sep MenuPanel mMenuPanel concode_elem_sep OnMenuItemLongClickListener mLongClickListener concode_elem_sep GeckoMenu mMenu concode_elem_sep OnDismissListener mDismissListener concode_elem_sep View mAnchor concode_elem_sep GeckoMenuInflater mMenuInflater concode_elem_sep OnMenuItemClickListener mClickListener concode_field_sep boolean onMenuItemLongClick concode_elem_sep boolean onMenuItemLongClick concode_elem_sep void openMenu concode_elem_sep boolean onDismiss concode_elem_sep void setOnDismissListener concode_elem_sep void show concode_elem_sep void dismiss concode_elem_sep void closeMenu concode_elem_sep void setOnMenuItemLongClickListener concode_elem_sep void inflate concode_elem_sep void showMenu concode_elem_sep MenuInflater getMenuInflater concode_elem_sep void setAnchor concode_elem_sep void setOnMenuItemClickListener concode_elem_sep void initialize concode_elem_sep boolean onMenuItemClick concode_elem_sep boolean onMenuItemClick", "code_tokens": ["Menu", "function", "(", ")", "{", "return", "mMenu", ";", "}"], "nl_tokens": ["returns", "the", "menu", "that", "is", "current", "being", "shown", ".", "concode_field_sep", "MenuPopup", "mMenuPopup", "concode_elem_sep", "MenuPanel", "mMenuPanel", "concode_elem_sep", "OnMenuItemLongClickListener", "mLongClickListener", "concode_elem_sep", "GeckoMenu", "mMenu", "concode_elem_sep", "OnDismissListener", "mDismissListener", "concode_elem_sep", "View", "mAnchor", "concode_elem_sep", "GeckoMenuInflater", "mMenuInflater", "concode_elem_sep", "OnMenuItemClickListener", "mClickListener", "concode_field_sep", "boolean", "onMenuItemLongClick", "concode_elem_sep", "boolean", "onMenuItemLongClick", "concode_elem_sep", "void", "openMenu", "concode_elem_sep", "boolean", "onDismiss", "concode_elem_sep", "void", "setOnDismissListener", "concode_elem_sep", "void", "show", "concode_elem_sep", "void", "dismiss", "concode_elem_sep", "void", "closeMenu", "concode_elem_sep", "void", "setOnMenuItemLongClickListener", "concode_elem_sep", "void", "inflate", "concode_elem_sep", "void", "showMenu", "concode_elem_sep", "MenuInflater", "getMenuInflater", "concode_elem_sep", "void", "setAnchor", "concode_elem_sep", "void", "setOnMenuItemClickListener", "concode_elem_sep", "void", "initialize", "concode_elem_sep", "boolean", "onMenuItemClick", "concode_elem_sep", "boolean", "onMenuItemClick"]}
{"code": "void function ( final RecordBatch arg0 ) { executeMethodLogic ( new PartitionBatchHandlingClass ( arg0 ) ) ; }", "nl": "partitionbatch - decorator method to call real partitioner s to process incoming batch uses either threading or not threading approach based on number partitioners concode_field_sep RecordBatch incoming concode_elem_sep boolean isLastBatch concode_elem_sep Partitioner part concode_elem_sep org.slf4j.Logger logger concode_elem_sep String childThreadPrefix concode_elem_sep GeneralExecuteIface iface concode_elem_sep ControlsInjector injector concode_elem_sep String parentThreadName concode_elem_sep CountDownLatchInjection testCountDownLatch concode_elem_sep OperatorStats stats concode_elem_sep ExecutorService executor concode_elem_sep String tName concode_elem_sep FragmentContext context concode_elem_sep boolean schemaChanged concode_elem_sep CountDownLatch latch concode_elem_sep IOException exp concode_elem_sep List<Partitioner> partitioners concode_field_sep PartitionOutgoingBatch getOutgoingBatches concode_elem_sep IOException getException concode_elem_sep List<Partitioner> getPartitioners concode_elem_sep void clear concode_elem_sep void flushOutgoingBatches concode_elem_sep void executeMethodLogic concode_elem_sep void run concode_elem_sep Partitioner getPart concode_elem_sep void initialize concode_elem_sep void execute concode_elem_sep void execute concode_elem_sep void execute", "code_tokens": ["void", "function", "(", "final", "RecordBatch", "arg0", ")", "{", "executeMethodLogic", "(", "new", "PartitionBatchHandlingClass", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["partitionbatch", "-", "decorator", "method", "to", "call", "real", "partitioner", "s", "to", "process", "incoming", "batch", "uses", "either", "threading", "or", "not", "threading", "approach", "based", "on", "number", "partitioners", "concode_field_sep", "RecordBatch", "incoming", "concode_elem_sep", "boolean", "isLastBatch", "concode_elem_sep", "Partitioner", "part", "concode_elem_sep", "org", ".", "slf4j", ".", "Logger", "logger", "concode_elem_sep", "String", "childThreadPrefix", "concode_elem_sep", "GeneralExecuteIface", "iface", "concode_elem_sep", "ControlsInjector", "injector", "concode_elem_sep", "String", "parentThreadName", "concode_elem_sep", "CountDownLatchInjection", "testCountDownLatch", "concode_elem_sep", "OperatorStats", "stats", "concode_elem_sep", "ExecutorService", "executor", "concode_elem_sep", "String", "tName", "concode_elem_sep", "FragmentContext", "context", "concode_elem_sep", "boolean", "schemaChanged", "concode_elem_sep", "CountDownLatch", "latch", "concode_elem_sep", "IOException", "exp", "concode_elem_sep", "List", "<", "Partitioner", ">", "partitioners", "concode_field_sep", "PartitionOutgoingBatch", "getOutgoingBatches", "concode_elem_sep", "IOException", "getException", "concode_elem_sep", "List", "<", "Partitioner", ">", "getPartitioners", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "flushOutgoingBatches", "concode_elem_sep", "void", "executeMethodLogic", "concode_elem_sep", "void", "run", "concode_elem_sep", "Partitioner", "getPart", "concode_elem_sep", "void", "initialize", "concode_elem_sep", "void", "execute", "concode_elem_sep", "void", "execute", "concode_elem_sep", "void", "execute"]}
{"code": "void function ( PptTopLevel arg0 ) { }", "nl": "make an instance dummyinvariant for this instance of the splitter , if possible on an appropriate slice from ppt . concode_field_sep boolean instantiated concode_elem_sep long serialVersionUID concode_field_sep boolean valid concode_elem_sep boolean instantiated concode_elem_sep String condition concode_elem_sep boolean test concode_elem_sep DummyInvariant getDummyInvariant concode_elem_sep void makeDummyInvariant concode_elem_sep Splitter instantiate", "code_tokens": ["void", "function", "(", "PptTopLevel", "arg0", ")", "{", "}"], "nl_tokens": ["make", "an", "instance", "dummyinvariant", "for", "this", "instance", "of", "the", "splitter", ",", "if", "possible", "on", "an", "appropriate", "slice", "from", "ppt", ".", "concode_field_sep", "boolean", "instantiated", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "boolean", "valid", "concode_elem_sep", "boolean", "instantiated", "concode_elem_sep", "String", "condition", "concode_elem_sep", "boolean", "test", "concode_elem_sep", "DummyInvariant", "getDummyInvariant", "concode_elem_sep", "void", "makeDummyInvariant", "concode_elem_sep", "Splitter", "instantiate"]}
{"code": "String function ( ) { return name ; }", "nl": "the vm name of the class . concode_field_sep String name concode_elem_sep boolean[] probes concode_elem_sep long id concode_field_sep void merge concode_elem_sep void merge concode_elem_sep boolean[] getProbes concode_elem_sep void reset concode_elem_sep long getId concode_elem_sep String toString concode_elem_sep void assertCompatibility", "code_tokens": ["String", "function", "(", ")", "{", "return", "name", ";", "}"], "nl_tokens": ["the", "vm", "name", "of", "the", "class", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "boolean", "[", "]", "probes", "concode_elem_sep", "long", "id", "concode_field_sep", "void", "merge", "concode_elem_sep", "void", "merge", "concode_elem_sep", "boolean", "[", "]", "getProbes", "concode_elem_sep", "void", "reset", "concode_elem_sep", "long", "getId", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "assertCompatibility"]}
{"code": "void function ( int arg0 , int arg1 ) { if ( validVertex ( arg0 ) && validVertex ( arg1 ) ) { if ( ! adjMatrix [ arg0 ] [ arg1 ] ) { adjMatrix [ arg0 ] [ arg1 ] = true ; edges ++ ; } } }", "nl": "creates the edge origin , destination . if the edge did not already exists , increments the edge count . concode_field_sep boolean[][] adjMatrix concode_elem_sep int vertices concode_elem_sep int edges concode_field_sep void removeEdge concode_elem_sep boolean hasEdge concode_elem_sep int getNumEdges concode_elem_sep UDGraph paths concode_elem_sep UDGraph length2Paths concode_elem_sep String toString concode_elem_sep void main concode_elem_sep int getNumVertices concode_elem_sep boolean validVertex", "code_tokens": ["void", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "validVertex", "(", "arg0", ")", "&", "&", "validVertex", "(", "arg1", ")", ")", "{", "if", "(", "!", "adjMatrix", "[", "arg0", "]", "[", "arg1", "]", ")", "{", "adjMatrix", "[", "arg0", "]", "[", "arg1", "]", "=", "true", ";", "edges", "+", "+", ";", "}", "}", "}"], "nl_tokens": ["creates", "the", "edge", "origin", ",", "destination", ".", "if", "the", "edge", "did", "not", "already", "exists", ",", "increments", "the", "edge", "count", ".", "concode_field_sep", "boolean", "[", "]", "[", "]", "adjMatrix", "concode_elem_sep", "int", "vertices", "concode_elem_sep", "int", "edges", "concode_field_sep", "void", "removeEdge", "concode_elem_sep", "boolean", "hasEdge", "concode_elem_sep", "int", "getNumEdges", "concode_elem_sep", "UDGraph", "paths", "concode_elem_sep", "UDGraph", "length2Paths", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "main", "concode_elem_sep", "int", "getNumVertices", "concode_elem_sep", "boolean", "validVertex"]}
{"code": "byte [ ] function ( ) { return payload ; }", "nl": "data from this message . concode_field_sep byte[] payload concode_elem_sep boolean truncated concode_elem_sep StdStreamType type concode_field_sep boolean isTruncated concode_elem_sep StdStreamType getType", "code_tokens": ["byte", "[", "]", "function", "(", ")", "{", "return", "payload", ";", "}"], "nl_tokens": ["data", "from", "this", "message", ".", "concode_field_sep", "byte", "[", "]", "payload", "concode_elem_sep", "boolean", "truncated", "concode_elem_sep", "StdStreamType", "type", "concode_field_sep", "boolean", "isTruncated", "concode_elem_sep", "StdStreamType", "getType"]}
{"code": "void function ( final DeploymentUnit arg0 ) { if ( arg0 . getParent ( ) != null ) { arg0 . getParent ( ) . putAttachment ( ATTACHMENT_KEY , true ) ; } else { arg0 . putAttachment ( ATTACHMENT_KEY , true ) ; } }", "nl": "mark the deployment as a cdi one . concode_field_sep AttachmentKey<Boolean> ATTACHMENT_KEY concode_field_sep boolean cdiAnnotationsPresent", "code_tokens": ["void", "function", "(", "final", "DeploymentUnit", "arg0", ")", "{", "if", "(", "arg0", ".", "getParent", "(", ")", "!=", "null", ")", "{", "arg0", ".", "getParent", "(", ")", ".", "putAttachment", "(", "ATTACHMENT_KEY", ",", "true", ")", ";", "}", "else", "{", "arg0", ".", "putAttachment", "(", "ATTACHMENT_KEY", ",", "true", ")", ";", "}", "}"], "nl_tokens": ["mark", "the", "deployment", "as", "a", "cdi", "one", ".", "concode_field_sep", "AttachmentKey", "<", "Boolean", ">", "ATTACHMENT_KEY", "concode_field_sep", "boolean", "cdiAnnotationsPresent"]}
{"code": "IHoverInfo function ( Widget arg0 , int arg1 , int arg2 ) { return new WidgetRelativeHoverInfo ( arg0 , arg1 , arg2 ) ; }", "nl": "create a widget-relative hover info instance . concode_field_sep PlaceHolder placeHolder concode_field_sep IHoverInfo getAbsolute concode_elem_sep IHoverInfo getAbsolute concode_elem_sep IHoverInfo getRelativeToCenter", "code_tokens": ["IHoverInfo", "function", "(", "Widget", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "return", "new", "WidgetRelativeHoverInfo", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl_tokens": ["create", "a", "widget", "-", "relative", "hover", "info", "instance", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "IHoverInfo", "getAbsolute", "concode_elem_sep", "IHoverInfo", "getAbsolute", "concode_elem_sep", "IHoverInfo", "getRelativeToCenter"]}
{"code": "Set < String > function ( ) { return namedDescriptorMap . keySet ( ) ; }", "nl": "access to the names of all named parameters concode_field_sep Map<String,NamedParameterDescriptor> namedDescriptorMap concode_elem_sep OrdinalParameterDescriptor[] ordinalDescriptors concode_elem_sep OrdinalParameterDescriptor[] EMPTY_ORDINALS concode_field_sep int getOrdinalParameterSourceLocation concode_elem_sep NamedParameterDescriptor getNamedParameterDescriptor concode_elem_sep Type getOrdinalParameterExpectedType concode_elem_sep Type getNamedParameterExpectedType concode_elem_sep int[] getNamedParameterSourceLocations concode_elem_sep OrdinalParameterDescriptor getOrdinalParameterDescriptor concode_elem_sep int getOrdinalParameterCount", "code_tokens": ["Set", "<", "String", ">", "function", "(", ")", "{", "return", "namedDescriptorMap", ".", "keySet", "(", ")", ";", "}"], "nl_tokens": ["access", "to", "the", "names", "of", "all", "named", "parameters", "concode_field_sep", "Map", "<", "String", ",", "NamedParameterDescriptor", ">", "namedDescriptorMap", "concode_elem_sep", "OrdinalParameterDescriptor", "[", "]", "ordinalDescriptors", "concode_elem_sep", "OrdinalParameterDescriptor", "[", "]", "EMPTY_ORDINALS", "concode_field_sep", "int", "getOrdinalParameterSourceLocation", "concode_elem_sep", "NamedParameterDescriptor", "getNamedParameterDescriptor", "concode_elem_sep", "Type", "getOrdinalParameterExpectedType", "concode_elem_sep", "Type", "getNamedParameterExpectedType", "concode_elem_sep", "int", "[", "]", "getNamedParameterSourceLocations", "concode_elem_sep", "OrdinalParameterDescriptor", "getOrdinalParameterDescriptor", "concode_elem_sep", "int", "getOrdinalParameterCount"]}
{"code": "Section function ( ) { Section loc0 = null ; if ( sections . size ( ) > 0 ) { loc0 = sections . get ( sections . size ( ) - 1 ) ; } return loc0 ; }", "nl": "get last section . concode_field_sep Optional<String> fileName concode_elem_sep long serialVersionUID concode_elem_sep boolean built concode_elem_sep Set<PreprocessorRule> preprocessorRules concode_elem_sep List<Section> sections concode_elem_sep RedPenTokenizer tokenizer concode_field_sep DocumentBuilder appendSection concode_elem_sep void ensureNotBuilt concode_elem_sep DocumentBuilder addSection concode_elem_sep DocumentBuilder addSection concode_elem_sep DocumentBuilder setPreprocessorRules concode_elem_sep Set<PreprocessorRule> getPreprocessorRules concode_elem_sep DocumentBuilder setFileName concode_elem_sep Iterator<Section> iterator concode_elem_sep Section getSection concode_elem_sep Section getSection concode_elem_sep DocumentBuilder addSectionHeader concode_elem_sep int size concode_elem_sep DocumentBuilder addSentence concode_elem_sep DocumentBuilder addSentence concode_elem_sep Document build concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep DocumentBuilder builder concode_elem_sep DocumentBuilder builder concode_elem_sep String toString concode_elem_sep DocumentBuilder addParagraph concode_elem_sep DocumentBuilder addListBlock concode_elem_sep Optional<String> getFileName concode_elem_sep DocumentBuilder addListElement concode_elem_sep DocumentBuilder addListElement", "code_tokens": ["Section", "function", "(", ")", "{", "Section", "loc0", "=", "null", ";", "if", "(", "sections", ".", "size", "(", ")", ">", "0", ")", "{", "loc0", "=", "sections", ".", "get", "(", "sections", ".", "size", "(", ")", "-", "1", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["get", "last", "section", ".", "concode_field_sep", "Optional", "<", "String", ">", "fileName", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "boolean", "built", "concode_elem_sep", "Set", "<", "PreprocessorRule", ">", "preprocessorRules", "concode_elem_sep", "List", "<", "Section", ">", "sections", "concode_elem_sep", "RedPenTokenizer", "tokenizer", "concode_field_sep", "DocumentBuilder", "appendSection", "concode_elem_sep", "void", "ensureNotBuilt", "concode_elem_sep", "DocumentBuilder", "addSection", "concode_elem_sep", "DocumentBuilder", "addSection", "concode_elem_sep", "DocumentBuilder", "setPreprocessorRules", "concode_elem_sep", "Set", "<", "PreprocessorRule", ">", "getPreprocessorRules", "concode_elem_sep", "DocumentBuilder", "setFileName", "concode_elem_sep", "Iterator", "<", "Section", ">", "iterator", "concode_elem_sep", "Section", "getSection", "concode_elem_sep", "Section", "getSection", "concode_elem_sep", "DocumentBuilder", "addSectionHeader", "concode_elem_sep", "int", "size", "concode_elem_sep", "DocumentBuilder", "addSentence", "concode_elem_sep", "DocumentBuilder", "addSentence", "concode_elem_sep", "Document", "build", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "DocumentBuilder", "builder", "concode_elem_sep", "DocumentBuilder", "builder", "concode_elem_sep", "String", "toString", "concode_elem_sep", "DocumentBuilder", "addParagraph", "concode_elem_sep", "DocumentBuilder", "addListBlock", "concode_elem_sep", "Optional", "<", "String", ">", "getFileName", "concode_elem_sep", "DocumentBuilder", "addListElement", "concode_elem_sep", "DocumentBuilder", "addListElement"]}
{"code": "void function ( ) { synchronized ( this ) { stop = true ; this . notify ( ) ; } }", "nl": "closes this server . concode_field_sep boolean stop concode_field_sep void processMessage concode_elem_sep void runServer concode_elem_sep void main", "code_tokens": ["void", "function", "(", ")", "{", "synchronized", "(", "this", ")", "{", "stop", "=", "true", ";", "this", ".", "notify", "(", ")", ";", "}", "}"], "nl_tokens": ["closes", "this", "server", ".", "concode_field_sep", "boolean", "stop", "concode_field_sep", "void", "processMessage", "concode_elem_sep", "void", "runServer", "concode_elem_sep", "void", "main"]}
{"code": "boolean function ( T arg0 , T arg1 ) { return arg0 == arg1 ; }", "nl": "compares object references for equality . concode_field_sep PlaceHolder placeHolder concode_field_sep int computeHashCode", "code_tokens": ["boolean", "function", "(", "T", "arg0", ",", "T", "arg1", ")", "{", "return", "arg0", "==", "arg1", ";", "}"], "nl_tokens": ["compares", "object", "references", "for", "equality", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "computeHashCode"]}
{"code": "Dialog function ( RefactoringStatus arg0 , Shell arg1 , String arg2 , boolean arg3 ) { return new RefactoringStatusDialog ( arg0 , arg1 , arg2 , arg3 ) ; }", "nl": "creates a dialog to present a refactoringstatus to the user . thefollowing values are returned from the dialogs open method : org.eclipse.jface.dialogs.idialogconstants #ok_id idialogconstants #ok_id : if the user has pressed the continue button . org.eclipse.jface.dialogs.idialogconstants #cancel_id idialogconstants #cancel_id : if the user has pressed the cancel button . org.eclipse.jface.dialogs.idialogconstants #back_id idialogconstants #back_id : if the user has pressed the back button . concode_field_sep PlaceHolder placeHolder concode_field_sep Dialog createRefactoringWizardDialog concode_elem_sep Composite createRefactoringHistoryControl concode_elem_sep Composite createSortableRefactoringHistoryControl concode_elem_sep PerformChangeOperation createUIAwareChangeOperation concode_elem_sep Dialog createLightWeightStatusDialog", "code_tokens": ["Dialog", "function", "(", "RefactoringStatus", "arg0", ",", "Shell", "arg1", ",", "String", "arg2", ",", "boolean", "arg3", ")", "{", "return", "new", "RefactoringStatusDialog", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl_tokens": ["creates", "a", "dialog", "to", "present", "a", "refactoringstatus", "to", "the", "user", ".", "thefollowing", "values", "are", "returned", "from", "the", "dialogs", "open", "method", ":", "org", ".", "eclipse", ".", "jface", ".", "dialogs", ".", "idialogconstants", "#ok_id idialogconstants #ok_id : if the user has pressed the continue button . org.eclipse.jface.dialogs.idialogconstants #cancel_id idialogconstants #cancel_id : if the user has pressed the cancel button . org.eclipse.jface.dialogs.idialogconstants #back_id idialogconstants #back_id : if the user has pressed the back button . concode_field_sep PlaceHolder placeHolder concode_field_sep Dialog createRefactoringWizardDialog concode_elem_sep Composite createRefactoringHistoryControl concode_elem_sep Composite createSortableRefactoringHistoryControl concode_elem_sep PerformChangeOperation createUIAwareChangeOperation concode_elem_sep Dialog createLightWeightStatusDialog"]}
{"code": "char function ( ) { return zero ; }", "nl": "liefert die darstellung fuer den null-wert . concode_field_sep char zero concode_elem_sep char minus concode_elem_sep String regexp concode_elem_sep Charset charset concode_elem_sep int pointer concode_elem_sep Receiver receiver concode_elem_sep Sender sender concode_elem_sep int length concode_elem_sep BitAmount bits concode_elem_sep boolean[] buffer concode_elem_sep char plus concode_field_sep char minus concode_elem_sep String getRegExp concode_elem_sep String receive concode_elem_sep char getLastPulseOfReceiver concode_elem_sep String charform concode_elem_sep String read concode_elem_sep void clear concode_elem_sep boolean isEmpty concode_elem_sep char plus concode_elem_sep int getDC concode_elem_sep StringBuilder stringform concode_elem_sep boolean[] bitform concode_elem_sep char getLastPulseOfSender concode_elem_sep char bufferToDecimal concode_elem_sep boolean get concode_elem_sep int getLength concode_elem_sep String getCharsetRegExp concode_elem_sep BitBuffer copy concode_elem_sep void buffer concode_elem_sep boolean isFull concode_elem_sep String send", "code_tokens": ["char", "function", "(", ")", "{", "return", "zero", ";", "}"], "nl_tokens": ["liefert", "die", "darstellung", "fuer", "den", "null", "-", "wert", ".", "concode_field_sep", "char", "zero", "concode_elem_sep", "char", "minus", "concode_elem_sep", "String", "regexp", "concode_elem_sep", "Charset", "charset", "concode_elem_sep", "int", "pointer", "concode_elem_sep", "Receiver", "receiver", "concode_elem_sep", "Sender", "sender", "concode_elem_sep", "int", "length", "concode_elem_sep", "BitAmount", "bits", "concode_elem_sep", "boolean", "[", "]", "buffer", "concode_elem_sep", "char", "plus", "concode_field_sep", "char", "minus", "concode_elem_sep", "String", "getRegExp", "concode_elem_sep", "String", "receive", "concode_elem_sep", "char", "getLastPulseOfReceiver", "concode_elem_sep", "String", "charform", "concode_elem_sep", "String", "read", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "char", "plus", "concode_elem_sep", "int", "getDC", "concode_elem_sep", "StringBuilder", "stringform", "concode_elem_sep", "boolean", "[", "]", "bitform", "concode_elem_sep", "char", "getLastPulseOfSender", "concode_elem_sep", "char", "bufferToDecimal", "concode_elem_sep", "boolean", "get", "concode_elem_sep", "int", "getLength", "concode_elem_sep", "String", "getCharsetRegExp", "concode_elem_sep", "BitBuffer", "copy", "concode_elem_sep", "void", "buffer", "concode_elem_sep", "boolean", "isFull", "concode_elem_sep", "String", "send"]}
{"code": "void function ( ) { waitForIdle ( Display . getDefault ( ) ) ; }", "nl": "this method does not return until the display thread is in an `` idle '' state . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["void", "function", "(", ")", "{", "waitForIdle", "(", "Display", ".", "getDefault", "(", ")", ")", ";", "}"], "nl_tokens": ["this", "method", "does", "not", "return", "until", "the", "display", "thread", "is", "in", "an", "`", "`", "idle", "''", "state", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "int function ( ) { return stack . size ( ) ; }", "nl": "returns the number of expressions on the stack . concode_field_sep ArrayList stack concode_elem_sep int height concode_field_sep Expr pop concode_elem_sep void set concode_elem_sep Expr pop1 concode_elem_sep Expr[] pop2 concode_elem_sep Expr get concode_elem_sep boolean isEmpty concode_elem_sep void replace concode_elem_sep String toString concode_elem_sep void push concode_elem_sep Expr peek concode_elem_sep Expr peek concode_elem_sep int height", "code_tokens": ["int", "function", "(", ")", "{", "return", "stack", ".", "size", "(", ")", ";", "}"], "nl_tokens": ["returns", "the", "number", "of", "expressions", "on", "the", "stack", ".", "concode_field_sep", "ArrayList", "stack", "concode_elem_sep", "int", "height", "concode_field_sep", "Expr", "pop", "concode_elem_sep", "void", "set", "concode_elem_sep", "Expr", "pop1", "concode_elem_sep", "Expr", "[", "]", "pop2", "concode_elem_sep", "Expr", "get", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "void", "replace", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "push", "concode_elem_sep", "Expr", "peek", "concode_elem_sep", "Expr", "peek", "concode_elem_sep", "int", "height"]}
{"code": "Map < K , V > function ( Parcel arg0 , ClassLoader arg1 ) { if ( arg0 == null ) { return null ; } int loc0 = arg0 . readInt ( ) ; if ( loc0 == - 1 ) { return null ; } Map < K , V > loc1 = new HashMap < K , V > ( ) ; for ( int loc2 = 0 ; loc2 < loc0 ; loc2 ++ ) { loc1 . put ( ( K ) arg0 . readParcelable ( arg1 ) , ( V ) arg0 . readParcelable ( arg1 ) ) ; } return loc1 ; }", "nl": "read a hashmap from a parcel , class of key and value can parcelable both concode_field_sep PlaceHolder placeHolder concode_field_sep void writeHashMap concode_elem_sep Map<String,String> readHashMapStringAndString concode_elem_sep void writeHashMapStringAndString concode_elem_sep Map<String,V> readHashMapStringKey concode_elem_sep boolean readBoolean concode_elem_sep void writeHashMapStringKey concode_elem_sep void writeBoolean", "code_tokens": ["Map", "<", "K", ",", "V", ">", "function", "(", "Parcel", "arg0", ",", "ClassLoader", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "null", ";", "}", "int", "loc0", "=", "arg0", ".", "readInt", "(", ")", ";", "if", "(", "loc0", "==", "-", "1", ")", "{", "return", "null", ";", "}", "Map", "<", "K", ",", "V", ">", "loc1", "=", "new", "HashMap", "<", "K", ",", "V", ">", "(", ")", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "loc0", ";", "loc2", "+", "+", ")", "{", "loc1", ".", "put", "(", "(", "K", ")", "arg0", ".", "readParcelable", "(", "arg1", ")", ",", "(", "V", ")", "arg0", ".", "readParcelable", "(", "arg1", ")", ")", ";", "}", "return", "loc1", ";", "}"], "nl_tokens": ["read", "a", "hashmap", "from", "a", "parcel", ",", "class", "of", "key", "and", "value", "can", "parcelable", "both", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "writeHashMap", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "readHashMapStringAndString", "concode_elem_sep", "void", "writeHashMapStringAndString", "concode_elem_sep", "Map", "<", "String", ",", "V", ">", "readHashMapStringKey", "concode_elem_sep", "boolean", "readBoolean", "concode_elem_sep", "void", "writeHashMapStringKey", "concode_elem_sep", "void", "writeBoolean"]}
{"code": "void function ( ) { getListIterator ( ) . remove ( ) ; }", "nl": "invokes the underlying listiterator #remove method . concode_field_sep ListIterator iterator concode_field_sep void add concode_elem_sep Object next concode_elem_sep void set concode_elem_sep Object previous concode_elem_sep boolean hasPrevious concode_elem_sep boolean hasNext concode_elem_sep ListIterator getListIterator concode_elem_sep int nextIndex concode_elem_sep int previousIndex concode_elem_sep void setListIterator", "code_tokens": ["void", "function", "(", ")", "{", "getListIterator", "(", ")", ".", "remove", "(", ")", ";", "}"], "nl_tokens": ["invokes", "the", "underlying", "listiterator", "#remove method . concode_field_sep ListIterator iterator concode_field_sep void add concode_elem_sep Object next concode_elem_sep void set concode_elem_sep Object previous concode_elem_sep boolean hasPrevious concode_elem_sep boolean hasNext concode_elem_sep ListIterator getListIterator concode_elem_sep int nextIndex concode_elem_sep int previousIndex concode_elem_sep void setListIterator"]}
{"code": "boolean function ( ) { return Platform . JAVA_VERSION < Platform . JAVA_1_4 ; }", "nl": "prior to 1.4.1 , hierarchy events are only sent if listeners are added to a given component . concode_field_sep boolean gotBug1Event concode_elem_sep java.util.ArrayList bugList concode_field_sep boolean fileDialogRequiresDismiss concode_elem_sep boolean hasKeyStrokeGenerationBug concode_elem_sep String[] bugCheck concode_elem_sep boolean hasRobotMotionBug concode_elem_sep boolean reportsIncorrectLockingKeyState concode_elem_sep boolean fileDialogMisreportsBounds concode_elem_sep boolean needsRobotVerification concode_elem_sep boolean hasMenuDisableBug concode_elem_sep boolean hasInputMethodInsteadOfKeyTyped concode_elem_sep boolean hasMissingWindowMouseMotion concode_elem_sep boolean hasEscapeGenerationBug concode_elem_sep boolean showAWTPopupMenuBlocks concode_elem_sep boolean hasChoiceLockupBug concode_elem_sep boolean hasRobotButtonsSwapped concode_elem_sep boolean hasKeyInputDelay concode_elem_sep boolean hasFrameDeiconifyBug concode_elem_sep boolean dragDropRequiresNativeEvents concode_elem_sep boolean hasTextComponentSelectionDelay concode_elem_sep boolean hasMultiClickFrameBug concode_elem_sep boolean fileDialogRequiresVisibleFrame", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "Platform", ".", "JAVA_VERSION", "<", "Platform", ".", "JAVA_1_4", ";", "}"], "nl_tokens": ["prior", "to", "1.4", ".1", ",", "hierarchy", "events", "are", "only", "sent", "if", "listeners", "are", "added", "to", "a", "given", "component", ".", "concode_field_sep", "boolean", "gotBug1Event", "concode_elem_sep", "java", ".", "util", ".", "ArrayList", "bugList", "concode_field_sep", "boolean", "fileDialogRequiresDismiss", "concode_elem_sep", "boolean", "hasKeyStrokeGenerationBug", "concode_elem_sep", "String", "[", "]", "bugCheck", "concode_elem_sep", "boolean", "hasRobotMotionBug", "concode_elem_sep", "boolean", "reportsIncorrectLockingKeyState", "concode_elem_sep", "boolean", "fileDialogMisreportsBounds", "concode_elem_sep", "boolean", "needsRobotVerification", "concode_elem_sep", "boolean", "hasMenuDisableBug", "concode_elem_sep", "boolean", "hasInputMethodInsteadOfKeyTyped", "concode_elem_sep", "boolean", "hasMissingWindowMouseMotion", "concode_elem_sep", "boolean", "hasEscapeGenerationBug", "concode_elem_sep", "boolean", "showAWTPopupMenuBlocks", "concode_elem_sep", "boolean", "hasChoiceLockupBug", "concode_elem_sep", "boolean", "hasRobotButtonsSwapped", "concode_elem_sep", "boolean", "hasKeyInputDelay", "concode_elem_sep", "boolean", "hasFrameDeiconifyBug", "concode_elem_sep", "boolean", "dragDropRequiresNativeEvents", "concode_elem_sep", "boolean", "hasTextComponentSelectionDelay", "concode_elem_sep", "boolean", "hasMultiClickFrameBug", "concode_elem_sep", "boolean", "fileDialogRequiresVisibleFrame"]}
{"code": "void function ( int arg0 ) { this . weight = arg0 ; }", "nl": "set a new opponent 's weight . should be negative or zero concode_field_sep String teamName concode_elem_sep int weight concode_elem_sep Player player concode_field_sep String getPlayerNick concode_elem_sep void changeWeight concode_elem_sep int getWeight concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Opponent clone concode_elem_sep String toString concode_elem_sep int compareTo concode_elem_sep String getTeamName", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "weight", "=", "arg0", ";", "}"], "nl_tokens": ["set", "a", "new", "opponent", "'", "s", "weight", ".", "should", "be", "negative", "or", "zero", "concode_field_sep", "String", "teamName", "concode_elem_sep", "int", "weight", "concode_elem_sep", "Player", "player", "concode_field_sep", "String", "getPlayerNick", "concode_elem_sep", "void", "changeWeight", "concode_elem_sep", "int", "getWeight", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Opponent", "clone", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "String", "getTeamName"]}
{"code": "void function ( List < ByteBuffer > arg0 , Callback < List < ByteBuffer >> arg1 ) { try { List < ByteBuffer > loc0 = transceive ( arg0 ) ; arg1 . handleResult ( loc0 ) ; } catch ( IOException loc0 ) { arg1 . handleError ( loc0 ) ; } }", "nl": "called by requestor #request string , object , callback for two-way messages using callbacks . concode_field_sep ReentrantLock channelLock concode_field_sep void lockChannel concode_elem_sep void writeBuffers concode_elem_sep String getRemoteName concode_elem_sep boolean isConnected concode_elem_sep List<ByteBuffer> readBuffers concode_elem_sep void unlockChannel concode_elem_sep void close concode_elem_sep Protocol getRemote concode_elem_sep void setRemote", "code_tokens": ["void", "function", "(", "List", "<", "ByteBuffer", ">", "arg0", ",", "Callback", "<", "List", "<", "ByteBuffer", ">>", "arg1", ")", "{", "try", "{", "List", "<", "ByteBuffer", ">", "loc0", "=", "transceive", "(", "arg0", ")", ";", "arg1", ".", "handleResult", "(", "loc0", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "arg1", ".", "handleError", "(", "loc0", ")", ";", "}", "}"], "nl_tokens": ["called", "by", "requestor", "#request string , object , callback for two-way messages using callbacks . concode_field_sep ReentrantLock channelLock concode_field_sep void lockChannel concode_elem_sep void writeBuffers concode_elem_sep String getRemoteName concode_elem_sep boolean isConnected concode_elem_sep List<ByteBuffer> readBuffers concode_elem_sep void unlockChannel concode_elem_sep void close concode_elem_sep Protocol getRemote concode_elem_sep void setRemote"]}
{"code": "Quotient < C > function ( long arg0 ) { return new Quotient < C > ( this , ring . fromInteger ( arg0 ) ) ; }", "nl": "get a quotient element from a long value . concode_field_sep RingFactory<C> ring concode_elem_sep boolean debug concode_elem_sep Logger logger concode_field_sep Quotient<C> random concode_elem_sep Quotient<C> random concode_elem_sep int hashCode concode_elem_sep boolean isField concode_elem_sep boolean equals concode_elem_sep Quotient<C> getONE concode_elem_sep boolean isCommutative concode_elem_sep Quotient<C> getZERO concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep Quotient<C> parse concode_elem_sep Quotient<C> parse concode_elem_sep Quotient<C> copy concode_elem_sep java.math.BigInteger characteristic", "code_tokens": ["Quotient", "<", "C", ">", "function", "(", "long", "arg0", ")", "{", "return", "new", "Quotient", "<", "C", ">", "(", "this", ",", "ring", ".", "fromInteger", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["get", "a", "quotient", "element", "from", "a", "long", "value", ".", "concode_field_sep", "RingFactory", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "Logger", "logger", "concode_field_sep", "Quotient", "<", "C", ">", "random", "concode_elem_sep", "Quotient", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Quotient", "<", "C", ">", "getONE", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "Quotient", "<", "C", ">", "getZERO", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Quotient", "<", "C", ">", "parse", "concode_elem_sep", "Quotient", "<", "C", ">", "parse", "concode_elem_sep", "Quotient", "<", "C", ">", "copy", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic"]}
{"code": "void function ( Element arg0 , Iterator arg1 ) { while ( arg1 . hasNext ( ) ) { final Object loc0 = arg1 . next ( ) ; if ( loc0 instanceof Column ) { addColumn ( arg0 , ( Column ) loc0 ) ; } else if ( loc0 instanceof Formula ) { addFormula ( arg0 , ( Formula ) loc0 ) ; } } }", "nl": "adds all column or formula elements . concode_field_sep PlaceHolder placeHolder concode_field_sep Element addNativelyGeneratedId concode_elem_sep Element addColumn concode_elem_sep Element addColumn concode_elem_sep void addColumn concode_elem_sep void addColumns concode_elem_sep String getModifiedFlagPropertyName concode_elem_sep Element createEntityCommon concode_elem_sep Element addOrModifyColumn concode_elem_sep Element addProperty concode_elem_sep Element addProperty concode_elem_sep Element createEntity concode_elem_sep Element createSubclassEntity concode_elem_sep void changeNamesInColumnElement concode_elem_sep void prefixNamesInPropertyElement concode_elem_sep Element addModifiedFlagProperty concode_elem_sep void addFormula concode_elem_sep ColumnNameIterator getColumnNameIterator concode_elem_sep ColumnNameIterator getColumnNameIterator concode_elem_sep Element createJoin concode_elem_sep void addOrModifyAttribute", "code_tokens": ["void", "function", "(", "Element", "arg0", ",", "Iterator", "arg1", ")", "{", "while", "(", "arg1", ".", "hasNext", "(", ")", ")", "{", "final", "Object", "loc0", "=", "arg1", ".", "next", "(", ")", ";", "if", "(", "loc0", "instanceof", "Column", ")", "{", "addColumn", "(", "arg0", ",", "(", "Column", ")", "loc0", ")", ";", "}", "else", "if", "(", "loc0", "instanceof", "Formula", ")", "{", "addFormula", "(", "arg0", ",", "(", "Formula", ")", "loc0", ")", ";", "}", "}", "}"], "nl_tokens": ["adds", "all", "column", "or", "formula", "elements", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Element", "addNativelyGeneratedId", "concode_elem_sep", "Element", "addColumn", "concode_elem_sep", "Element", "addColumn", "concode_elem_sep", "void", "addColumn", "concode_elem_sep", "void", "addColumns", "concode_elem_sep", "String", "getModifiedFlagPropertyName", "concode_elem_sep", "Element", "createEntityCommon", "concode_elem_sep", "Element", "addOrModifyColumn", "concode_elem_sep", "Element", "addProperty", "concode_elem_sep", "Element", "addProperty", "concode_elem_sep", "Element", "createEntity", "concode_elem_sep", "Element", "createSubclassEntity", "concode_elem_sep", "void", "changeNamesInColumnElement", "concode_elem_sep", "void", "prefixNamesInPropertyElement", "concode_elem_sep", "Element", "addModifiedFlagProperty", "concode_elem_sep", "void", "addFormula", "concode_elem_sep", "ColumnNameIterator", "getColumnNameIterator", "concode_elem_sep", "ColumnNameIterator", "getColumnNameIterator", "concode_elem_sep", "Element", "createJoin", "concode_elem_sep", "void", "addOrModifyAttribute"]}
{"code": "int function ( int arg0 ) { return ( ( 600 * arg0 + 99 ) % 2147483647 ) % ( hashArray . length ) ; }", "nl": "converts a hash code in the range integer.min _ value ... integer.max _ value to a value in the range 0 ... size of hash table - 1 . this function should have package protection so we can test it , and should be used by insert , find , and remove . concode_field_sep int entryNum concode_elem_sep List[] hashArray concode_field_sep int numCollisions concode_elem_sep int findBuckets concode_elem_sep int size concode_elem_sep Entry find concode_elem_sep void makeEmpty concode_elem_sep boolean isEmpty concode_elem_sep Entry insert concode_elem_sep void main concode_elem_sep int findPrimes concode_elem_sep Entry remove", "code_tokens": ["int", "function", "(", "int", "arg0", ")", "{", "return", "(", "(", "600", "*", "arg0", "+", "99", ")", "%", "2147483647", ")", "%", "(", "hashArray", ".", "length", ")", ";", "}"], "nl_tokens": ["converts", "a", "hash", "code", "in", "the", "range", "integer", ".", "min", "_", "value", "...", "integer", ".", "max", "_", "value", "to", "a", "value", "in", "the", "range", "0", "...", "size", "of", "hash", "table", "-", "1", ".", "this", "function", "should", "have", "package", "protection", "so", "we", "can", "test", "it", ",", "and", "should", "be", "used", "by", "insert", ",", "find", ",", "and", "remove", ".", "concode_field_sep", "int", "entryNum", "concode_elem_sep", "List", "[", "]", "hashArray", "concode_field_sep", "int", "numCollisions", "concode_elem_sep", "int", "findBuckets", "concode_elem_sep", "int", "size", "concode_elem_sep", "Entry", "find", "concode_elem_sep", "void", "makeEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "Entry", "insert", "concode_elem_sep", "void", "main", "concode_elem_sep", "int", "findPrimes", "concode_elem_sep", "Entry", "remove"]}
{"code": "void function ( int arg0 ) { _index = arg0 ; }", "nl": "set this widget 's index relative to it 's parent . concode_field_sep long serialVersionUID concode_elem_sep HashMap _map concode_elem_sep int UNASSIGNED concode_elem_sep int _index concode_elem_sep WidgetLocator _parentInfo concode_elem_sep Class _cls concode_elem_sep String _nameOrLabel concode_elem_sep IWidgetMatcher _matcher concode_field_sep int getIndex concode_elem_sep void setData concode_elem_sep WidgetLocator getParentInfo concode_elem_sep String getNameOrLabel concode_elem_sep IWidgetLocator[] findAll concode_elem_sep boolean matches concode_elem_sep Map getDataMap concode_elem_sep void setParentInfo concode_elem_sep Class getTargetClass concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep String getTargetClassName concode_elem_sep String getData", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "_index", "=", "arg0", ";", "}"], "nl_tokens": ["set", "this", "widget", "'s index relative to it '", "s", "parent", ".", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "HashMap", "_map", "concode_elem_sep", "int", "UNASSIGNED", "concode_elem_sep", "int", "_index", "concode_elem_sep", "WidgetLocator", "_parentInfo", "concode_elem_sep", "Class", "_cls", "concode_elem_sep", "String", "_nameOrLabel", "concode_elem_sep", "IWidgetMatcher", "_matcher", "concode_field_sep", "int", "getIndex", "concode_elem_sep", "void", "setData", "concode_elem_sep", "WidgetLocator", "getParentInfo", "concode_elem_sep", "String", "getNameOrLabel", "concode_elem_sep", "IWidgetLocator", "[", "]", "findAll", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "Map", "getDataMap", "concode_elem_sep", "void", "setParentInfo", "concode_elem_sep", "Class", "getTargetClass", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getTargetClassName", "concode_elem_sep", "String", "getData"]}
{"code": "void function ( ) { migrationDone = false ; }", "nl": "resets migration flag . should only be used in tests . concode_field_sep String APP_PREFS_NAME concode_elem_sep String PROFILE_PREFS_NAME_PREFIX concode_elem_sep String[] PROFILE_MIGRATIONS_0_TO_1 concode_elem_sep EnumSet<Flags> disableMigrations concode_elem_sep boolean migrationDone concode_elem_sep int PREFS_VERSION concode_elem_sep String LOGTAG concode_elem_sep String PREFS_VERSION_KEY concode_field_sep int getVersion concode_elem_sep void migrateIfNecessary concode_elem_sep SharedPreferences forApp concode_elem_sep SharedPreferences forApp concode_elem_sep Editor migrateFromPreferenceManager concode_elem_sep void performMigration concode_elem_sep SharedPreferences forProfile concode_elem_sep SharedPreferences forProfile concode_elem_sep SharedPreferences forProfileName concode_elem_sep SharedPreferences forProfileName concode_elem_sep void putEntry", "code_tokens": ["void", "function", "(", ")", "{", "migrationDone", "=", "false", ";", "}"], "nl_tokens": ["resets", "migration", "flag", ".", "should", "only", "be", "used", "in", "tests", ".", "concode_field_sep", "String", "APP_PREFS_NAME", "concode_elem_sep", "String", "PROFILE_PREFS_NAME_PREFIX", "concode_elem_sep", "String", "[", "]", "PROFILE_MIGRATIONS_0_TO_1", "concode_elem_sep", "EnumSet", "<", "Flags", ">", "disableMigrations", "concode_elem_sep", "boolean", "migrationDone", "concode_elem_sep", "int", "PREFS_VERSION", "concode_elem_sep", "String", "LOGTAG", "concode_elem_sep", "String", "PREFS_VERSION_KEY", "concode_field_sep", "int", "getVersion", "concode_elem_sep", "void", "migrateIfNecessary", "concode_elem_sep", "SharedPreferences", "forApp", "concode_elem_sep", "SharedPreferences", "forApp", "concode_elem_sep", "Editor", "migrateFromPreferenceManager", "concode_elem_sep", "void", "performMigration", "concode_elem_sep", "SharedPreferences", "forProfile", "concode_elem_sep", "SharedPreferences", "forProfile", "concode_elem_sep", "SharedPreferences", "forProfileName", "concode_elem_sep", "SharedPreferences", "forProfileName", "concode_elem_sep", "void", "putEntry"]}
{"code": "FluentIterable < T > function ( Function < ? super E , T > arg0 ) { List < T > loc0 = new ArrayList < > ( ) ; Iterator < E > loc1 = loc1 ( ) ; while ( loc1 . hasNext ( ) ) { loc0 . add ( arg0 . apply ( loc1 . next ( ) ) ) ; } return from ( loc0 ) ; }", "nl": "transforms this fluentiterable into a new one containing objects of the type t. concode_field_sep Iterable<E> iterable concode_field_sep FluentIterable<E> filter concode_elem_sep Iterator<E> iterator concode_elem_sep Optional<E> last concode_elem_sep FluentIterable<E> last concode_elem_sep Spliterator<E> spliterator concode_elem_sep void forEach concode_elem_sep int getRemainingElementsCount concode_elem_sep FluentIterable<E> from concode_elem_sep List<E> toList concode_elem_sep FluentIterable<E> fromCopyOf concode_elem_sep Optional<E> first concode_elem_sep FluentIterable<E> first concode_elem_sep List<E> asList", "code_tokens": ["FluentIterable", "<", "T", ">", "function", "(", "Function", "<", "?", "super", "E", ",", "T", ">", "arg0", ")", "{", "List", "<", "T", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "Iterator", "<", "E", ">", "loc1", "=", "loc1", "(", ")", ";", "while", "(", "loc1", ".", "hasNext", "(", ")", ")", "{", "loc0", ".", "add", "(", "arg0", ".", "apply", "(", "loc1", ".", "next", "(", ")", ")", ")", ";", "}", "return", "from", "(", "loc0", ")", ";", "}"], "nl_tokens": ["transforms", "this", "fluentiterable", "into", "a", "new", "one", "containing", "objects", "of", "the", "type", "t", ".", "concode_field_sep", "Iterable", "<", "E", ">", "iterable", "concode_field_sep", "FluentIterable", "<", "E", ">", "filter", "concode_elem_sep", "Iterator", "<", "E", ">", "iterator", "concode_elem_sep", "Optional", "<", "E", ">", "last", "concode_elem_sep", "FluentIterable", "<", "E", ">", "last", "concode_elem_sep", "Spliterator", "<", "E", ">", "spliterator", "concode_elem_sep", "void", "forEach", "concode_elem_sep", "int", "getRemainingElementsCount", "concode_elem_sep", "FluentIterable", "<", "E", ">", "from", "concode_elem_sep", "List", "<", "E", ">", "toList", "concode_elem_sep", "FluentIterable", "<", "E", ">", "fromCopyOf", "concode_elem_sep", "Optional", "<", "E", ">", "first", "concode_elem_sep", "FluentIterable", "<", "E", ">", "first", "concode_elem_sep", "List", "<", "E", ">", "asList"]}
{"code": "String function ( String arg0 ) { if ( arg0 == null ) { return null ; } try { return encode ( arg0 , getDefaultCharset ( ) ) ; } catch ( UnsupportedEncodingException loc0 ) { throw new EncoderException ( loc0 . getMessage ( ) , loc0 ) ; } }", "nl": "encodes a string into its quoted-printable form using the default string charset . unsafe characters are escaped . this function implements a subset of quoted-printable encoding specification rule # 1 and rule # 2 as defined in rfc 1521 and is suitable for encoding binary data . concode_field_sep String charset concode_elem_sep BitSet PRINTABLE_CHARS concode_elem_sep byte SPACE concode_elem_sep byte ESCAPE_CHAR concode_elem_sep byte TAB concode_field_sep byte[] decodeQuotedPrintable concode_elem_sep void encodeQuotedPrintable concode_elem_sep byte[] encodeQuotedPrintable concode_elem_sep String getDefaultCharset concode_elem_sep byte[] decode concode_elem_sep String decode concode_elem_sep String decode concode_elem_sep Object decode", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "null", ";", "}", "try", "{", "return", "encode", "(", "arg0", ",", "getDefaultCharset", "(", ")", ")", ";", "}", "catch", "(", "UnsupportedEncodingException", "loc0", ")", "{", "throw", "new", "EncoderException", "(", "loc0", ".", "getMessage", "(", ")", ",", "loc0", ")", ";", "}", "}"], "nl_tokens": ["encodes", "a", "string", "into", "its", "quoted", "-", "printable", "form", "using", "the", "default", "string", "charset", ".", "unsafe", "characters", "are", "escaped", ".", "this", "function", "implements", "a", "subset", "of", "quoted", "-", "printable", "encoding", "specification", "rule", "# 1 and rule # 2 as defined in rfc 1521 and is suitable for encoding binary data . concode_field_sep String charset concode_elem_sep BitSet PRINTABLE_CHARS concode_elem_sep byte SPACE concode_elem_sep byte ESCAPE_CHAR concode_elem_sep byte TAB concode_field_sep byte[] decodeQuotedPrintable concode_elem_sep void encodeQuotedPrintable concode_elem_sep byte[] encodeQuotedPrintable concode_elem_sep String getDefaultCharset concode_elem_sep byte[] decode concode_elem_sep String decode concode_elem_sep String decode concode_elem_sep Object decode"]}
{"code": "void function ( Graphics arg0 , int arg1 ) { this . obstacleSize = arg1 ; if ( isUp ) { arg0 . setColor ( new Color ( 212 , 129 , 78 ) ) ; arg0 . fill3DRect ( x , y , 150 , gameHeight - arg1 - 150 , true ) ; } else { arg0 . setColor ( new Color ( 212 , 129 , 78 ) ) ; arg0 . fill3DRect ( x , y , 150 , arg1 , true ) ; } }", "nl": "draws the obstacle with declared size . concode_field_sep int obstacleSize concode_elem_sep int RESET_POSITION concode_elem_sep int gameWidth concode_elem_sep int obstacleHeigth concode_elem_sep int gameHeight concode_elem_sep boolean isUp concode_elem_sep int x concode_elem_sep int y concode_elem_sep int resetPosition concode_elem_sep int MOVE concode_field_sep void move concode_elem_sep boolean colideDownX concode_elem_sep boolean crashOnObstacle concode_elem_sep void resetObstaclePosition concode_elem_sep boolean colideUpX concode_elem_sep boolean colideDown concode_elem_sep boolean colideUp", "code_tokens": ["void", "function", "(", "Graphics", "arg0", ",", "int", "arg1", ")", "{", "this", ".", "obstacleSize", "=", "arg1", ";", "if", "(", "isUp", ")", "{", "arg0", ".", "setColor", "(", "new", "Color", "(", "212", ",", "129", ",", "78", ")", ")", ";", "arg0", ".", "fill3DRect", "(", "x", ",", "y", ",", "150", ",", "gameHeight", "-", "arg1", "-", "150", ",", "true", ")", ";", "}", "else", "{", "arg0", ".", "setColor", "(", "new", "Color", "(", "212", ",", "129", ",", "78", ")", ")", ";", "arg0", ".", "fill3DRect", "(", "x", ",", "y", ",", "150", ",", "arg1", ",", "true", ")", ";", "}", "}"], "nl_tokens": ["draws", "the", "obstacle", "with", "declared", "size", ".", "concode_field_sep", "int", "obstacleSize", "concode_elem_sep", "int", "RESET_POSITION", "concode_elem_sep", "int", "gameWidth", "concode_elem_sep", "int", "obstacleHeigth", "concode_elem_sep", "int", "gameHeight", "concode_elem_sep", "boolean", "isUp", "concode_elem_sep", "int", "x", "concode_elem_sep", "int", "y", "concode_elem_sep", "int", "resetPosition", "concode_elem_sep", "int", "MOVE", "concode_field_sep", "void", "move", "concode_elem_sep", "boolean", "colideDownX", "concode_elem_sep", "boolean", "crashOnObstacle", "concode_elem_sep", "void", "resetObstaclePosition", "concode_elem_sep", "boolean", "colideUpX", "concode_elem_sep", "boolean", "colideDown", "concode_elem_sep", "boolean", "colideUp"]}
{"code": "void function ( final String [ ] arg0 ) { final CustomerDao loc0 = new InMemoryCustomerDao ( ) ; performOperationsUsing ( loc0 ) ; final DataSource loc1 = createDataSource ( ) ; createSchema ( loc1 ) ; final CustomerDao loc2 = new DbCustomerDao ( loc1 ) ; performOperationsUsing ( loc2 ) ; deleteSchema ( loc1 ) ; }", "nl": "program entry point . concode_field_sep String DB_URL concode_elem_sep Logger log concode_field_sep void deleteSchema concode_elem_sep void addCustomers concode_elem_sep DataSource createDataSource concode_elem_sep void createSchema concode_elem_sep void performOperationsUsing concode_elem_sep List<Customer> generateSampleCustomers", "code_tokens": ["void", "function", "(", "final", "String", "[", "]", "arg0", ")", "{", "final", "CustomerDao", "loc0", "=", "new", "InMemoryCustomerDao", "(", ")", ";", "performOperationsUsing", "(", "loc0", ")", ";", "final", "DataSource", "loc1", "=", "createDataSource", "(", ")", ";", "createSchema", "(", "loc1", ")", ";", "final", "CustomerDao", "loc2", "=", "new", "DbCustomerDao", "(", "loc1", ")", ";", "performOperationsUsing", "(", "loc2", ")", ";", "deleteSchema", "(", "loc1", ")", ";", "}"], "nl_tokens": ["program", "entry", "point", ".", "concode_field_sep", "String", "DB_URL", "concode_elem_sep", "Logger", "log", "concode_field_sep", "void", "deleteSchema", "concode_elem_sep", "void", "addCustomers", "concode_elem_sep", "DataSource", "createDataSource", "concode_elem_sep", "void", "createSchema", "concode_elem_sep", "void", "performOperationsUsing", "concode_elem_sep", "List", "<", "Customer", ">", "generateSampleCustomers"]}
{"code": "SpringConfig function ( double arg0 , double arg1 ) { return new SpringConfig ( OrigamiValueConverter . tensionFromOrigamiValue ( arg0 ) , OrigamiValueConverter . frictionFromOrigamiValue ( arg1 ) ) ; }", "nl": "a helper to make creating a springconfig easier with values mapping to the origami values . concode_field_sep double tension concode_elem_sep double friction concode_elem_sep SpringConfig defaultConfig concode_field_sep placeholderType placeHolder", "code_tokens": ["SpringConfig", "function", "(", "double", "arg0", ",", "double", "arg1", ")", "{", "return", "new", "SpringConfig", "(", "OrigamiValueConverter", ".", "tensionFromOrigamiValue", "(", "arg0", ")", ",", "OrigamiValueConverter", ".", "frictionFromOrigamiValue", "(", "arg1", ")", ")", ";", "}"], "nl_tokens": ["a", "helper", "to", "make", "creating", "a", "springconfig", "easier", "with", "values", "mapping", "to", "the", "origami", "values", ".", "concode_field_sep", "double", "tension", "concode_elem_sep", "double", "friction", "concode_elem_sep", "SpringConfig", "defaultConfig", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "List < ApplicationPredecessorRelation > function ( ) { if ( applicationPredecessors == null ) { applicationPredecessors = new ArrayList < ApplicationPredecessorRelation > ( ) ; } return this . applicationPredecessors ; }", "nl": "gets the value of the applicationpredecessors property . this accessor method returns a reference to the live list , not a snapshot . therefore any modification you make to the returned list will be present inside the jaxb object . this is why there is not a set method for the applicationpredecessors property . for example , to add a new item , do as follows : getapplicationpredecessors . add newitem ; objects of the following type s are allowed in the list applicationpredecessorrelation concode_field_sep List<ApplicationPredecessorRelation> applicationPredecessors concode_elem_sep List<ApplicationID> removedApplications concode_elem_sep List<Application> applications concode_field_sep List<Application> getApplications concode_elem_sep List<ApplicationID> getRemovedApplications", "code_tokens": ["List", "<", "ApplicationPredecessorRelation", ">", "function", "(", ")", "{", "if", "(", "applicationPredecessors", "==", "null", ")", "{", "applicationPredecessors", "=", "new", "ArrayList", "<", "ApplicationPredecessorRelation", ">", "(", ")", ";", "}", "return", "this", ".", "applicationPredecessors", ";", "}"], "nl_tokens": ["gets", "the", "value", "of", "the", "applicationpredecessors", "property", ".", "this", "accessor", "method", "returns", "a", "reference", "to", "the", "live", "list", ",", "not", "a", "snapshot", ".", "therefore", "any", "modification", "you", "make", "to", "the", "returned", "list", "will", "be", "present", "inside", "the", "jaxb", "object", ".", "this", "is", "why", "there", "is", "not", "a", "set", "method", "for", "the", "applicationpredecessors", "property", ".", "for", "example", ",", "to", "add", "a", "new", "item", ",", "do", "as", "follows", ":", "getapplicationpredecessors", ".", "add", "newitem", ";", "objects", "of", "the", "following", "type", "s", "are", "allowed", "in", "the", "list", "applicationpredecessorrelation", "concode_field_sep", "List", "<", "ApplicationPredecessorRelation", ">", "applicationPredecessors", "concode_elem_sep", "List", "<", "ApplicationID", ">", "removedApplications", "concode_elem_sep", "List", "<", "Application", ">", "applications", "concode_field_sep", "List", "<", "Application", ">", "getApplications", "concode_elem_sep", "List", "<", "ApplicationID", ">", "getRemovedApplications"]}
{"code": "void function ( final int arg0 ) { this . m_negativeYErrorPixel = arg0 ; }", "nl": "intended for aerrorbarpolicyconfigurable only . concode_field_sep int m_negativeYErrorPixel concode_elem_sep int m_negativeXErrorPixel concode_elem_sep int m_positiveYErrorPixel concode_elem_sep int m_positiveXErrorPixel concode_elem_sep ITrace2D m_trace concode_elem_sep long serialVersionUID concode_field_sep void setTrace concode_elem_sep void setPositiveXErrorPixel concode_elem_sep int getNegativeXErrorPixel concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep int getPositiveYErrorPixel concode_elem_sep void clear concode_elem_sep void setPositiveYErrorPixel concode_elem_sep ITrace2D getTrace concode_elem_sep void setNegativeXErrorPixel concode_elem_sep int getPositiveXErrorPixel concode_elem_sep int getNegativeYErrorPixel", "code_tokens": ["void", "function", "(", "final", "int", "arg0", ")", "{", "this", ".", "m_negativeYErrorPixel", "=", "arg0", ";", "}"], "nl_tokens": ["intended", "for", "aerrorbarpolicyconfigurable", "only", ".", "concode_field_sep", "int", "m_negativeYErrorPixel", "concode_elem_sep", "int", "m_negativeXErrorPixel", "concode_elem_sep", "int", "m_positiveYErrorPixel", "concode_elem_sep", "int", "m_positiveXErrorPixel", "concode_elem_sep", "ITrace2D", "m_trace", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "void", "setTrace", "concode_elem_sep", "void", "setPositiveXErrorPixel", "concode_elem_sep", "int", "getNegativeXErrorPixel", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "int", "getPositiveYErrorPixel", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "setPositiveYErrorPixel", "concode_elem_sep", "ITrace2D", "getTrace", "concode_elem_sep", "void", "setNegativeXErrorPixel", "concode_elem_sep", "int", "getPositiveXErrorPixel", "concode_elem_sep", "int", "getNegativeYErrorPixel"]}
{"code": "void function ( Object arg0 ) { getListIterator ( ) . add ( arg0 ) ; }", "nl": "invokes the underlying listiterator #add object method . concode_field_sep ListIterator iterator concode_field_sep Object next concode_elem_sep void set concode_elem_sep Object previous concode_elem_sep boolean hasPrevious concode_elem_sep boolean hasNext concode_elem_sep ListIterator getListIterator concode_elem_sep int nextIndex concode_elem_sep int previousIndex concode_elem_sep void remove concode_elem_sep void setListIterator", "code_tokens": ["void", "function", "(", "Object", "arg0", ")", "{", "getListIterator", "(", ")", ".", "add", "(", "arg0", ")", ";", "}"], "nl_tokens": ["invokes", "the", "underlying", "listiterator", "#add object method . concode_field_sep ListIterator iterator concode_field_sep Object next concode_elem_sep void set concode_elem_sep Object previous concode_elem_sep boolean hasPrevious concode_elem_sep boolean hasNext concode_elem_sep ListIterator getListIterator concode_elem_sep int nextIndex concode_elem_sep int previousIndex concode_elem_sep void remove concode_elem_sep void setListIterator"]}
{"code": "void function ( ) { X509Certificate [ ] loc0 = CertificateChainFactory . getClientChain ( ) ; validateChain ( loc0 ) ; }", "nl": "tests construction of the client chain . the created certificates can be displayed with a command like : openssl pkcs12 - nodes - info - in / tmp/test . p12 > / tmp/test . cert & & openssl x509 - noout - text - in / tmp/test . cert concode_field_sep PlaceHolder placeHolder concode_field_sep void validateChain concode_elem_sep void testKdcChain concode_elem_sep void setUp", "code_tokens": ["void", "function", "(", ")", "{", "X509Certificate", "[", "]", "loc0", "=", "CertificateChainFactory", ".", "getClientChain", "(", ")", ";", "validateChain", "(", "loc0", ")", ";", "}"], "nl_tokens": ["tests", "construction", "of", "the", "client", "chain", ".", "the", "created", "certificates", "can", "be", "displayed", "with", "a", "command", "like", ":", "openssl", "pkcs12", "-", "nodes", "-", "info", "-", "in", "/", "tmp", "/", "test", ".", "p12", ">", "/", "tmp", "/", "test", ".", "cert", "&", "&", "openssl", "x509", "-", "noout", "-", "text", "-", "in", "/", "tmp", "/", "test", ".", "cert", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "validateChain", "concode_elem_sep", "void", "testKdcChain", "concode_elem_sep", "void", "setUp"]}
{"code": "String function ( byte [ ] arg0 ) { int loc0 = arg0 . length * 2 ; char [ ] loc1 = new char [ loc0 ] ; for ( int loc2 = 0 ; loc2 < arg0 . length ; loc2 ++ ) { int loc3 = arg0 [ loc2 ] & 0xFF ; loc1 [ loc2 * 2 ] = HEX_CHARS [ loc3 >>> 4 ] ; loc1 [ loc2 * 2 + 1 ] = HEX_CHARS [ loc3 & 0x0F ] ; } return new String ( loc1 ) ; }", "nl": "convert bytes into format as : 02020080 concode_field_sep char[] HEX_CHARS concode_elem_sep String HEX_CHARS_STR concode_field_sep byte[] hex2bytesFriendly concode_elem_sep String bytesToHexFriendly concode_elem_sep byte[] hex2bytes", "code_tokens": ["String", "function", "(", "byte", "[", "]", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "length", "*", "2", ";", "char", "[", "]", "loc1", "=", "new", "char", "[", "loc0", "]", ";", "for", "(", "int", "loc2", "=", "0", ";", "loc2", "<", "arg0", ".", "length", ";", "loc2", "+", "+", ")", "{", "int", "loc3", "=", "arg0", "[", "loc2", "]", "&", "0xFF", ";", "loc1", "[", "loc2", "*", "2", "]", "=", "HEX_CHARS", "[", "loc3", ">>", ">", "4", "]", ";", "loc1", "[", "loc2", "*", "2", "+", "1", "]", "=", "HEX_CHARS", "[", "loc3", "&", "0x0F", "]", ";", "}", "return", "new", "String", "(", "loc1", ")", ";", "}"], "nl_tokens": ["convert", "bytes", "into", "format", "as", ":", "0", "2020080", "concode_field_sep", "char", "[", "]", "HEX_CHARS", "concode_elem_sep", "String", "HEX_CHARS_STR", "concode_field_sep", "byte", "[", "]", "hex2bytesFriendly", "concode_elem_sep", "String", "bytesToHexFriendly", "concode_elem_sep", "byte", "[", "]", "hex2bytes"]}
{"code": "File function ( ) { return file ; }", "nl": "returns entity content as a file if set using #setfile java.io.file method . concode_field_sep File file concode_elem_sep boolean gzipCompress concode_elem_sep InputStream stream concode_elem_sep byte[] binary concode_elem_sep String contentEncoding concode_elem_sep boolean chunked concode_elem_sep String text concode_elem_sep List<NameValuePair> parameters concode_elem_sep Serializable serializable concode_elem_sep ContentType contentType concode_field_sep EntityBuilder setBinary concode_elem_sep String getContentEncoding concode_elem_sep boolean isGzipCompress concode_elem_sep EntityBuilder setStream concode_elem_sep String getText concode_elem_sep void clearContent concode_elem_sep EntityBuilder setContentEncoding concode_elem_sep EntityBuilder chunked concode_elem_sep EntityBuilder setSerializable concode_elem_sep EntityBuilder setParameters concode_elem_sep EntityBuilder setParameters concode_elem_sep Serializable getSerializable concode_elem_sep EntityBuilder setFile concode_elem_sep boolean isChunked concode_elem_sep EntityBuilder gzipCompress concode_elem_sep HttpEntity build concode_elem_sep List<NameValuePair> getParameters concode_elem_sep EntityBuilder create concode_elem_sep ContentType getContentType concode_elem_sep ContentType getContentOrDefault concode_elem_sep byte[] getBinary concode_elem_sep InputStream getStream concode_elem_sep EntityBuilder setContentType concode_elem_sep EntityBuilder setText", "code_tokens": ["File", "function", "(", ")", "{", "return", "file", ";", "}"], "nl_tokens": ["returns", "entity", "content", "as", "a", "file", "if", "set", "using", "#setfile java.io.file method . concode_field_sep File file concode_elem_sep boolean gzipCompress concode_elem_sep InputStream stream concode_elem_sep byte[] binary concode_elem_sep String contentEncoding concode_elem_sep boolean chunked concode_elem_sep String text concode_elem_sep List<NameValuePair> parameters concode_elem_sep Serializable serializable concode_elem_sep ContentType contentType concode_field_sep EntityBuilder setBinary concode_elem_sep String getContentEncoding concode_elem_sep boolean isGzipCompress concode_elem_sep EntityBuilder setStream concode_elem_sep String getText concode_elem_sep void clearContent concode_elem_sep EntityBuilder setContentEncoding concode_elem_sep EntityBuilder chunked concode_elem_sep EntityBuilder setSerializable concode_elem_sep EntityBuilder setParameters concode_elem_sep EntityBuilder setParameters concode_elem_sep Serializable getSerializable concode_elem_sep EntityBuilder setFile concode_elem_sep boolean isChunked concode_elem_sep EntityBuilder gzipCompress concode_elem_sep HttpEntity build concode_elem_sep List<NameValuePair> getParameters concode_elem_sep EntityBuilder create concode_elem_sep ContentType getContentType concode_elem_sep ContentType getContentOrDefault concode_elem_sep byte[] getBinary concode_elem_sep InputStream getStream concode_elem_sep EntityBuilder setContentType concode_elem_sep EntityBuilder setText"]}
{"code": "Buffer function ( Buffer arg0 , Class arg1 ) { return new PredicatedBuffer ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }", "nl": "factory method to create a typed list . if there are any elements already in the buffer being decorated , they are validated . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["Buffer", "function", "(", "Buffer", "arg0", ",", "Class", "arg1", ")", "{", "return", "new", "PredicatedBuffer", "(", "arg0", ",", "InstanceofPredicate", ".", "getInstance", "(", "arg1", ")", ")", ";", "}"], "nl_tokens": ["factory", "method", "to", "create", "a", "typed", "list", ".", "if", "there", "are", "any", "elements", "already", "in", "the", "buffer", "being", "decorated", ",", "they", "are", "validated", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "void function ( ) { commonTests ( ) ; findHibernateBundle ( \"srini_string\" ) . stop ( ) ; testHibernateBundle ( \"srini_string\" , Bundle . RESOLVED ) ; assertNull ( context . getServiceReference ( OsgiSessionFactoryService . class ) ) ; assertNull ( context . getServiceReference ( OsgiPersistenceProviderService . class ) ) ; }", "nl": "test that stopping the hibernate-osgi bundle happens cleanly . todo : this will be really simplistic at first , but should be expanded upon . concode_field_sep BundleContext context concode_field_sep void testNative concode_elem_sep void commonTests concode_elem_sep void testLazyLoading concode_elem_sep void testClientBundle concode_elem_sep Bundle findHibernateBundle concode_elem_sep void testExtensionPoints concode_elem_sep void testHibernateBundle concode_elem_sep TestService getTestService concode_elem_sep JavaArchive deployment concode_elem_sep void testJpa", "code_tokens": ["void", "function", "(", ")", "{", "commonTests", "(", ")", ";", "findHibernateBundle", "(", "\"srini_string\"", ")", ".", "stop", "(", ")", ";", "testHibernateBundle", "(", "\"srini_string\"", ",", "Bundle", ".", "RESOLVED", ")", ";", "assertNull", "(", "context", ".", "getServiceReference", "(", "OsgiSessionFactoryService", ".", "class", ")", ")", ";", "assertNull", "(", "context", ".", "getServiceReference", "(", "OsgiPersistenceProviderService", ".", "class", ")", ")", ";", "}"], "nl_tokens": ["test", "that", "stopping", "the", "hibernate", "-", "osgi", "bundle", "happens", "cleanly", ".", "todo", ":", "this", "will", "be", "really", "simplistic", "at", "first", ",", "but", "should", "be", "expanded", "upon", ".", "concode_field_sep", "BundleContext", "context", "concode_field_sep", "void", "testNative", "concode_elem_sep", "void", "commonTests", "concode_elem_sep", "void", "testLazyLoading", "concode_elem_sep", "void", "testClientBundle", "concode_elem_sep", "Bundle", "findHibernateBundle", "concode_elem_sep", "void", "testExtensionPoints", "concode_elem_sep", "void", "testHibernateBundle", "concode_elem_sep", "TestService", "getTestService", "concode_elem_sep", "JavaArchive", "deployment", "concode_elem_sep", "void", "testJpa"]}
{"code": "Map < String , String > function ( ) { return Collections . unmodifiableMap ( variantMap ) ; }", "nl": "returns an index about where in the cache different variants for a given resource are stored . this maps `` variant keys '' to `` cache keys '' , where the variant key is derived from the varying request headers , and the cache key is the location in the ch.boye.httpclientandroidlib.client.cache.httpcachestorage where thatparticular variant is stored . the first variant returned is used as the `` parent '' entry to hold this index of the other variants . concode_field_sep Date date concode_elem_sep Map<String,String> variantMap concode_elem_sep StatusLine statusLine concode_elem_sep HeaderGroup responseHeaders concode_elem_sep Resource resource concode_elem_sep Date requestDate concode_elem_sep long serialVersionUID concode_elem_sep Date responseDate concode_field_sep Resource getResource concode_elem_sep Header[] getHeaders concode_elem_sep Header getFirstHeader concode_elem_sep Header[] getAllHeaders concode_elem_sep String getReasonPhrase concode_elem_sep ProtocolVersion getProtocolVersion concode_elem_sep Date getResponseDate concode_elem_sep boolean hasVariants concode_elem_sep Date parseDate concode_elem_sep int getStatusCode concode_elem_sep StatusLine getStatusLine concode_elem_sep Date getDate concode_elem_sep String toString concode_elem_sep Date getRequestDate", "code_tokens": ["Map", "<", "String", ",", "String", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableMap", "(", "variantMap", ")", ";", "}"], "nl_tokens": ["returns", "an", "index", "about", "where", "in", "the", "cache", "different", "variants", "for", "a", "given", "resource", "are", "stored", ".", "this", "maps", "`", "`", "variant", "keys", "''", "to", "`", "`", "cache", "keys", "''", ",", "where", "the", "variant", "key", "is", "derived", "from", "the", "varying", "request", "headers", ",", "and", "the", "cache", "key", "is", "the", "location", "in", "the", "ch", ".", "boye", ".", "httpclientandroidlib", ".", "client", ".", "cache", ".", "httpcachestorage", "where", "thatparticular", "variant", "is", "stored", ".", "the", "first", "variant", "returned", "is", "used", "as", "the", "`", "`", "parent", "''", "entry", "to", "hold", "this", "index", "of", "the", "other", "variants", ".", "concode_field_sep", "Date", "date", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "variantMap", "concode_elem_sep", "StatusLine", "statusLine", "concode_elem_sep", "HeaderGroup", "responseHeaders", "concode_elem_sep", "Resource", "resource", "concode_elem_sep", "Date", "requestDate", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "Date", "responseDate", "concode_field_sep", "Resource", "getResource", "concode_elem_sep", "Header", "[", "]", "getHeaders", "concode_elem_sep", "Header", "getFirstHeader", "concode_elem_sep", "Header", "[", "]", "getAllHeaders", "concode_elem_sep", "String", "getReasonPhrase", "concode_elem_sep", "ProtocolVersion", "getProtocolVersion", "concode_elem_sep", "Date", "getResponseDate", "concode_elem_sep", "boolean", "hasVariants", "concode_elem_sep", "Date", "parseDate", "concode_elem_sep", "int", "getStatusCode", "concode_elem_sep", "StatusLine", "getStatusLine", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Date", "getRequestDate"]}
{"code": "int function ( ) { if ( allowUdp ( ) ) { int loc0 = getKdcUdpPort ( ) ; if ( loc0 < 1 ) { throw new KrbException ( \"srini_string\" ) ; } return loc0 ; } return - 1 ; }", "nl": "check kdc udp setting and see if any bad . concode_field_sep KdcConfig kdcConfig concode_elem_sep BackendConfig backendConfig concode_elem_sep KOptions startupOptions concode_field_sep int getKdcTcpPort concode_elem_sep int getKdcPort concode_elem_sep String getKdcRealm concode_elem_sep int checkGetKdcTcpPort concode_elem_sep int getKdcUdpPort concode_elem_sep boolean allowTcp concode_elem_sep boolean allowUdp concode_elem_sep KdcConfig getKdcConfig concode_elem_sep String getKdcHost concode_elem_sep BackendConfig getBackendConfig", "code_tokens": ["int", "function", "(", ")", "{", "if", "(", "allowUdp", "(", ")", ")", "{", "int", "loc0", "=", "getKdcUdpPort", "(", ")", ";", "if", "(", "loc0", "<", "1", ")", "{", "throw", "new", "KrbException", "(", "\"srini_string\"", ")", ";", "}", "return", "loc0", ";", "}", "return", "-", "1", ";", "}"], "nl_tokens": ["check", "kdc", "udp", "setting", "and", "see", "if", "any", "bad", ".", "concode_field_sep", "KdcConfig", "kdcConfig", "concode_elem_sep", "BackendConfig", "backendConfig", "concode_elem_sep", "KOptions", "startupOptions", "concode_field_sep", "int", "getKdcTcpPort", "concode_elem_sep", "int", "getKdcPort", "concode_elem_sep", "String", "getKdcRealm", "concode_elem_sep", "int", "checkGetKdcTcpPort", "concode_elem_sep", "int", "getKdcUdpPort", "concode_elem_sep", "boolean", "allowTcp", "concode_elem_sep", "boolean", "allowUdp", "concode_elem_sep", "KdcConfig", "getKdcConfig", "concode_elem_sep", "String", "getKdcHost", "concode_elem_sep", "BackendConfig", "getBackendConfig"]}
{"code": "LoadPlan function ( LoadPlanBuildingAssociationVisitationStrategy arg0 , EntityPersister arg1 ) { MetamodelGraphWalker . visitEntity ( arg0 , arg1 ) ; return arg0 . buildLoadPlan ( ) ; }", "nl": "coordinates building a loadplan that defines just a single root entity return may have fetches . typically this includes building load plans for entity loading or cascade loading . concode_field_sep PlaceHolder placeHolder concode_field_sep LoadPlan buildRootCollectionLoadPlan", "code_tokens": ["LoadPlan", "function", "(", "LoadPlanBuildingAssociationVisitationStrategy", "arg0", ",", "EntityPersister", "arg1", ")", "{", "MetamodelGraphWalker", ".", "visitEntity", "(", "arg0", ",", "arg1", ")", ";", "return", "arg0", ".", "buildLoadPlan", "(", ")", ";", "}"], "nl_tokens": ["coordinates", "building", "a", "loadplan", "that", "defines", "just", "a", "single", "root", "entity", "return", "may", "have", "fetches", ".", "typically", "this", "includes", "building", "load", "plans", "for", "entity", "loading", "or", "cascade", "loading", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "LoadPlan", "buildRootCollectionLoadPlan"]}
{"code": "boolean function ( ProjCoordinate arg0 , double arg1 ) { double loc0 = arg0 . x - this . x ; if ( loc0 > arg1 ) { return false ; } else { return true ; } }", "nl": "returns a boolean indicating if the x ordinate value of the projcoordinate provided as an ordinate is equal to the x ordinate value of this projcoordinate . because we are working with floating point numbers the ordinates are considered equal if the difference between them is less than the specified tolerance . concode_field_sep DecimalFormat DECIMAL_FORMAT concode_elem_sep double x concode_elem_sep String DECIMAL_FORMAT_PATTERN concode_elem_sep double y concode_elem_sep double z concode_field_sep String toShortString concode_elem_sep boolean areZOrdinatesEqual concode_elem_sep boolean hasValidZOrdinate concode_elem_sep int hashCode concode_elem_sep int hashCode concode_elem_sep void setValue concode_elem_sep void setValue concode_elem_sep void setValue concode_elem_sep boolean areYOrdinatesEqual concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep boolean hasValidXandYOrdinates concode_elem_sep void clearZ", "code_tokens": ["boolean", "function", "(", "ProjCoordinate", "arg0", ",", "double", "arg1", ")", "{", "double", "loc0", "=", "arg0", ".", "x", "-", "this", ".", "x", ";", "if", "(", "loc0", ">", "arg1", ")", "{", "return", "false", ";", "}", "else", "{", "return", "true", ";", "}", "}"], "nl_tokens": ["returns", "a", "boolean", "indicating", "if", "the", "x", "ordinate", "value", "of", "the", "projcoordinate", "provided", "as", "an", "ordinate", "is", "equal", "to", "the", "x", "ordinate", "value", "of", "this", "projcoordinate", ".", "because", "we", "are", "working", "with", "floating", "point", "numbers", "the", "ordinates", "are", "considered", "equal", "if", "the", "difference", "between", "them", "is", "less", "than", "the", "specified", "tolerance", ".", "concode_field_sep", "DecimalFormat", "DECIMAL_FORMAT", "concode_elem_sep", "double", "x", "concode_elem_sep", "String", "DECIMAL_FORMAT_PATTERN", "concode_elem_sep", "double", "y", "concode_elem_sep", "double", "z", "concode_field_sep", "String", "toShortString", "concode_elem_sep", "boolean", "areZOrdinatesEqual", "concode_elem_sep", "boolean", "hasValidZOrdinate", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "boolean", "areYOrdinatesEqual", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "hasValidXandYOrdinates", "concode_elem_sep", "void", "clearZ"]}
{"code": "void function ( Object arg0 , Throwable arg1 ) { if ( isLevelEnabled ( MemoryLog . LOG_LEVEL_WARN ) ) { log ( MemoryLog . LOG_LEVEL_WARN , arg0 , arg1 ) ; } }", "nl": "log an error with warn log level . concode_field_sep Date date concode_elem_sep int LOG_LEVEL_DEBUG concode_elem_sep int level concode_elem_sep Throwable throwable concode_elem_sep List logEntries concode_elem_sep int LOG_LEVEL_OFF concode_elem_sep Object message concode_elem_sep int LOG_LEVEL_WARN concode_elem_sep int LOG_LEVEL_TRACE concode_elem_sep int LOG_LEVEL_ERROR concode_elem_sep int LOG_LEVEL_INFO concode_elem_sep String logName concode_elem_sep String name concode_elem_sep int LOG_LEVEL_FATAL concode_elem_sep int LOG_LEVEL_ALL concode_elem_sep int currentLogLevel concode_field_sep void debug concode_elem_sep void debug concode_elem_sep void log concode_elem_sep Object getMessage concode_elem_sep boolean isLevelEnabled concode_elem_sep boolean isWarnEnabled concode_elem_sep void error concode_elem_sep void error concode_elem_sep boolean isFatalEnabled concode_elem_sep void setLevel concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep String getLogName concode_elem_sep int getLevel concode_elem_sep int getLevel concode_elem_sep void trace concode_elem_sep void trace concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep void reset concode_elem_sep boolean isTraceEnabled concode_elem_sep Date getDate concode_elem_sep boolean isDebugEnabled concode_elem_sep Throwable getThrowable concode_elem_sep List getLogEntries concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["void", "function", "(", "Object", "arg0", ",", "Throwable", "arg1", ")", "{", "if", "(", "isLevelEnabled", "(", "MemoryLog", ".", "LOG_LEVEL_WARN", ")", ")", "{", "log", "(", "MemoryLog", ".", "LOG_LEVEL_WARN", ",", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl_tokens": ["log", "an", "error", "with", "warn", "log", "level", ".", "concode_field_sep", "Date", "date", "concode_elem_sep", "int", "LOG_LEVEL_DEBUG", "concode_elem_sep", "int", "level", "concode_elem_sep", "Throwable", "throwable", "concode_elem_sep", "List", "logEntries", "concode_elem_sep", "int", "LOG_LEVEL_OFF", "concode_elem_sep", "Object", "message", "concode_elem_sep", "int", "LOG_LEVEL_WARN", "concode_elem_sep", "int", "LOG_LEVEL_TRACE", "concode_elem_sep", "int", "LOG_LEVEL_ERROR", "concode_elem_sep", "int", "LOG_LEVEL_INFO", "concode_elem_sep", "String", "logName", "concode_elem_sep", "String", "name", "concode_elem_sep", "int", "LOG_LEVEL_FATAL", "concode_elem_sep", "int", "LOG_LEVEL_ALL", "concode_elem_sep", "int", "currentLogLevel", "concode_field_sep", "void", "debug", "concode_elem_sep", "void", "debug", "concode_elem_sep", "void", "log", "concode_elem_sep", "Object", "getMessage", "concode_elem_sep", "boolean", "isLevelEnabled", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "error", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "setLevel", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "String", "getLogName", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "trace", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "void", "reset", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "Throwable", "getThrowable", "concode_elem_sep", "List", "getLogEntries", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "ScheduledExecutorService function ( final ScheduledExecutorService arg0 ) { return new ContextScheduledExecutorService ( arg0 ) ; }", "nl": "returns a scheduledexecutorservice that wraps ables before submission to the passed in scheduledexecutorservice . concode_field_sep Field causeField concode_field_sep void handleException concode_elem_sep StackTraceElement[] getStackContext concode_elem_sep Throwable findRootCause concode_elem_sep Callable<T> makeContextCallable concode_elem_sep Runnable makeContextRunnable concode_elem_sep List<Callable<T>> makeContextWrappedCollection", "code_tokens": ["ScheduledExecutorService", "function", "(", "final", "ScheduledExecutorService", "arg0", ")", "{", "return", "new", "ContextScheduledExecutorService", "(", "arg0", ")", ";", "}"], "nl_tokens": ["returns", "a", "scheduledexecutorservice", "that", "wraps", "ables", "before", "submission", "to", "the", "passed", "in", "scheduledexecutorservice", ".", "concode_field_sep", "Field", "causeField", "concode_field_sep", "void", "handleException", "concode_elem_sep", "StackTraceElement", "[", "]", "getStackContext", "concode_elem_sep", "Throwable", "findRootCause", "concode_elem_sep", "Callable", "<", "T", ">", "makeContextCallable", "concode_elem_sep", "Runnable", "makeContextRunnable", "concode_elem_sep", "List", "<", "Callable", "<", "T", ">>", "makeContextWrappedCollection"]}
{"code": "Builder function ( ) { return new Builder ( ) ; }", "nl": "creates builder to build path . concode_field_sep String path concode_elem_sep Path EMPTY concode_elem_sep String relativeTo concode_field_sep Builder withPath concode_elem_sep Path build concode_elem_sep String getPath concode_elem_sep String asString concode_elem_sep String getRelativeTo concode_elem_sep Builder withRelativeTo", "code_tokens": ["Builder", "function", "(", ")", "{", "return", "new", "Builder", "(", ")", ";", "}"], "nl_tokens": ["creates", "builder", "to", "build", "path", ".", "concode_field_sep", "String", "path", "concode_elem_sep", "Path", "EMPTY", "concode_elem_sep", "String", "relativeTo", "concode_field_sep", "Builder", "withPath", "concode_elem_sep", "Path", "build", "concode_elem_sep", "String", "getPath", "concode_elem_sep", "String", "asString", "concode_elem_sep", "String", "getRelativeTo", "concode_elem_sep", "Builder", "withRelativeTo"]}
{"code": "T [ ] function ( T [ ] arg0 , T [ ] arg1 , int arg2 , int arg3 ) { return ArrayTool . transferValues ( arg0 , arg1 , arg2 , 0 , arg3 ) ; }", "nl": "transfers from right to left concode_field_sep PlaceHolder placeHolder concode_field_sep void swap concode_elem_sep void swap", "code_tokens": ["T", "[", "]", "function", "(", "T", "[", "]", "arg0", ",", "T", "[", "]", "arg1", ",", "int", "arg2", ",", "int", "arg3", ")", "{", "return", "ArrayTool", ".", "transferValues", "(", "arg0", ",", "arg1", ",", "arg2", ",", "0", ",", "arg3", ")", ";", "}"], "nl_tokens": ["transfers", "from", "right", "to", "left", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "swap", "concode_elem_sep", "void", "swap"]}
{"code": "int function ( String arg0 ) { Integer loc0 = ( Integer ) _seen . get ( arg0 ) ; if ( loc0 == null ) { loc0 = new Integer ( 0 ) ; } else { loc0 = new Integer ( loc0 . intValue ( ) + 1 ) ; } _seen . put ( arg0 , loc0 ) ; return loc0 . intValue ( ) ; }", "nl": "get the index that numbers this base string . concode_field_sep Map _seen concode_field_sep StringBuffer getBase concode_elem_sep String generate", "code_tokens": ["int", "function", "(", "String", "arg0", ")", "{", "Integer", "loc0", "=", "(", "Integer", ")", "_seen", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "new", "Integer", "(", "0", ")", ";", "}", "else", "{", "loc0", "=", "new", "Integer", "(", "loc0", ".", "intValue", "(", ")", "+", "1", ")", ";", "}", "_seen", ".", "put", "(", "arg0", ",", "loc0", ")", ";", "return", "loc0", ".", "intValue", "(", ")", ";", "}"], "nl_tokens": ["get", "the", "index", "that", "numbers", "this", "base", "string", ".", "concode_field_sep", "Map", "_seen", "concode_field_sep", "StringBuffer", "getBase", "concode_elem_sep", "String", "generate"]}
{"code": "void function ( Object arg0 ) { log ( Level . SEVERE , String . valueOf ( arg0 ) , null ) ; }", "nl": "log a message with error log level . concode_field_sep String name concode_elem_sep Logger logger concode_field_sep void debug concode_elem_sep void debug concode_elem_sep void log concode_elem_sep Logger getLogger concode_elem_sep boolean isWarnEnabled concode_elem_sep boolean isFatalEnabled concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep void warn concode_elem_sep void warn concode_elem_sep void trace concode_elem_sep void trace concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep boolean isTraceEnabled concode_elem_sep boolean isDebugEnabled concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["void", "function", "(", "Object", "arg0", ")", "{", "log", "(", "Level", ".", "SEVERE", ",", "String", ".", "valueOf", "(", "arg0", ")", ",", "null", ")", ";", "}"], "nl_tokens": ["log", "a", "message", "with", "error", "log", "level", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "Logger", "logger", "concode_field_sep", "void", "debug", "concode_elem_sep", "void", "debug", "concode_elem_sep", "void", "log", "concode_elem_sep", "Logger", "getLogger", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "trace", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "Predicate function ( Collection arg0 ) { Predicate [ ] loc0 = FunctorUtils . validate ( arg0 ) ; return new OnePredicate ( loc0 ) ; }", "nl": "factory to create the predicate . concode_field_sep Predicate[] iPredicates concode_elem_sep long serialVersionUID concode_field_sep boolean evaluate concode_elem_sep Predicate[] getPredicates", "code_tokens": ["Predicate", "function", "(", "Collection", "arg0", ")", "{", "Predicate", "[", "]", "loc0", "=", "FunctorUtils", ".", "validate", "(", "arg0", ")", ";", "return", "new", "OnePredicate", "(", "loc0", ")", ";", "}"], "nl_tokens": ["factory", "to", "create", "the", "predicate", ".", "concode_field_sep", "Predicate", "[", "]", "iPredicates", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "boolean", "evaluate", "concode_elem_sep", "Predicate", "[", "]", "getPredicates"]}
{"code": "ContextQuery function ( final String arg0 ) { return new ContextQuery . BoundQueryContext ( arg0 ) ; }", "nl": "retrieves from the storm configuration the specified named query . concode_field_sep PlaceHolder placeHolder concode_field_sep BatchCQLStatementTupleMapper unLoggedBatch concode_elem_sep CqlMapper.DefaultCqlMapper all concode_elem_sep CQLStatementTupleMapper async concode_elem_sep ContextQuery namedByField concode_elem_sep BatchCQLStatementTupleMapper newBatchStatementBuilder concode_elem_sep BatchCQLStatementTupleMapper counterBatch concode_elem_sep FieldSelector field concode_elem_sep BatchCQLStatementTupleMapper loggedBatch concode_elem_sep BoundCQLStatementMapperBuilder boundQuery concode_elem_sep BoundCQLStatementMapperBuilder boundQuery concode_elem_sep FieldSelector[] fields concode_elem_sep SimpleCQLStatementMapperBuilder simpleQuery concode_elem_sep SimpleCQLStatementMapperBuilder simpleQuery", "code_tokens": ["ContextQuery", "function", "(", "final", "String", "arg0", ")", "{", "return", "new", "ContextQuery", ".", "BoundQueryContext", "(", "arg0", ")", ";", "}"], "nl_tokens": ["retrieves", "from", "the", "storm", "configuration", "the", "specified", "named", "query", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "BatchCQLStatementTupleMapper", "unLoggedBatch", "concode_elem_sep", "CqlMapper", ".", "DefaultCqlMapper", "all", "concode_elem_sep", "CQLStatementTupleMapper", "async", "concode_elem_sep", "ContextQuery", "namedByField", "concode_elem_sep", "BatchCQLStatementTupleMapper", "newBatchStatementBuilder", "concode_elem_sep", "BatchCQLStatementTupleMapper", "counterBatch", "concode_elem_sep", "FieldSelector", "field", "concode_elem_sep", "BatchCQLStatementTupleMapper", "loggedBatch", "concode_elem_sep", "BoundCQLStatementMapperBuilder", "boundQuery", "concode_elem_sep", "BoundCQLStatementMapperBuilder", "boundQuery", "concode_elem_sep", "FieldSelector", "[", "]", "fields", "concode_elem_sep", "SimpleCQLStatementMapperBuilder", "simpleQuery", "concode_elem_sep", "SimpleCQLStatementMapperBuilder", "simpleQuery"]}
{"code": "boolean function ( String arg0 , String arg1 , String arg2 ) { if ( TextUtils . isEmpty ( arg1 ) || TextUtils . isEmpty ( arg0 ) || TextUtils . isEmpty ( arg2 ) ) { } PublicKey loc0 = Security . generatePublicKey ( arg0 ) ; return Security . verify ( loc0 , arg1 , arg2 ) ; }", "nl": "verifies that the data was signed with the given signature , and returns the verified purchase . the data is in json format and signed with a private key . the data also contains the purchasestate and product id of the purchase . concode_field_sep String TAG concode_elem_sep String KEY_FACTORY_ALGORITHM concode_elem_sep String SIGNATURE_ALGORITHM concode_field_sep PublicKey generatePublicKey concode_elem_sep boolean verify", "code_tokens": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "if", "(", "TextUtils", ".", "isEmpty", "(", "arg1", ")", "|", "|", "TextUtils", ".", "isEmpty", "(", "arg0", ")", "|", "|", "TextUtils", ".", "isEmpty", "(", "arg2", ")", ")", "{", "}", "PublicKey", "loc0", "=", "Security", ".", "generatePublicKey", "(", "arg0", ")", ";", "return", "Security", ".", "verify", "(", "loc0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl_tokens": ["verifies", "that", "the", "data", "was", "signed", "with", "the", "given", "signature", ",", "and", "returns", "the", "verified", "purchase", ".", "the", "data", "is", "in", "json", "format", "and", "signed", "with", "a", "private", "key", ".", "the", "data", "also", "contains", "the", "purchasestate", "and", "product", "id", "of", "the", "purchase", ".", "concode_field_sep", "String", "TAG", "concode_elem_sep", "String", "KEY_FACTORY_ALGORITHM", "concode_elem_sep", "String", "SIGNATURE_ALGORITHM", "concode_field_sep", "PublicKey", "generatePublicKey", "concode_elem_sep", "boolean", "verify"]}
{"code": "void function ( QuotaAvailableBytes arg0 ) { this . quotaAvailableBytes = arg0 ; }", "nl": "sets the value of the quotaavailablebytes property . concode_field_sep Owner owner concode_elem_sep PrincipalURL principalURL concode_elem_sep Creationdate creationdate concode_elem_sep Getlastmodified getlastmodified concode_elem_sep Getcontentlanguage getcontentlanguage concode_elem_sep Getetag getetag concode_elem_sep Getcontentlength getcontentlength concode_elem_sep SupportedReportSet supportedReportSet concode_elem_sep Acl acl concode_elem_sep PrincipalCollectionSet principalCollectionSet concode_elem_sep Resourcetype resourcetype concode_elem_sep List<Element> any concode_elem_sep QuotaUsedBytes quotaUsedBytes concode_elem_sep Lockdiscovery lockdiscovery concode_elem_sep QuotaAvailableBytes quotaAvailableBytes concode_elem_sep Getcontenttype getcontenttype concode_elem_sep Displayname displayname concode_elem_sep Supportedlock supportedlock concode_elem_sep Group group concode_field_sep PrincipalCollectionSet getPrincipalCollectionSet concode_elem_sep Creationdate getCreationdate concode_elem_sep void setCreationdate concode_elem_sep Getcontentlength getGetcontentlength concode_elem_sep Displayname getDisplayname concode_elem_sep void setGetcontenttype concode_elem_sep void setAcl concode_elem_sep Owner getOwner concode_elem_sep Getlastmodified getGetlastmodified concode_elem_sep Supportedlock getSupportedlock concode_elem_sep void setLockdiscovery concode_elem_sep void setOwner concode_elem_sep SupportedReportSet getSupportedReportSet concode_elem_sep void setSupportedReportSet concode_elem_sep void setSupportedlock concode_elem_sep void setPrincipalCollectionSet concode_elem_sep QuotaUsedBytes getQuotaUsedBytes concode_elem_sep Acl getAcl concode_elem_sep void setQuotaUsedBytes concode_elem_sep void setPrincipalURL concode_elem_sep PrincipalURL getPrincipalURL concode_elem_sep void setGetetag concode_elem_sep Resourcetype getResourcetype concode_elem_sep Getcontentlanguage getGetcontentlanguage concode_elem_sep void setResourcetype concode_elem_sep Getetag getGetetag concode_elem_sep void setGroup concode_elem_sep Getcontenttype getGetcontenttype concode_elem_sep Group getGroup concode_elem_sep void setGetcontentlanguage concode_elem_sep Lockdiscovery getLockdiscovery concode_elem_sep void setGetlastmodified concode_elem_sep QuotaAvailableBytes getQuotaAvailableBytes concode_elem_sep void setDisplayname concode_elem_sep void setGetcontentlength concode_elem_sep List<Element> getAny", "code_tokens": ["void", "function", "(", "QuotaAvailableBytes", "arg0", ")", "{", "this", ".", "quotaAvailableBytes", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "value", "of", "the", "quotaavailablebytes", "property", ".", "concode_field_sep", "Owner", "owner", "concode_elem_sep", "PrincipalURL", "principalURL", "concode_elem_sep", "Creationdate", "creationdate", "concode_elem_sep", "Getlastmodified", "getlastmodified", "concode_elem_sep", "Getcontentlanguage", "getcontentlanguage", "concode_elem_sep", "Getetag", "getetag", "concode_elem_sep", "Getcontentlength", "getcontentlength", "concode_elem_sep", "SupportedReportSet", "supportedReportSet", "concode_elem_sep", "Acl", "acl", "concode_elem_sep", "PrincipalCollectionSet", "principalCollectionSet", "concode_elem_sep", "Resourcetype", "resourcetype", "concode_elem_sep", "List", "<", "Element", ">", "any", "concode_elem_sep", "QuotaUsedBytes", "quotaUsedBytes", "concode_elem_sep", "Lockdiscovery", "lockdiscovery", "concode_elem_sep", "QuotaAvailableBytes", "quotaAvailableBytes", "concode_elem_sep", "Getcontenttype", "getcontenttype", "concode_elem_sep", "Displayname", "displayname", "concode_elem_sep", "Supportedlock", "supportedlock", "concode_elem_sep", "Group", "group", "concode_field_sep", "PrincipalCollectionSet", "getPrincipalCollectionSet", "concode_elem_sep", "Creationdate", "getCreationdate", "concode_elem_sep", "void", "setCreationdate", "concode_elem_sep", "Getcontentlength", "getGetcontentlength", "concode_elem_sep", "Displayname", "getDisplayname", "concode_elem_sep", "void", "setGetcontenttype", "concode_elem_sep", "void", "setAcl", "concode_elem_sep", "Owner", "getOwner", "concode_elem_sep", "Getlastmodified", "getGetlastmodified", "concode_elem_sep", "Supportedlock", "getSupportedlock", "concode_elem_sep", "void", "setLockdiscovery", "concode_elem_sep", "void", "setOwner", "concode_elem_sep", "SupportedReportSet", "getSupportedReportSet", "concode_elem_sep", "void", "setSupportedReportSet", "concode_elem_sep", "void", "setSupportedlock", "concode_elem_sep", "void", "setPrincipalCollectionSet", "concode_elem_sep", "QuotaUsedBytes", "getQuotaUsedBytes", "concode_elem_sep", "Acl", "getAcl", "concode_elem_sep", "void", "setQuotaUsedBytes", "concode_elem_sep", "void", "setPrincipalURL", "concode_elem_sep", "PrincipalURL", "getPrincipalURL", "concode_elem_sep", "void", "setGetetag", "concode_elem_sep", "Resourcetype", "getResourcetype", "concode_elem_sep", "Getcontentlanguage", "getGetcontentlanguage", "concode_elem_sep", "void", "setResourcetype", "concode_elem_sep", "Getetag", "getGetetag", "concode_elem_sep", "void", "setGroup", "concode_elem_sep", "Getcontenttype", "getGetcontenttype", "concode_elem_sep", "Group", "getGroup", "concode_elem_sep", "void", "setGetcontentlanguage", "concode_elem_sep", "Lockdiscovery", "getLockdiscovery", "concode_elem_sep", "void", "setGetlastmodified", "concode_elem_sep", "QuotaAvailableBytes", "getQuotaAvailableBytes", "concode_elem_sep", "void", "setDisplayname", "concode_elem_sep", "void", "setGetcontentlength", "concode_elem_sep", "List", "<", "Element", ">", "getAny"]}
{"code": "Node function ( Node arg0 ) { if ( arg0 == null ) { return null ; } Node loc0 = reverseListRescursive ( arg0 . next ) ; if ( loc0 == null ) { head . next = arg0 ; } else { loc0 . next = arg0 ; } return arg0 ; }", "nl": "this has time complexity of o n and space complexity of o n as well because recursion would be used n no . of times , which uses stack internally . concode_field_sep Node head concode_elem_sep Node next concode_elem_sep int data concode_field_sep Node Delete concode_elem_sep void deleteAt concode_elem_sep void setData concode_elem_sep void reverseListPrint concode_elem_sep void reverseListPrint concode_elem_sep void insertAt concode_elem_sep void deleteLast concode_elem_sep boolean isEmpty concode_elem_sep boolean isCycle concode_elem_sep void insert concode_elem_sep void reverseList concode_elem_sep int fetchLast concode_elem_sep Node getNext concode_elem_sep void delete concode_elem_sep int fetchFirst concode_elem_sep Node InsertNth concode_elem_sep Node InsertNth concode_elem_sep void ReversePrint concode_elem_sep void traverse concode_elem_sep void reverseListRecursive concode_elem_sep int fetch concode_elem_sep void deleteFirst concode_elem_sep void setNext concode_elem_sep void insertLast concode_elem_sep int getData", "code_tokens": ["Node", "function", "(", "Node", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "return", "null", ";", "}", "Node", "loc0", "=", "reverseListRescursive", "(", "arg0", ".", "next", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "head", ".", "next", "=", "arg0", ";", "}", "else", "{", "loc0", ".", "next", "=", "arg0", ";", "}", "return", "arg0", ";", "}"], "nl_tokens": ["this", "has", "time", "complexity", "of", "o", "n", "and", "space", "complexity", "of", "o", "n", "as", "well", "because", "recursion", "would", "be", "used", "n", "no", ".", "of", "times", ",", "which", "uses", "stack", "internally", ".", "concode_field_sep", "Node", "head", "concode_elem_sep", "Node", "next", "concode_elem_sep", "int", "data", "concode_field_sep", "Node", "Delete", "concode_elem_sep", "void", "deleteAt", "concode_elem_sep", "void", "setData", "concode_elem_sep", "void", "reverseListPrint", "concode_elem_sep", "void", "reverseListPrint", "concode_elem_sep", "void", "insertAt", "concode_elem_sep", "void", "deleteLast", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isCycle", "concode_elem_sep", "void", "insert", "concode_elem_sep", "void", "reverseList", "concode_elem_sep", "int", "fetchLast", "concode_elem_sep", "Node", "getNext", "concode_elem_sep", "void", "delete", "concode_elem_sep", "int", "fetchFirst", "concode_elem_sep", "Node", "InsertNth", "concode_elem_sep", "Node", "InsertNth", "concode_elem_sep", "void", "ReversePrint", "concode_elem_sep", "void", "traverse", "concode_elem_sep", "void", "reverseListRecursive", "concode_elem_sep", "int", "fetch", "concode_elem_sep", "void", "deleteFirst", "concode_elem_sep", "void", "setNext", "concode_elem_sep", "void", "insertLast", "concode_elem_sep", "int", "getData"]}
{"code": "void function ( Device arg0 ) { startInputTask ( arg0 . getHandle ( ) ) ; }", "nl": "starts the input task of a device . concode_field_sep int latencyTimer concode_elem_sep int usbReceiveBufferSize concode_elem_sep String configFile concode_elem_sep int readTimeout concode_elem_sep Logger logger concode_elem_sep int writeTimeout concode_elem_sep int usbTransmitBufferSize concode_elem_sep int resetPipeRetryCount concode_field_sep Device[] listDevicesBySerialNumber concode_elem_sep Device[] listDevicesByType concode_elem_sep void configureDevice concode_elem_sep void stopInputTask concode_elem_sep void stopInputTask concode_elem_sep void loadProperties concode_elem_sep void loadProperties concode_elem_sep void initializeProperties concode_elem_sep Device[] listDevices concode_elem_sep Device[] listDevicesByDescription", "code_tokens": ["void", "function", "(", "Device", "arg0", ")", "{", "startInputTask", "(", "arg0", ".", "getHandle", "(", ")", ")", ";", "}"], "nl_tokens": ["starts", "the", "input", "task", "of", "a", "device", ".", "concode_field_sep", "int", "latencyTimer", "concode_elem_sep", "int", "usbReceiveBufferSize", "concode_elem_sep", "String", "configFile", "concode_elem_sep", "int", "readTimeout", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "int", "writeTimeout", "concode_elem_sep", "int", "usbTransmitBufferSize", "concode_elem_sep", "int", "resetPipeRetryCount", "concode_field_sep", "Device", "[", "]", "listDevicesBySerialNumber", "concode_elem_sep", "Device", "[", "]", "listDevicesByType", "concode_elem_sep", "void", "configureDevice", "concode_elem_sep", "void", "stopInputTask", "concode_elem_sep", "void", "stopInputTask", "concode_elem_sep", "void", "loadProperties", "concode_elem_sep", "void", "loadProperties", "concode_elem_sep", "void", "initializeProperties", "concode_elem_sep", "Device", "[", "]", "listDevices", "concode_elem_sep", "Device", "[", "]", "listDevicesByDescription"]}
{"code": "Rectangle function ( Component arg0 ) { if ( where == null ) return new Rectangle ( 0 , 0 , arg0 . getWidth ( ) , arg0 . getHeight ( ) ) ; return new Rectangle ( where . x , where . y , 1 , 1 ) ; }", "nl": "convert the abstract location into a concrete area , relative to the given component . if a point has been specified , returns a 1x1 rectangle , otherwise returns the a rectangle at 0 , 0 of the component 's size . concode_field_sep Point where concode_elem_sep String CENTER concode_field_sep Point getPoint concode_elem_sep boolean isValue concode_elem_sep String badFormat concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep boolean isIndex concode_elem_sep String parseValue concode_elem_sep ComponentLocation parse concode_elem_sep int parseIndex concode_elem_sep String encodeIndex concode_elem_sep String encodeValue", "code_tokens": ["Rectangle", "function", "(", "Component", "arg0", ")", "{", "if", "(", "where", "==", "null", ")", "return", "new", "Rectangle", "(", "0", ",", "0", ",", "arg0", ".", "getWidth", "(", ")", ",", "arg0", ".", "getHeight", "(", ")", ")", ";", "return", "new", "Rectangle", "(", "where", ".", "x", ",", "where", ".", "y", ",", "1", ",", "1", ")", ";", "}"], "nl_tokens": ["convert", "the", "abstract", "location", "into", "a", "concrete", "area", ",", "relative", "to", "the", "given", "component", ".", "if", "a", "point", "has", "been", "specified", ",", "returns", "a", "1", "x1", "rectangle", ",", "otherwise", "returns", "the", "a", "rectangle", "at", "0", ",", "0", "of", "the", "component", "'", "s", "size", ".", "concode_field_sep", "Point", "where", "concode_elem_sep", "String", "CENTER", "concode_field_sep", "Point", "getPoint", "concode_elem_sep", "boolean", "isValue", "concode_elem_sep", "String", "badFormat", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isIndex", "concode_elem_sep", "String", "parseValue", "concode_elem_sep", "ComponentLocation", "parse", "concode_elem_sep", "int", "parseIndex", "concode_elem_sep", "String", "encodeIndex", "concode_elem_sep", "String", "encodeValue"]}
{"code": "void function ( final char arg0 ) { Event loc0 = new Event ( ) ; loc0 . type = SWT . KeyDown ; loc0 . character = arg0 ; new SWTPushEventOperation ( loc0 ) . execute ( ) ; }", "nl": "dispatch a keydown event . concode_field_sep Point pointT concode_elem_sep abbot.swt.Robot _robot concode_field_sep void robotKeyClick concode_elem_sep void doKeyDown concode_elem_sep void doKeyUp concode_elem_sep void mouseMove concode_elem_sep void mouseMove concode_elem_sep void keyUp concode_elem_sep void keyUp concode_elem_sep void mouseDown concode_elem_sep abbot.swt.Robot getAbbotRobot concode_elem_sep void mouseDoubleClick concode_elem_sep void pause concode_elem_sep boolean needsShift concode_elem_sep int[] extractKeys concode_elem_sep void mouseUp concode_elem_sep void keyClick concode_elem_sep void keyClick concode_elem_sep Event createClickEvent concode_elem_sep void enterText", "code_tokens": ["void", "function", "(", "final", "char", "arg0", ")", "{", "Event", "loc0", "=", "new", "Event", "(", ")", ";", "loc0", ".", "type", "=", "SWT", ".", "KeyDown", ";", "loc0", ".", "character", "=", "arg0", ";", "new", "SWTPushEventOperation", "(", "loc0", ")", ".", "execute", "(", ")", ";", "}"], "nl_tokens": ["dispatch", "a", "keydown", "event", ".", "concode_field_sep", "Point", "pointT", "concode_elem_sep", "abbot", ".", "swt", ".", "Robot", "_robot", "concode_field_sep", "void", "robotKeyClick", "concode_elem_sep", "void", "doKeyDown", "concode_elem_sep", "void", "doKeyUp", "concode_elem_sep", "void", "mouseMove", "concode_elem_sep", "void", "mouseMove", "concode_elem_sep", "void", "keyUp", "concode_elem_sep", "void", "keyUp", "concode_elem_sep", "void", "mouseDown", "concode_elem_sep", "abbot", ".", "swt", ".", "Robot", "getAbbotRobot", "concode_elem_sep", "void", "mouseDoubleClick", "concode_elem_sep", "void", "pause", "concode_elem_sep", "boolean", "needsShift", "concode_elem_sep", "int", "[", "]", "extractKeys", "concode_elem_sep", "void", "mouseUp", "concode_elem_sep", "void", "keyClick", "concode_elem_sep", "void", "keyClick", "concode_elem_sep", "Event", "createClickEvent", "concode_elem_sep", "void", "enterText"]}
{"code": "void function ( Figure arg0 ) { setMessageFigure ( arg0 ) ; notifyObservers ( ) ; }", "nl": "notifie les observers concode_field_sep ArrayList<MyObserver> _observer concode_elem_sep Figure _message concode_field_sep void setMessageFigure concode_elem_sep void addObserver concode_elem_sep void notifyObservers", "code_tokens": ["void", "function", "(", "Figure", "arg0", ")", "{", "setMessageFigure", "(", "arg0", ")", ";", "notifyObservers", "(", ")", ";", "}"], "nl_tokens": ["notifie", "les", "observers", "concode_field_sep", "ArrayList", "<", "MyObserver", ">", "_observer", "concode_elem_sep", "Figure", "_message", "concode_field_sep", "void", "setMessageFigure", "concode_elem_sep", "void", "addObserver", "concode_elem_sep", "void", "notifyObservers"]}
{"code": "File function ( Context arg0 ) { return new File ( arg0 . getApplicationInfo ( ) . dataDir , \"srini_string\" ) ; }", "nl": "return the directory into which we put our self-extracted native libraries . concode_field_sep byte[] cachedBuffer concode_field_sep void reliablyCopyExecutable concode_elem_sep void deleteOrThrow concode_elem_sep FileLocker lockLibsDirectory concode_elem_sep void freeCopyBuffer concode_elem_sep File createLibsDirectory concode_elem_sep int findAbiScore concode_elem_sep void dumbDeleteRecrusive concode_elem_sep String[] getSupportedAbis concode_elem_sep String[] getSupportedAbis concode_elem_sep void fallocateIfSupported concode_elem_sep void fallocate", "code_tokens": ["File", "function", "(", "Context", "arg0", ")", "{", "return", "new", "File", "(", "arg0", ".", "getApplicationInfo", "(", ")", ".", "dataDir", ",", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["return", "the", "directory", "into", "which", "we", "put", "our", "self", "-", "extracted", "native", "libraries", ".", "concode_field_sep", "byte", "[", "]", "cachedBuffer", "concode_field_sep", "void", "reliablyCopyExecutable", "concode_elem_sep", "void", "deleteOrThrow", "concode_elem_sep", "FileLocker", "lockLibsDirectory", "concode_elem_sep", "void", "freeCopyBuffer", "concode_elem_sep", "File", "createLibsDirectory", "concode_elem_sep", "int", "findAbiScore", "concode_elem_sep", "void", "dumbDeleteRecrusive", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "void", "fallocateIfSupported", "concode_elem_sep", "void", "fallocate"]}
{"code": "File function ( Context arg0 ) { File loc0 = getLibsDirectory ( arg0 ) ; if ( ! loc0 . isDirectory ( ) && ! loc0 . mkdirs ( ) ) { throw new RuntimeException ( \"srini_string\" ) ; } return loc0 ; }", "nl": "return the directory into which we put our self-extracted native libraries and make sure it exists . concode_field_sep byte[] cachedBuffer concode_field_sep void reliablyCopyExecutable concode_elem_sep void deleteOrThrow concode_elem_sep FileLocker lockLibsDirectory concode_elem_sep void freeCopyBuffer concode_elem_sep File getLibsDirectory concode_elem_sep int findAbiScore concode_elem_sep void dumbDeleteRecrusive concode_elem_sep String[] getSupportedAbis concode_elem_sep String[] getSupportedAbis concode_elem_sep void fallocateIfSupported concode_elem_sep void fallocate", "code_tokens": ["File", "function", "(", "Context", "arg0", ")", "{", "File", "loc0", "=", "getLibsDirectory", "(", "arg0", ")", ";", "if", "(", "!", "loc0", ".", "isDirectory", "(", ")", "&", "&", "!", "loc0", ".", "mkdirs", "(", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["return", "the", "directory", "into", "which", "we", "put", "our", "self", "-", "extracted", "native", "libraries", "and", "make", "sure", "it", "exists", ".", "concode_field_sep", "byte", "[", "]", "cachedBuffer", "concode_field_sep", "void", "reliablyCopyExecutable", "concode_elem_sep", "void", "deleteOrThrow", "concode_elem_sep", "FileLocker", "lockLibsDirectory", "concode_elem_sep", "void", "freeCopyBuffer", "concode_elem_sep", "File", "getLibsDirectory", "concode_elem_sep", "int", "findAbiScore", "concode_elem_sep", "void", "dumbDeleteRecrusive", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "void", "fallocateIfSupported", "concode_elem_sep", "void", "fallocate"]}
{"code": "SummaryStatistics function ( Class arg0 ) { return ( SummaryStatistics ) arg0 . newInstance ( ) ; }", "nl": "create an instance of a summarystatistics concode_field_sep long serialVersionUID concode_field_sep double getStandardDeviation concode_elem_sep StatisticalSummary getSummary concode_elem_sep double getMax concode_elem_sep long getN concode_elem_sep void clear concode_elem_sep double getMin concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep double getVariance concode_elem_sep double getMean concode_elem_sep double getSumsq concode_elem_sep double getSum concode_elem_sep void addValue concode_elem_sep double getGeometricMean", "code_tokens": ["SummaryStatistics", "function", "(", "Class", "arg0", ")", "{", "return", "(", "SummaryStatistics", ")", "arg0", ".", "newInstance", "(", ")", ";", "}"], "nl_tokens": ["create", "an", "instance", "of", "a", "summarystatistics", "concode_field_sep", "long", "serialVersionUID", "concode_field_sep", "double", "getStandardDeviation", "concode_elem_sep", "StatisticalSummary", "getSummary", "concode_elem_sep", "double", "getMax", "concode_elem_sep", "long", "getN", "concode_elem_sep", "void", "clear", "concode_elem_sep", "double", "getMin", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "double", "getVariance", "concode_elem_sep", "double", "getMean", "concode_elem_sep", "double", "getSumsq", "concode_elem_sep", "double", "getSum", "concode_elem_sep", "void", "addValue", "concode_elem_sep", "double", "getGeometricMean"]}
{"code": "void function ( XMPMeta arg0 , String arg1 ) { arg0 . setProperty ( XMPConst . NS_PDFA_ID , PdfAProperties . CONFORMANCE , arg1 ) ; }", "nl": "adds the conformance . concode_field_sep String CONFORMANCE concode_elem_sep String PART concode_field_sep void setPart", "code_tokens": ["void", "function", "(", "XMPMeta", "arg0", ",", "String", "arg1", ")", "{", "arg0", ".", "setProperty", "(", "XMPConst", ".", "NS_PDFA_ID", ",", "PdfAProperties", ".", "CONFORMANCE", ",", "arg1", ")", ";", "}"], "nl_tokens": ["adds", "the", "conformance", ".", "concode_field_sep", "String", "CONFORMANCE", "concode_elem_sep", "String", "PART", "concode_field_sep", "void", "setPart"]}
{"code": "int function ( ) { return ( data [ position ++ ] & 0xFF ) ; }", "nl": "reads the next byte as an unsigned value . concode_field_sep byte[] data concode_elem_sep int limit concode_elem_sep int position concode_field_sep int readUnsignedInt24 concode_elem_sep int readSynchSafeInt concode_elem_sep int readUnsignedIntToInt concode_elem_sep void setPosition concode_elem_sep int capacity concode_elem_sep void skipBytes concode_elem_sep long readUnsignedInt concode_elem_sep int getPosition concode_elem_sep long readLong concode_elem_sep short readShort concode_elem_sep void setLimit concode_elem_sep int bytesLeft concode_elem_sep int limit concode_elem_sep void reset concode_elem_sep void reset concode_elem_sep void readBytes concode_elem_sep void readBytes concode_elem_sep void readBytes concode_elem_sep int readUnsignedFixedPoint1616 concode_elem_sep int readInt concode_elem_sep long readUnsignedLongToLong concode_elem_sep int readUnsignedShort", "code_tokens": ["int", "function", "(", ")", "{", "return", "(", "data", "[", "position", "+", "+", "]", "&", "0xFF", ")", ";", "}"], "nl_tokens": ["reads", "the", "next", "byte", "as", "an", "unsigned", "value", ".", "concode_field_sep", "byte", "[", "]", "data", "concode_elem_sep", "int", "limit", "concode_elem_sep", "int", "position", "concode_field_sep", "int", "readUnsignedInt24", "concode_elem_sep", "int", "readSynchSafeInt", "concode_elem_sep", "int", "readUnsignedIntToInt", "concode_elem_sep", "void", "setPosition", "concode_elem_sep", "int", "capacity", "concode_elem_sep", "void", "skipBytes", "concode_elem_sep", "long", "readUnsignedInt", "concode_elem_sep", "int", "getPosition", "concode_elem_sep", "long", "readLong", "concode_elem_sep", "short", "readShort", "concode_elem_sep", "void", "setLimit", "concode_elem_sep", "int", "bytesLeft", "concode_elem_sep", "int", "limit", "concode_elem_sep", "void", "reset", "concode_elem_sep", "void", "reset", "concode_elem_sep", "void", "readBytes", "concode_elem_sep", "void", "readBytes", "concode_elem_sep", "void", "readBytes", "concode_elem_sep", "int", "readUnsignedFixedPoint1616", "concode_elem_sep", "int", "readInt", "concode_elem_sep", "long", "readUnsignedLongToLong", "concode_elem_sep", "int", "readUnsignedShort"]}
{"code": "float function ( ) { if ( list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return list . removeElementAt ( list . size ( ) - 1 ) ; }", "nl": "removes the value at the top of this stack and returns it . concode_field_sep ArrayFloatList list concode_field_sep int search concode_elem_sep int size concode_elem_sep float get concode_elem_sep void clear concode_elem_sep float push concode_elem_sep boolean empty concode_elem_sep float peek concode_elem_sep float peek", "code_tokens": ["float", "function", "(", ")", "{", "if", "(", "list", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "EmptyStackException", "(", ")", ";", "}", "return", "list", ".", "removeElementAt", "(", "list", ".", "size", "(", ")", "-", "1", ")", ";", "}"], "nl_tokens": ["removes", "the", "value", "at", "the", "top", "of", "this", "stack", "and", "returns", "it", ".", "concode_field_sep", "ArrayFloatList", "list", "concode_field_sep", "int", "search", "concode_elem_sep", "int", "size", "concode_elem_sep", "float", "get", "concode_elem_sep", "void", "clear", "concode_elem_sep", "float", "push", "concode_elem_sep", "boolean", "empty", "concode_elem_sep", "float", "peek", "concode_elem_sep", "float", "peek"]}
{"code": "boolean function ( String arg0 ) { return arg0 . matches ( EMAIL_VALIDATION_REGEX ) ; }", "nl": "checks if a given string is a valid person email . concode_field_sep boolean isPrivate concode_elem_sep String EMAIL_VALIDATION_REGEX concode_elem_sep String MESSAGE_EMAIL_CONSTRAINTS concode_elem_sep String value concode_elem_sep String EXAMPLE concode_field_sep int hashCode concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep boolean isPrivate", "code_tokens": ["boolean", "function", "(", "String", "arg0", ")", "{", "return", "arg0", ".", "matches", "(", "EMAIL_VALIDATION_REGEX", ")", ";", "}"], "nl_tokens": ["checks", "if", "a", "given", "string", "is", "a", "valid", "person", "email", ".", "concode_field_sep", "boolean", "isPrivate", "concode_elem_sep", "String", "EMAIL_VALIDATION_REGEX", "concode_elem_sep", "String", "MESSAGE_EMAIL_CONSTRAINTS", "concode_elem_sep", "String", "value", "concode_elem_sep", "String", "EXAMPLE", "concode_field_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isPrivate"]}
{"code": "Pipeline < ? > function ( final WorkerContext arg0 , final Tag arg1 , final String arg2 , final ProcessObject arg3 ) { return getNext ( ) ; }", "nl": "just calls getnext.override this to get notified on encountered content . concode_field_sep Pipeline<?> next concode_field_sep Pipeline<?> init concode_elem_sep String getContextKey concode_elem_sep void setNext concode_elem_sep Pipeline<?> getNext concode_elem_sep T getLocalContext concode_elem_sep Pipeline<?> close concode_elem_sep Pipeline<?> open", "code_tokens": ["Pipeline", "<", "?", ">", "function", "(", "final", "WorkerContext", "arg0", ",", "final", "Tag", "arg1", ",", "final", "String", "arg2", ",", "final", "ProcessObject", "arg3", ")", "{", "return", "getNext", "(", ")", ";", "}"], "nl_tokens": ["just", "calls", "getnext", ".", "override", "this", "to", "get", "notified", "on", "encountered", "content", ".", "concode_field_sep", "Pipeline", "<", "?", ">", "next", "concode_field_sep", "Pipeline", "<", "?", ">", "init", "concode_elem_sep", "String", "getContextKey", "concode_elem_sep", "void", "setNext", "concode_elem_sep", "Pipeline", "<", "?", ">", "getNext", "concode_elem_sep", "T", "getLocalContext", "concode_elem_sep", "Pipeline", "<", "?", ">", "close", "concode_elem_sep", "Pipeline", "<", "?", ">", "open"]}
{"code": "void function ( @ ArquillianResource URL arg0 ) { URL loc0 = prepareUrl ( arg0 ) ; Utils . makeCallWithBasicAuthn ( loc0 , \"srini_string\" , PASSWORD3 , SC_OK ) ; }", "nl": "test that transformation from second transformer is applied on transformed name obtained from first transformer . concode_field_sep String USER3 concode_elem_sep String USER2 concode_elem_sep PropertyFileBasedDomain chainedThreeTransformers concode_elem_sep String USER1 concode_elem_sep String ELYTRON_SECURITY_TRANSFORM_TRANSFORMED concode_elem_sep String PASSWORD1 concode_elem_sep String PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY concode_elem_sep String DEP_SECURITY_DOMAIN_TRANSFORM_TRANSFORMED concode_elem_sep String ELYTRON_SECURITY_TWO concode_elem_sep String PRINCIPAL_TRANSFORMER_TRANSFORM_TRANSFORMED concode_elem_sep String PASSWORD3 concode_elem_sep String ELYTRON_SECURITY_THREE concode_elem_sep String PRINCIPAL_TRANSFORMER_TWO concode_elem_sep String DEP_SECURITY_DOMAIN_TWO concode_elem_sep String ROLE concode_elem_sep String PRINCIPAL_TRANSFORMER_THREE concode_elem_sep String REGEX_TRANSFORMER_A concode_elem_sep String PASSWORD2 concode_elem_sep String REGEX_TRANSFORMED_SECOND concode_elem_sep String REGEX_TRANSFORMED_FIRST concode_elem_sep String REGEX_TRANSFORMER_B concode_elem_sep PropertyFileBasedDomain chainedTwoTransformers concode_elem_sep PropertyFileBasedDomain transformTransformed concode_elem_sep String REGEX_TRANSFORMER_C concode_elem_sep String DEP_SECURITY_DOMAIN_THREE concode_field_sep WebArchive deploymentThreeTransformersInChain concode_elem_sep void removeSingleConfiguration concode_elem_sep WebArchive deploymentTransformTransformed concode_elem_sep void setup concode_elem_sep PropertyFileBasedDomain prepareSingleConfiguration concode_elem_sep WebArchive deploymentTwoTransformersInChain concode_elem_sep WebArchive createDeployment concode_elem_sep void testTwoTransformersInChain concode_elem_sep void tearDown concode_elem_sep void testThreeTransformersInChain concode_elem_sep URL prepareUrl", "code_tokens": ["void", "function", "(", "@", "ArquillianResource", "URL", "arg0", ")", "{", "URL", "loc0", "=", "prepareUrl", "(", "arg0", ")", ";", "Utils", ".", "makeCallWithBasicAuthn", "(", "loc0", ",", "\"srini_string\"", ",", "PASSWORD3", ",", "SC_OK", ")", ";", "}"], "nl_tokens": ["test", "that", "transformation", "from", "second", "transformer", "is", "applied", "on", "transformed", "name", "obtained", "from", "first", "transformer", ".", "concode_field_sep", "String", "USER3", "concode_elem_sep", "String", "USER2", "concode_elem_sep", "PropertyFileBasedDomain", "chainedThreeTransformers", "concode_elem_sep", "String", "USER1", "concode_elem_sep", "String", "ELYTRON_SECURITY_TRANSFORM_TRANSFORMED", "concode_elem_sep", "String", "PASSWORD1", "concode_elem_sep", "String", "PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY", "concode_elem_sep", "String", "DEP_SECURITY_DOMAIN_TRANSFORM_TRANSFORMED", "concode_elem_sep", "String", "ELYTRON_SECURITY_TWO", "concode_elem_sep", "String", "PRINCIPAL_TRANSFORMER_TRANSFORM_TRANSFORMED", "concode_elem_sep", "String", "PASSWORD3", "concode_elem_sep", "String", "ELYTRON_SECURITY_THREE", "concode_elem_sep", "String", "PRINCIPAL_TRANSFORMER_TWO", "concode_elem_sep", "String", "DEP_SECURITY_DOMAIN_TWO", "concode_elem_sep", "String", "ROLE", "concode_elem_sep", "String", "PRINCIPAL_TRANSFORMER_THREE", "concode_elem_sep", "String", "REGEX_TRANSFORMER_A", "concode_elem_sep", "String", "PASSWORD2", "concode_elem_sep", "String", "REGEX_TRANSFORMED_SECOND", "concode_elem_sep", "String", "REGEX_TRANSFORMED_FIRST", "concode_elem_sep", "String", "REGEX_TRANSFORMER_B", "concode_elem_sep", "PropertyFileBasedDomain", "chainedTwoTransformers", "concode_elem_sep", "PropertyFileBasedDomain", "transformTransformed", "concode_elem_sep", "String", "REGEX_TRANSFORMER_C", "concode_elem_sep", "String", "DEP_SECURITY_DOMAIN_THREE", "concode_field_sep", "WebArchive", "deploymentThreeTransformersInChain", "concode_elem_sep", "void", "removeSingleConfiguration", "concode_elem_sep", "WebArchive", "deploymentTransformTransformed", "concode_elem_sep", "void", "setup", "concode_elem_sep", "PropertyFileBasedDomain", "prepareSingleConfiguration", "concode_elem_sep", "WebArchive", "deploymentTwoTransformersInChain", "concode_elem_sep", "WebArchive", "createDeployment", "concode_elem_sep", "void", "testTwoTransformersInChain", "concode_elem_sep", "void", "tearDown", "concode_elem_sep", "void", "testThreeTransformersInChain", "concode_elem_sep", "URL", "prepareUrl"]}
{"code": "Response . ResponseBuilder function ( AbstractElement arg0 , UriInfo arg1 , String arg2 ) { return Response . status ( CREATED ) . location ( arg1 . getRequestUriBuilder ( ) . segment ( arg2 ) . build ( ) ) . entity ( arg0 ) ; }", "nl": "this method exists solely to concentrate usage of javax.ws.rs.core.response #created java.net.uri intoone place until this jira is resolved somehow . concode_field_sep PlaceHolder placeHolder concode_field_sep void createPagingHeader concode_elem_sep InputStream pageToStream concode_elem_sep Response.ResponseBuilder pagedResponse concode_elem_sep Response.ResponseBuilder pagedResponse", "code_tokens": ["Response", ".", "ResponseBuilder", "function", "(", "AbstractElement", "arg0", ",", "UriInfo", "arg1", ",", "String", "arg2", ")", "{", "return", "Response", ".", "status", "(", "CREATED", ")", ".", "location", "(", "arg1", ".", "getRequestUriBuilder", "(", ")", ".", "segment", "(", "arg2", ")", ".", "build", "(", ")", ")", ".", "entity", "(", "arg0", ")", ";", "}"], "nl_tokens": ["this", "method", "exists", "solely", "to", "concentrate", "usage", "of", "javax", ".", "ws", ".", "rs", ".", "core", ".", "response", "#created java.net.uri intoone place until this jira is resolved somehow . concode_field_sep PlaceHolder placeHolder concode_field_sep void createPagingHeader concode_elem_sep InputStream pageToStream concode_elem_sep Response.ResponseBuilder pagedResponse concode_elem_sep Response.ResponseBuilder pagedResponse"]}
{"code": "PlayerNum function ( ) { return number ; }", "nl": "returns the current player 's number concode_field_sep PlayerNum number concode_elem_sep boolean inCheck concode_elem_sep boolean playing concode_elem_sep boolean human concode_field_sep void setInCheck concode_elem_sep boolean inCheck concode_elem_sep boolean playing concode_elem_sep boolean human concode_elem_sep void removePlayer", "code_tokens": ["PlayerNum", "function", "(", ")", "{", "return", "number", ";", "}"], "nl_tokens": ["returns", "the", "current", "player", "'", "s", "number", "concode_field_sep", "PlayerNum", "number", "concode_elem_sep", "boolean", "inCheck", "concode_elem_sep", "boolean", "playing", "concode_elem_sep", "boolean", "human", "concode_field_sep", "void", "setInCheck", "concode_elem_sep", "boolean", "inCheck", "concode_elem_sep", "boolean", "playing", "concode_elem_sep", "boolean", "human", "concode_elem_sep", "void", "removePlayer"]}
{"code": "List < String > function ( String arg0 ) { return Arrays . asList ( ( arg0 . split ( \"srini_string\" ) ) ) ; }", "nl": "this method splits a string by hyphens in it and returns the list of strings . concode_field_sep PlaceHolder placeHolder concode_field_sep String getDocContent concode_elem_sep ArrayList<String> processToken concode_elem_sep Map<Integer,Double> sortByValue concode_elem_sep Map<String,Integer> getStemmedTokens", "code_tokens": ["List", "<", "String", ">", "function", "(", "String", "arg0", ")", "{", "return", "Arrays", ".", "asList", "(", "(", "arg0", ".", "split", "(", "\"srini_string\"", ")", ")", ")", ";", "}"], "nl_tokens": ["this", "method", "splits", "a", "string", "by", "hyphens", "in", "it", "and", "returns", "the", "list", "of", "strings", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "getDocContent", "concode_elem_sep", "ArrayList", "<", "String", ">", "processToken", "concode_elem_sep", "Map", "<", "Integer", ",", "Double", ">", "sortByValue", "concode_elem_sep", "Map", "<", "String", ",", "Integer", ">", "getStemmedTokens"]}
{"code": "String function ( ) { if ( classRef != null ) return classRef . getName ( ) ; else return null ; }", "nl": "get the subject widget 's class name concode_field_sep long serialVersionUID concode_elem_sep int UNASSIGNED concode_elem_sep String nameOrLabel concode_elem_sep int index concode_elem_sep WidgetLocator ancestorInfo concode_elem_sep WidgetLocator parentInfo concode_elem_sep HashMap<String,String> map concode_elem_sep ClassReference classRef concode_field_sep void setAncestorInfo concode_elem_sep Object getAdapter concode_elem_sep int getIndex concode_elem_sep void setData concode_elem_sep void copyDataTo concode_elem_sep WidgetLocator getParentInfo concode_elem_sep String getWidgetLocatorStringName concode_elem_sep String getNameOrLabel concode_elem_sep WidgetLocator getAncestorInfo concode_elem_sep com.windowtester.runtime.locator.IWidgetLocator[] findAll concode_elem_sep boolean matches concode_elem_sep Map<String,String> getDataMap concode_elem_sep void accept concode_elem_sep void setParentInfo concode_elem_sep Class<?> getTargetClass concode_elem_sep void setIndex concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep ClassReference getTargetClassRef concode_elem_sep String toString concode_elem_sep String getData", "code_tokens": ["String", "function", "(", ")", "{", "if", "(", "classRef", "!=", "null", ")", "return", "classRef", ".", "getName", "(", ")", ";", "else", "return", "null", ";", "}"], "nl_tokens": ["get", "the", "subject", "widget", "'", "s", "class", "name", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "int", "UNASSIGNED", "concode_elem_sep", "String", "nameOrLabel", "concode_elem_sep", "int", "index", "concode_elem_sep", "WidgetLocator", "ancestorInfo", "concode_elem_sep", "WidgetLocator", "parentInfo", "concode_elem_sep", "HashMap", "<", "String", ",", "String", ">", "map", "concode_elem_sep", "ClassReference", "classRef", "concode_field_sep", "void", "setAncestorInfo", "concode_elem_sep", "Object", "getAdapter", "concode_elem_sep", "int", "getIndex", "concode_elem_sep", "void", "setData", "concode_elem_sep", "void", "copyDataTo", "concode_elem_sep", "WidgetLocator", "getParentInfo", "concode_elem_sep", "String", "getWidgetLocatorStringName", "concode_elem_sep", "String", "getNameOrLabel", "concode_elem_sep", "WidgetLocator", "getAncestorInfo", "concode_elem_sep", "com", ".", "windowtester", ".", "runtime", ".", "locator", ".", "IWidgetLocator", "[", "]", "findAll", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "getDataMap", "concode_elem_sep", "void", "accept", "concode_elem_sep", "void", "setParentInfo", "concode_elem_sep", "Class", "<", "?", ">", "getTargetClass", "concode_elem_sep", "void", "setIndex", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "ClassReference", "getTargetClassRef", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getData"]}
{"code": "NameAlreadyBoundException function ( final Name arg0 ) { return new NameAlreadyBoundException ( arg0 . toString ( ) ) ; }", "nl": "create a name-already-bound exception . concode_field_sep PlaceHolder placeHolder concode_field_sep Context createSubcontext concode_elem_sep void rebind concode_elem_sep void rebind concode_elem_sep void unbind concode_elem_sep void unbind concode_elem_sep boolean isEmpty concode_elem_sep NameNotFoundException nameNotFoundException concode_elem_sep String getLastComponent concode_elem_sep NotContextException notAContextException concode_elem_sep boolean isLastComponentEmpty concode_elem_sep NamingException namingException concode_elem_sep NamingException namingException concode_elem_sep CannotProceedException cannotProceedException concode_elem_sep InvalidNameException emptyNameException concode_elem_sep NamingEnumeration<T> namingEnumeration", "code_tokens": ["NameAlreadyBoundException", "function", "(", "final", "Name", "arg0", ")", "{", "return", "new", "NameAlreadyBoundException", "(", "arg0", ".", "toString", "(", ")", ")", ";", "}"], "nl_tokens": ["create", "a", "name", "-", "already", "-", "bound", "exception", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Context", "createSubcontext", "concode_elem_sep", "void", "rebind", "concode_elem_sep", "void", "rebind", "concode_elem_sep", "void", "unbind", "concode_elem_sep", "void", "unbind", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "NameNotFoundException", "nameNotFoundException", "concode_elem_sep", "String", "getLastComponent", "concode_elem_sep", "NotContextException", "notAContextException", "concode_elem_sep", "boolean", "isLastComponentEmpty", "concode_elem_sep", "NamingException", "namingException", "concode_elem_sep", "NamingException", "namingException", "concode_elem_sep", "CannotProceedException", "cannotProceedException", "concode_elem_sep", "InvalidNameException", "emptyNameException", "concode_elem_sep", "NamingEnumeration", "<", "T", ">", "namingEnumeration"]}
{"code": "Iterator function ( DoubleIterator arg0 ) { return null == arg0 ? null : new DoubleIteratorIterator ( arg0 ) ; }", "nl": "create an iterator iterator wrappingthe specified doubleiterator doubleiterator . when the given iterator is null , returns null . concode_field_sep DoubleIterator _iterator concode_field_sep Object next concode_elem_sep boolean hasNext concode_elem_sep void remove", "code_tokens": ["Iterator", "function", "(", "DoubleIterator", "arg0", ")", "{", "return", "null", "==", "arg0", "?", "null", ":", "new", "DoubleIteratorIterator", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "an", "iterator", "iterator", "wrappingthe", "specified", "doubleiterator", "doubleiterator", ".", "when", "the", "given", "iterator", "is", "null", ",", "returns", "null", ".", "concode_field_sep", "DoubleIterator", "_iterator", "concode_field_sep", "Object", "next", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "remove"]}
{"code": "int function ( ) { return numberOfReplicationTries ; }", "nl": "replication will be tried numberofreplicationtimes before target contact is given up . concode_field_sep int numberOfReplicates concode_elem_sep long timeToLiveForContacts concode_elem_sep int numberOfPingTries concode_elem_sep long timeBetweenRootPings concode_elem_sep long timeBetweenReplicationChecks concode_elem_sep int numberOfReplicationTries concode_elem_sep int minimumNumberOfReplicates concode_field_sep int getNumberOfPingTries concode_elem_sep void setNumberOfPingTries concode_elem_sep int getNumberOfReplicates concode_elem_sep long getTimeBetweenReplicationChecks concode_elem_sep void setTimeBetweenRootPings concode_elem_sep void setMinimumNumberOfReplicates concode_elem_sep long getTimeToLiveForContacts concode_elem_sep void setNumberOfReplicates concode_elem_sep int getMinimumNumberOfReplicates concode_elem_sep void setTimeToLiveForContacts concode_elem_sep void setTimeBetweenReplicationChecks concode_elem_sep long getTimeBetweenRootPings concode_elem_sep void setNumberOfReplicationTries", "code_tokens": ["int", "function", "(", ")", "{", "return", "numberOfReplicationTries", ";", "}"], "nl_tokens": ["replication", "will", "be", "tried", "numberofreplicationtimes", "before", "target", "contact", "is", "given", "up", ".", "concode_field_sep", "int", "numberOfReplicates", "concode_elem_sep", "long", "timeToLiveForContacts", "concode_elem_sep", "int", "numberOfPingTries", "concode_elem_sep", "long", "timeBetweenRootPings", "concode_elem_sep", "long", "timeBetweenReplicationChecks", "concode_elem_sep", "int", "numberOfReplicationTries", "concode_elem_sep", "int", "minimumNumberOfReplicates", "concode_field_sep", "int", "getNumberOfPingTries", "concode_elem_sep", "void", "setNumberOfPingTries", "concode_elem_sep", "int", "getNumberOfReplicates", "concode_elem_sep", "long", "getTimeBetweenReplicationChecks", "concode_elem_sep", "void", "setTimeBetweenRootPings", "concode_elem_sep", "void", "setMinimumNumberOfReplicates", "concode_elem_sep", "long", "getTimeToLiveForContacts", "concode_elem_sep", "void", "setNumberOfReplicates", "concode_elem_sep", "int", "getMinimumNumberOfReplicates", "concode_elem_sep", "void", "setTimeToLiveForContacts", "concode_elem_sep", "void", "setTimeBetweenReplicationChecks", "concode_elem_sep", "long", "getTimeBetweenRootPings", "concode_elem_sep", "void", "setNumberOfReplicationTries"]}
{"code": "void function ( String arg0 ) { synchronized ( skipHours ) { skipHours . add ( arg0 ) ; } }", "nl": "add an additional skip hour name . concode_field_sep String managingEditor concode_elem_sep String title concode_elem_sep String language concode_elem_sep String link concode_elem_sep ArrayList skipDays concode_elem_sep TextInput textInput concode_elem_sep String rating concode_elem_sep String pubDate concode_elem_sep String description concode_elem_sep String lastBuildDate concode_elem_sep String webMaster concode_elem_sep String copyright concode_elem_sep ArrayList skipHours concode_elem_sep ArrayList items concode_elem_sep Image image concode_elem_sep String docs concode_elem_sep double version concode_field_sep void addSkipDay concode_elem_sep void removeItem concode_elem_sep void setCopyright concode_elem_sep String getWebMaster concode_elem_sep void setDescription concode_elem_sep String getDescription concode_elem_sep String getDocs concode_elem_sep void addItem concode_elem_sep Item[] getItems concode_elem_sep String getTitle concode_elem_sep String[] getSkipHours concode_elem_sep String[] findSkipHours concode_elem_sep String[] findSkipDays concode_elem_sep void render concode_elem_sep void render concode_elem_sep void render concode_elem_sep void render concode_elem_sep void render concode_elem_sep void render concode_elem_sep String[] getSkipDays concode_elem_sep void setManagingEditor concode_elem_sep double getVersion concode_elem_sep String getLanguage concode_elem_sep String getCopyright concode_elem_sep void setVersion concode_elem_sep String getPubDate concode_elem_sep void setWebMaster concode_elem_sep void setTitle concode_elem_sep void setTextInput concode_elem_sep Item[] findItems concode_elem_sep void setPubDate concode_elem_sep void setLink concode_elem_sep String getLink concode_elem_sep String getLastBuildDate concode_elem_sep void setDocs concode_elem_sep void removeSkipHour concode_elem_sep void removeSkipDay concode_elem_sep TextInput getTextInput concode_elem_sep Image getImage concode_elem_sep void setLastBuildDate concode_elem_sep void setRating concode_elem_sep String getManagingEditor concode_elem_sep void setImage concode_elem_sep void setLanguage concode_elem_sep String getRating", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "synchronized", "(", "skipHours", ")", "{", "skipHours", ".", "add", "(", "arg0", ")", ";", "}", "}"], "nl_tokens": ["add", "an", "additional", "skip", "hour", "name", ".", "concode_field_sep", "String", "managingEditor", "concode_elem_sep", "String", "title", "concode_elem_sep", "String", "language", "concode_elem_sep", "String", "link", "concode_elem_sep", "ArrayList", "skipDays", "concode_elem_sep", "TextInput", "textInput", "concode_elem_sep", "String", "rating", "concode_elem_sep", "String", "pubDate", "concode_elem_sep", "String", "description", "concode_elem_sep", "String", "lastBuildDate", "concode_elem_sep", "String", "webMaster", "concode_elem_sep", "String", "copyright", "concode_elem_sep", "ArrayList", "skipHours", "concode_elem_sep", "ArrayList", "items", "concode_elem_sep", "Image", "image", "concode_elem_sep", "String", "docs", "concode_elem_sep", "double", "version", "concode_field_sep", "void", "addSkipDay", "concode_elem_sep", "void", "removeItem", "concode_elem_sep", "void", "setCopyright", "concode_elem_sep", "String", "getWebMaster", "concode_elem_sep", "void", "setDescription", "concode_elem_sep", "String", "getDescription", "concode_elem_sep", "String", "getDocs", "concode_elem_sep", "void", "addItem", "concode_elem_sep", "Item", "[", "]", "getItems", "concode_elem_sep", "String", "getTitle", "concode_elem_sep", "String", "[", "]", "getSkipHours", "concode_elem_sep", "String", "[", "]", "findSkipHours", "concode_elem_sep", "String", "[", "]", "findSkipDays", "concode_elem_sep", "void", "render", "concode_elem_sep", "void", "render", "concode_elem_sep", "void", "render", "concode_elem_sep", "void", "render", "concode_elem_sep", "void", "render", "concode_elem_sep", "void", "render", "concode_elem_sep", "String", "[", "]", "getSkipDays", "concode_elem_sep", "void", "setManagingEditor", "concode_elem_sep", "double", "getVersion", "concode_elem_sep", "String", "getLanguage", "concode_elem_sep", "String", "getCopyright", "concode_elem_sep", "void", "setVersion", "concode_elem_sep", "String", "getPubDate", "concode_elem_sep", "void", "setWebMaster", "concode_elem_sep", "void", "setTitle", "concode_elem_sep", "void", "setTextInput", "concode_elem_sep", "Item", "[", "]", "findItems", "concode_elem_sep", "void", "setPubDate", "concode_elem_sep", "void", "setLink", "concode_elem_sep", "String", "getLink", "concode_elem_sep", "String", "getLastBuildDate", "concode_elem_sep", "void", "setDocs", "concode_elem_sep", "void", "removeSkipHour", "concode_elem_sep", "void", "removeSkipDay", "concode_elem_sep", "TextInput", "getTextInput", "concode_elem_sep", "Image", "getImage", "concode_elem_sep", "void", "setLastBuildDate", "concode_elem_sep", "void", "setRating", "concode_elem_sep", "String", "getManagingEditor", "concode_elem_sep", "void", "setImage", "concode_elem_sep", "void", "setLanguage", "concode_elem_sep", "String", "getRating"]}
{"code": "void function ( ) { lookupEnabled = true ; beginPeriodicLookups ( ) ; }", "nl": "enables periodic lookups for measurement purposes . these look up random keys and are scheduled in a constant interval . concode_field_sep Node<T> myNode concode_elem_sep PeerStatus peerStatus concode_elem_sep Logger log concode_elem_sep ComponentsConfig config concode_elem_sep boolean lookupEnabled concode_field_sep void connectivityChanged concode_elem_sep void beginPeriodicLookups concode_elem_sep void doConnect concode_elem_sep void routingTableBuilt concode_elem_sep void doSingleLookup concode_elem_sep void doDisconnect concode_elem_sep PeerStatus getPeerStatus concode_elem_sep double getSimSec", "code_tokens": ["void", "function", "(", ")", "{", "lookupEnabled", "=", "true", ";", "beginPeriodicLookups", "(", ")", ";", "}"], "nl_tokens": ["enables", "periodic", "lookups", "for", "measurement", "purposes", ".", "these", "look", "up", "random", "keys", "and", "are", "scheduled", "in", "a", "constant", "interval", ".", "concode_field_sep", "Node", "<", "T", ">", "myNode", "concode_elem_sep", "PeerStatus", "peerStatus", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "ComponentsConfig", "config", "concode_elem_sep", "boolean", "lookupEnabled", "concode_field_sep", "void", "connectivityChanged", "concode_elem_sep", "void", "beginPeriodicLookups", "concode_elem_sep", "void", "doConnect", "concode_elem_sep", "void", "routingTableBuilt", "concode_elem_sep", "void", "doSingleLookup", "concode_elem_sep", "void", "doDisconnect", "concode_elem_sep", "PeerStatus", "getPeerStatus", "concode_elem_sep", "double", "getSimSec"]}
{"code": "void function ( ) { resources = GWT . create ( Resources . class ) ; StyleInjector . inject ( resources . dashboardCss ( ) . getText ( ) + resources . latencyDashboardChartCss ( ) . getText ( ) + resources . rightPieChartCss ( ) . getText ( ) + resources . warningPaneCss ( ) . getText ( ) ) ; }", "nl": "initializes resources . this must be called before dashboardresources #getresources . this allows us to avoid an evil static initializer that would pollute all the getresources call sites . concode_field_sep Resources resources concode_field_sep String graphOuterDiv concode_elem_sep Resources getResources concode_elem_sep Css dashboardCss", "code_tokens": ["void", "function", "(", ")", "{", "resources", "=", "GWT", ".", "create", "(", "Resources", ".", "class", ")", ";", "StyleInjector", ".", "inject", "(", "resources", ".", "dashboardCss", "(", ")", ".", "getText", "(", ")", "+", "resources", ".", "latencyDashboardChartCss", "(", ")", ".", "getText", "(", ")", "+", "resources", ".", "rightPieChartCss", "(", ")", ".", "getText", "(", ")", "+", "resources", ".", "warningPaneCss", "(", ")", ".", "getText", "(", ")", ")", ";", "}"], "nl_tokens": ["initializes", "resources", ".", "this", "must", "be", "called", "before", "dashboardresources", "#getresources . this allows us to avoid an evil static initializer that would pollute all the getresources call sites . concode_field_sep Resources resources concode_field_sep String graphOuterDiv concode_elem_sep Resources getResources concode_elem_sep Css dashboardCss"]}
{"code": "double function ( ) { return numericalZero ; }", "nl": "see setnumericalzero concode_field_sep double numericalZero concode_elem_sep RealMatrixImpl decompMatrix concode_field_sep RealMatrixImpl getDecomposition concode_elem_sep void setNumericalZero concode_elem_sep double[] solve concode_elem_sep double[] solve concode_elem_sep void decompose concode_elem_sep double getDeterminant", "code_tokens": ["double", "function", "(", ")", "{", "return", "numericalZero", ";", "}"], "nl_tokens": ["see", "setnumericalzero", "concode_field_sep", "double", "numericalZero", "concode_elem_sep", "RealMatrixImpl", "decompMatrix", "concode_field_sep", "RealMatrixImpl", "getDecomposition", "concode_elem_sep", "void", "setNumericalZero", "concode_elem_sep", "double", "[", "]", "solve", "concode_elem_sep", "double", "[", "]", "solve", "concode_elem_sep", "void", "decompose", "concode_elem_sep", "double", "getDeterminant"]}
{"code": "void function ( boolean arg0 , String arg1 ) { if ( arg0 == false ) { throw new IllegalArgumentException ( arg1 ) ; } }", "nl": "validate that the argument condition is true ; otherwise throwing an exception with the specified message . this method is useful when validating according to an arbitrary boolean expression , such as validating a primitive number or using your own custom validation expression . validate.istrue i > 0.0 , `` the value must be greater than zero : % d '' , i ; for performance reasons , the long value is passed as a separate parameter and appended to the exception message only in the case of an error . concode_field_sep PlaceHolder placeHolder concode_field_sep T notNull concode_elem_sep boolean isEmpty concode_elem_sep String unescape concode_elem_sep String concat concode_elem_sep void onlyOneIsTrue concode_elem_sep boolean onlyOneIsTrueNonThrow concode_elem_sep String hex concode_elem_sep String toString concode_elem_sep String join concode_elem_sep String join concode_elem_sep void closeQuietly concode_elem_sep T notEmpty concode_elem_sep String escape concode_elem_sep int indexOf", "code_tokens": ["void", "function", "(", "boolean", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "arg0", "==", "false", ")", "{", "throw", "new", "IllegalArgumentException", "(", "arg1", ")", ";", "}", "}"], "nl_tokens": ["validate", "that", "the", "argument", "condition", "is", "true", ";", "otherwise", "throwing", "an", "exception", "with", "the", "specified", "message", ".", "this", "method", "is", "useful", "when", "validating", "according", "to", "an", "arbitrary", "boolean", "expression", ",", "such", "as", "validating", "a", "primitive", "number", "or", "using", "your", "own", "custom", "validation", "expression", ".", "validate", ".", "istrue", "i", ">", "0.0", ",", "`", "`", "the", "value", "must", "be", "greater", "than", "zero", ":", "%", "d", "''", ",", "i", ";", "for", "performance", "reasons", ",", "the", "long", "value", "is", "passed", "as", "a", "separate", "parameter", "and", "appended", "to", "the", "exception", "message", "only", "in", "the", "case", "of", "an", "error", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "T", "notNull", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "String", "unescape", "concode_elem_sep", "String", "concat", "concode_elem_sep", "void", "onlyOneIsTrue", "concode_elem_sep", "boolean", "onlyOneIsTrueNonThrow", "concode_elem_sep", "String", "hex", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "join", "concode_elem_sep", "String", "join", "concode_elem_sep", "void", "closeQuietly", "concode_elem_sep", "T", "notEmpty", "concode_elem_sep", "String", "escape", "concode_elem_sep", "int", "indexOf"]}
{"code": "String function ( ECPublicKey arg0 ) { byte [ ] loc0 = loc0 ( arg0 ) ; return hexColonDelimited ( Hashing . md5 ( ) . hashBytes ( loc0 ) ) ; }", "nl": "create a fingerprint per the following spec concode_field_sep Map<String,ECParameterSpec> CURVES concode_elem_sep String NISTP384 concode_elem_sep Map<Integer,String> CURVE_SIZES concode_elem_sep String ECDSA_SHA2_PREFIX concode_elem_sep ECParameterSpec nistp521 concode_elem_sep String NISTP521 concode_elem_sep ECParameterSpec nistp384 concode_elem_sep String NISTP256 concode_elem_sep ECParameterSpec nistp256 concode_field_sep byte[] keyBlob concode_elem_sep String getCurveName concode_elem_sep ECPublicKeySpec publicKeySpecFromOpenSSH concode_elem_sep ECPublicKeySpec publicKeySpecFromOpenSSH concode_elem_sep String encodeAsOpenSSH concode_elem_sep byte[] readLengthFirst concode_elem_sep String fingerprintPublicKey concode_elem_sep byte[] encodeECPoint concode_elem_sep String hexColonDelimited concode_elem_sep ECPoint decodeECPoint concode_elem_sep int getCurveSize concode_elem_sep void writeLengthFirst concode_elem_sep byte[] removeLeadingZeroes", "code_tokens": ["String", "function", "(", "ECPublicKey", "arg0", ")", "{", "byte", "[", "]", "loc0", "=", "loc0", "(", "arg0", ")", ";", "return", "hexColonDelimited", "(", "Hashing", ".", "md5", "(", ")", ".", "hashBytes", "(", "loc0", ")", ")", ";", "}"], "nl_tokens": ["create", "a", "fingerprint", "per", "the", "following", "spec", "concode_field_sep", "Map", "<", "String", ",", "ECParameterSpec", ">", "CURVES", "concode_elem_sep", "String", "NISTP384", "concode_elem_sep", "Map", "<", "Integer", ",", "String", ">", "CURVE_SIZES", "concode_elem_sep", "String", "ECDSA_SHA2_PREFIX", "concode_elem_sep", "ECParameterSpec", "nistp521", "concode_elem_sep", "String", "NISTP521", "concode_elem_sep", "ECParameterSpec", "nistp384", "concode_elem_sep", "String", "NISTP256", "concode_elem_sep", "ECParameterSpec", "nistp256", "concode_field_sep", "byte", "[", "]", "keyBlob", "concode_elem_sep", "String", "getCurveName", "concode_elem_sep", "ECPublicKeySpec", "publicKeySpecFromOpenSSH", "concode_elem_sep", "ECPublicKeySpec", "publicKeySpecFromOpenSSH", "concode_elem_sep", "String", "encodeAsOpenSSH", "concode_elem_sep", "byte", "[", "]", "readLengthFirst", "concode_elem_sep", "String", "fingerprintPublicKey", "concode_elem_sep", "byte", "[", "]", "encodeECPoint", "concode_elem_sep", "String", "hexColonDelimited", "concode_elem_sep", "ECPoint", "decodeECPoint", "concode_elem_sep", "int", "getCurveSize", "concode_elem_sep", "void", "writeLengthFirst", "concode_elem_sep", "byte", "[", "]", "removeLeadingZeroes"]}
{"code": "void function ( String arg0 ) { ExtendedJSONObject loc0 = getObsoleteIds ( ) ; loc0 . put ( arg0 , HealthReportConstants . DELETION_ATTEMPTS_PER_KNOWN_TO_BE_ON_SERVER_DOCUMENT_ID ) ; setObsoleteIds ( loc0 ) ; }", "nl": "track the given document id for eventual obsolescence and deletion , and give it priority since we know this id has made it to the server , and we definitely do n't want to orphan it . concode_field_sep SharedPreferences sharedPrefs concode_elem_sep String LOG_TAG concode_field_sep ExtendedJSONObject getObsoleteIds concode_elem_sep int compare concode_elem_sep int numberOfObsoleteIds concode_elem_sep boolean hasObsoleteIds concode_elem_sep void removeObsoleteId concode_elem_sep void setObsoleteIds concode_elem_sep void purgeObsoleteIds concode_elem_sep void limitObsoleteIds concode_elem_sep void decrementObsoleteId concode_elem_sep Collection<String> getBatchOfObsoleteIds concode_elem_sep String getNextObsoleteId concode_elem_sep void addObsoleteId concode_elem_sep void decrementObsoleteIdAttempts concode_elem_sep void decrementObsoleteIdAttempts", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "ExtendedJSONObject", "loc0", "=", "getObsoleteIds", "(", ")", ";", "loc0", ".", "put", "(", "arg0", ",", "HealthReportConstants", ".", "DELETION_ATTEMPTS_PER_KNOWN_TO_BE_ON_SERVER_DOCUMENT_ID", ")", ";", "setObsoleteIds", "(", "loc0", ")", ";", "}"], "nl_tokens": ["track", "the", "given", "document", "id", "for", "eventual", "obsolescence", "and", "deletion", ",", "and", "give", "it", "priority", "since", "we", "know", "this", "id", "has", "made", "it", "to", "the", "server", ",", "and", "we", "definitely", "do", "n", "'", "t", "want", "to", "orphan", "it", ".", "concode_field_sep", "SharedPreferences", "sharedPrefs", "concode_elem_sep", "String", "LOG_TAG", "concode_field_sep", "ExtendedJSONObject", "getObsoleteIds", "concode_elem_sep", "int", "compare", "concode_elem_sep", "int", "numberOfObsoleteIds", "concode_elem_sep", "boolean", "hasObsoleteIds", "concode_elem_sep", "void", "removeObsoleteId", "concode_elem_sep", "void", "setObsoleteIds", "concode_elem_sep", "void", "purgeObsoleteIds", "concode_elem_sep", "void", "limitObsoleteIds", "concode_elem_sep", "void", "decrementObsoleteId", "concode_elem_sep", "Collection", "<", "String", ">", "getBatchOfObsoleteIds", "concode_elem_sep", "String", "getNextObsoleteId", "concode_elem_sep", "void", "addObsoleteId", "concode_elem_sep", "void", "decrementObsoleteIdAttempts", "concode_elem_sep", "void", "decrementObsoleteIdAttempts"]}
{"code": "void function ( ActivationPurpose arg0 ) { if ( _activator != null ) { _activator . activate ( arg0 ) ; } }", "nl": "activate basic implementation . concode_field_sep int _size concode_elem_sep V[] _values concode_elem_sep Activator _activator concode_elem_sep long serialVersionUID concode_elem_sep K[] _keys concode_field_sep V defaultValue concode_elem_sep Collection<V> values concode_elem_sep V replace concode_elem_sep void insert concode_elem_sep V valueAt concode_elem_sep V delete concode_elem_sep boolean containsValue concode_elem_sep V put concode_elem_sep V remove concode_elem_sep void bind concode_elem_sep int hashCode concode_elem_sep V get concode_elem_sep V putInternal concode_elem_sep void putAll concode_elem_sep K defaultKeyValue concode_elem_sep Set<K> keySet concode_elem_sep int indexOf concode_elem_sep V[] allocateValueStorage concode_elem_sep K keyAt concode_elem_sep K[] allocateKeyStorage concode_elem_sep Set<Map.Entry<K,V>> entrySet concode_elem_sep boolean containsKey concode_elem_sep void clear concode_elem_sep boolean isEmpty concode_elem_sep int size concode_elem_sep int indexOfKey concode_elem_sep boolean equals concode_elem_sep ArrayMap4<K,V> clone concode_elem_sep void ensureCapacity concode_elem_sep boolean containsKeyImpl concode_elem_sep void initializeBackingArray", "code_tokens": ["void", "function", "(", "ActivationPurpose", "arg0", ")", "{", "if", "(", "_activator", "!=", "null", ")", "{", "_activator", ".", "activate", "(", "arg0", ")", ";", "}", "}"], "nl_tokens": ["activate", "basic", "implementation", ".", "concode_field_sep", "int", "_size", "concode_elem_sep", "V", "[", "]", "_values", "concode_elem_sep", "Activator", "_activator", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "K", "[", "]", "_keys", "concode_field_sep", "V", "defaultValue", "concode_elem_sep", "Collection", "<", "V", ">", "values", "concode_elem_sep", "V", "replace", "concode_elem_sep", "void", "insert", "concode_elem_sep", "V", "valueAt", "concode_elem_sep", "V", "delete", "concode_elem_sep", "boolean", "containsValue", "concode_elem_sep", "V", "put", "concode_elem_sep", "V", "remove", "concode_elem_sep", "void", "bind", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "V", "get", "concode_elem_sep", "V", "putInternal", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "K", "defaultKeyValue", "concode_elem_sep", "Set", "<", "K", ">", "keySet", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "V", "[", "]", "allocateValueStorage", "concode_elem_sep", "K", "keyAt", "concode_elem_sep", "K", "[", "]", "allocateKeyStorage", "concode_elem_sep", "Set", "<", "Map", ".", "Entry", "<", "K", ",", "V", ">>", "entrySet", "concode_elem_sep", "boolean", "containsKey", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "int", "size", "concode_elem_sep", "int", "indexOfKey", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "ArrayMap4", "<", "K", ",", "V", ">", "clone", "concode_elem_sep", "void", "ensureCapacity", "concode_elem_sep", "boolean", "containsKeyImpl", "concode_elem_sep", "void", "initializeBackingArray"]}
{"code": "Iterable < ? extends Object > function ( Object arg0 ) { if ( isArray ( arg0 ) ) return ( ( Iterable ) arg0 ) ; else throw new JsonPathException ( \"srini_string\" + arg0 != null ? arg0 . getClass ( ) . getName ( ) : \"srini_string\" ) ; }", "nl": "converts given array to an iterable concode_field_sep PlaceHolder placeHolder concode_field_sep Object getMapValue concode_elem_sep void setProperty concode_elem_sep Collection<String> getPropertyKeys concode_elem_sep int length concode_elem_sep boolean isArray concode_elem_sep Object getArrayIndex concode_elem_sep Object getArrayIndex concode_elem_sep void setArrayIndex concode_elem_sep void removeProperty concode_elem_sep boolean isMap concode_elem_sep Object unwrap", "code_tokens": ["Iterable", "<", "?", "extends", "Object", ">", "function", "(", "Object", "arg0", ")", "{", "if", "(", "isArray", "(", "arg0", ")", ")", "return", "(", "(", "Iterable", ")", "arg0", ")", ";", "else", "throw", "new", "JsonPathException", "(", "\"srini_string\"", "+", "arg0", "!=", "null", "?", "arg0", ".", "getClass", "(", ")", ".", "getName", "(", ")", ":", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["converts", "given", "array", "to", "an", "iterable", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Object", "getMapValue", "concode_elem_sep", "void", "setProperty", "concode_elem_sep", "Collection", "<", "String", ">", "getPropertyKeys", "concode_elem_sep", "int", "length", "concode_elem_sep", "boolean", "isArray", "concode_elem_sep", "Object", "getArrayIndex", "concode_elem_sep", "Object", "getArrayIndex", "concode_elem_sep", "void", "setArrayIndex", "concode_elem_sep", "void", "removeProperty", "concode_elem_sep", "boolean", "isMap", "concode_elem_sep", "Object", "unwrap"]}
{"code": "ConditionMonitor function ( ) { return INSTANCE ; }", "nl": "answer the condition monitor concode_field_sep ConditionMonitor INSTANCE concode_field_sep void add concode_elem_sep void add concode_elem_sep void removeAll concode_elem_sep int process concode_elem_sep com.windowtester.runtime.condition.ICondition[] getConditions concode_elem_sep void removeHandler", "code_tokens": ["ConditionMonitor", "function", "(", ")", "{", "return", "INSTANCE", ";", "}"], "nl_tokens": ["answer", "the", "condition", "monitor", "concode_field_sep", "ConditionMonitor", "INSTANCE", "concode_field_sep", "void", "add", "concode_elem_sep", "void", "add", "concode_elem_sep", "void", "removeAll", "concode_elem_sep", "int", "process", "concode_elem_sep", "com", ".", "windowtester", ".", "runtime", ".", "condition", ".", "ICondition", "[", "]", "getConditions", "concode_elem_sep", "void", "removeHandler"]}
{"code": "int function ( Date arg0 ) { int loc0 ; int loc1 = Math . abs ( arg0 . beginOfTime ( ) - this . beginOfTime ( ) ) ; if ( this . isBefore ( arg0 ) ) { loc0 = - 1 ; } else if ( this . isAfter ( arg0 ) ) { loc0 = 1 ; } else { loc0 = 0 ; } return loc0 * loc1 ; }", "nl": "determines the difference in days between d and this date . for example , if this date is 12/15/1997 and d is 12/14/1997 , the difference is 1 . if this date occurs before d , the result is negative . concode_field_sep int month concode_elem_sep int year concode_elem_sep int day concode_field_sep int daysInMonth concode_elem_sep int beginOfTime concode_elem_sep int dayInYear concode_elem_sep boolean isLeapYear concode_elem_sep boolean isValidDate concode_elem_sep String toString concode_elem_sep void main concode_elem_sep int daysInYear concode_elem_sep boolean isAfter concode_elem_sep boolean isBefore", "code_tokens": ["int", "function", "(", "Date", "arg0", ")", "{", "int", "loc0", ";", "int", "loc1", "=", "Math", ".", "abs", "(", "arg0", ".", "beginOfTime", "(", ")", "-", "this", ".", "beginOfTime", "(", ")", ")", ";", "if", "(", "this", ".", "isBefore", "(", "arg0", ")", ")", "{", "loc0", "=", "-", "1", ";", "}", "else", "if", "(", "this", ".", "isAfter", "(", "arg0", ")", ")", "{", "loc0", "=", "1", ";", "}", "else", "{", "loc0", "=", "0", ";", "}", "return", "loc0", "*", "loc1", ";", "}"], "nl_tokens": ["determines", "the", "difference", "in", "days", "between", "d", "and", "this", "date", ".", "for", "example", ",", "if", "this", "date", "is", "12", "/", "15", "/", "1997", "and", "d", "is", "12", "/", "14", "/", "1997", ",", "the", "difference", "is", "1", ".", "if", "this", "date", "occurs", "before", "d", ",", "the", "result", "is", "negative", ".", "concode_field_sep", "int", "month", "concode_elem_sep", "int", "year", "concode_elem_sep", "int", "day", "concode_field_sep", "int", "daysInMonth", "concode_elem_sep", "int", "beginOfTime", "concode_elem_sep", "int", "dayInYear", "concode_elem_sep", "boolean", "isLeapYear", "concode_elem_sep", "boolean", "isValidDate", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "main", "concode_elem_sep", "int", "daysInYear", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "boolean", "isBefore"]}
{"code": "RemittanceInformation5 function ( String arg0 ) { checkMax140Text ( arg0 ) ; RemittanceInformation5 loc0 = new RemittanceInformation5 ( ) ; loc0 . getUstrd ( ) . add ( arg0 ) ; return loc0 ; }", "nl": "information supplied to enable the matching of an entry with the items that the transfer is intended to settle , such as commercial invoices in an accounts ' receivable system max length : 140 concode_field_sep Pattern bicRegex concode_field_sep PartyIdentification32 createIdParty concode_elem_sep PaymentIdentification1 createPaymentIdentification concode_elem_sep void checkMax70Text concode_elem_sep PartyIdentification32 createParty concode_elem_sep PartyIdentification32 createParty concode_elem_sep RemittanceInformation5 createRmtInf_struct concode_elem_sep void checkMax140Text concode_elem_sep XMLGregorianCalendar createXMLGregorianCalendarDate concode_elem_sep BranchAndFinancialInstitutionIdentification4 createFinInstnId concode_elem_sep XMLGregorianCalendar createXMLGregorianCalendar concode_elem_sep CashAccount16 createAccount concode_elem_sep CashAccount16 createAccount concode_elem_sep ActiveOrHistoricCurrencyAndAmount createAmount concode_elem_sep void checkMax35Text", "code_tokens": ["RemittanceInformation5", "function", "(", "String", "arg0", ")", "{", "checkMax140Text", "(", "arg0", ")", ";", "RemittanceInformation5", "loc0", "=", "new", "RemittanceInformation5", "(", ")", ";", "loc0", ".", "getUstrd", "(", ")", ".", "add", "(", "arg0", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["information", "supplied", "to", "enable", "the", "matching", "of", "an", "entry", "with", "the", "items", "that", "the", "transfer", "is", "intended", "to", "settle", ",", "such", "as", "commercial", "invoices", "in", "an", "accounts", "'", "receivable", "system", "max", "length", ":", "140", "concode_field_sep", "Pattern", "bicRegex", "concode_field_sep", "PartyIdentification32", "createIdParty", "concode_elem_sep", "PaymentIdentification1", "createPaymentIdentification", "concode_elem_sep", "void", "checkMax70Text", "concode_elem_sep", "PartyIdentification32", "createParty", "concode_elem_sep", "PartyIdentification32", "createParty", "concode_elem_sep", "RemittanceInformation5", "createRmtInf_struct", "concode_elem_sep", "void", "checkMax140Text", "concode_elem_sep", "XMLGregorianCalendar", "createXMLGregorianCalendarDate", "concode_elem_sep", "BranchAndFinancialInstitutionIdentification4", "createFinInstnId", "concode_elem_sep", "XMLGregorianCalendar", "createXMLGregorianCalendar", "concode_elem_sep", "CashAccount16", "createAccount", "concode_elem_sep", "CashAccount16", "createAccount", "concode_elem_sep", "ActiveOrHistoricCurrencyAndAmount", "createAmount", "concode_elem_sep", "void", "checkMax35Text"]}
{"code": "Phenotype function ( String arg0 , String arg1 ) { List < Phenotype > loc0 = getPhenotypesByField ( arg0 , arg1 , true ) ; if ( loc0 . size ( ) == 0 ) { return Phenotype . NULL ; } return loc0 . get ( 0 ) ; }", "nl": "get one single phenotype where the field given has the value given . concode_field_sep Joiner OR_QUERY_JOINER concode_elem_sep Path path concode_elem_sep SolrClient server concode_elem_sep CoreContainer cores concode_elem_sep boolean autocommit concode_elem_sep String WILDCARD_QSTRING concode_elem_sep String CORE_NAME concode_elem_sep SolrMapper mapper concode_elem_sep boolean up concode_elem_sep String FIELD_IS concode_field_sep void init concode_elem_sep Phenotype savePhenotype concode_elem_sep String addStatusFilter concode_elem_sep Phenotype getPhenotypeByIssueNumber concode_elem_sep Phenotype getPhenotype concode_elem_sep void commit concode_elem_sep boolean getAutocommit concode_elem_sep List<Phenotype> searchPhenotypes concode_elem_sep void setAutocommit concode_elem_sep List<Phenotype> getPhenotypesByStatus concode_elem_sep List<Phenotype> getPhenotypesByField concode_elem_sep String getNextId concode_elem_sep Phenotype getPhenotypeByHpoId concode_elem_sep boolean deletePhenotype concode_elem_sep Phenotype runQuery concode_elem_sep void checkUp concode_elem_sep void shutdown concode_elem_sep Phenotype getPhenotypeById", "code_tokens": ["Phenotype", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "List", "<", "Phenotype", ">", "loc0", "=", "getPhenotypesByField", "(", "arg0", ",", "arg1", ",", "true", ")", ";", "if", "(", "loc0", ".", "size", "(", ")", "==", "0", ")", "{", "return", "Phenotype", ".", "NULL", ";", "}", "return", "loc0", ".", "get", "(", "0", ")", ";", "}"], "nl_tokens": ["get", "one", "single", "phenotype", "where", "the", "field", "given", "has", "the", "value", "given", ".", "concode_field_sep", "Joiner", "OR_QUERY_JOINER", "concode_elem_sep", "Path", "path", "concode_elem_sep", "SolrClient", "server", "concode_elem_sep", "CoreContainer", "cores", "concode_elem_sep", "boolean", "autocommit", "concode_elem_sep", "String", "WILDCARD_QSTRING", "concode_elem_sep", "String", "CORE_NAME", "concode_elem_sep", "SolrMapper", "mapper", "concode_elem_sep", "boolean", "up", "concode_elem_sep", "String", "FIELD_IS", "concode_field_sep", "void", "init", "concode_elem_sep", "Phenotype", "savePhenotype", "concode_elem_sep", "String", "addStatusFilter", "concode_elem_sep", "Phenotype", "getPhenotypeByIssueNumber", "concode_elem_sep", "Phenotype", "getPhenotype", "concode_elem_sep", "void", "commit", "concode_elem_sep", "boolean", "getAutocommit", "concode_elem_sep", "List", "<", "Phenotype", ">", "searchPhenotypes", "concode_elem_sep", "void", "setAutocommit", "concode_elem_sep", "List", "<", "Phenotype", ">", "getPhenotypesByStatus", "concode_elem_sep", "List", "<", "Phenotype", ">", "getPhenotypesByField", "concode_elem_sep", "String", "getNextId", "concode_elem_sep", "Phenotype", "getPhenotypeByHpoId", "concode_elem_sep", "boolean", "deletePhenotype", "concode_elem_sep", "Phenotype", "runQuery", "concode_elem_sep", "void", "checkUp", "concode_elem_sep", "void", "shutdown", "concode_elem_sep", "Phenotype", "getPhenotypeById"]}
{"code": "int function ( ) { return type ; }", "nl": "get type type to mark this response , default is 0 it will be used in httpcache #httpcache android.content.context , int concode_field_sep boolean isInCache concode_elem_sep int responseCode concode_elem_sep String responseBody concode_elem_sep Map<String,Object> responseHeaders concode_elem_sep boolean isInitExpiredTime concode_elem_sep int type concode_elem_sep String url concode_elem_sep long expiredTime concode_field_sep boolean isInCache concode_elem_sep long getExpiresInMillis concode_elem_sep HttpResponse setInCache concode_elem_sep void setResponseHeader concode_elem_sep void setExpiredTime concode_elem_sep String getResponseBody concode_elem_sep void setResponseCode concode_elem_sep void setResponseHeaders concode_elem_sep void setType concode_elem_sep long getExpiredTime concode_elem_sep void setUrl concode_elem_sep String getUrl concode_elem_sep String getExpiresHeader concode_elem_sep long getCacheControlMaxAge concode_elem_sep int getResponseCode concode_elem_sep Map<String,Object> getResponseHeaders concode_elem_sep void setResponseBody concode_elem_sep Object getResponseHeader concode_elem_sep boolean isExpired", "code_tokens": ["int", "function", "(", ")", "{", "return", "type", ";", "}"], "nl_tokens": ["get", "type", "type", "to", "mark", "this", "response", ",", "default", "is", "0", "it", "will", "be", "used", "in", "httpcache", "#httpcache android.content.context , int concode_field_sep boolean isInCache concode_elem_sep int responseCode concode_elem_sep String responseBody concode_elem_sep Map<String,Object> responseHeaders concode_elem_sep boolean isInitExpiredTime concode_elem_sep int type concode_elem_sep String url concode_elem_sep long expiredTime concode_field_sep boolean isInCache concode_elem_sep long getExpiresInMillis concode_elem_sep HttpResponse setInCache concode_elem_sep void setResponseHeader concode_elem_sep void setExpiredTime concode_elem_sep String getResponseBody concode_elem_sep void setResponseCode concode_elem_sep void setResponseHeaders concode_elem_sep void setType concode_elem_sep long getExpiredTime concode_elem_sep void setUrl concode_elem_sep String getUrl concode_elem_sep String getExpiresHeader concode_elem_sep long getCacheControlMaxAge concode_elem_sep int getResponseCode concode_elem_sep Map<String,Object> getResponseHeaders concode_elem_sep void setResponseBody concode_elem_sep Object getResponseHeader concode_elem_sep boolean isExpired"]}
{"code": "void function ( PdfWriter arg0 , Document arg1 , Rectangle arg2 , String arg3 ) { }", "nl": "called when a chunk with a generic tag is written . it is useful to pinpoint the chunk location to generate bookmarks , for example . concode_field_sep PlaceHolder placeHolder concode_field_sep void onSection concode_elem_sep void onParagraph concode_elem_sep void onParagraphEnd concode_elem_sep void onOpenDocument concode_elem_sep void onSectionEnd concode_elem_sep void onEndPage concode_elem_sep void onChapter concode_elem_sep void onCloseDocument concode_elem_sep void onChapterEnd concode_elem_sep void onStartPage", "code_tokens": ["void", "function", "(", "PdfWriter", "arg0", ",", "Document", "arg1", ",", "Rectangle", "arg2", ",", "String", "arg3", ")", "{", "}"], "nl_tokens": ["called", "when", "a", "chunk", "with", "a", "generic", "tag", "is", "written", ".", "it", "is", "useful", "to", "pinpoint", "the", "chunk", "location", "to", "generate", "bookmarks", ",", "for", "example", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "onSection", "concode_elem_sep", "void", "onParagraph", "concode_elem_sep", "void", "onParagraphEnd", "concode_elem_sep", "void", "onOpenDocument", "concode_elem_sep", "void", "onSectionEnd", "concode_elem_sep", "void", "onEndPage", "concode_elem_sep", "void", "onChapter", "concode_elem_sep", "void", "onCloseDocument", "concode_elem_sep", "void", "onChapterEnd", "concode_elem_sep", "void", "onStartPage"]}
{"code": "void function ( QueryCondition < ? > arg0 ) { conditions . add ( arg0 ) ; }", "nl": "this method adds a further condition to the set of conditions of this clause . concode_field_sep int solvingLevel concode_elem_sep int searchedElements concode_elem_sep Vector<QueryCondition<?>> conditions concode_elem_sep SkyNetNodeInfo solvingPeer concode_elem_sep Vector<SkyNetNodeInfo> matches concode_elem_sep HashMap<BigDecimal,QueryReplyingPeer> replyingPeers concode_field_sep SkyNetNodeInfo getSolvingPeer concode_elem_sep void addReplyingPeer concode_elem_sep long getSize concode_elem_sep QueryCondition<?> getCondition concode_elem_sep void decrementSearchedElements concode_elem_sep int getSolvingLevel concode_elem_sep void addMatch concode_elem_sep int getNumberOfConditions concode_elem_sep Vector<SkyNetNodeInfo> getMatches concode_elem_sep HashMap<BigDecimal,QueryReplyingPeer> getReplyingPeers concode_elem_sep int getSearchedElements concode_elem_sep String toString", "code_tokens": ["void", "function", "(", "QueryCondition", "<", "?", ">", "arg0", ")", "{", "conditions", ".", "add", "(", "arg0", ")", ";", "}"], "nl_tokens": ["this", "method", "adds", "a", "further", "condition", "to", "the", "set", "of", "conditions", "of", "this", "clause", ".", "concode_field_sep", "int", "solvingLevel", "concode_elem_sep", "int", "searchedElements", "concode_elem_sep", "Vector", "<", "QueryCondition", "<", "?", ">>", "conditions", "concode_elem_sep", "SkyNetNodeInfo", "solvingPeer", "concode_elem_sep", "Vector", "<", "SkyNetNodeInfo", ">", "matches", "concode_elem_sep", "HashMap", "<", "BigDecimal", ",", "QueryReplyingPeer", ">", "replyingPeers", "concode_field_sep", "SkyNetNodeInfo", "getSolvingPeer", "concode_elem_sep", "void", "addReplyingPeer", "concode_elem_sep", "long", "getSize", "concode_elem_sep", "QueryCondition", "<", "?", ">", "getCondition", "concode_elem_sep", "void", "decrementSearchedElements", "concode_elem_sep", "int", "getSolvingLevel", "concode_elem_sep", "void", "addMatch", "concode_elem_sep", "int", "getNumberOfConditions", "concode_elem_sep", "Vector", "<", "SkyNetNodeInfo", ">", "getMatches", "concode_elem_sep", "HashMap", "<", "BigDecimal", ",", "QueryReplyingPeer", ">", "getReplyingPeers", "concode_elem_sep", "int", "getSearchedElements", "concode_elem_sep", "String", "toString"]}
{"code": "boolean function ( int arg0 , int [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 . length ; ++ loc0 ) { if ( arg1 [ loc0 ] == arg0 ) return true ; } return false ; }", "nl": "check to see if the given item is in an array . concode_field_sep PlaceHolder placeHolder concode_field_sep int findFirstNotContainedIn concode_elem_sep int ctrlSelect concode_elem_sep int last concode_elem_sep int stdSelect concode_elem_sep int indexToSelect concode_elem_sep int indexToSelect concode_elem_sep int shiftSelect concode_elem_sep int first", "code_tokens": ["boolean", "function", "(", "int", "arg0", ",", "int", "[", "]", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg1", ".", "length", ";", "+", "+", "loc0", ")", "{", "if", "(", "arg1", "[", "loc0", "]", "==", "arg0", ")", "return", "true", ";", "}", "return", "false", ";", "}"], "nl_tokens": ["check", "to", "see", "if", "the", "given", "item", "is", "in", "an", "array", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "findFirstNotContainedIn", "concode_elem_sep", "int", "ctrlSelect", "concode_elem_sep", "int", "last", "concode_elem_sep", "int", "stdSelect", "concode_elem_sep", "int", "indexToSelect", "concode_elem_sep", "int", "indexToSelect", "concode_elem_sep", "int", "shiftSelect", "concode_elem_sep", "int", "first"]}
{"code": "String function ( String arg0 , String arg1 ) { return new StringBuffer ( arg0 ) . append ( SLASH_STRING ) . append ( arg1 ) . toString ( ) ; }", "nl": "just sticks all the strings together with ' / ' contract : user must ensure that each param is not empty . concode_field_sep String DOT concode_elem_sep String SLASH_STRING concode_elem_sep char DOT_CHAR concode_elem_sep char SLASH_CHAR concode_field_sep void safeJoin concode_elem_sep void assertNotEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep String dotAppend concode_elem_sep String dotAppend", "code_tokens": ["String", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "return", "new", "StringBuffer", "(", "arg0", ")", ".", "append", "(", "SLASH_STRING", ")", ".", "append", "(", "arg1", ")", ".", "toString", "(", ")", ";", "}"], "nl_tokens": ["just", "sticks", "all", "the", "strings", "together", "with", "' / '", "contract", ":", "user", "must", "ensure", "that", "each", "param", "is", "not", "empty", ".", "concode_field_sep", "String", "DOT", "concode_elem_sep", "String", "SLASH_STRING", "concode_elem_sep", "char", "DOT_CHAR", "concode_elem_sep", "char", "SLASH_CHAR", "concode_field_sep", "void", "safeJoin", "concode_elem_sep", "void", "assertNotEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "String", "dotAppend", "concode_elem_sep", "String", "dotAppend"]}
{"code": "FieldSelector function ( final String arg0 ) { return new FieldSelector ( arg0 ) ; }", "nl": "maps a cql value to the specified field from an input tuple . concode_field_sep PlaceHolder placeHolder concode_field_sep BatchCQLStatementTupleMapper unLoggedBatch concode_elem_sep CqlMapper.DefaultCqlMapper all concode_elem_sep CQLStatementTupleMapper async concode_elem_sep ContextQuery named concode_elem_sep ContextQuery namedByField concode_elem_sep BatchCQLStatementTupleMapper newBatchStatementBuilder concode_elem_sep BatchCQLStatementTupleMapper counterBatch concode_elem_sep BatchCQLStatementTupleMapper loggedBatch concode_elem_sep BoundCQLStatementMapperBuilder boundQuery concode_elem_sep BoundCQLStatementMapperBuilder boundQuery concode_elem_sep FieldSelector[] fields concode_elem_sep SimpleCQLStatementMapperBuilder simpleQuery concode_elem_sep SimpleCQLStatementMapperBuilder simpleQuery", "code_tokens": ["FieldSelector", "function", "(", "final", "String", "arg0", ")", "{", "return", "new", "FieldSelector", "(", "arg0", ")", ";", "}"], "nl_tokens": ["maps", "a", "cql", "value", "to", "the", "specified", "field", "from", "an", "input", "tuple", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "BatchCQLStatementTupleMapper", "unLoggedBatch", "concode_elem_sep", "CqlMapper", ".", "DefaultCqlMapper", "all", "concode_elem_sep", "CQLStatementTupleMapper", "async", "concode_elem_sep", "ContextQuery", "named", "concode_elem_sep", "ContextQuery", "namedByField", "concode_elem_sep", "BatchCQLStatementTupleMapper", "newBatchStatementBuilder", "concode_elem_sep", "BatchCQLStatementTupleMapper", "counterBatch", "concode_elem_sep", "BatchCQLStatementTupleMapper", "loggedBatch", "concode_elem_sep", "BoundCQLStatementMapperBuilder", "boundQuery", "concode_elem_sep", "BoundCQLStatementMapperBuilder", "boundQuery", "concode_elem_sep", "FieldSelector", "[", "]", "fields", "concode_elem_sep", "SimpleCQLStatementMapperBuilder", "simpleQuery", "concode_elem_sep", "SimpleCQLStatementMapperBuilder", "simpleQuery"]}
{"code": "void function ( ) { lastRepublish = Simulator . getCurrentTime ( ) ; }", "nl": "updates the last republish time by setting it to the current simulation time . a republish takes place if either this or another peer sends the data item to its neighbours . concode_field_sep long lastRepublish concode_elem_sep DHTObject value concode_elem_sep ComponentsConfig config concode_field_sep DHTObject getValue concode_elem_sep boolean hasExpired concode_elem_sep long getLastRepublish concode_elem_sep String toString concode_elem_sep boolean needsRepublish", "code_tokens": ["void", "function", "(", ")", "{", "lastRepublish", "=", "Simulator", ".", "getCurrentTime", "(", ")", ";", "}"], "nl_tokens": ["updates", "the", "last", "republish", "time", "by", "setting", "it", "to", "the", "current", "simulation", "time", ".", "a", "republish", "takes", "place", "if", "either", "this", "or", "another", "peer", "sends", "the", "data", "item", "to", "its", "neighbours", ".", "concode_field_sep", "long", "lastRepublish", "concode_elem_sep", "DHTObject", "value", "concode_elem_sep", "ComponentsConfig", "config", "concode_field_sep", "DHTObject", "getValue", "concode_elem_sep", "boolean", "hasExpired", "concode_elem_sep", "long", "getLastRepublish", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "needsRepublish"]}
{"code": "int function ( ) { return RefactoringStatus . WARNING ; }", "nl": "when condition checking is performed for a refactoring then the condition check is interpreted as failed if the refactoring status severity return from the condition checking operation is equal or greater than the value returned by this method . concode_field_sep IValidationCheckResultQueryFactory fQueryFactory concode_elem_sep String ID_PLUGIN concode_field_sep void stopped concode_elem_sep boolean proceed concode_elem_sep RefactoringContribution getRefactoringContribution concode_elem_sep void internalSetQueryFactory concode_elem_sep IValidationCheckResultQuery create concode_elem_sep IUndoManager getUndoManager concode_elem_sep IRefactoringHistoryService getHistoryService concode_elem_sep IValidationCheckResultQueryFactory getQueryFactory", "code_tokens": ["int", "function", "(", ")", "{", "return", "RefactoringStatus", ".", "WARNING", ";", "}"], "nl_tokens": ["when", "condition", "checking", "is", "performed", "for", "a", "refactoring", "then", "the", "condition", "check", "is", "interpreted", "as", "failed", "if", "the", "refactoring", "status", "severity", "return", "from", "the", "condition", "checking", "operation", "is", "equal", "or", "greater", "than", "the", "value", "returned", "by", "this", "method", ".", "concode_field_sep", "IValidationCheckResultQueryFactory", "fQueryFactory", "concode_elem_sep", "String", "ID_PLUGIN", "concode_field_sep", "void", "stopped", "concode_elem_sep", "boolean", "proceed", "concode_elem_sep", "RefactoringContribution", "getRefactoringContribution", "concode_elem_sep", "void", "internalSetQueryFactory", "concode_elem_sep", "IValidationCheckResultQuery", "create", "concode_elem_sep", "IUndoManager", "getUndoManager", "concode_elem_sep", "IRefactoringHistoryService", "getHistoryService", "concode_elem_sep", "IValidationCheckResultQueryFactory", "getQueryFactory"]}
{"code": "boolean function ( ) { return true ; }", "nl": "query if this ring is a field . concode_field_sep java.math.BigDecimal val concode_elem_sep int DEFAULT_PRECISION concode_elem_sep BigDecimal ZERO concode_elem_sep MathContext DEFAULT_CONTEXT concode_elem_sep MathContext context concode_elem_sep BigDecimal ONE concode_elem_sep Random random concode_field_sep boolean isCommutative concode_elem_sep BigDecimal gcd concode_elem_sep BigDecimal sum concode_elem_sep int compareTo concode_elem_sep java.math.BigInteger characteristic concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep int hashCode concode_elem_sep BigDecimal divide concode_elem_sep BigDecimal copy concode_elem_sep BigDecimal multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep BigDecimal inverse concode_elem_sep BigDecimal valueOf concode_elem_sep BigDecimal valueOf concode_elem_sep boolean isUnit concode_elem_sep BigDecimal subtract concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal[] egcd concode_elem_sep BigDecimal abs concode_elem_sep BigDecimal[] divideAndRemainder concode_elem_sep BigDecimal negate concode_elem_sep boolean equals concode_elem_sep BigDecimal clone concode_elem_sep BigDecimal getONE concode_elem_sep BigDecimal getZERO concode_elem_sep BigDecimal fromInteger concode_elem_sep BigDecimal fromInteger concode_elem_sep boolean isZERO concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep BigDecimal remainder", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "true", ";", "}"], "nl_tokens": ["query", "if", "this", "ring", "is", "a", "field", ".", "concode_field_sep", "java", ".", "math", ".", "BigDecimal", "val", "concode_elem_sep", "int", "DEFAULT_PRECISION", "concode_elem_sep", "BigDecimal", "ZERO", "concode_elem_sep", "MathContext", "DEFAULT_CONTEXT", "concode_elem_sep", "MathContext", "context", "concode_elem_sep", "BigDecimal", "ONE", "concode_elem_sep", "Random", "random", "concode_field_sep", "boolean", "isCommutative", "concode_elem_sep", "BigDecimal", "gcd", "concode_elem_sep", "BigDecimal", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "BigDecimal", "divide", "concode_elem_sep", "BigDecimal", "copy", "concode_elem_sep", "BigDecimal", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "BigDecimal", "inverse", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "BigDecimal", "subtract", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "[", "]", "egcd", "concode_elem_sep", "BigDecimal", "abs", "concode_elem_sep", "BigDecimal", "[", "]", "divideAndRemainder", "concode_elem_sep", "BigDecimal", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "BigDecimal", "clone", "concode_elem_sep", "BigDecimal", "getONE", "concode_elem_sep", "BigDecimal", "getZERO", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "BigDecimal", "remainder"]}
{"code": "void function ( Context arg0 , SynchronizerDelegate arg1 ) { this . synchronizerDelegate = arg1 ; this . session = newSynchronizerSession ( ) ; this . session . init ( arg0 , bundleA , bundleB ) ; }", "nl": "start synchronizing , calling delegate 's callback methods . concode_field_sep SynchronizerDelegate synchronizerDelegate concode_elem_sep String configSyncID concode_elem_sep Repository repositoryA concode_elem_sep RepositorySessionBundle bundleB concode_elem_sep String LOG_TAG concode_elem_sep SynchronizerSession session concode_elem_sep RepositorySessionBundle bundleA concode_elem_sep Repository repositoryB concode_field_sep void load concode_elem_sep SynchronizerSession getSynchronizerSession concode_elem_sep void onSynchronizeSkipped concode_elem_sep SynchronizerConfiguration save concode_elem_sep void onInitialized concode_elem_sep void onSynchronized concode_elem_sep SynchronizerSession newSynchronizerSession concode_elem_sep void onSynchronizeFailed", "code_tokens": ["void", "function", "(", "Context", "arg0", ",", "SynchronizerDelegate", "arg1", ")", "{", "this", ".", "synchronizerDelegate", "=", "arg1", ";", "this", ".", "session", "=", "newSynchronizerSession", "(", ")", ";", "this", ".", "session", ".", "init", "(", "arg0", ",", "bundleA", ",", "bundleB", ")", ";", "}"], "nl_tokens": ["start", "synchronizing", ",", "calling", "delegate", "'", "s", "callback", "methods", ".", "concode_field_sep", "SynchronizerDelegate", "synchronizerDelegate", "concode_elem_sep", "String", "configSyncID", "concode_elem_sep", "Repository", "repositoryA", "concode_elem_sep", "RepositorySessionBundle", "bundleB", "concode_elem_sep", "String", "LOG_TAG", "concode_elem_sep", "SynchronizerSession", "session", "concode_elem_sep", "RepositorySessionBundle", "bundleA", "concode_elem_sep", "Repository", "repositoryB", "concode_field_sep", "void", "load", "concode_elem_sep", "SynchronizerSession", "getSynchronizerSession", "concode_elem_sep", "void", "onSynchronizeSkipped", "concode_elem_sep", "SynchronizerConfiguration", "save", "concode_elem_sep", "void", "onInitialized", "concode_elem_sep", "void", "onSynchronized", "concode_elem_sep", "SynchronizerSession", "newSynchronizerSession", "concode_elem_sep", "void", "onSynchronizeFailed"]}
{"code": "void function ( ) { Subpath loc0 = getLastSubpath ( ) ; loc0 . setClosed ( true ) ; Point2D loc1 = loc0 . getStartPoint ( ) ; moveTo ( ( float ) loc1 . getX ( ) , ( float ) loc1 . getY ( ) ) ; }", "nl": "closes the current subpath . concode_field_sep List<Subpath> subpaths concode_elem_sep String START_PATH_ERR_MSG concode_elem_sep Point2D currentPoint concode_field_sep Point2D getCurrentPoint concode_elem_sep void curveTo concode_elem_sep void curveTo concode_elem_sep boolean isEmpty concode_elem_sep Subpath getLastSubpath concode_elem_sep List<Subpath> getSubpaths concode_elem_sep void lineTo concode_elem_sep void addSubpath concode_elem_sep void addSubpaths concode_elem_sep List<Integer> replaceCloseWithLine concode_elem_sep void closeAllSubpaths concode_elem_sep void rectangle concode_elem_sep void curveFromTo concode_elem_sep void moveTo", "code_tokens": ["void", "function", "(", ")", "{", "Subpath", "loc0", "=", "getLastSubpath", "(", ")", ";", "loc0", ".", "setClosed", "(", "true", ")", ";", "Point2D", "loc1", "=", "loc0", ".", "getStartPoint", "(", ")", ";", "moveTo", "(", "(", "float", ")", "loc1", ".", "getX", "(", ")", ",", "(", "float", ")", "loc1", ".", "getY", "(", ")", ")", ";", "}"], "nl_tokens": ["closes", "the", "current", "subpath", ".", "concode_field_sep", "List", "<", "Subpath", ">", "subpaths", "concode_elem_sep", "String", "START_PATH_ERR_MSG", "concode_elem_sep", "Point2D", "currentPoint", "concode_field_sep", "Point2D", "getCurrentPoint", "concode_elem_sep", "void", "curveTo", "concode_elem_sep", "void", "curveTo", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "Subpath", "getLastSubpath", "concode_elem_sep", "List", "<", "Subpath", ">", "getSubpaths", "concode_elem_sep", "void", "lineTo", "concode_elem_sep", "void", "addSubpath", "concode_elem_sep", "void", "addSubpaths", "concode_elem_sep", "List", "<", "Integer", ">", "replaceCloseWithLine", "concode_elem_sep", "void", "closeAllSubpaths", "concode_elem_sep", "void", "rectangle", "concode_elem_sep", "void", "curveFromTo", "concode_elem_sep", "void", "moveTo"]}
{"code": "ICreateTargetQueries function ( ) { return fDelegate ; }", "nl": "returns the delegate queries . concode_field_sep CreateTargetExecutionLog fLog concode_elem_sep ICreateTargetQueries fDelegate concode_field_sep ICreateTargetQuery createNewPackageQuery concode_elem_sep CreateTargetExecutionLog getCreateTargetExecutionLog", "code_tokens": ["ICreateTargetQueries", "function", "(", ")", "{", "return", "fDelegate", ";", "}"], "nl_tokens": ["returns", "the", "delegate", "queries", ".", "concode_field_sep", "CreateTargetExecutionLog", "fLog", "concode_elem_sep", "ICreateTargetQueries", "fDelegate", "concode_field_sep", "ICreateTargetQuery", "createNewPackageQuery", "concode_elem_sep", "CreateTargetExecutionLog", "getCreateTargetExecutionLog"]}
{"code": "List < Potion > function ( ) { return Collections . unmodifiableList ( this . topShelf ) ; }", "nl": "get a read-only list of all the items on the top shelf concode_field_sep List<Potion> topShelf concode_elem_sep List<Potion> bottomShelf concode_elem_sep Logger LOGGER concode_field_sep List<Potion> getBottomShelf concode_elem_sep void enumerate concode_elem_sep void fillShelves", "code_tokens": ["List", "<", "Potion", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableList", "(", "this", ".", "topShelf", ")", ";", "}"], "nl_tokens": ["get", "a", "read", "-", "only", "list", "of", "all", "the", "items", "on", "the", "top", "shelf", "concode_field_sep", "List", "<", "Potion", ">", "topShelf", "concode_elem_sep", "List", "<", "Potion", ">", "bottomShelf", "concode_elem_sep", "Logger", "LOGGER", "concode_field_sep", "List", "<", "Potion", ">", "getBottomShelf", "concode_elem_sep", "void", "enumerate", "concode_elem_sep", "void", "fillShelves"]}
{"code": "void function ( int arg0 ) { stok . quoteChar ( arg0 ) ; }", "nl": "specifies that matching pairs of this character delimit string constants . concode_field_sep Reader reader concode_elem_sep Error err concode_elem_sep StreamTokenizer stok concode_field_sep void set_error_handler concode_elem_sep boolean isQString concode_elem_sep void need concode_elem_sep String nextToken concode_elem_sep int ttype concode_elem_sep void tok_error concode_elem_sep void commentChar concode_elem_sep boolean isWord concode_elem_sep String token", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "stok", ".", "quoteChar", "(", "arg0", ")", ";", "}"], "nl_tokens": ["specifies", "that", "matching", "pairs", "of", "this", "character", "delimit", "string", "constants", ".", "concode_field_sep", "Reader", "reader", "concode_elem_sep", "Error", "err", "concode_elem_sep", "StreamTokenizer", "stok", "concode_field_sep", "void", "set_error_handler", "concode_elem_sep", "boolean", "isQString", "concode_elem_sep", "void", "need", "concode_elem_sep", "String", "nextToken", "concode_elem_sep", "int", "ttype", "concode_elem_sep", "void", "tok_error", "concode_elem_sep", "void", "commentChar", "concode_elem_sep", "boolean", "isWord", "concode_elem_sep", "String", "token"]}
{"code": "String function ( ) { return \"srini_string\" + ring . toString ( ) + \"srini_string\" ; }", "nl": "get the string representation as ringfactory . concode_field_sep RingFactory<C> ring concode_elem_sep boolean debug concode_elem_sep Logger logger concode_field_sep Quotient<C> random concode_elem_sep Quotient<C> random concode_elem_sep int hashCode concode_elem_sep boolean isField concode_elem_sep boolean equals concode_elem_sep Quotient<C> getONE concode_elem_sep boolean isCommutative concode_elem_sep Quotient<C> getZERO concode_elem_sep Quotient<C> fromInteger concode_elem_sep Quotient<C> fromInteger concode_elem_sep boolean isAssociative concode_elem_sep Quotient<C> parse concode_elem_sep Quotient<C> parse concode_elem_sep Quotient<C> copy concode_elem_sep java.math.BigInteger characteristic", "code_tokens": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", "+", "ring", ".", "toString", "(", ")", "+", "\"srini_string\"", ";", "}"], "nl_tokens": ["get", "the", "string", "representation", "as", "ringfactory", ".", "concode_field_sep", "RingFactory", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "Logger", "logger", "concode_field_sep", "Quotient", "<", "C", ">", "random", "concode_elem_sep", "Quotient", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Quotient", "<", "C", ">", "getONE", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "Quotient", "<", "C", ">", "getZERO", "concode_elem_sep", "Quotient", "<", "C", ">", "fromInteger", "concode_elem_sep", "Quotient", "<", "C", ">", "fromInteger", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "Quotient", "<", "C", ">", "parse", "concode_elem_sep", "Quotient", "<", "C", ">", "parse", "concode_elem_sep", "Quotient", "<", "C", ">", "copy", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic"]}
{"code": "boolean function ( final String [ ] arg0 ) { return isToken ( fLastToken , arg0 ) ; }", "nl": "checks the last token against the given tags ? concode_field_sep LinkedList<Integer> fSentenceBreaks concode_elem_sep String fDelimiter concode_elem_sep int WHITE_SPACE_TOKEN concode_elem_sep int fOffset concode_elem_sep int fNext concode_elem_sep int fPredecessor concode_elem_sep int fPrevious concode_elem_sep boolean fStartsSentence concode_elem_sep String fLastToken concode_elem_sep String fContent concode_elem_sep boolean fIsIgnoringSingleLetters concode_elem_sep int fSuccessor concode_elem_sep BreakIterator fWordIterator concode_field_sep String next concode_elem_sep int getBegin concode_elem_sep boolean isSingleLetter concode_elem_sep boolean hasNext concode_elem_sep boolean isWhitespace concode_elem_sep int nextSentence concode_elem_sep void skipTokens concode_elem_sep int getEnd concode_elem_sep void remove concode_elem_sep boolean isUrlToken concode_elem_sep void setIgnoreSingleLetters concode_elem_sep String nextToken concode_elem_sep boolean isAlphaNumeric concode_elem_sep void nextBreak concode_elem_sep boolean startsSentence", "code_tokens": ["boolean", "function", "(", "final", "String", "[", "]", "arg0", ")", "{", "return", "isToken", "(", "fLastToken", ",", "arg0", ")", ";", "}"], "nl_tokens": ["checks", "the", "last", "token", "against", "the", "given", "tags", "?", "concode_field_sep", "LinkedList", "<", "Integer", ">", "fSentenceBreaks", "concode_elem_sep", "String", "fDelimiter", "concode_elem_sep", "int", "WHITE_SPACE_TOKEN", "concode_elem_sep", "int", "fOffset", "concode_elem_sep", "int", "fNext", "concode_elem_sep", "int", "fPredecessor", "concode_elem_sep", "int", "fPrevious", "concode_elem_sep", "boolean", "fStartsSentence", "concode_elem_sep", "String", "fLastToken", "concode_elem_sep", "String", "fContent", "concode_elem_sep", "boolean", "fIsIgnoringSingleLetters", "concode_elem_sep", "int", "fSuccessor", "concode_elem_sep", "BreakIterator", "fWordIterator", "concode_field_sep", "String", "next", "concode_elem_sep", "int", "getBegin", "concode_elem_sep", "boolean", "isSingleLetter", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "boolean", "isWhitespace", "concode_elem_sep", "int", "nextSentence", "concode_elem_sep", "void", "skipTokens", "concode_elem_sep", "int", "getEnd", "concode_elem_sep", "void", "remove", "concode_elem_sep", "boolean", "isUrlToken", "concode_elem_sep", "void", "setIgnoreSingleLetters", "concode_elem_sep", "String", "nextToken", "concode_elem_sep", "boolean", "isAlphaNumeric", "concode_elem_sep", "void", "nextBreak", "concode_elem_sep", "boolean", "startsSentence"]}
{"code": "void function ( AST arg0 , PrintStream arg1 ) { showAst ( arg0 , new PrintWriter ( arg1 ) ) ; }", "nl": "prints the ast in ` ascii art ' form to the specified print stream . concode_field_sep boolean showClassNames concode_elem_sep Map tokenTypeNameCache concode_field_sep String showAsString concode_elem_sep String nodeToString concode_elem_sep void showNode concode_elem_sep String escapeMultibyteChars concode_elem_sep String getTokenTypeName concode_elem_sep boolean isShowClassNames concode_elem_sep void appendEscapedMultibyteChars", "code_tokens": ["void", "function", "(", "AST", "arg0", ",", "PrintStream", "arg1", ")", "{", "showAst", "(", "arg0", ",", "new", "PrintWriter", "(", "arg1", ")", ")", ";", "}"], "nl_tokens": ["prints", "the", "ast", "in", "`", "ascii", "art", "'", "form", "to", "the", "specified", "print", "stream", ".", "concode_field_sep", "boolean", "showClassNames", "concode_elem_sep", "Map", "tokenTypeNameCache", "concode_field_sep", "String", "showAsString", "concode_elem_sep", "String", "nodeToString", "concode_elem_sep", "void", "showNode", "concode_elem_sep", "String", "escapeMultibyteChars", "concode_elem_sep", "String", "getTokenTypeName", "concode_elem_sep", "boolean", "isShowClassNames", "concode_elem_sep", "void", "appendEscapedMultibyteChars"]}
{"code": "int function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { arg0 = - arg0 ; } if ( arg1 < 0 ) { arg1 = - arg1 ; } while ( arg1 != 0 ) { int loc0 = arg0 % arg1 ; arg0 = arg1 ; arg1 = loc0 ; } return arg0 ; }", "nl": "calculate the greatest common divisor . concode_field_sep String PROMPT concode_field_sep void main", "code_tokens": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "arg0", "<", "0", ")", "{", "arg0", "=", "-", "arg0", ";", "}", "if", "(", "arg1", "<", "0", ")", "{", "arg1", "=", "-", "arg1", ";", "}", "while", "(", "arg1", "!=", "0", ")", "{", "int", "loc0", "=", "arg0", "%", "arg1", ";", "arg0", "=", "arg1", ";", "arg1", "=", "loc0", ";", "}", "return", "arg0", ";", "}"], "nl_tokens": ["calculate", "the", "greatest", "common", "divisor", ".", "concode_field_sep", "String", "PROMPT", "concode_field_sep", "void", "main"]}
{"code": "ValidatorConfiguration function ( String arg0 , Object arg1 ) { properties . put ( arg0 , String . valueOf ( arg1 ) ) ; return this ; }", "nl": "add an property . concode_field_sep String configurationName concode_elem_sep Map<String,String> properties concode_field_sep String getProperty concode_elem_sep ValidatorConfiguration addAttribute concode_elem_sep String getConfigurationName concode_elem_sep int hashCode concode_elem_sep Map<String,String> getProperties concode_elem_sep String getValidatorClassName concode_elem_sep boolean equals concode_elem_sep ValidatorConfiguration clone concode_elem_sep String toString", "code_tokens": ["ValidatorConfiguration", "function", "(", "String", "arg0", ",", "Object", "arg1", ")", "{", "properties", ".", "put", "(", "arg0", ",", "String", ".", "valueOf", "(", "arg1", ")", ")", ";", "return", "this", ";", "}"], "nl_tokens": ["add", "an", "property", ".", "concode_field_sep", "String", "configurationName", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "properties", "concode_field_sep", "String", "getProperty", "concode_elem_sep", "ValidatorConfiguration", "addAttribute", "concode_elem_sep", "String", "getConfigurationName", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "getProperties", "concode_elem_sep", "String", "getValidatorClassName", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "ValidatorConfiguration", "clone", "concode_elem_sep", "String", "toString"]}
{"code": "void function ( CLIWrapper arg0 ) { throw new IllegalStateException ( \"srini_string\" ) ; }", "nl": "creates this element in domain model and also creates other resources if needed e.g. external files concode_field_sep PlaceHolder placeHolder concode_field_sep String getName concode_elem_sep void remove concode_elem_sep void remove", "code_tokens": ["void", "function", "(", "CLIWrapper", "arg0", ")", "{", "throw", "new", "IllegalStateException", "(", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["creates", "this", "element", "in", "domain", "model", "and", "also", "creates", "other", "resources", "if", "needed", "e", ".", "g", ".", "external", "files", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "getName", "concode_elem_sep", "void", "remove", "concode_elem_sep", "void", "remove"]}
{"code": "boolean function ( Object [ ] arg0 , Object [ ] arg1 ) { if ( arg0 == arg1 ) return true ; if ( arg0 == null || arg1 == null ) return false ; int loc0 = arg0 . loc0 ; if ( loc0 != arg1 . loc0 ) return false ; for ( int loc1 = 0 ; loc1 < loc0 ; loc1 ++ ) { if ( ! arg0 [ loc1 ] . equals ( arg1 [ loc1 ] ) ) return false ; } return true ; }", "nl": "compare 2 arrays only at the first level concode_field_sep boolean[] TRUE concode_elem_sep int PRIME_NUMER concode_elem_sep int SEED concode_elem_sep String[] EMPTY_STRING_ARRAY concode_elem_sep boolean[] FALSE concode_elem_sep int[] EMPTY_INT_ARRAY concode_elem_sep byte[] EMPTY_BYTE_ARRAY concode_elem_sep Object[] EMPTY_OBJECT_ARRAY concode_elem_sep Type[] EMPTY_TYPE_ARRAY concode_elem_sep Class[] EMPTY_CLASS_ARRAY concode_elem_sep boolean[] EMPTY_BOOLEAN_ARRAY concode_field_sep String[] fillArray concode_elem_sep int[] fillArray concode_elem_sep LockMode[] fillArray concode_elem_sep LockOptions[] fillArray concode_elem_sep int countNonNull concode_elem_sep void main concode_elem_sep List toList concode_elem_sep List toList concode_elem_sep Object[] typecast concode_elem_sep boolean isAllNegative concode_elem_sep String[] slice concode_elem_sep Object[] slice concode_elem_sep int[] toIntArray concode_elem_sep boolean isAllTrue concode_elem_sep int[][] to2DIntArray concode_elem_sep String[] join concode_elem_sep String[] join concode_elem_sep int[] join concode_elem_sep T[] join concode_elem_sep int indexOf concode_elem_sep boolean[] toBooleanArray concode_elem_sep String[][] to2DStringArray concode_elem_sep int getNextBatchSize concode_elem_sep Serializable[] extractNonNull concode_elem_sep String[] toStringArray concode_elem_sep String[] toStringArray concode_elem_sep String[] reverse concode_elem_sep int countTrue concode_elem_sep boolean contains concode_elem_sep boolean isAllFalse concode_elem_sep void addAll concode_elem_sep int[] getBatchSizes concode_elem_sep String toString concode_elem_sep Type[] toTypeArray concode_elem_sep int hash concode_elem_sep int hash concode_elem_sep int hash concode_elem_sep int hash", "code_tokens": ["boolean", "function", "(", "Object", "[", "]", "arg0", ",", "Object", "[", "]", "arg1", ")", "{", "if", "(", "arg0", "==", "arg1", ")", "return", "true", ";", "if", "(", "arg0", "==", "null", "|", "|", "arg1", "==", "null", ")", "return", "false", ";", "int", "loc0", "=", "arg0", ".", "loc0", ";", "if", "(", "loc0", "!=", "arg1", ".", "loc0", ")", "return", "false", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ";", "loc1", "+", "+", ")", "{", "if", "(", "!", "arg0", "[", "loc1", "]", ".", "equals", "(", "arg1", "[", "loc1", "]", ")", ")", "return", "false", ";", "}", "return", "true", ";", "}"], "nl_tokens": ["compare", "2", "arrays", "only", "at", "the", "first", "level", "concode_field_sep", "boolean", "[", "]", "TRUE", "concode_elem_sep", "int", "PRIME_NUMER", "concode_elem_sep", "int", "SEED", "concode_elem_sep", "String", "[", "]", "EMPTY_STRING_ARRAY", "concode_elem_sep", "boolean", "[", "]", "FALSE", "concode_elem_sep", "int", "[", "]", "EMPTY_INT_ARRAY", "concode_elem_sep", "byte", "[", "]", "EMPTY_BYTE_ARRAY", "concode_elem_sep", "Object", "[", "]", "EMPTY_OBJECT_ARRAY", "concode_elem_sep", "Type", "[", "]", "EMPTY_TYPE_ARRAY", "concode_elem_sep", "Class", "[", "]", "EMPTY_CLASS_ARRAY", "concode_elem_sep", "boolean", "[", "]", "EMPTY_BOOLEAN_ARRAY", "concode_field_sep", "String", "[", "]", "fillArray", "concode_elem_sep", "int", "[", "]", "fillArray", "concode_elem_sep", "LockMode", "[", "]", "fillArray", "concode_elem_sep", "LockOptions", "[", "]", "fillArray", "concode_elem_sep", "int", "countNonNull", "concode_elem_sep", "void", "main", "concode_elem_sep", "List", "toList", "concode_elem_sep", "List", "toList", "concode_elem_sep", "Object", "[", "]", "typecast", "concode_elem_sep", "boolean", "isAllNegative", "concode_elem_sep", "String", "[", "]", "slice", "concode_elem_sep", "Object", "[", "]", "slice", "concode_elem_sep", "int", "[", "]", "toIntArray", "concode_elem_sep", "boolean", "isAllTrue", "concode_elem_sep", "int", "[", "]", "[", "]", "to2DIntArray", "concode_elem_sep", "String", "[", "]", "join", "concode_elem_sep", "String", "[", "]", "join", "concode_elem_sep", "int", "[", "]", "join", "concode_elem_sep", "T", "[", "]", "join", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "boolean", "[", "]", "toBooleanArray", "concode_elem_sep", "String", "[", "]", "[", "]", "to2DStringArray", "concode_elem_sep", "int", "getNextBatchSize", "concode_elem_sep", "Serializable", "[", "]", "extractNonNull", "concode_elem_sep", "String", "[", "]", "toStringArray", "concode_elem_sep", "String", "[", "]", "toStringArray", "concode_elem_sep", "String", "[", "]", "reverse", "concode_elem_sep", "int", "countTrue", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "boolean", "isAllFalse", "concode_elem_sep", "void", "addAll", "concode_elem_sep", "int", "[", "]", "getBatchSizes", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Type", "[", "]", "toTypeArray", "concode_elem_sep", "int", "hash", "concode_elem_sep", "int", "hash", "concode_elem_sep", "int", "hash", "concode_elem_sep", "int", "hash"]}
{"code": "void function ( NativeSQLQueryReturn arg0 ) { queryReturns . add ( arg0 ) ; }", "nl": "adds a return . concode_field_sep List<NativeSQLQueryReturn> queryReturns concode_elem_sep String name concode_field_sep String getName concode_elem_sep NativeSQLQueryReturn[] getQueryReturns concode_elem_sep String traceLoggableFormat", "code_tokens": ["void", "function", "(", "NativeSQLQueryReturn", "arg0", ")", "{", "queryReturns", ".", "add", "(", "arg0", ")", ";", "}"], "nl_tokens": ["adds", "a", "return", ".", "concode_field_sep", "List", "<", "NativeSQLQueryReturn", ">", "queryReturns", "concode_elem_sep", "String", "name", "concode_field_sep", "String", "getName", "concode_elem_sep", "NativeSQLQueryReturn", "[", "]", "getQueryReturns", "concode_elem_sep", "String", "traceLoggableFormat"]}
{"code": "void function ( final char arg0 ) { this . lastChar = arg0 ; }", "nl": "set the last char concode_field_sep StringBuilder currentEntity concode_elem_sep StringBuilder comment concode_elem_sep String currentTag concode_elem_sep boolean isHtml concode_elem_sep String currentAttr concode_elem_sep char lastChar concode_elem_sep String wsTag concode_elem_sep String storedString concode_elem_sep Map<String,String> attr concode_elem_sep String currentNameSpace concode_elem_sep StringBuilder baos concode_field_sep StringBuilder currentEntity concode_elem_sep Map<String,String> getAttributes concode_elem_sep void putCurrentAttrValue concode_elem_sep void currentAttr concode_elem_sep boolean hasCurrentAttribute concode_elem_sep String getNameSpace concode_elem_sep String whitespaceTag concode_elem_sep void whitespaceTag concode_elem_sep void flushNameSpace concode_elem_sep void setStoredString concode_elem_sep String getCurrentTag concode_elem_sep StringBuilder current concode_elem_sep void currentTag concode_elem_sep void resetBuffer concode_elem_sep void namespace concode_elem_sep String getStoredString concode_elem_sep StringBuilder comment", "code_tokens": ["void", "function", "(", "final", "char", "arg0", ")", "{", "this", ".", "lastChar", "=", "arg0", ";", "}"], "nl_tokens": ["set", "the", "last", "char", "concode_field_sep", "StringBuilder", "currentEntity", "concode_elem_sep", "StringBuilder", "comment", "concode_elem_sep", "String", "currentTag", "concode_elem_sep", "boolean", "isHtml", "concode_elem_sep", "String", "currentAttr", "concode_elem_sep", "char", "lastChar", "concode_elem_sep", "String", "wsTag", "concode_elem_sep", "String", "storedString", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "attr", "concode_elem_sep", "String", "currentNameSpace", "concode_elem_sep", "StringBuilder", "baos", "concode_field_sep", "StringBuilder", "currentEntity", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "getAttributes", "concode_elem_sep", "void", "putCurrentAttrValue", "concode_elem_sep", "void", "currentAttr", "concode_elem_sep", "boolean", "hasCurrentAttribute", "concode_elem_sep", "String", "getNameSpace", "concode_elem_sep", "String", "whitespaceTag", "concode_elem_sep", "void", "whitespaceTag", "concode_elem_sep", "void", "flushNameSpace", "concode_elem_sep", "void", "setStoredString", "concode_elem_sep", "String", "getCurrentTag", "concode_elem_sep", "StringBuilder", "current", "concode_elem_sep", "void", "currentTag", "concode_elem_sep", "void", "resetBuffer", "concode_elem_sep", "void", "namespace", "concode_elem_sep", "String", "getStoredString", "concode_elem_sep", "StringBuilder", "comment"]}
{"code": "void function ( EntityKey arg0 ) { subselectsByEntityKey . remove ( arg0 ) ; }", "nl": "after evicting or deleting an entity , we do n't need to know the query that was used to load it anymore do n't call this after loading the entity , since we might still need to load its collections concode_field_sep Map<String,LinkedHashMap<CollectionEntry,PersistentCollection>> batchLoadableCollections concode_elem_sep Logger LOG concode_elem_sep Map<String,LinkedHashSet<EntityKey>> batchLoadableEntityKeys concode_elem_sep PersistenceContext context concode_elem_sep Map<EntityKey,SubselectFetch> subselectsByEntityKey concode_field_sep SubselectFetch getSubselect concode_elem_sep void removeBatchLoadableCollection concode_elem_sep Serializable[] getCollectionBatch concode_elem_sep void addBatchLoadableEntityKey concode_elem_sep void clear concode_elem_sep void addSubselect concode_elem_sep void removeBatchLoadableEntityKey concode_elem_sep Serializable[] getEntityBatch concode_elem_sep void addBatchLoadableCollection concode_elem_sep boolean isCached concode_elem_sep boolean isCached", "code_tokens": ["void", "function", "(", "EntityKey", "arg0", ")", "{", "subselectsByEntityKey", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["after", "evicting", "or", "deleting", "an", "entity", ",", "we", "do", "n", "'t need to know the query that was used to load it anymore do n'", "t", "call", "this", "after", "loading", "the", "entity", ",", "since", "we", "might", "still", "need", "to", "load", "its", "collections", "concode_field_sep", "Map", "<", "String", ",", "LinkedHashMap", "<", "CollectionEntry", ",", "PersistentCollection", ">>", "batchLoadableCollections", "concode_elem_sep", "Logger", "LOG", "concode_elem_sep", "Map", "<", "String", ",", "LinkedHashSet", "<", "EntityKey", ">>", "batchLoadableEntityKeys", "concode_elem_sep", "PersistenceContext", "context", "concode_elem_sep", "Map", "<", "EntityKey", ",", "SubselectFetch", ">", "subselectsByEntityKey", "concode_field_sep", "SubselectFetch", "getSubselect", "concode_elem_sep", "void", "removeBatchLoadableCollection", "concode_elem_sep", "Serializable", "[", "]", "getCollectionBatch", "concode_elem_sep", "void", "addBatchLoadableEntityKey", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "addSubselect", "concode_elem_sep", "void", "removeBatchLoadableEntityKey", "concode_elem_sep", "Serializable", "[", "]", "getEntityBatch", "concode_elem_sep", "void", "addBatchLoadableCollection", "concode_elem_sep", "boolean", "isCached", "concode_elem_sep", "boolean", "isCached"]}
{"code": "WidgetLocator function ( String arg0 ) { WidgetLocator loc0 = get ( arg0 ) ; _values . remove ( loc0 ) ; return ( WidgetLocator ) _register . remove ( arg0 ) ; }", "nl": "removes the mapping for this key from this map if it is present . concode_field_sep Map _values concode_elem_sep Map _register concode_field_sep WidgetLocator add concode_elem_sep String getKey concode_elem_sep Set getEntries concode_elem_sep boolean containsKey concode_elem_sep WidgetLocator get concode_elem_sep boolean containsValue", "code_tokens": ["WidgetLocator", "function", "(", "String", "arg0", ")", "{", "WidgetLocator", "loc0", "=", "get", "(", "arg0", ")", ";", "_values", ".", "remove", "(", "loc0", ")", ";", "return", "(", "WidgetLocator", ")", "_register", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["removes", "the", "mapping", "for", "this", "key", "from", "this", "map", "if", "it", "is", "present", ".", "concode_field_sep", "Map", "_values", "concode_elem_sep", "Map", "_register", "concode_field_sep", "WidgetLocator", "add", "concode_elem_sep", "String", "getKey", "concode_elem_sep", "Set", "getEntries", "concode_elem_sep", "boolean", "containsKey", "concode_elem_sep", "WidgetLocator", "get", "concode_elem_sep", "boolean", "containsValue"]}
{"code": "String function ( final Object arg0 ) { String loc0 = StringUtil . arrayToString ( arg0 , \"srini_string\" ) ; return loc0 ; }", "nl": "if the given object is no array , it 's tostring - method is invoked . primitive type - arrays and object - arrays are introspected using java.lang.reflect.array . convention for creation fo string - representation : concode_field_sep StringUtil instance concode_field_sep void listOfArraysToString concode_elem_sep StringUtil instance concode_elem_sep String setSize concode_elem_sep int longestStringRepresentation concode_elem_sep boolean isEmpty concode_elem_sep void toLongestString concode_elem_sep String getNewLine concode_elem_sep String appendSpaces", "code_tokens": ["String", "function", "(", "final", "Object", "arg0", ")", "{", "String", "loc0", "=", "StringUtil", ".", "arrayToString", "(", "arg0", ",", "\"srini_string\"", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["if", "the", "given", "object", "is", "no", "array", ",", "it", "'", "s", "tostring", "-", "method", "is", "invoked", ".", "primitive", "type", "-", "arrays", "and", "object", "-", "arrays", "are", "introspected", "using", "java", ".", "lang", ".", "reflect", ".", "array", ".", "convention", "for", "creation", "fo", "string", "-", "representation", ":", "concode_field_sep", "StringUtil", "instance", "concode_field_sep", "void", "listOfArraysToString", "concode_elem_sep", "StringUtil", "instance", "concode_elem_sep", "String", "setSize", "concode_elem_sep", "int", "longestStringRepresentation", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "void", "toLongestString", "concode_elem_sep", "String", "getNewLine", "concode_elem_sep", "String", "appendSpaces"]}
{"code": "Collection function ( ) { return succs ; }", "nl": "returns the successor or children nodes of this graphnode . concode_field_sep int preIndex concode_elem_sep int postIndex concode_elem_sep HashSet succs concode_elem_sep HashSet preds concode_field_sep int preOrderIndex concode_elem_sep int postOrderIndex concode_elem_sep void setPostOrderIndex concode_elem_sep void setPreOrderIndex concode_elem_sep Collection preds", "code_tokens": ["Collection", "function", "(", ")", "{", "return", "succs", ";", "}"], "nl_tokens": ["returns", "the", "successor", "or", "children", "nodes", "of", "this", "graphnode", ".", "concode_field_sep", "int", "preIndex", "concode_elem_sep", "int", "postIndex", "concode_elem_sep", "HashSet", "succs", "concode_elem_sep", "HashSet", "preds", "concode_field_sep", "int", "preOrderIndex", "concode_elem_sep", "int", "postOrderIndex", "concode_elem_sep", "void", "setPostOrderIndex", "concode_elem_sep", "void", "setPreOrderIndex", "concode_elem_sep", "Collection", "preds"]}
{"code": "void function ( TLinkable arg0 ) { _next = arg0 ; }", "nl": "sets the linked list node after this one . concode_field_sep TLinkable _next concode_elem_sep TLinkable _previous concode_field_sep TLinkable getPrevious concode_elem_sep TLinkable getNext concode_elem_sep void setPrevious", "code_tokens": ["void", "function", "(", "TLinkable", "arg0", ")", "{", "_next", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "linked", "list", "node", "after", "this", "one", ".", "concode_field_sep", "TLinkable", "_next", "concode_elem_sep", "TLinkable", "_previous", "concode_field_sep", "TLinkable", "getPrevious", "concode_elem_sep", "TLinkable", "getNext", "concode_elem_sep", "void", "setPrevious"]}
{"code": "CodecFactory function ( String arg0 ) { CodecFactory loc0 = REGISTERED . get ( arg0 ) ; if ( loc0 == null ) { throw new AvroRuntimeException ( \"srini_string\" + arg0 ) ; } return loc0 ; }", "nl": "maps a codec name into a codecfactory . currently there are five codecs registered by default : null deflate snappy bzip2 xz concode_field_sep int DEFAULT_XZ_LEVEL concode_elem_sep Map<String,CodecFactory> REGISTERED concode_elem_sep int DEFAULT_DEFLATE_LEVEL concode_field_sep Codec createInstance concode_elem_sep CodecFactory snappyCodec concode_elem_sep CodecFactory bzip2Codec concode_elem_sep CodecFactory deflateCodec concode_elem_sep String toString concode_elem_sep CodecFactory xzCodec concode_elem_sep CodecFactory addCodec concode_elem_sep CodecFactory nullCodec", "code_tokens": ["CodecFactory", "function", "(", "String", "arg0", ")", "{", "CodecFactory", "loc0", "=", "REGISTERED", ".", "get", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "throw", "new", "AvroRuntimeException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["maps", "a", "codec", "name", "into", "a", "codecfactory", ".", "currently", "there", "are", "five", "codecs", "registered", "by", "default", ":", "null", "deflate", "snappy", "bzip2", "xz", "concode_field_sep", "int", "DEFAULT_XZ_LEVEL", "concode_elem_sep", "Map", "<", "String", ",", "CodecFactory", ">", "REGISTERED", "concode_elem_sep", "int", "DEFAULT_DEFLATE_LEVEL", "concode_field_sep", "Codec", "createInstance", "concode_elem_sep", "CodecFactory", "snappyCodec", "concode_elem_sep", "CodecFactory", "bzip2Codec", "concode_elem_sep", "CodecFactory", "deflateCodec", "concode_elem_sep", "String", "toString", "concode_elem_sep", "CodecFactory", "xzCodec", "concode_elem_sep", "CodecFactory", "addCodec", "concode_elem_sep", "CodecFactory", "nullCodec"]}
{"code": "String function ( String arg0 ) { return Strings . markLTR ( arg0 , URL_DELIMITERS ) ; }", "nl": "returns the label for a url , uri or url part . example is ` http://www.x.xom/s.html#1 ' concode_field_sep String CODE_DELIMITERS concode_elem_sep String FILE_PATTERN_DELIMITERS concode_elem_sep String URL_DELIMITERS concode_field_sep String getJavaCodeString concode_elem_sep String getWorkingSetLabel concode_elem_sep String getJavaElementName concode_elem_sep String getFilePattern concode_elem_sep String getResourceName concode_elem_sep String getResourceName concode_elem_sep String getVersionName concode_elem_sep String getFileName concode_elem_sep String getPathLabel concode_elem_sep String getPathLabel", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "return", "Strings", ".", "markLTR", "(", "arg0", ",", "URL_DELIMITERS", ")", ";", "}"], "nl_tokens": ["returns", "the", "label", "for", "a", "url", ",", "uri", "or", "url", "part", ".", "example", "is", "`", "http", ":", "//", "www", ".", "x", ".", "xom", "/", "s", ".", "html", "#1 ' concode_field_sep String CODE_DELIMITERS concode_elem_sep String FILE_PATTERN_DELIMITERS concode_elem_sep String URL_DELIMITERS concode_field_sep String getJavaCodeString concode_elem_sep String getWorkingSetLabel concode_elem_sep String getJavaElementName concode_elem_sep String getFilePattern concode_elem_sep String getResourceName concode_elem_sep String getResourceName concode_elem_sep String getVersionName concode_elem_sep String getFileName concode_elem_sep String getPathLabel concode_elem_sep String getPathLabel"]}
{"code": "void function ( final LetterComposite arg0 , final String arg1 ) { final String [ ] loc0 = arg1 . split ( \"srini_string\" ) ; assertNotNull ( arg0 ) ; assertEquals ( loc0 . length , arg0 . count ( ) ) ; arg0 . print ( ) ; assertEquals ( arg1 , new String ( this . stdOutBuffer . toByteArray ( ) ) . trim ( ) ) ; }", "nl": "test if the given composed message matches the expected message concode_field_sep PrintStream realStdOut concode_elem_sep ByteArrayOutputStream stdOutBuffer concode_field_sep void testMessageFromElves concode_elem_sep void setUp concode_elem_sep void testMessageFromOrcs concode_elem_sep void tearDown", "code_tokens": ["void", "function", "(", "final", "LetterComposite", "arg0", ",", "final", "String", "arg1", ")", "{", "final", "String", "[", "]", "loc0", "=", "arg1", ".", "split", "(", "\"srini_string\"", ")", ";", "assertNotNull", "(", "arg0", ")", ";", "assertEquals", "(", "loc0", ".", "length", ",", "arg0", ".", "count", "(", ")", ")", ";", "arg0", ".", "print", "(", ")", ";", "assertEquals", "(", "arg1", ",", "new", "String", "(", "this", ".", "stdOutBuffer", ".", "toByteArray", "(", ")", ")", ".", "trim", "(", ")", ")", ";", "}"], "nl_tokens": ["test", "if", "the", "given", "composed", "message", "matches", "the", "expected", "message", "concode_field_sep", "PrintStream", "realStdOut", "concode_elem_sep", "ByteArrayOutputStream", "stdOutBuffer", "concode_field_sep", "void", "testMessageFromElves", "concode_elem_sep", "void", "setUp", "concode_elem_sep", "void", "testMessageFromOrcs", "concode_elem_sep", "void", "tearDown"]}
{"code": "void function ( ) { p . content ( context , null , null , po ) ; Assert . assertEquals ( writable , lst . get ( 0 ) ) ; }", "nl": "verifies that the content of the processobject is processed on content . concode_field_sep ElementHandlerPipeline p concode_elem_sep WorkerContextImpl context concode_elem_sep List<Writable> lst concode_elem_sep ProcessObject po concode_elem_sep WritableElement writable concode_field_sep void runOpen concode_elem_sep void setup concode_elem_sep void runClose", "code_tokens": ["void", "function", "(", ")", "{", "p", ".", "content", "(", "context", ",", "null", ",", "null", ",", "po", ")", ";", "Assert", ".", "assertEquals", "(", "writable", ",", "lst", ".", "get", "(", "0", ")", ")", ";", "}"], "nl_tokens": ["verifies", "that", "the", "content", "of", "the", "processobject", "is", "processed", "on", "content", ".", "concode_field_sep", "ElementHandlerPipeline", "p", "concode_elem_sep", "WorkerContextImpl", "context", "concode_elem_sep", "List", "<", "Writable", ">", "lst", "concode_elem_sep", "ProcessObject", "po", "concode_elem_sep", "WritableElement", "writable", "concode_field_sep", "void", "runOpen", "concode_elem_sep", "void", "setup", "concode_elem_sep", "void", "runClose"]}
{"code": "void function ( ) { final File loc0 = this . testFolder . newFile ( ) ; new SimpleFileWriter ( loc0 . getPath ( ) , Assert :: assertNotNull ) ; }", "nl": "verify if the given writer is not ` null ' concode_field_sep TemporaryFolder testFolder concode_field_sep void testActualWrite concode_elem_sep void testNonExistentFile concode_elem_sep void testIoException", "code_tokens": ["void", "function", "(", ")", "{", "final", "File", "loc0", "=", "this", ".", "testFolder", ".", "newFile", "(", ")", ";", "new", "SimpleFileWriter", "(", "loc0", ".", "getPath", "(", ")", ",", "Assert", ":", ":", "assertNotNull", ")", ";", "}"], "nl_tokens": ["verify", "if", "the", "given", "writer", "is", "not", "`", "null", "'", "concode_field_sep", "TemporaryFolder", "testFolder", "concode_field_sep", "void", "testActualWrite", "concode_elem_sep", "void", "testNonExistentFile", "concode_elem_sep", "void", "testIoException"]}
{"code": "void function ( final ISourceFileLocator arg0 ) { delegates . add ( arg0 ) ; }", "nl": "adds the given locator . locators are queried in the sequence they have been added . concode_field_sep int tabWidth concode_elem_sep List<ISourceFileLocator> delegates concode_field_sep int getTabWidth concode_elem_sep Reader getSourceFile", "code_tokens": ["void", "function", "(", "final", "ISourceFileLocator", "arg0", ")", "{", "delegates", ".", "add", "(", "arg0", ")", ";", "}"], "nl_tokens": ["adds", "the", "given", "locator", ".", "locators", "are", "queried", "in", "the", "sequence", "they", "have", "been", "added", ".", "concode_field_sep", "int", "tabWidth", "concode_elem_sep", "List", "<", "ISourceFileLocator", ">", "delegates", "concode_field_sep", "int", "getTabWidth", "concode_elem_sep", "Reader", "getSourceFile"]}
{"code": "int function ( DateTimeFieldType arg0 ) { for ( int loc0 = 0 , loc1 = size ( ) ; loc0 < loc1 ; loc0 ++ ) { if ( getFieldType ( loc0 ) == arg0 ) { return loc0 ; } } return - 1 ; }", "nl": "gets the index of the specified field , or -1 if the field is unsupported . concode_field_sep PlaceHolder placeHolder concode_field_sep int[] getValues concode_elem_sep boolean isEqual concode_elem_sep DateTimeField getField concode_elem_sep DateTimeField getField concode_elem_sep DateTimeFieldType getFieldType concode_elem_sep int indexOfSupported concode_elem_sep int indexOfSupported concode_elem_sep boolean isSupported concode_elem_sep int compareTo concode_elem_sep boolean isBefore concode_elem_sep DateTimeField[] getFields concode_elem_sep int hashCode concode_elem_sep int get concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep boolean isAfter concode_elem_sep DateTime toDateTime concode_elem_sep DateTimeFieldType[] getFieldTypes", "code_tokens": ["int", "function", "(", "DateTimeFieldType", "arg0", ")", "{", "for", "(", "int", "loc0", "=", "0", ",", "loc1", "=", "size", "(", ")", ";", "loc0", "<", "loc1", ";", "loc0", "+", "+", ")", "{", "if", "(", "getFieldType", "(", "loc0", ")", "==", "arg0", ")", "{", "return", "loc0", ";", "}", "}", "return", "-", "1", ";", "}"], "nl_tokens": ["gets", "the", "index", "of", "the", "specified", "field", ",", "or", "-", "1", "if", "the", "field", "is", "unsupported", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "[", "]", "getValues", "concode_elem_sep", "boolean", "isEqual", "concode_elem_sep", "DateTimeField", "getField", "concode_elem_sep", "DateTimeField", "getField", "concode_elem_sep", "DateTimeFieldType", "getFieldType", "concode_elem_sep", "int", "indexOfSupported", "concode_elem_sep", "int", "indexOfSupported", "concode_elem_sep", "boolean", "isSupported", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "boolean", "isBefore", "concode_elem_sep", "DateTimeField", "[", "]", "getFields", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "get", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "DateTime", "toDateTime", "concode_elem_sep", "DateTimeFieldType", "[", "]", "getFieldTypes"]}
{"code": "List < Message > function ( ) { if ( message == null ) { message = new ArrayList < Message > ( ) ; } return this . message ; }", "nl": "gets the value of the message property . this accessor method returns a reference to the live list , not a snapshot . therefore any modification you make to the returned list will be present inside the jaxb object . this is why there is not a set method for the message property . for example , to add a new item , do as follows : getmessage . add newitem ; objects of the following type s are allowed in the list message concode_field_sep List<LocalizedMessage> localizedMessage concode_elem_sep String name concode_elem_sep List<Message> message concode_elem_sep List<ValidationContext> child concode_field_sep void setName concode_elem_sep String getName concode_elem_sep List<LocalizedMessage> getLocalizedMessage concode_elem_sep List<ValidationContext> getChild", "code_tokens": ["List", "<", "Message", ">", "function", "(", ")", "{", "if", "(", "message", "==", "null", ")", "{", "message", "=", "new", "ArrayList", "<", "Message", ">", "(", ")", ";", "}", "return", "this", ".", "message", ";", "}"], "nl_tokens": ["gets", "the", "value", "of", "the", "message", "property", ".", "this", "accessor", "method", "returns", "a", "reference", "to", "the", "live", "list", ",", "not", "a", "snapshot", ".", "therefore", "any", "modification", "you", "make", "to", "the", "returned", "list", "will", "be", "present", "inside", "the", "jaxb", "object", ".", "this", "is", "why", "there", "is", "not", "a", "set", "method", "for", "the", "message", "property", ".", "for", "example", ",", "to", "add", "a", "new", "item", ",", "do", "as", "follows", ":", "getmessage", ".", "add", "newitem", ";", "objects", "of", "the", "following", "type", "s", "are", "allowed", "in", "the", "list", "message", "concode_field_sep", "List", "<", "LocalizedMessage", ">", "localizedMessage", "concode_elem_sep", "String", "name", "concode_elem_sep", "List", "<", "Message", ">", "message", "concode_elem_sep", "List", "<", "ValidationContext", ">", "child", "concode_field_sep", "void", "setName", "concode_elem_sep", "String", "getName", "concode_elem_sep", "List", "<", "LocalizedMessage", ">", "getLocalizedMessage", "concode_elem_sep", "List", "<", "ValidationContext", ">", "getChild"]}
{"code": "void function ( Long arg0 ) { this . endIp = arg0 ; }", "nl": "this method sets the value of the database column sys_ip_area . end_ip concode_field_sep String areaCode concode_elem_sep String IPCODE_UNKNOWN concode_elem_sep String city concode_elem_sep String province concode_elem_sep String edu concode_elem_sep String district concode_elem_sep String company concode_elem_sep Date createTime concode_elem_sep Long endIp concode_elem_sep String owner concode_elem_sep Long startIp concode_elem_sep String country concode_field_sep boolean isIp concode_elem_sep void setCountry concode_elem_sep Date getCreateTime concode_elem_sep String getCountry concode_elem_sep void setProvince concode_elem_sep long valueOfIpv4 concode_elem_sep String getEdu concode_elem_sep Long getStartIp concode_elem_sep Long getEndIp concode_elem_sep String getOwner concode_elem_sep void setStartIp concode_elem_sep void setOwner concode_elem_sep String getStartIpv4 concode_elem_sep String getEndIpv4 concode_elem_sep String getAreaCode concode_elem_sep String ipv4 concode_elem_sep String getDistrict concode_elem_sep String getProvince concode_elem_sep void setDistrict concode_elem_sep void setCompany concode_elem_sep String getCity concode_elem_sep void setCity concode_elem_sep void setAreaCode concode_elem_sep void setCreateTime concode_elem_sep String getCompany concode_elem_sep void setEdu concode_elem_sep String toString", "code_tokens": ["void", "function", "(", "Long", "arg0", ")", "{", "this", ".", "endIp", "=", "arg0", ";", "}"], "nl_tokens": ["this", "method", "sets", "the", "value", "of", "the", "database", "column", "sys_ip_area", ".", "end_ip", "concode_field_sep", "String", "areaCode", "concode_elem_sep", "String", "IPCODE_UNKNOWN", "concode_elem_sep", "String", "city", "concode_elem_sep", "String", "province", "concode_elem_sep", "String", "edu", "concode_elem_sep", "String", "district", "concode_elem_sep", "String", "company", "concode_elem_sep", "Date", "createTime", "concode_elem_sep", "Long", "endIp", "concode_elem_sep", "String", "owner", "concode_elem_sep", "Long", "startIp", "concode_elem_sep", "String", "country", "concode_field_sep", "boolean", "isIp", "concode_elem_sep", "void", "setCountry", "concode_elem_sep", "Date", "getCreateTime", "concode_elem_sep", "String", "getCountry", "concode_elem_sep", "void", "setProvince", "concode_elem_sep", "long", "valueOfIpv4", "concode_elem_sep", "String", "getEdu", "concode_elem_sep", "Long", "getStartIp", "concode_elem_sep", "Long", "getEndIp", "concode_elem_sep", "String", "getOwner", "concode_elem_sep", "void", "setStartIp", "concode_elem_sep", "void", "setOwner", "concode_elem_sep", "String", "getStartIpv4", "concode_elem_sep", "String", "getEndIpv4", "concode_elem_sep", "String", "getAreaCode", "concode_elem_sep", "String", "ipv4", "concode_elem_sep", "String", "getDistrict", "concode_elem_sep", "String", "getProvince", "concode_elem_sep", "void", "setDistrict", "concode_elem_sep", "void", "setCompany", "concode_elem_sep", "String", "getCity", "concode_elem_sep", "void", "setCity", "concode_elem_sep", "void", "setAreaCode", "concode_elem_sep", "void", "setCreateTime", "concode_elem_sep", "String", "getCompany", "concode_elem_sep", "void", "setEdu", "concode_elem_sep", "String", "toString"]}
{"code": "String function ( ) { return fElement . getAttribute ( CLASS_ATTRIBUTE ) ; }", "nl": "returns the hover 's class name . concode_field_sep String fModifierString concode_elem_sep String VALUE_SEPARATOR concode_elem_sep String NO_MODIFIER concode_elem_sep IConfigurationElement fElement concode_elem_sep boolean fIsEnabled concode_elem_sep int fStateMask concode_elem_sep String ACTIVATE_PLUG_IN_ATTRIBUTE concode_elem_sep String JAVA_EDITOR_TEXT_HOVER_EXTENSION_POINT concode_elem_sep String ID_ATTRIBUTE concode_elem_sep String LABEL_ATTRIBUTE concode_elem_sep String DISABLED_TAG concode_elem_sep String CLASS_ATTRIBUTE concode_elem_sep String DESCRIPTION_ATTRIBUTE concode_elem_sep String HOVER_TAG concode_field_sep boolean canActivatePlugIn concode_elem_sep String getLabel concode_elem_sep String getId concode_elem_sep String getModifierString concode_elem_sep String getDescription concode_elem_sep JavaEditorTextHoverDescriptor[] getContributedHovers concode_elem_sep int getStateMask concode_elem_sep void initializeFromPreferences concode_elem_sep int computeStateMask concode_elem_sep int hashCode concode_elem_sep IConfigurationElement getConfigurationElement concode_elem_sep boolean equals concode_elem_sep boolean isEnabled concode_elem_sep JavaEditorTextHoverDescriptor[] createDescriptors concode_elem_sep IJavaEditorTextHover createTextHover", "code_tokens": ["String", "function", "(", ")", "{", "return", "fElement", ".", "getAttribute", "(", "CLASS_ATTRIBUTE", ")", ";", "}"], "nl_tokens": ["returns", "the", "hover", "'", "s", "class", "name", ".", "concode_field_sep", "String", "fModifierString", "concode_elem_sep", "String", "VALUE_SEPARATOR", "concode_elem_sep", "String", "NO_MODIFIER", "concode_elem_sep", "IConfigurationElement", "fElement", "concode_elem_sep", "boolean", "fIsEnabled", "concode_elem_sep", "int", "fStateMask", "concode_elem_sep", "String", "ACTIVATE_PLUG_IN_ATTRIBUTE", "concode_elem_sep", "String", "JAVA_EDITOR_TEXT_HOVER_EXTENSION_POINT", "concode_elem_sep", "String", "ID_ATTRIBUTE", "concode_elem_sep", "String", "LABEL_ATTRIBUTE", "concode_elem_sep", "String", "DISABLED_TAG", "concode_elem_sep", "String", "CLASS_ATTRIBUTE", "concode_elem_sep", "String", "DESCRIPTION_ATTRIBUTE", "concode_elem_sep", "String", "HOVER_TAG", "concode_field_sep", "boolean", "canActivatePlugIn", "concode_elem_sep", "String", "getLabel", "concode_elem_sep", "String", "getId", "concode_elem_sep", "String", "getModifierString", "concode_elem_sep", "String", "getDescription", "concode_elem_sep", "JavaEditorTextHoverDescriptor", "[", "]", "getContributedHovers", "concode_elem_sep", "int", "getStateMask", "concode_elem_sep", "void", "initializeFromPreferences", "concode_elem_sep", "int", "computeStateMask", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "IConfigurationElement", "getConfigurationElement", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "isEnabled", "concode_elem_sep", "JavaEditorTextHoverDescriptor", "[", "]", "createDescriptors", "concode_elem_sep", "IJavaEditorTextHover", "createTextHover"]}
{"code": "void function ( ) { Assert . assertFalse ( i . isStackOwner ( ) ) ; }", "nl": "verifies if image is a stack owner . should be false . concode_field_sep Image i concode_elem_sep Tag I concode_elem_sep WorkerContext workerContextImpl concode_field_sep void init concode_elem_sep void verifyEnd", "code_tokens": ["void", "function", "(", ")", "{", "Assert", ".", "assertFalse", "(", "i", ".", "isStackOwner", "(", ")", ")", ";", "}"], "nl_tokens": ["verifies", "if", "image", "is", "a", "stack", "owner", ".", "should", "be", "false", ".", "concode_field_sep", "Image", "i", "concode_elem_sep", "Tag", "I", "concode_elem_sep", "WorkerContext", "workerContextImpl", "concode_field_sep", "void", "init", "concode_elem_sep", "void", "verifyEnd"]}
{"code": "Iterator function ( LongIterator arg0 ) { return null == arg0 ? null : new LongIteratorIterator ( arg0 ) ; }", "nl": "create an iterator iterator wrappingthe specified longiterator longiterator . when the given iterator is null , returns null . concode_field_sep LongIterator _iterator concode_field_sep Object next concode_elem_sep boolean hasNext concode_elem_sep void remove", "code_tokens": ["Iterator", "function", "(", "LongIterator", "arg0", ")", "{", "return", "null", "==", "arg0", "?", "null", ":", "new", "LongIteratorIterator", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "an", "iterator", "iterator", "wrappingthe", "specified", "longiterator", "longiterator", ".", "when", "the", "given", "iterator", "is", "null", ",", "returns", "null", ".", "concode_field_sep", "LongIterator", "_iterator", "concode_field_sep", "Object", "next", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "remove"]}
{"code": "boolean function ( ) { return globalMutex . isEmpty ( ) ; }", "nl": "nobody get the lock when globalmutex contains nothing concode_field_sep int currentReaderCount concode_elem_sep ReadLock readerLock concode_elem_sep Object readerMutex concode_elem_sep WriteLock writerLock concode_elem_sep Set<Object> globalMutex concode_field_sep Lock writeLock concode_elem_sep void unlock concode_elem_sep void unlock concode_elem_sep void lockInterruptibly concode_elem_sep void lockInterruptibly concode_elem_sep boolean doesWriterOwnThisLock concode_elem_sep void waitUninterruptibly concode_elem_sep Condition newCondition concode_elem_sep Condition newCondition concode_elem_sep Lock readLock concode_elem_sep boolean doesReaderOwnThisLock concode_elem_sep void lock concode_elem_sep void lock concode_elem_sep boolean tryLock concode_elem_sep boolean tryLock concode_elem_sep boolean tryLock concode_elem_sep boolean tryLock", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "globalMutex", ".", "isEmpty", "(", ")", ";", "}"], "nl_tokens": ["nobody", "get", "the", "lock", "when", "globalmutex", "contains", "nothing", "concode_field_sep", "int", "currentReaderCount", "concode_elem_sep", "ReadLock", "readerLock", "concode_elem_sep", "Object", "readerMutex", "concode_elem_sep", "WriteLock", "writerLock", "concode_elem_sep", "Set", "<", "Object", ">", "globalMutex", "concode_field_sep", "Lock", "writeLock", "concode_elem_sep", "void", "unlock", "concode_elem_sep", "void", "unlock", "concode_elem_sep", "void", "lockInterruptibly", "concode_elem_sep", "void", "lockInterruptibly", "concode_elem_sep", "boolean", "doesWriterOwnThisLock", "concode_elem_sep", "void", "waitUninterruptibly", "concode_elem_sep", "Condition", "newCondition", "concode_elem_sep", "Condition", "newCondition", "concode_elem_sep", "Lock", "readLock", "concode_elem_sep", "boolean", "doesReaderOwnThisLock", "concode_elem_sep", "void", "lock", "concode_elem_sep", "void", "lock", "concode_elem_sep", "boolean", "tryLock", "concode_elem_sep", "boolean", "tryLock", "concode_elem_sep", "boolean", "tryLock", "concode_elem_sep", "boolean", "tryLock"]}
{"code": "Bag function ( Bag arg0 , Class arg1 ) { return new PredicatedBag ( arg0 , InstanceofPredicate . getInstance ( arg1 ) ) ; }", "nl": "factory method to create a typed bag . if there are any elements already in the bag being decorated , they are validated . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["Bag", "function", "(", "Bag", "arg0", ",", "Class", "arg1", ")", "{", "return", "new", "PredicatedBag", "(", "arg0", ",", "InstanceofPredicate", ".", "getInstance", "(", "arg1", ")", ")", ";", "}"], "nl_tokens": ["factory", "method", "to", "create", "a", "typed", "bag", ".", "if", "there", "are", "any", "elements", "already", "in", "the", "bag", "being", "decorated", ",", "they", "are", "validated", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "void function ( RatTerm arg0 , int arg1 ) { underlying_terms . setElementAt ( arg0 , arg1 ) ; terms = ( RatTerm [ ] ) underlying_terms . toArray ( new RatTerm [ ] { } ) ; }", "nl": "replacement operation . requires : t ! = null & & 0 e.g. given a rattermvec v = t2 , t3 , t4 , the statement `` v.set t5 , 1 ; '' will make v_post = t2 , t5 , t4 . concode_field_sep Vector underlying_terms concode_elem_sep RatTerm[] terms concode_field_sep int size concode_elem_sep String printDebug concode_elem_sep boolean equals concode_elem_sep RatTerm get concode_elem_sep void insert concode_elem_sep String toString concode_elem_sep void addElement concode_elem_sep RatTermVec copy concode_elem_sep void remove", "code_tokens": ["void", "function", "(", "RatTerm", "arg0", ",", "int", "arg1", ")", "{", "underlying_terms", ".", "setElementAt", "(", "arg0", ",", "arg1", ")", ";", "terms", "=", "(", "RatTerm", "[", "]", ")", "underlying_terms", ".", "toArray", "(", "new", "RatTerm", "[", "]", "{", "}", ")", ";", "}"], "nl_tokens": ["replacement", "operation", ".", "requires", ":", "t", "!", "=", "null", "&", "&", "0", "e", ".", "g", ".", "given", "a", "rattermvec", "v", "=", "t2", ",", "t3", ",", "t4", ",", "the", "statement", "`", "`", "v", ".", "set", "t5", ",", "1", ";", "''", "will", "make", "v_post", "=", "t2", ",", "t5", ",", "t4", ".", "concode_field_sep", "Vector", "underlying_terms", "concode_elem_sep", "RatTerm", "[", "]", "terms", "concode_field_sep", "int", "size", "concode_elem_sep", "String", "printDebug", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "RatTerm", "get", "concode_elem_sep", "void", "insert", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "addElement", "concode_elem_sep", "RatTermVec", "copy", "concode_elem_sep", "void", "remove"]}
{"code": "void function ( ) { getLarnacaAirport ( ) . setName ( \"srini_string\" ) ; getLarnacaAirport ( ) . setCity ( \"srini_string\" ) ; getLarnacaAirport ( ) . setCountry ( \"srini_string\" ) ; getLarnacaAirport ( ) . setCode ( \"srini_string\" ) ; }", "nl": "larnacaairport initializer concode_field_sep int larnacaAirportNumberOfRunways concode_elem_sep Passenger[] passengersArray concode_elem_sep Airport larnacaAirport concode_elem_sep Plane[] planesArray concode_elem_sep Flight[] flightsArray concode_elem_sep int numberOfPassengers concode_elem_sep int numberOfFlightAttributes concode_elem_sep Runway[] runwaysArray concode_elem_sep int numberOfFlights concode_field_sep void setLarnacaAirport concode_elem_sep void setPassengersArray concode_elem_sep void setFlightsArray concode_elem_sep Passenger[] getPassengersArray concode_elem_sep Object[][] getArrivalsOrDeparturesList concode_elem_sep void loadFromFile concode_elem_sep void freeUpRunway concode_elem_sep void initializeRunwaysArray concode_elem_sep Plane[] getPlanesArray concode_elem_sep void setRunwaysArray concode_elem_sep Object[][] getFlightData concode_elem_sep void initializePlanesArray concode_elem_sep void setPlanesArray concode_elem_sep void saveToFile concode_elem_sep void initializeFlightsArray concode_elem_sep boolean checkForFreeRunways concode_elem_sep void initializePassengersArray concode_elem_sep Airport getLarnacaAirport concode_elem_sep Object[] getArrivalsOrDeparturesRecord concode_elem_sep String[] getListOfAllFlightCodes concode_elem_sep Runway[] getRunwaysArray concode_elem_sep Flight[] getFlightsArray concode_elem_sep Object[] getFlightsRow", "code_tokens": ["void", "function", "(", ")", "{", "getLarnacaAirport", "(", ")", ".", "setName", "(", "\"srini_string\"", ")", ";", "getLarnacaAirport", "(", ")", ".", "setCity", "(", "\"srini_string\"", ")", ";", "getLarnacaAirport", "(", ")", ".", "setCountry", "(", "\"srini_string\"", ")", ";", "getLarnacaAirport", "(", ")", ".", "setCode", "(", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["larnacaairport", "initializer", "concode_field_sep", "int", "larnacaAirportNumberOfRunways", "concode_elem_sep", "Passenger", "[", "]", "passengersArray", "concode_elem_sep", "Airport", "larnacaAirport", "concode_elem_sep", "Plane", "[", "]", "planesArray", "concode_elem_sep", "Flight", "[", "]", "flightsArray", "concode_elem_sep", "int", "numberOfPassengers", "concode_elem_sep", "int", "numberOfFlightAttributes", "concode_elem_sep", "Runway", "[", "]", "runwaysArray", "concode_elem_sep", "int", "numberOfFlights", "concode_field_sep", "void", "setLarnacaAirport", "concode_elem_sep", "void", "setPassengersArray", "concode_elem_sep", "void", "setFlightsArray", "concode_elem_sep", "Passenger", "[", "]", "getPassengersArray", "concode_elem_sep", "Object", "[", "]", "[", "]", "getArrivalsOrDeparturesList", "concode_elem_sep", "void", "loadFromFile", "concode_elem_sep", "void", "freeUpRunway", "concode_elem_sep", "void", "initializeRunwaysArray", "concode_elem_sep", "Plane", "[", "]", "getPlanesArray", "concode_elem_sep", "void", "setRunwaysArray", "concode_elem_sep", "Object", "[", "]", "[", "]", "getFlightData", "concode_elem_sep", "void", "initializePlanesArray", "concode_elem_sep", "void", "setPlanesArray", "concode_elem_sep", "void", "saveToFile", "concode_elem_sep", "void", "initializeFlightsArray", "concode_elem_sep", "boolean", "checkForFreeRunways", "concode_elem_sep", "void", "initializePassengersArray", "concode_elem_sep", "Airport", "getLarnacaAirport", "concode_elem_sep", "Object", "[", "]", "getArrivalsOrDeparturesRecord", "concode_elem_sep", "String", "[", "]", "getListOfAllFlightCodes", "concode_elem_sep", "Runway", "[", "]", "getRunwaysArray", "concode_elem_sep", "Flight", "[", "]", "getFlightsArray", "concode_elem_sep", "Object", "[", "]", "getFlightsRow"]}
{"code": "void function ( int arg0 ) { decrementTransactionCount ( ) ; }", "nl": "notifies handler that an active transaction has completed . concode_field_sep int activeInvocationCount concode_elem_sep InjectedValue<DeploymentRepository> deploymentRepositoryInjectedValue concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeTransactionCountUpdater concode_elem_sep boolean gracefulTxnShutdown concode_elem_sep ServerActivityCallback listener concode_elem_sep AtomicReferenceFieldUpdater<EJBSuspendHandlerService,ServerActivityCallback> listenerUpdater concode_elem_sep InjectedValue<SuspendController> suspendControllerInjectedValue concode_elem_sep InjectedValue<LocalTransactionContext> localTransactionContextInjectedValue concode_elem_sep int activeTransactionCount concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeInvocationCountUpdater concode_elem_sep boolean suspended concode_elem_sep ServiceName SERVICE_NAME concode_field_sep void resume concode_elem_sep void beforeCompletion concode_elem_sep void enableGracefulTxnShutdown concode_elem_sep void invocationComplete concode_elem_sep void doneSuspended concode_elem_sep boolean isSuspended concode_elem_sep void decrementTransactionCount concode_elem_sep void start concode_elem_sep InjectedValue<SuspendController> getSuspendControllerInjectedValue concode_elem_sep void suspended concode_elem_sep void transactionCreated concode_elem_sep EJBSuspendHandlerService getValue concode_elem_sep void stop concode_elem_sep InjectedValue<LocalTransactionContext> getLocalTransactionContextInjectedValue concode_elem_sep InjectedValue<DeploymentRepository> getDeploymentRepositoryInjectedValue concode_elem_sep boolean acceptInvocation concode_elem_sep void preSuspend", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "decrementTransactionCount", "(", ")", ";", "}"], "nl_tokens": ["notifies", "handler", "that", "an", "active", "transaction", "has", "completed", ".", "concode_field_sep", "int", "activeInvocationCount", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "deploymentRepositoryInjectedValue", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeTransactionCountUpdater", "concode_elem_sep", "boolean", "gracefulTxnShutdown", "concode_elem_sep", "ServerActivityCallback", "listener", "concode_elem_sep", "AtomicReferenceFieldUpdater", "<", "EJBSuspendHandlerService", ",", "ServerActivityCallback", ">", "listenerUpdater", "concode_elem_sep", "InjectedValue", "<", "SuspendController", ">", "suspendControllerInjectedValue", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "localTransactionContextInjectedValue", "concode_elem_sep", "int", "activeTransactionCount", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeInvocationCountUpdater", "concode_elem_sep", "boolean", "suspended", "concode_elem_sep", "ServiceName", "SERVICE_NAME", "concode_field_sep", "void", "resume", "concode_elem_sep", "void", "beforeCompletion", "concode_elem_sep", "void", "enableGracefulTxnShutdown", "concode_elem_sep", "void", "invocationComplete", "concode_elem_sep", "void", "doneSuspended", "concode_elem_sep", "boolean", "isSuspended", "concode_elem_sep", "void", "decrementTransactionCount", "concode_elem_sep", "void", "start", "concode_elem_sep", "InjectedValue", "<", "SuspendController", ">", "getSuspendControllerInjectedValue", "concode_elem_sep", "void", "suspended", "concode_elem_sep", "void", "transactionCreated", "concode_elem_sep", "EJBSuspendHandlerService", "getValue", "concode_elem_sep", "void", "stop", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "getLocalTransactionContextInjectedValue", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "getDeploymentRepositoryInjectedValue", "concode_elem_sep", "boolean", "acceptInvocation", "concode_elem_sep", "void", "preSuspend"]}
{"code": "LobCreator function ( LobCreationContext arg0 ) { return useContextualLobCreation ? new ContextualLobCreator ( arg0 ) : NonContextualLobCreator . INSTANCE ; }", "nl": "build a lobcreator using the given context concode_field_sep boolean useContextualLobCreation concode_elem_sep Object[] NO_ARGS concode_elem_sep Class[] NO_ARG_SIG concode_elem_sep CoreMessageLogger LOG concode_field_sep boolean useContextualLobCreation", "code_tokens": ["LobCreator", "function", "(", "LobCreationContext", "arg0", ")", "{", "return", "useContextualLobCreation", "?", "new", "ContextualLobCreator", "(", "arg0", ")", ":", "NonContextualLobCreator", ".", "INSTANCE", ";", "}"], "nl_tokens": ["build", "a", "lobcreator", "using", "the", "given", "context", "concode_field_sep", "boolean", "useContextualLobCreation", "concode_elem_sep", "Object", "[", "]", "NO_ARGS", "concode_elem_sep", "Class", "[", "]", "NO_ARG_SIG", "concode_elem_sep", "CoreMessageLogger", "LOG", "concode_field_sep", "boolean", "useContextualLobCreation"]}
{"code": "void function ( double arg0 , double arg1 , double arg2 ) { if ( ! isSequence ( arg0 , arg1 , arg2 ) ) { throw new IllegalArgumentException ( \"srini_string\" + arg0 + \"srini_string\" + arg1 + \"srini_string\" + arg2 ) ; } }", "nl": "verifies that lower throws illegalargumentexception if not concode_field_sep double functionValueAccuracy concode_elem_sep boolean resultComputed concode_elem_sep double defaultFunctionValueAccuracy concode_elem_sep UnivariateRealFunction f concode_elem_sep double relativeAccuracy concode_elem_sep double absoluteAccuracy concode_elem_sep double result concode_elem_sep int iterationCount concode_elem_sep int defaultMaximalIterationCount concode_elem_sep int maximalIterationCount concode_elem_sep double defaultAbsoluteAccuracy concode_elem_sep double defaultRelativeAccuracy concode_elem_sep long serialVersionUID concode_field_sep double getFunctionValueAccuracy concode_elem_sep void setAbsoluteAccuracy concode_elem_sep boolean isSequence concode_elem_sep void setResult concode_elem_sep void setRelativeAccuracy concode_elem_sep void resetFunctionValueAccuracy concode_elem_sep int getMaximalIterationCount concode_elem_sep void resetRelativeAccuracy concode_elem_sep double getAbsoluteAccuracy concode_elem_sep int getIterationCount concode_elem_sep void resetAbsoluteAccuracy concode_elem_sep void verifyInterval concode_elem_sep double getResult concode_elem_sep void setMaximalIterationCount concode_elem_sep void resetMaximalIterationCount concode_elem_sep boolean isBracketing concode_elem_sep void clearResult concode_elem_sep void verifyBracketing concode_elem_sep double getRelativeAccuracy concode_elem_sep void setFunctionValueAccuracy", "code_tokens": ["void", "function", "(", "double", "arg0", ",", "double", "arg1", ",", "double", "arg2", ")", "{", "if", "(", "!", "isSequence", "(", "arg0", ",", "arg1", ",", "arg2", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", "+", "arg0", "+", "\"srini_string\"", "+", "arg1", "+", "\"srini_string\"", "+", "arg2", ")", ";", "}", "}"], "nl_tokens": ["verifies", "that", "lower", "throws", "illegalargumentexception", "if", "not", "concode_field_sep", "double", "functionValueAccuracy", "concode_elem_sep", "boolean", "resultComputed", "concode_elem_sep", "double", "defaultFunctionValueAccuracy", "concode_elem_sep", "UnivariateRealFunction", "f", "concode_elem_sep", "double", "relativeAccuracy", "concode_elem_sep", "double", "absoluteAccuracy", "concode_elem_sep", "double", "result", "concode_elem_sep", "int", "iterationCount", "concode_elem_sep", "int", "defaultMaximalIterationCount", "concode_elem_sep", "int", "maximalIterationCount", "concode_elem_sep", "double", "defaultAbsoluteAccuracy", "concode_elem_sep", "double", "defaultRelativeAccuracy", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "double", "getFunctionValueAccuracy", "concode_elem_sep", "void", "setAbsoluteAccuracy", "concode_elem_sep", "boolean", "isSequence", "concode_elem_sep", "void", "setResult", "concode_elem_sep", "void", "setRelativeAccuracy", "concode_elem_sep", "void", "resetFunctionValueAccuracy", "concode_elem_sep", "int", "getMaximalIterationCount", "concode_elem_sep", "void", "resetRelativeAccuracy", "concode_elem_sep", "double", "getAbsoluteAccuracy", "concode_elem_sep", "int", "getIterationCount", "concode_elem_sep", "void", "resetAbsoluteAccuracy", "concode_elem_sep", "void", "verifyInterval", "concode_elem_sep", "double", "getResult", "concode_elem_sep", "void", "setMaximalIterationCount", "concode_elem_sep", "void", "resetMaximalIterationCount", "concode_elem_sep", "boolean", "isBracketing", "concode_elem_sep", "void", "clearResult", "concode_elem_sep", "void", "verifyBracketing", "concode_elem_sep", "double", "getRelativeAccuracy", "concode_elem_sep", "void", "setFunctionValueAccuracy"]}
{"code": "TaskManager function ( String arg0 ) { TaskManager loc0 = new TaskManager ( ) ; if ( arg0 == null ) return loc0 ; for ( Task loc1 : tasks ) { if ( arg0 . equalsIgnoreCase ( loc1 . arg0 ) ) loc0 . add ( loc1 ) ; } return loc0 ; }", "nl": "create a new taskmanger with only those tasks in milestone concode_field_sep String lineSep concode_elem_sep Date assigned_date concode_elem_sep String notes concode_elem_sep String milestone concode_elem_sep OutputFormat format concode_elem_sep String comment_re concode_elem_sep List<Task> tasks concode_elem_sep String include_re concode_elem_sep String description concode_elem_sep Float completed concode_elem_sep String usage_string concode_elem_sep Float duration concode_elem_sep boolean verbose concode_elem_sep String filename concode_elem_sep String task concode_elem_sep String milestone concode_elem_sep long line_number concode_elem_sep boolean completed concode_elem_sep String responsible concode_elem_sep String responsible concode_elem_sep boolean open concode_field_sep String all_vals concode_elem_sep void add concode_elem_sep String toString_milestone_html concode_elem_sep String toString_milestone_html concode_elem_sep TaskManager completed_only concode_elem_sep String toString_short_ascii concode_elem_sep String toString_short_ascii concode_elem_sep String toString_short_html concode_elem_sep String toString_short_html concode_elem_sep TaskManager responsible_match concode_elem_sep TaskManager open_only concode_elem_sep void main concode_elem_sep String short_str", "code_tokens": ["TaskManager", "function", "(", "String", "arg0", ")", "{", "TaskManager", "loc0", "=", "new", "TaskManager", "(", ")", ";", "if", "(", "arg0", "==", "null", ")", "return", "loc0", ";", "for", "(", "Task", "loc1", ":", "tasks", ")", "{", "if", "(", "arg0", ".", "equalsIgnoreCase", "(", "loc1", ".", "arg0", ")", ")", "loc0", ".", "add", "(", "loc1", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["create", "a", "new", "taskmanger", "with", "only", "those", "tasks", "in", "milestone", "concode_field_sep", "String", "lineSep", "concode_elem_sep", "Date", "assigned_date", "concode_elem_sep", "String", "notes", "concode_elem_sep", "String", "milestone", "concode_elem_sep", "OutputFormat", "format", "concode_elem_sep", "String", "comment_re", "concode_elem_sep", "List", "<", "Task", ">", "tasks", "concode_elem_sep", "String", "include_re", "concode_elem_sep", "String", "description", "concode_elem_sep", "Float", "completed", "concode_elem_sep", "String", "usage_string", "concode_elem_sep", "Float", "duration", "concode_elem_sep", "boolean", "verbose", "concode_elem_sep", "String", "filename", "concode_elem_sep", "String", "task", "concode_elem_sep", "String", "milestone", "concode_elem_sep", "long", "line_number", "concode_elem_sep", "boolean", "completed", "concode_elem_sep", "String", "responsible", "concode_elem_sep", "String", "responsible", "concode_elem_sep", "boolean", "open", "concode_field_sep", "String", "all_vals", "concode_elem_sep", "void", "add", "concode_elem_sep", "String", "toString_milestone_html", "concode_elem_sep", "String", "toString_milestone_html", "concode_elem_sep", "TaskManager", "completed_only", "concode_elem_sep", "String", "toString_short_ascii", "concode_elem_sep", "String", "toString_short_ascii", "concode_elem_sep", "String", "toString_short_html", "concode_elem_sep", "String", "toString_short_html", "concode_elem_sep", "TaskManager", "responsible_match", "concode_elem_sep", "TaskManager", "open_only", "concode_elem_sep", "void", "main", "concode_elem_sep", "String", "short_str"]}
{"code": "void function ( boolean arg0 ) { fResolveBindings = arg0 ; }", "nl": "controls whether the compiler should provide binding information for the ast nodes it creates . to be effective , this method must be called before any of #getroot , #getastrewrite , #getimportremover . this method has no effect if the target object has been created with #compilationunitrewrite icompilationunit , compilationunit . defaults to true do resolve bindings . concode_field_sep ImportRewrite fImportRewrite concode_elem_sep ImportRemover fImportRemover concode_elem_sep WorkingCopyOwner fOwner concode_elem_sep ASTRewrite fRewrite concode_elem_sep boolean fStatementsRecovery concode_elem_sep List<TextEditGroup> fTextEditGroups concode_elem_sep ICompilationUnit fCu concode_elem_sep IDocument fRememberContent concode_elem_sep CompilationUnit fRoot concode_elem_sep boolean fResolveBindings concode_elem_sep boolean fBindingsRecovery concode_field_sep void clearASTRewrite concode_elem_sep ASTRewrite getASTRewrite concode_elem_sep void rememberContent concode_elem_sep AST getAST concode_elem_sep void setBindingRecovery concode_elem_sep void setStatementsRecovery concode_elem_sep ImportRemover getImportRemover concode_elem_sep CompilationUnitChange createChange concode_elem_sep org.eclipse.jdt.internal.corext.refactoring.changes.CompilationUnitChange createChange concode_elem_sep CompilationUnitChange createChange concode_elem_sep CompilationUnitChange createChange concode_elem_sep void clearASTAndImportRewrites concode_elem_sep CompilationUnitChange attachChange concode_elem_sep CategorizedTextEditGroup createCategorizedGroupDescription concode_elem_sep TextEditGroup createGroupDescription concode_elem_sep ImportRewrite getImportRewrite concode_elem_sep ICompilationUnit getCu concode_elem_sep void clearImportRewrites concode_elem_sep void clearGroupDescriptionEdits concode_elem_sep CompilationUnit getRoot concode_elem_sep boolean isEmptyEdit", "code_tokens": ["void", "function", "(", "boolean", "arg0", ")", "{", "fResolveBindings", "=", "arg0", ";", "}"], "nl_tokens": ["controls", "whether", "the", "compiler", "should", "provide", "binding", "information", "for", "the", "ast", "nodes", "it", "creates", ".", "to", "be", "effective", ",", "this", "method", "must", "be", "called", "before", "any", "of", "#getroot , #getastrewrite , #getimportremover . this method has no effect if the target object has been created with #compilationunitrewrite icompilationunit , compilationunit . defaults to true do resolve bindings . concode_field_sep ImportRewrite fImportRewrite concode_elem_sep ImportRemover fImportRemover concode_elem_sep WorkingCopyOwner fOwner concode_elem_sep ASTRewrite fRewrite concode_elem_sep boolean fStatementsRecovery concode_elem_sep List<TextEditGroup> fTextEditGroups concode_elem_sep ICompilationUnit fCu concode_elem_sep IDocument fRememberContent concode_elem_sep CompilationUnit fRoot concode_elem_sep boolean fResolveBindings concode_elem_sep boolean fBindingsRecovery concode_field_sep void clearASTRewrite concode_elem_sep ASTRewrite getASTRewrite concode_elem_sep void rememberContent concode_elem_sep AST getAST concode_elem_sep void setBindingRecovery concode_elem_sep void setStatementsRecovery concode_elem_sep ImportRemover getImportRemover concode_elem_sep CompilationUnitChange createChange concode_elem_sep org.eclipse.jdt.internal.corext.refactoring.changes.CompilationUnitChange createChange concode_elem_sep CompilationUnitChange createChange concode_elem_sep CompilationUnitChange createChange concode_elem_sep void clearASTAndImportRewrites concode_elem_sep CompilationUnitChange attachChange concode_elem_sep CategorizedTextEditGroup createCategorizedGroupDescription concode_elem_sep TextEditGroup createGroupDescription concode_elem_sep ImportRewrite getImportRewrite concode_elem_sep ICompilationUnit getCu concode_elem_sep void clearImportRewrites concode_elem_sep void clearGroupDescriptionEdits concode_elem_sep CompilationUnit getRoot concode_elem_sep boolean isEmptyEdit"]}
{"code": "int function ( int arg0 ) { BigInteger loc0 ; int loc1 = arg0 * PastryConstants . ID_BASE_BIT_LENGTH ; loc0 = id . shiftRight ( loc1 ) ; loc0 = loc0 . mod ( TWO . pow ( PastryConstants . ID_BASE_BIT_LENGTH ) ) ; if ( loc0 . compareTo ( BigInteger . valueOf ( Integer . MAX_VALUE ) ) <= 0 ) return loc0 . intValue ( ) ; else return - 1 ; }", "nl": "returns the ith digit of the id in base 2 ^ b . i = 0 returns the least significant digit . concode_field_sep BigInteger MAX_ID_VALUE concode_elem_sep BigInteger TWO concode_elem_sep BigInteger NUM_OF_DISTINCT_IDS concode_elem_sep int NUM_OF_DIGITS concode_elem_sep BigInteger id concode_field_sep int getTransmissionSize concode_elem_sep int indexOfMSDD concode_elem_sep int compareTo concode_elem_sep byte[] getBytes concode_elem_sep int hashCode concode_elem_sep BigInteger getUniqueValue concode_elem_sep boolean equals concode_elem_sep boolean isBetween concode_elem_sep BigInteger getMinAbsDistance concode_elem_sep String toString concode_elem_sep BigInteger getCwDistance concode_elem_sep PastryKey getCorrespondingKey concode_elem_sep BigInteger getCcwDistance", "code_tokens": ["int", "function", "(", "int", "arg0", ")", "{", "BigInteger", "loc0", ";", "int", "loc1", "=", "arg0", "*", "PastryConstants", ".", "ID_BASE_BIT_LENGTH", ";", "loc0", "=", "id", ".", "shiftRight", "(", "loc1", ")", ";", "loc0", "=", "loc0", ".", "mod", "(", "TWO", ".", "pow", "(", "PastryConstants", ".", "ID_BASE_BIT_LENGTH", ")", ")", ";", "if", "(", "loc0", ".", "compareTo", "(", "BigInteger", ".", "valueOf", "(", "Integer", ".", "MAX_VALUE", ")", ")", "<=", "0", ")", "return", "loc0", ".", "intValue", "(", ")", ";", "else", "return", "-", "1", ";", "}"], "nl_tokens": ["returns", "the", "ith", "digit", "of", "the", "id", "in", "base", "2", "^", "b", ".", "i", "=", "0", "returns", "the", "least", "significant", "digit", ".", "concode_field_sep", "BigInteger", "MAX_ID_VALUE", "concode_elem_sep", "BigInteger", "TWO", "concode_elem_sep", "BigInteger", "NUM_OF_DISTINCT_IDS", "concode_elem_sep", "int", "NUM_OF_DIGITS", "concode_elem_sep", "BigInteger", "id", "concode_field_sep", "int", "getTransmissionSize", "concode_elem_sep", "int", "indexOfMSDD", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "byte", "[", "]", "getBytes", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "BigInteger", "getUniqueValue", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "isBetween", "concode_elem_sep", "BigInteger", "getMinAbsDistance", "concode_elem_sep", "String", "toString", "concode_elem_sep", "BigInteger", "getCwDistance", "concode_elem_sep", "PastryKey", "getCorrespondingKey", "concode_elem_sep", "BigInteger", "getCcwDistance"]}
{"code": "void function ( Boolean arg0 ) { this . isTest = arg0 ; }", "nl": "sets the checks if is test . concode_field_sep String errorMessage concode_elem_sep String numberChosen concode_elem_sep String buyerName concode_elem_sep Boolean isTest concode_field_sep String getNumberChosen concode_elem_sep String getBuyerName concode_elem_sep void execute concode_elem_sep String getErrorMessage", "code_tokens": ["void", "function", "(", "Boolean", "arg0", ")", "{", "this", ".", "isTest", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "checks", "if", "is", "test", ".", "concode_field_sep", "String", "errorMessage", "concode_elem_sep", "String", "numberChosen", "concode_elem_sep", "String", "buyerName", "concode_elem_sep", "Boolean", "isTest", "concode_field_sep", "String", "getNumberChosen", "concode_elem_sep", "String", "getBuyerName", "concode_elem_sep", "void", "execute", "concode_elem_sep", "String", "getErrorMessage"]}
{"code": "void function ( String arg0 , Map arg1 ) { arg1 . put ( Environment . URL , arg1 . get ( Environment . URL ) + \"srini_string\" + arg0 ) ; }", "nl": "create additional h2 schema . concode_field_sep String VALIDATE_FAILURE_EXPECTED concode_field_sep String extractTestName concode_elem_sep T locateAnnotation concode_elem_sep List<S> collectAnnotations concode_elem_sep String extractMethodName concode_elem_sep String extractIgnoreMessage concode_elem_sep boolean isNotEmpty concode_elem_sep String extractMessage", "code_tokens": ["void", "function", "(", "String", "arg0", ",", "Map", "arg1", ")", "{", "arg1", ".", "put", "(", "Environment", ".", "URL", ",", "arg1", ".", "get", "(", "Environment", ".", "URL", ")", "+", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl_tokens": ["create", "additional", "h2", "schema", ".", "concode_field_sep", "String", "VALIDATE_FAILURE_EXPECTED", "concode_field_sep", "String", "extractTestName", "concode_elem_sep", "T", "locateAnnotation", "concode_elem_sep", "List", "<", "S", ">", "collectAnnotations", "concode_elem_sep", "String", "extractMethodName", "concode_elem_sep", "String", "extractIgnoreMessage", "concode_elem_sep", "boolean", "isNotEmpty", "concode_elem_sep", "String", "extractMessage"]}
{"code": "void function ( ) { Set loc0 = ViewInterfaces . getPotentialViewInterfaces ( TestGroovyMessageListener . class ) ; Assert . assertEquals ( \"srini_string\" , 1 , loc0 . size ( ) ) ; Assert . assertEquals ( \"srini_string\" , MessageListener . class , loc0 . iterator ( ) . next ( ) ) ; }", "nl": "tests that the viewinterfaces #getpotentialviewinterfaces class returns the correctimplementation class for groovy class implementing messagelistener interface . concode_field_sep PlaceHolder placeHolder concode_field_sep void testJavaClass", "code_tokens": ["void", "function", "(", ")", "{", "Set", "loc0", "=", "ViewInterfaces", ".", "getPotentialViewInterfaces", "(", "TestGroovyMessageListener", ".", "class", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "1", ",", "loc0", ".", "size", "(", ")", ")", ";", "Assert", ".", "assertEquals", "(", "\"srini_string\"", ",", "MessageListener", ".", "class", ",", "loc0", ".", "iterator", "(", ")", ".", "next", "(", ")", ")", ";", "}"], "nl_tokens": ["tests", "that", "the", "viewinterfaces", "#getpotentialviewinterfaces class returns the correctimplementation class for groovy class implementing messagelistener interface . concode_field_sep PlaceHolder placeHolder concode_field_sep void testJavaClass"]}
{"code": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof LocalRing ) ) { return false ; } LocalRing < C > loc0 = null ; try { loc0 = ( LocalRing < C > ) arg0 ; } catch ( ClassCastException loc1 ) { } if ( loc0 == null ) { return false ; } if ( ! ring . equals ( loc0 . ring ) ) { return false ; } return ideal . equals ( loc0 . ideal ) ; }", "nl": "comparison with any other object . concode_field_sep Logger logger concode_elem_sep C ideal concode_elem_sep RingFactory<C> ring concode_elem_sep int isField concode_field_sep Local<C> random concode_elem_sep Local<C> random concode_elem_sep int hashCode concode_elem_sep boolean isField concode_elem_sep Local<C> getONE concode_elem_sep boolean isCommutative concode_elem_sep Local<C> getZERO concode_elem_sep Local<C> fromInteger concode_elem_sep Local<C> fromInteger concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep Local<C> parse concode_elem_sep Local<C> parse concode_elem_sep Local<C> copy concode_elem_sep java.math.BigInteger characteristic", "code_tokens": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "!", "(", "arg0", "instanceof", "LocalRing", ")", ")", "{", "return", "false", ";", "}", "LocalRing", "<", "C", ">", "loc0", "=", "null", ";", "try", "{", "loc0", "=", "(", "LocalRing", "<", "C", ">", ")", "arg0", ";", "}", "catch", "(", "ClassCastException", "loc1", ")", "{", "}", "if", "(", "loc0", "==", "null", ")", "{", "return", "false", ";", "}", "if", "(", "!", "ring", ".", "equals", "(", "loc0", ".", "ring", ")", ")", "{", "return", "false", ";", "}", "return", "ideal", ".", "equals", "(", "loc0", ".", "ideal", ")", ";", "}"], "nl_tokens": ["comparison", "with", "any", "other", "object", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "C", "ideal", "concode_elem_sep", "RingFactory", "<", "C", ">", "ring", "concode_elem_sep", "int", "isField", "concode_field_sep", "Local", "<", "C", ">", "random", "concode_elem_sep", "Local", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "Local", "<", "C", ">", "getONE", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "Local", "<", "C", ">", "getZERO", "concode_elem_sep", "Local", "<", "C", ">", "fromInteger", "concode_elem_sep", "Local", "<", "C", ">", "fromInteger", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Local", "<", "C", ">", "parse", "concode_elem_sep", "Local", "<", "C", ">", "parse", "concode_elem_sep", "Local", "<", "C", ">", "copy", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic"]}
{"code": "String function ( ) { return this . charset ; }", "nl": "the string encoding used for decoding and encoding . concode_field_sep String charset concode_elem_sep int RADIX concode_elem_sep byte ESCAPE_CHAR concode_elem_sep BitSet WWW_FORM_URL concode_field_sep byte[] encode concode_elem_sep String encode concode_elem_sep String encode concode_elem_sep Object encode concode_elem_sep byte[] decodeUrl concode_elem_sep String getDefaultCharset concode_elem_sep byte[] decode concode_elem_sep String decode concode_elem_sep String decode concode_elem_sep Object decode concode_elem_sep byte[] encodeUrl", "code_tokens": ["String", "function", "(", ")", "{", "return", "this", ".", "charset", ";", "}"], "nl_tokens": ["the", "string", "encoding", "used", "for", "decoding", "and", "encoding", ".", "concode_field_sep", "String", "charset", "concode_elem_sep", "int", "RADIX", "concode_elem_sep", "byte", "ESCAPE_CHAR", "concode_elem_sep", "BitSet", "WWW_FORM_URL", "concode_field_sep", "byte", "[", "]", "encode", "concode_elem_sep", "String", "encode", "concode_elem_sep", "String", "encode", "concode_elem_sep", "Object", "encode", "concode_elem_sep", "byte", "[", "]", "decodeUrl", "concode_elem_sep", "String", "getDefaultCharset", "concode_elem_sep", "byte", "[", "]", "decode", "concode_elem_sep", "String", "decode", "concode_elem_sep", "String", "decode", "concode_elem_sep", "Object", "decode", "concode_elem_sep", "byte", "[", "]", "encodeUrl"]}
{"code": "boolean function ( String arg0 , String arg1 ) { try { DateFormat loc0 = new SimpleDateFormat ( \"srini_string\" ) ; Date loc1 = loc0 . parse ( arg0 ) ; Date loc2 = loc0 . parse ( arg1 ) ; return loc2 . before ( loc1 ) ; } catch ( Exception loc0 ) { loc0 . printStackTrace ( ) ; } return false ; }", "nl": "return is other before first concode_field_sep int[] retentionMonthly concode_elem_sep int[] browsingFreq concode_elem_sep int[] retentionDaily concode_elem_sep int[] retentionWeekly concode_field_sep int weekBetween concode_elem_sep String getMonthRetention concode_elem_sep String dayOfweek concode_elem_sep long dateTimeDuration concode_elem_sep String getIntervalSegment concode_elem_sep String format concode_elem_sep String format concode_elem_sep String getWeekRetention concode_elem_sep List<String> getLastestDays concode_elem_sep String getDayRetention concode_elem_sep int getDuration concode_elem_sep String dayOfMonth concode_elem_sep int dayBetween concode_elem_sep boolean isAfter concode_elem_sep String getBrowsingFreq", "code_tokens": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "try", "{", "DateFormat", "loc0", "=", "new", "SimpleDateFormat", "(", "\"srini_string\"", ")", ";", "Date", "loc1", "=", "loc0", ".", "parse", "(", "arg0", ")", ";", "Date", "loc2", "=", "loc0", ".", "parse", "(", "arg1", ")", ";", "return", "loc2", ".", "before", "(", "loc1", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "loc0", ".", "printStackTrace", "(", ")", ";", "}", "return", "false", ";", "}"], "nl_tokens": ["return", "is", "other", "before", "first", "concode_field_sep", "int", "[", "]", "retentionMonthly", "concode_elem_sep", "int", "[", "]", "browsingFreq", "concode_elem_sep", "int", "[", "]", "retentionDaily", "concode_elem_sep", "int", "[", "]", "retentionWeekly", "concode_field_sep", "int", "weekBetween", "concode_elem_sep", "String", "getMonthRetention", "concode_elem_sep", "String", "dayOfweek", "concode_elem_sep", "long", "dateTimeDuration", "concode_elem_sep", "String", "getIntervalSegment", "concode_elem_sep", "String", "format", "concode_elem_sep", "String", "format", "concode_elem_sep", "String", "getWeekRetention", "concode_elem_sep", "List", "<", "String", ">", "getLastestDays", "concode_elem_sep", "String", "getDayRetention", "concode_elem_sep", "int", "getDuration", "concode_elem_sep", "String", "dayOfMonth", "concode_elem_sep", "int", "dayBetween", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "String", "getBrowsingFreq"]}
{"code": "String function ( ) { return fName ; }", "nl": "returns the name of the described extension . concode_field_sep String fId concode_elem_sep boolean fIsEnabled concode_elem_sep IConfigurationElement fElement concode_elem_sep boolean fNeedsSortingAfterFiltering concode_elem_sep boolean fIsIncluded concode_elem_sep String ICON concode_elem_sep Expression fEnablementExpression concode_elem_sep int fSortOrder concode_elem_sep String fName concode_elem_sep ImageDescriptor fImage concode_elem_sep String fLastError concode_elem_sep CompletionProposalComputerRegistry fRegistry concode_elem_sep boolean fIsSeparateCommand concode_field_sep boolean isSeparateCommand concode_elem_sep void sessionEnded concode_elem_sep void setSortOrder concode_elem_sep void sessionStarted concode_elem_sep Expression getEnablementExpression concode_elem_sep void setSeparateCommand concode_elem_sep String getId concode_elem_sep ImageDescriptor getImageDescriptor concode_elem_sep void setIncluded concode_elem_sep boolean matches concode_elem_sep Bundle getBundle concode_elem_sep int getSortOrder concode_elem_sep void setEnabled concode_elem_sep void checkNotNull concode_elem_sep String getDisplayName concode_elem_sep boolean isEnabled concode_elem_sep boolean hasComputers concode_elem_sep boolean hasComputers concode_elem_sep boolean isSortingAfterFilteringNeeded concode_elem_sep boolean isIncluded concode_elem_sep List<ICompletionProposal> computeCompletionProposals concode_elem_sep List<IContextInformation> computeContextInformation concode_elem_sep String getErrorMessage", "code_tokens": ["String", "function", "(", ")", "{", "return", "fName", ";", "}"], "nl_tokens": ["returns", "the", "name", "of", "the", "described", "extension", ".", "concode_field_sep", "String", "fId", "concode_elem_sep", "boolean", "fIsEnabled", "concode_elem_sep", "IConfigurationElement", "fElement", "concode_elem_sep", "boolean", "fNeedsSortingAfterFiltering", "concode_elem_sep", "boolean", "fIsIncluded", "concode_elem_sep", "String", "ICON", "concode_elem_sep", "Expression", "fEnablementExpression", "concode_elem_sep", "int", "fSortOrder", "concode_elem_sep", "String", "fName", "concode_elem_sep", "ImageDescriptor", "fImage", "concode_elem_sep", "String", "fLastError", "concode_elem_sep", "CompletionProposalComputerRegistry", "fRegistry", "concode_elem_sep", "boolean", "fIsSeparateCommand", "concode_field_sep", "boolean", "isSeparateCommand", "concode_elem_sep", "void", "sessionEnded", "concode_elem_sep", "void", "setSortOrder", "concode_elem_sep", "void", "sessionStarted", "concode_elem_sep", "Expression", "getEnablementExpression", "concode_elem_sep", "void", "setSeparateCommand", "concode_elem_sep", "String", "getId", "concode_elem_sep", "ImageDescriptor", "getImageDescriptor", "concode_elem_sep", "void", "setIncluded", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "Bundle", "getBundle", "concode_elem_sep", "int", "getSortOrder", "concode_elem_sep", "void", "setEnabled", "concode_elem_sep", "void", "checkNotNull", "concode_elem_sep", "String", "getDisplayName", "concode_elem_sep", "boolean", "isEnabled", "concode_elem_sep", "boolean", "hasComputers", "concode_elem_sep", "boolean", "hasComputers", "concode_elem_sep", "boolean", "isSortingAfterFilteringNeeded", "concode_elem_sep", "boolean", "isIncluded", "concode_elem_sep", "List", "<", "ICompletionProposal", ">", "computeCompletionProposals", "concode_elem_sep", "List", "<", "IContextInformation", ">", "computeContextInformation", "concode_elem_sep", "String", "getErrorMessage"]}
{"code": "String function ( ) { return fLastError ; }", "nl": "returns the error message from the computers in this category . concode_field_sep String fId concode_elem_sep boolean fIsEnabled concode_elem_sep IConfigurationElement fElement concode_elem_sep boolean fNeedsSortingAfterFiltering concode_elem_sep boolean fIsIncluded concode_elem_sep String ICON concode_elem_sep Expression fEnablementExpression concode_elem_sep int fSortOrder concode_elem_sep String fName concode_elem_sep ImageDescriptor fImage concode_elem_sep String fLastError concode_elem_sep CompletionProposalComputerRegistry fRegistry concode_elem_sep boolean fIsSeparateCommand concode_field_sep boolean isSeparateCommand concode_elem_sep String getName concode_elem_sep void sessionEnded concode_elem_sep void setSortOrder concode_elem_sep void sessionStarted concode_elem_sep Expression getEnablementExpression concode_elem_sep void setSeparateCommand concode_elem_sep String getId concode_elem_sep ImageDescriptor getImageDescriptor concode_elem_sep void setIncluded concode_elem_sep boolean matches concode_elem_sep Bundle getBundle concode_elem_sep int getSortOrder concode_elem_sep void setEnabled concode_elem_sep void checkNotNull concode_elem_sep String getDisplayName concode_elem_sep boolean isEnabled concode_elem_sep boolean hasComputers concode_elem_sep boolean hasComputers concode_elem_sep boolean isSortingAfterFilteringNeeded concode_elem_sep boolean isIncluded concode_elem_sep List<ICompletionProposal> computeCompletionProposals concode_elem_sep List<IContextInformation> computeContextInformation", "code_tokens": ["String", "function", "(", ")", "{", "return", "fLastError", ";", "}"], "nl_tokens": ["returns", "the", "error", "message", "from", "the", "computers", "in", "this", "category", ".", "concode_field_sep", "String", "fId", "concode_elem_sep", "boolean", "fIsEnabled", "concode_elem_sep", "IConfigurationElement", "fElement", "concode_elem_sep", "boolean", "fNeedsSortingAfterFiltering", "concode_elem_sep", "boolean", "fIsIncluded", "concode_elem_sep", "String", "ICON", "concode_elem_sep", "Expression", "fEnablementExpression", "concode_elem_sep", "int", "fSortOrder", "concode_elem_sep", "String", "fName", "concode_elem_sep", "ImageDescriptor", "fImage", "concode_elem_sep", "String", "fLastError", "concode_elem_sep", "CompletionProposalComputerRegistry", "fRegistry", "concode_elem_sep", "boolean", "fIsSeparateCommand", "concode_field_sep", "boolean", "isSeparateCommand", "concode_elem_sep", "String", "getName", "concode_elem_sep", "void", "sessionEnded", "concode_elem_sep", "void", "setSortOrder", "concode_elem_sep", "void", "sessionStarted", "concode_elem_sep", "Expression", "getEnablementExpression", "concode_elem_sep", "void", "setSeparateCommand", "concode_elem_sep", "String", "getId", "concode_elem_sep", "ImageDescriptor", "getImageDescriptor", "concode_elem_sep", "void", "setIncluded", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "Bundle", "getBundle", "concode_elem_sep", "int", "getSortOrder", "concode_elem_sep", "void", "setEnabled", "concode_elem_sep", "void", "checkNotNull", "concode_elem_sep", "String", "getDisplayName", "concode_elem_sep", "boolean", "isEnabled", "concode_elem_sep", "boolean", "hasComputers", "concode_elem_sep", "boolean", "hasComputers", "concode_elem_sep", "boolean", "isSortingAfterFilteringNeeded", "concode_elem_sep", "boolean", "isIncluded", "concode_elem_sep", "List", "<", "ICompletionProposal", ">", "computeCompletionProposals", "concode_elem_sep", "List", "<", "IContextInformation", ">", "computeContextInformation"]}
{"code": "RequestType function ( ) { return requestType ; }", "nl": "get the type of this request , used by each person in the chain of command to see if they should or can handle this particular request concode_field_sep RequestType requestType concode_elem_sep boolean handled concode_elem_sep String requestDescription concode_field_sep void markHandled concode_elem_sep String toString concode_elem_sep boolean isHandled concode_elem_sep String getRequestDescription", "code_tokens": ["RequestType", "function", "(", ")", "{", "return", "requestType", ";", "}"], "nl_tokens": ["get", "the", "type", "of", "this", "request", ",", "used", "by", "each", "person", "in", "the", "chain", "of", "command", "to", "see", "if", "they", "should", "or", "can", "handle", "this", "particular", "request", "concode_field_sep", "RequestType", "requestType", "concode_elem_sep", "boolean", "handled", "concode_elem_sep", "String", "requestDescription", "concode_field_sep", "void", "markHandled", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isHandled", "concode_elem_sep", "String", "getRequestDescription"]}
{"code": "int function ( CharSequence arg0 , CharSequence arg1 ) { for ( int loc0 = 0 ; loc0 < Math . max ( arg0 . length ( ) , arg1 . length ( ) ) ; loc0 ++ ) { int loc1 = compareCharacter ( arg0 , arg1 , loc0 ) ; if ( 0 != loc1 ) { return loc1 ; } } return 0 ; }", "nl": "compares the charsequences o1 and o2 . concode_field_sep AvroCharSequenceComparator<CharSequence> INSTANCE concode_field_sep int compare concode_elem_sep int compareCharacter", "code_tokens": ["int", "function", "(", "CharSequence", "arg0", ",", "CharSequence", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "Math", ".", "max", "(", "arg0", ".", "length", "(", ")", ",", "arg1", ".", "length", "(", ")", ")", ";", "loc0", "+", "+", ")", "{", "int", "loc1", "=", "compareCharacter", "(", "arg0", ",", "arg1", ",", "loc0", ")", ";", "if", "(", "0", "!=", "loc1", ")", "{", "return", "loc1", ";", "}", "}", "return", "0", ";", "}"], "nl_tokens": ["compares", "the", "charsequences", "o1", "and", "o2", ".", "concode_field_sep", "AvroCharSequenceComparator", "<", "CharSequence", ">", "INSTANCE", "concode_field_sep", "int", "compare", "concode_elem_sep", "int", "compareCharacter"]}
{"code": "SWTWidgetFinder function ( ISWTWidgetMatcher ... arg0 ) { Invariants . notNull ( arg0 ) ; throw new UnsupportedOperationException ( ) ; }", "nl": "setup filters for this finder . filters are checked before search criteria . typical filters are defined in the filter enum . concode_field_sep ISearchable scope concode_elem_sep ISWTWidgetMatcher matcher concode_field_sep ISWTWidgetReference<?>[] doFindAll concode_elem_sep DisplayReference display concode_elem_sep ISWTWidgetMatcher addFilters concode_elem_sep SWTWidgetFinder withScope concode_elem_sep int getFinderRetryInterval concode_elem_sep SWTWidgetFinder forActiveShell concode_elem_sep SWTWidgetFinder forDisplay concode_elem_sep int getMaxFinderRetries concode_elem_sep boolean matches concode_elem_sep ISearchable activeShell concode_elem_sep ISWTWidgetReference<?>[] findAll", "code_tokens": ["SWTWidgetFinder", "function", "(", "ISWTWidgetMatcher", "...", "arg0", ")", "{", "Invariants", ".", "notNull", "(", "arg0", ")", ";", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}"], "nl_tokens": ["setup", "filters", "for", "this", "finder", ".", "filters", "are", "checked", "before", "search", "criteria", ".", "typical", "filters", "are", "defined", "in", "the", "filter", "enum", ".", "concode_field_sep", "ISearchable", "scope", "concode_elem_sep", "ISWTWidgetMatcher", "matcher", "concode_field_sep", "ISWTWidgetReference", "<", "?", ">", "[", "]", "doFindAll", "concode_elem_sep", "DisplayReference", "display", "concode_elem_sep", "ISWTWidgetMatcher", "addFilters", "concode_elem_sep", "SWTWidgetFinder", "withScope", "concode_elem_sep", "int", "getFinderRetryInterval", "concode_elem_sep", "SWTWidgetFinder", "forActiveShell", "concode_elem_sep", "SWTWidgetFinder", "forDisplay", "concode_elem_sep", "int", "getMaxFinderRetries", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "ISearchable", "activeShell", "concode_elem_sep", "ISWTWidgetReference", "<", "?", ">", "[", "]", "findAll"]}
{"code": "void function ( TreeNode arg0 , TreeNode arg1 ) { left = arg0 ; right = arg1 ; }", "nl": "set the children of the tree concode_field_sep TreeNode right concode_elem_sep int value concode_elem_sep TreeNode left concode_field_sep int addTree concode_elem_sep TreeNode createTree", "code_tokens": ["void", "function", "(", "TreeNode", "arg0", ",", "TreeNode", "arg1", ")", "{", "left", "=", "arg0", ";", "right", "=", "arg1", ";", "}"], "nl_tokens": ["set", "the", "children", "of", "the", "tree", "concode_field_sep", "TreeNode", "right", "concode_elem_sep", "int", "value", "concode_elem_sep", "TreeNode", "left", "concode_field_sep", "int", "addTree", "concode_elem_sep", "TreeNode", "createTree"]}
{"code": "String function ( ) { return path ; }", "nl": "retrieves the path to the log file . concode_field_sep int LOG_MAGIC concode_elem_sep String path concode_elem_sep long utime concode_elem_sep long eventNumber concode_elem_sep BufferedRandomAccessFile raf concode_elem_sep long numMessagesWritten concode_elem_sep String channel concode_elem_sep byte data[] concode_field_sep void flush concode_elem_sep void seekPositionFraction concode_elem_sep void write concode_elem_sep void write concode_elem_sep void close concode_elem_sep Event readNext concode_elem_sep double getPositionFraction", "code_tokens": ["String", "function", "(", ")", "{", "return", "path", ";", "}"], "nl_tokens": ["retrieves", "the", "path", "to", "the", "log", "file", ".", "concode_field_sep", "int", "LOG_MAGIC", "concode_elem_sep", "String", "path", "concode_elem_sep", "long", "utime", "concode_elem_sep", "long", "eventNumber", "concode_elem_sep", "BufferedRandomAccessFile", "raf", "concode_elem_sep", "long", "numMessagesWritten", "concode_elem_sep", "String", "channel", "concode_elem_sep", "byte", "data", "[", "]", "concode_field_sep", "void", "flush", "concode_elem_sep", "void", "seekPositionFraction", "concode_elem_sep", "void", "write", "concode_elem_sep", "void", "write", "concode_elem_sep", "void", "close", "concode_elem_sep", "Event", "readNext", "concode_elem_sep", "double", "getPositionFraction"]}
{"code": "Object function ( Object arg0 ) { List4 loc0 = find ( arg0 ) ; if ( loc0 == null ) { add ( arg0 ) ; return arg0 ; } return loc0 . _element ; }", "nl": "makes sure the passed object is in the collection . equals comparison . concode_field_sep int _size concode_elem_sep List4 _last concode_elem_sep List4 _first concode_elem_sep int _version concode_field_sep void prepend concode_elem_sep void replace concode_elem_sep boolean remove concode_elem_sep Object singleElement concode_elem_sep Iterator4 iterator concode_elem_sep void removeAll concode_elem_sep void removeAll concode_elem_sep List4 find concode_elem_sep void assertNotNull concode_elem_sep Object get concode_elem_sep Object get concode_elem_sep void replaceByIdentity concode_elem_sep Object[] toArray concode_elem_sep Object[] toArray concode_elem_sep void adjustOnRemoval concode_elem_sep int indexOf concode_elem_sep void doPrepend concode_elem_sep List4 findByIdentity concode_elem_sep boolean add concode_elem_sep void doAdd concode_elem_sep boolean containsAll concode_elem_sep void clear concode_elem_sep boolean isEmpty concode_elem_sep int version concode_elem_sep boolean contains concode_elem_sep int size concode_elem_sep void addAll concode_elem_sep void addAll concode_elem_sep void addAll concode_elem_sep Object deepClone concode_elem_sep boolean containsByIdentity concode_elem_sep String toString concode_elem_sep Iterator4 internalIterator concode_elem_sep void changed", "code_tokens": ["Object", "function", "(", "Object", "arg0", ")", "{", "List4", "loc0", "=", "find", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "add", "(", "arg0", ")", ";", "return", "arg0", ";", "}", "return", "loc0", ".", "_element", ";", "}"], "nl_tokens": ["makes", "sure", "the", "passed", "object", "is", "in", "the", "collection", ".", "equals", "comparison", ".", "concode_field_sep", "int", "_size", "concode_elem_sep", "List4", "_last", "concode_elem_sep", "List4", "_first", "concode_elem_sep", "int", "_version", "concode_field_sep", "void", "prepend", "concode_elem_sep", "void", "replace", "concode_elem_sep", "boolean", "remove", "concode_elem_sep", "Object", "singleElement", "concode_elem_sep", "Iterator4", "iterator", "concode_elem_sep", "void", "removeAll", "concode_elem_sep", "void", "removeAll", "concode_elem_sep", "List4", "find", "concode_elem_sep", "void", "assertNotNull", "concode_elem_sep", "Object", "get", "concode_elem_sep", "Object", "get", "concode_elem_sep", "void", "replaceByIdentity", "concode_elem_sep", "Object", "[", "]", "toArray", "concode_elem_sep", "Object", "[", "]", "toArray", "concode_elem_sep", "void", "adjustOnRemoval", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "void", "doPrepend", "concode_elem_sep", "List4", "findByIdentity", "concode_elem_sep", "boolean", "add", "concode_elem_sep", "void", "doAdd", "concode_elem_sep", "boolean", "containsAll", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "int", "version", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "int", "size", "concode_elem_sep", "void", "addAll", "concode_elem_sep", "void", "addAll", "concode_elem_sep", "void", "addAll", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "boolean", "containsByIdentity", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Iterator4", "internalIterator", "concode_elem_sep", "void", "changed"]}
{"code": "AxisAlignedBoundingBoxXZ function ( ) { if ( fileBoundary != null ) { return fileBoundary ; } else { return dataBoundary ; } }", "nl": "returns a boundary based on the bounds in the input file if available , otherwise returns the same as #getdataboundary concode_field_sep AxisAlignedBoundingBoxXZ fileBoundary concode_elem_sep AxisAlignedBoundingBoxXZ dataBoundary concode_elem_sep List<MapWaySegment> mapWaySegments concode_elem_sep List<MapArea> mapAreas concode_elem_sep List<MapNode> mapNodes concode_field_sep VectorXZ getCenter concode_elem_sep AxisAlignedBoundingBoxXZ getDataBoundary concode_elem_sep Iterable<MapElement> getMapElements concode_elem_sep Collection<MapWaySegment> getMapWaySegments concode_elem_sep void calculateDataBoundary concode_elem_sep Iterable<WorldObject> getWorldObjects concode_elem_sep Iterable<T> getWorldObjects concode_elem_sep Collection<MapArea> getMapAreas concode_elem_sep Collection<MapNode> getMapNodes", "code_tokens": ["AxisAlignedBoundingBoxXZ", "function", "(", ")", "{", "if", "(", "fileBoundary", "!=", "null", ")", "{", "return", "fileBoundary", ";", "}", "else", "{", "return", "dataBoundary", ";", "}", "}"], "nl_tokens": ["returns", "a", "boundary", "based", "on", "the", "bounds", "in", "the", "input", "file", "if", "available", ",", "otherwise", "returns", "the", "same", "as", "#getdataboundary concode_field_sep AxisAlignedBoundingBoxXZ fileBoundary concode_elem_sep AxisAlignedBoundingBoxXZ dataBoundary concode_elem_sep List<MapWaySegment> mapWaySegments concode_elem_sep List<MapArea> mapAreas concode_elem_sep List<MapNode> mapNodes concode_field_sep VectorXZ getCenter concode_elem_sep AxisAlignedBoundingBoxXZ getDataBoundary concode_elem_sep Iterable<MapElement> getMapElements concode_elem_sep Collection<MapWaySegment> getMapWaySegments concode_elem_sep void calculateDataBoundary concode_elem_sep Iterable<WorldObject> getWorldObjects concode_elem_sep Iterable<T> getWorldObjects concode_elem_sep Collection<MapArea> getMapAreas concode_elem_sep Collection<MapNode> getMapNodes"]}
{"code": "void function ( int arg0 ) { this . level = arg0 ; }", "nl": "set level of section . concode_field_sep List<Section> subsections concode_elem_sep Section parent concode_elem_sep List<Sentence> headerContent concode_elem_sep int level concode_elem_sep List<ListBlock> lists concode_elem_sep List<Paragraph> paragraphs concode_field_sep void appendListElement concode_elem_sep ListBlock getListBlock concode_elem_sep int getNumberOfLists concode_elem_sep int getHeaderContentsListSize concode_elem_sep Paragraph getParagraph concode_elem_sep void appendSubSection concode_elem_sep Sentence getHeaderContent concode_elem_sep int getNumberOfSubsections concode_elem_sep Section getParentSection concode_elem_sep int getLevel concode_elem_sep List<Paragraph> getParagraphs concode_elem_sep int getNumberOfParagraphs concode_elem_sep List<ListBlock> getListBlocks concode_elem_sep void setParentSection concode_elem_sep List<Sentence> getHeaderContents concode_elem_sep Section getSubSection concode_elem_sep void appendListBlock concode_elem_sep Sentence getJoinedHeaderContents concode_elem_sep void appendParagraph", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "this", ".", "level", "=", "arg0", ";", "}"], "nl_tokens": ["set", "level", "of", "section", ".", "concode_field_sep", "List", "<", "Section", ">", "subsections", "concode_elem_sep", "Section", "parent", "concode_elem_sep", "List", "<", "Sentence", ">", "headerContent", "concode_elem_sep", "int", "level", "concode_elem_sep", "List", "<", "ListBlock", ">", "lists", "concode_elem_sep", "List", "<", "Paragraph", ">", "paragraphs", "concode_field_sep", "void", "appendListElement", "concode_elem_sep", "ListBlock", "getListBlock", "concode_elem_sep", "int", "getNumberOfLists", "concode_elem_sep", "int", "getHeaderContentsListSize", "concode_elem_sep", "Paragraph", "getParagraph", "concode_elem_sep", "void", "appendSubSection", "concode_elem_sep", "Sentence", "getHeaderContent", "concode_elem_sep", "int", "getNumberOfSubsections", "concode_elem_sep", "Section", "getParentSection", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "List", "<", "Paragraph", ">", "getParagraphs", "concode_elem_sep", "int", "getNumberOfParagraphs", "concode_elem_sep", "List", "<", "ListBlock", ">", "getListBlocks", "concode_elem_sep", "void", "setParentSection", "concode_elem_sep", "List", "<", "Sentence", ">", "getHeaderContents", "concode_elem_sep", "Section", "getSubSection", "concode_elem_sep", "void", "appendListBlock", "concode_elem_sep", "Sentence", "getJoinedHeaderContents", "concode_elem_sep", "void", "appendParagraph"]}
{"code": "char function ( ) { if ( list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return list . get ( list . size ( ) - 1 ) ; }", "nl": "looks at the top of this stack without removing it . concode_field_sep ArrayCharList list concode_field_sep char pop concode_elem_sep int search concode_elem_sep int size concode_elem_sep char get concode_elem_sep void clear concode_elem_sep char push concode_elem_sep boolean empty", "code_tokens": ["char", "function", "(", ")", "{", "if", "(", "list", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "EmptyStackException", "(", ")", ";", "}", "return", "list", ".", "get", "(", "list", ".", "size", "(", ")", "-", "1", ")", ";", "}"], "nl_tokens": ["looks", "at", "the", "top", "of", "this", "stack", "without", "removing", "it", ".", "concode_field_sep", "ArrayCharList", "list", "concode_field_sep", "char", "pop", "concode_elem_sep", "int", "search", "concode_elem_sep", "int", "size", "concode_elem_sep", "char", "get", "concode_elem_sep", "void", "clear", "concode_elem_sep", "char", "push", "concode_elem_sep", "boolean", "empty"]}
{"code": "String function ( ) { return ( this . classInfo ( ) . name ( ) ) ; }", "nl": "returns the name of the class represented by this classeditor . concode_field_sep boolean dirty concode_elem_sep ClassInfo classInfo concode_elem_sep Type[] interfaces concode_elem_sep Type superclass concode_elem_sep EditorContext context concode_elem_sep ConstantPool constants concode_elem_sep Type type concode_elem_sep boolean DEBUG concode_field_sep void setInterface concode_elem_sep void setInterfaces concode_elem_sep boolean isStatic concode_elem_sep boolean isSuper concode_elem_sep MethodInfo[] methods concode_elem_sep void commit concode_elem_sep boolean isPrivate concode_elem_sep Type type concode_elem_sep int modifiers concode_elem_sep void setDirty concode_elem_sep void setFinal concode_elem_sep void setSuper concode_elem_sep boolean isDirty concode_elem_sep boolean isProtected concode_elem_sep Type superclass concode_elem_sep int hashCode concode_elem_sep void setProtected concode_elem_sep EditorContext context concode_elem_sep boolean isPublic concode_elem_sep boolean isFinal concode_elem_sep ConstantPool constants concode_elem_sep boolean isInterface concode_elem_sep ClassInfo classInfo concode_elem_sep void setPublic concode_elem_sep Type[] interfaces concode_elem_sep void addInterface concode_elem_sep void addInterface concode_elem_sep void setStatic concode_elem_sep void setType concode_elem_sep void commitOnly concode_elem_sep boolean isAbstract concode_elem_sep void setSuperclass concode_elem_sep boolean equals concode_elem_sep void setAbstract concode_elem_sep String toString concode_elem_sep void visit concode_elem_sep FieldInfo[] fields concode_elem_sep void setPrivate", "code_tokens": ["String", "function", "(", ")", "{", "return", "(", "this", ".", "classInfo", "(", ")", ".", "name", "(", ")", ")", ";", "}"], "nl_tokens": ["returns", "the", "name", "of", "the", "class", "represented", "by", "this", "classeditor", ".", "concode_field_sep", "boolean", "dirty", "concode_elem_sep", "ClassInfo", "classInfo", "concode_elem_sep", "Type", "[", "]", "interfaces", "concode_elem_sep", "Type", "superclass", "concode_elem_sep", "EditorContext", "context", "concode_elem_sep", "ConstantPool", "constants", "concode_elem_sep", "Type", "type", "concode_elem_sep", "boolean", "DEBUG", "concode_field_sep", "void", "setInterface", "concode_elem_sep", "void", "setInterfaces", "concode_elem_sep", "boolean", "isStatic", "concode_elem_sep", "boolean", "isSuper", "concode_elem_sep", "MethodInfo", "[", "]", "methods", "concode_elem_sep", "void", "commit", "concode_elem_sep", "boolean", "isPrivate", "concode_elem_sep", "Type", "type", "concode_elem_sep", "int", "modifiers", "concode_elem_sep", "void", "setDirty", "concode_elem_sep", "void", "setFinal", "concode_elem_sep", "void", "setSuper", "concode_elem_sep", "boolean", "isDirty", "concode_elem_sep", "boolean", "isProtected", "concode_elem_sep", "Type", "superclass", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "void", "setProtected", "concode_elem_sep", "EditorContext", "context", "concode_elem_sep", "boolean", "isPublic", "concode_elem_sep", "boolean", "isFinal", "concode_elem_sep", "ConstantPool", "constants", "concode_elem_sep", "boolean", "isInterface", "concode_elem_sep", "ClassInfo", "classInfo", "concode_elem_sep", "void", "setPublic", "concode_elem_sep", "Type", "[", "]", "interfaces", "concode_elem_sep", "void", "addInterface", "concode_elem_sep", "void", "addInterface", "concode_elem_sep", "void", "setStatic", "concode_elem_sep", "void", "setType", "concode_elem_sep", "void", "commitOnly", "concode_elem_sep", "boolean", "isAbstract", "concode_elem_sep", "void", "setSuperclass", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "setAbstract", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "visit", "concode_elem_sep", "FieldInfo", "[", "]", "fields", "concode_elem_sep", "void", "setPrivate"]}
{"code": "String function ( String arg0 , String arg1 ) { StringBuffer loc0 = new StringBuffer ( ) ; loc0 . append ( arg0 ) ; loc0 . append ( \"srini_string\" ) ; for ( int loc1 = 0 ; loc1 <= N ; loc1 ++ ) { loc0 . append ( variable ( loc1 ) ) ; if ( loc1 < N ) { loc0 . append ( \"srini_string\" ) ; } } loc0 . append ( \"srini_string\" ) ; loc0 . append ( arg1 ) ; return loc0 . toString ( ) ; }", "nl": "generate variable list . concode_field_sep String var concode_elem_sep int N concode_elem_sep String order concode_field_sep String sum1 concode_elem_sep String polyList concode_elem_sep String sumUm concode_elem_sep String variable concode_elem_sep void main concode_elem_sep String toString", "code_tokens": ["String", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "StringBuffer", "loc0", "=", "new", "StringBuffer", "(", ")", ";", "loc0", ".", "append", "(", "arg0", ")", ";", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<=", "N", ";", "loc1", "+", "+", ")", "{", "loc0", ".", "append", "(", "variable", "(", "loc1", ")", ")", ";", "if", "(", "loc1", "<", "N", ")", "{", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "}", "}", "loc0", ".", "append", "(", "\"srini_string\"", ")", ";", "loc0", ".", "append", "(", "arg1", ")", ";", "return", "loc0", ".", "toString", "(", ")", ";", "}"], "nl_tokens": ["generate", "variable", "list", ".", "concode_field_sep", "String", "var", "concode_elem_sep", "int", "N", "concode_elem_sep", "String", "order", "concode_field_sep", "String", "sum1", "concode_elem_sep", "String", "polyList", "concode_elem_sep", "String", "sumUm", "concode_elem_sep", "String", "variable", "concode_elem_sep", "void", "main", "concode_elem_sep", "String", "toString"]}
{"code": "Local < C > function ( ) { return new Local < C > ( ring , num . abs ( ) , den , true ) ; }", "nl": "local absolute value . concode_field_sep Logger logger concode_elem_sep LocalRing<C> ring concode_elem_sep boolean debug concode_elem_sep C num concode_elem_sep int isunit concode_elem_sep C den concode_field_sep int signum concode_elem_sep boolean isONE concode_elem_sep Local<C> inverse concode_elem_sep boolean isUnit concode_elem_sep Local<C> subtract concode_elem_sep Local<C> gcd concode_elem_sep Local<C> sum concode_elem_sep int compareTo concode_elem_sep Local<C>[] egcd concode_elem_sep int hashCode concode_elem_sep Local<C> negate concode_elem_sep boolean equals concode_elem_sep Local<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep Local<C> divide concode_elem_sep Local<C> multiply concode_elem_sep Local<C> remainder", "code_tokens": ["Local", "<", "C", ">", "function", "(", ")", "{", "return", "new", "Local", "<", "C", ">", "(", "ring", ",", "num", ".", "abs", "(", ")", ",", "den", ",", "true", ")", ";", "}"], "nl_tokens": ["local", "absolute", "value", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "LocalRing", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "C", "num", "concode_elem_sep", "int", "isunit", "concode_elem_sep", "C", "den", "concode_field_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "Local", "<", "C", ">", "inverse", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "Local", "<", "C", ">", "subtract", "concode_elem_sep", "Local", "<", "C", ">", "gcd", "concode_elem_sep", "Local", "<", "C", ">", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Local", "<", "C", ">", "[", "]", "egcd", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Local", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Local", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Local", "<", "C", ">", "divide", "concode_elem_sep", "Local", "<", "C", ">", "multiply", "concode_elem_sep", "Local", "<", "C", ">", "remainder"]}
{"code": "Expr function ( int arg0 ) { for ( int loc0 = stack . size ( ) - 1 ; loc0 >= 0 ; loc0 -- ) { final Expr loc1 = ( Expr ) stack . get ( loc0 ) ; if ( arg0 == 0 ) { return loc1 ; } arg0 -= loc1 . type ( ) . stackHeight ( ) ; } throw new IllegalArgumentException ( \"srini_string\" ) ; }", "nl": "get the expression that is depth expressions from the top of the stack , but do not modify the stack . concode_field_sep ArrayList stack concode_elem_sep int height concode_field_sep Expr pop concode_elem_sep void set concode_elem_sep Expr pop1 concode_elem_sep int size concode_elem_sep Expr[] pop2 concode_elem_sep Expr get concode_elem_sep boolean isEmpty concode_elem_sep void replace concode_elem_sep String toString concode_elem_sep void push concode_elem_sep int height", "code_tokens": ["Expr", "function", "(", "int", "arg0", ")", "{", "for", "(", "int", "loc0", "=", "stack", ".", "size", "(", ")", "-", "1", ";", "loc0", ">=", "0", ";", "loc0", "-", "-", ")", "{", "final", "Expr", "loc1", "=", "(", "Expr", ")", "stack", ".", "get", "(", "loc0", ")", ";", "if", "(", "arg0", "==", "0", ")", "{", "return", "loc1", ";", "}", "arg0", "-=", "loc1", ".", "type", "(", ")", ".", "stackHeight", "(", ")", ";", "}", "throw", "new", "IllegalArgumentException", "(", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["get", "the", "expression", "that", "is", "depth", "expressions", "from", "the", "top", "of", "the", "stack", ",", "but", "do", "not", "modify", "the", "stack", ".", "concode_field_sep", "ArrayList", "stack", "concode_elem_sep", "int", "height", "concode_field_sep", "Expr", "pop", "concode_elem_sep", "void", "set", "concode_elem_sep", "Expr", "pop1", "concode_elem_sep", "int", "size", "concode_elem_sep", "Expr", "[", "]", "pop2", "concode_elem_sep", "Expr", "get", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "void", "replace", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "push", "concode_elem_sep", "int", "height"]}
{"code": "Iterator function ( FloatIterator arg0 ) { return null == arg0 ? null : new FloatIteratorIterator ( arg0 ) ; }", "nl": "create an iterator iterator wrappingthe specified floatiterator floatiterator . when the given iterator is null , returns null . concode_field_sep FloatIterator _iterator concode_field_sep Object next concode_elem_sep boolean hasNext concode_elem_sep void remove", "code_tokens": ["Iterator", "function", "(", "FloatIterator", "arg0", ")", "{", "return", "null", "==", "arg0", "?", "null", ":", "new", "FloatIteratorIterator", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "an", "iterator", "iterator", "wrappingthe", "specified", "floatiterator", "floatiterator", ".", "when", "the", "given", "iterator", "is", "null", ",", "returns", "null", ".", "concode_field_sep", "FloatIterator", "_iterator", "concode_field_sep", "Object", "next", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "remove"]}
{"code": "void function ( final String arg0 , final String arg1 ) { fileCopyIfExist ( arg0 , arg1 , false ) ; }", "nl": "copy a file if the source exist . concode_field_sep int BUFSIZE concode_elem_sep Logger LOG concode_elem_sep ThreadLocal cwd_ concode_field_sep void mkLink concode_elem_sep void mkLink concode_elem_sep void fileCopy concode_elem_sep void warn concode_elem_sep String calcRelativeLink concode_elem_sep void debug concode_elem_sep String getArtifact concode_elem_sep String run concode_elem_sep void setCwd concode_elem_sep String mavenCopy concode_elem_sep void error concode_elem_sep void info", "code_tokens": ["void", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ")", "{", "fileCopyIfExist", "(", "arg0", ",", "arg1", ",", "false", ")", ";", "}"], "nl_tokens": ["copy", "a", "file", "if", "the", "source", "exist", ".", "concode_field_sep", "int", "BUFSIZE", "concode_elem_sep", "Logger", "LOG", "concode_elem_sep", "ThreadLocal", "cwd_", "concode_field_sep", "void", "mkLink", "concode_elem_sep", "void", "mkLink", "concode_elem_sep", "void", "fileCopy", "concode_elem_sep", "void", "warn", "concode_elem_sep", "String", "calcRelativeLink", "concode_elem_sep", "void", "debug", "concode_elem_sep", "String", "getArtifact", "concode_elem_sep", "String", "run", "concode_elem_sep", "void", "setCwd", "concode_elem_sep", "String", "mavenCopy", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "info"]}
{"code": "Comparator function ( Comparator arg0 , Comparator arg1 ) { return chainedComparator ( new Comparator [ ] { arg0 , arg1 } ) ; }", "nl": "gets a comparator that compares using two comparator s . the second comparator is used if the first comparator returns equal . concode_field_sep Comparator NATURAL_COMPARATOR concode_field_sep Comparator transformedComparator concode_elem_sep Object min concode_elem_sep Comparator reversedComparator concode_elem_sep Object max concode_elem_sep Comparator naturalComparator concode_elem_sep Comparator booleanComparator concode_elem_sep Comparator nullHighComparator concode_elem_sep Comparator nullLowComparator", "code_tokens": ["Comparator", "function", "(", "Comparator", "arg0", ",", "Comparator", "arg1", ")", "{", "return", "chainedComparator", "(", "new", "Comparator", "[", "]", "{", "arg0", ",", "arg1", "}", ")", ";", "}"], "nl_tokens": ["gets", "a", "comparator", "that", "compares", "using", "two", "comparator", "s", ".", "the", "second", "comparator", "is", "used", "if", "the", "first", "comparator", "returns", "equal", ".", "concode_field_sep", "Comparator", "NATURAL_COMPARATOR", "concode_field_sep", "Comparator", "transformedComparator", "concode_elem_sep", "Object", "min", "concode_elem_sep", "Comparator", "reversedComparator", "concode_elem_sep", "Object", "max", "concode_elem_sep", "Comparator", "naturalComparator", "concode_elem_sep", "Comparator", "booleanComparator", "concode_elem_sep", "Comparator", "nullHighComparator", "concode_elem_sep", "Comparator", "nullLowComparator"]}
{"code": "int function ( ) { return ( int ) Math . round ( Math . min ( y1 , y2 ) ) ; }", "nl": "gets the topmost y-position of the line . concode_field_sep double y1 concode_elem_sep double x1 concode_elem_sep double y2 concode_elem_sep double x2 concode_elem_sep Color color concode_field_sep int getX concode_elem_sep int getHeight concode_elem_sep void grow concode_elem_sep void setColor concode_elem_sep String toString concode_elem_sep int getWidth concode_elem_sep void draw concode_elem_sep void translate concode_elem_sep void paintShape", "code_tokens": ["int", "function", "(", ")", "{", "return", "(", "int", ")", "Math", ".", "round", "(", "Math", ".", "min", "(", "y1", ",", "y2", ")", ")", ";", "}"], "nl_tokens": ["gets", "the", "topmost", "y", "-", "position", "of", "the", "line", ".", "concode_field_sep", "double", "y1", "concode_elem_sep", "double", "x1", "concode_elem_sep", "double", "y2", "concode_elem_sep", "double", "x2", "concode_elem_sep", "Color", "color", "concode_field_sep", "int", "getX", "concode_elem_sep", "int", "getHeight", "concode_elem_sep", "void", "grow", "concode_elem_sep", "void", "setColor", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "getWidth", "concode_elem_sep", "void", "draw", "concode_elem_sep", "void", "translate", "concode_elem_sep", "void", "paintShape"]}
{"code": "void function ( Subpath arg0 ) { subpaths . add ( arg0 ) ; currentPoint = arg0 . getLastPoint ( ) ; }", "nl": "adds the subpath to this path . concode_field_sep List<Subpath> subpaths concode_elem_sep String START_PATH_ERR_MSG concode_elem_sep Point2D currentPoint concode_field_sep Point2D getCurrentPoint concode_elem_sep void curveTo concode_elem_sep void curveTo concode_elem_sep boolean isEmpty concode_elem_sep Subpath getLastSubpath concode_elem_sep List<Subpath> getSubpaths concode_elem_sep void lineTo concode_elem_sep void closeSubpath concode_elem_sep void addSubpaths concode_elem_sep List<Integer> replaceCloseWithLine concode_elem_sep void closeAllSubpaths concode_elem_sep void rectangle concode_elem_sep void curveFromTo concode_elem_sep void moveTo", "code_tokens": ["void", "function", "(", "Subpath", "arg0", ")", "{", "subpaths", ".", "add", "(", "arg0", ")", ";", "currentPoint", "=", "arg0", ".", "getLastPoint", "(", ")", ";", "}"], "nl_tokens": ["adds", "the", "subpath", "to", "this", "path", ".", "concode_field_sep", "List", "<", "Subpath", ">", "subpaths", "concode_elem_sep", "String", "START_PATH_ERR_MSG", "concode_elem_sep", "Point2D", "currentPoint", "concode_field_sep", "Point2D", "getCurrentPoint", "concode_elem_sep", "void", "curveTo", "concode_elem_sep", "void", "curveTo", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "Subpath", "getLastSubpath", "concode_elem_sep", "List", "<", "Subpath", ">", "getSubpaths", "concode_elem_sep", "void", "lineTo", "concode_elem_sep", "void", "closeSubpath", "concode_elem_sep", "void", "addSubpaths", "concode_elem_sep", "List", "<", "Integer", ">", "replaceCloseWithLine", "concode_elem_sep", "void", "closeAllSubpaths", "concode_elem_sep", "void", "rectangle", "concode_elem_sep", "void", "curveFromTo", "concode_elem_sep", "void", "moveTo"]}
{"code": "boolean function ( ) { return ( this . useContextClassLoader ) ; }", "nl": "return the `` use context class loader '' flag . if set to true , digester will attempt to instantiate new command and chain instances from the context class loader . concode_field_sep boolean useContextClassLoader concode_elem_sep RuleSet ruleSet concode_elem_sep Digester digester concode_field_sep Digester getDigester concode_elem_sep void setRuleSet concode_elem_sep RuleSet getRuleSet concode_elem_sep void parse concode_elem_sep void parse concode_elem_sep void setUseContextClassLoader", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "(", "this", ".", "useContextClassLoader", ")", ";", "}"], "nl_tokens": ["return", "the", "`", "`", "use", "context", "class", "loader", "''", "flag", ".", "if", "set", "to", "true", ",", "digester", "will", "attempt", "to", "instantiate", "new", "command", "and", "chain", "instances", "from", "the", "context", "class", "loader", ".", "concode_field_sep", "boolean", "useContextClassLoader", "concode_elem_sep", "RuleSet", "ruleSet", "concode_elem_sep", "Digester", "digester", "concode_field_sep", "Digester", "getDigester", "concode_elem_sep", "void", "setRuleSet", "concode_elem_sep", "RuleSet", "getRuleSet", "concode_elem_sep", "void", "parse", "concode_elem_sep", "void", "parse", "concode_elem_sep", "void", "setUseContextClassLoader"]}
{"code": "void function ( Display arg0 ) { while ( ! arg0 . isDisposed ( ) ) { try { new DisplayReference ( arg0 ) . execute ( new Callable < Boolean > ( ) { public Boolean call ( ) throws Exception { return true ; } } , 30000 ) ; break ; } catch ( Throwable loc0 ) { continue ; } } }", "nl": "this method verifies and ensures display initialization . verification is based on synchronous execution of empty runnable . concode_field_sep ArrayList<IDisplayIntrospectionListener> listeners concode_elem_sep ThreadGroup root concode_elem_sep long retryTime concode_field_sep Display findDisplay concode_elem_sep Display doRun concode_elem_sep Display syncIntrospect concode_elem_sep void removeIntrospectionListener concode_elem_sep void run concode_elem_sep void asyncIntrospect concode_elem_sep Display visit concode_elem_sep void addIntrospectionListener", "code_tokens": ["void", "function", "(", "Display", "arg0", ")", "{", "while", "(", "!", "arg0", ".", "isDisposed", "(", ")", ")", "{", "try", "{", "new", "DisplayReference", "(", "arg0", ")", ".", "execute", "(", "new", "Callable", "<", "Boolean", ">", "(", ")", "{", "public", "Boolean", "call", "(", ")", "throws", "Exception", "{", "return", "true", ";", "}", "}", ",", "30000", ")", ";", "break", ";", "}", "catch", "(", "Throwable", "loc0", ")", "{", "continue", ";", "}", "}", "}"], "nl_tokens": ["this", "method", "verifies", "and", "ensures", "display", "initialization", ".", "verification", "is", "based", "on", "synchronous", "execution", "of", "empty", "runnable", ".", "concode_field_sep", "ArrayList", "<", "IDisplayIntrospectionListener", ">", "listeners", "concode_elem_sep", "ThreadGroup", "root", "concode_elem_sep", "long", "retryTime", "concode_field_sep", "Display", "findDisplay", "concode_elem_sep", "Display", "doRun", "concode_elem_sep", "Display", "syncIntrospect", "concode_elem_sep", "void", "removeIntrospectionListener", "concode_elem_sep", "void", "run", "concode_elem_sep", "void", "asyncIntrospect", "concode_elem_sep", "Display", "visit", "concode_elem_sep", "void", "addIntrospectionListener"]}
{"code": "void function ( double arg0 ) { this . torusDimensionSize = arg0 ; this . halfTorusDimensionSize = arg0 * 0.5d ; }", "nl": "to be set by the configurator . concode_field_sep RandomGenerator rand concode_elem_sep double torusDimensionSize concode_elem_sep int noOfDimensions concode_elem_sep double halfTorusDimensionSize concode_elem_sep double[] rawPos concode_field_sep double getDistance concode_elem_sep NetPosition getPosition concode_elem_sep void writeBackToXML concode_elem_sep void setNoOfDimensions concode_elem_sep double[] getRawTorusPositionFor concode_elem_sep double[] getRawPos", "code_tokens": ["void", "function", "(", "double", "arg0", ")", "{", "this", ".", "torusDimensionSize", "=", "arg0", ";", "this", ".", "halfTorusDimensionSize", "=", "arg0", "*", "0.5", "d", ";", "}"], "nl_tokens": ["to", "be", "set", "by", "the", "configurator", ".", "concode_field_sep", "RandomGenerator", "rand", "concode_elem_sep", "double", "torusDimensionSize", "concode_elem_sep", "int", "noOfDimensions", "concode_elem_sep", "double", "halfTorusDimensionSize", "concode_elem_sep", "double", "[", "]", "rawPos", "concode_field_sep", "double", "getDistance", "concode_elem_sep", "NetPosition", "getPosition", "concode_elem_sep", "void", "writeBackToXML", "concode_elem_sep", "void", "setNoOfDimensions", "concode_elem_sep", "double", "[", "]", "getRawTorusPositionFor", "concode_elem_sep", "double", "[", "]", "getRawPos"]}
{"code": "void function ( Object arg0 ) { if ( isLevelEnabled ( MemoryLog . LOG_LEVEL_TRACE ) ) { log ( MemoryLog . LOG_LEVEL_TRACE , arg0 , null ) ; } }", "nl": "log a message with trace log level . concode_field_sep Date date concode_elem_sep int LOG_LEVEL_DEBUG concode_elem_sep int level concode_elem_sep Throwable throwable concode_elem_sep List logEntries concode_elem_sep int LOG_LEVEL_OFF concode_elem_sep Object message concode_elem_sep int LOG_LEVEL_WARN concode_elem_sep int LOG_LEVEL_TRACE concode_elem_sep int LOG_LEVEL_ERROR concode_elem_sep int LOG_LEVEL_INFO concode_elem_sep String logName concode_elem_sep String name concode_elem_sep int LOG_LEVEL_FATAL concode_elem_sep int LOG_LEVEL_ALL concode_elem_sep int currentLogLevel concode_field_sep void debug concode_elem_sep void debug concode_elem_sep void log concode_elem_sep Object getMessage concode_elem_sep boolean isLevelEnabled concode_elem_sep boolean isWarnEnabled concode_elem_sep void error concode_elem_sep void error concode_elem_sep boolean isFatalEnabled concode_elem_sep void setLevel concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep String getLogName concode_elem_sep int getLevel concode_elem_sep int getLevel concode_elem_sep void warn concode_elem_sep void warn concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep void reset concode_elem_sep boolean isTraceEnabled concode_elem_sep Date getDate concode_elem_sep boolean isDebugEnabled concode_elem_sep Throwable getThrowable concode_elem_sep List getLogEntries concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["void", "function", "(", "Object", "arg0", ")", "{", "if", "(", "isLevelEnabled", "(", "MemoryLog", ".", "LOG_LEVEL_TRACE", ")", ")", "{", "log", "(", "MemoryLog", ".", "LOG_LEVEL_TRACE", ",", "arg0", ",", "null", ")", ";", "}", "}"], "nl_tokens": ["log", "a", "message", "with", "trace", "log", "level", ".", "concode_field_sep", "Date", "date", "concode_elem_sep", "int", "LOG_LEVEL_DEBUG", "concode_elem_sep", "int", "level", "concode_elem_sep", "Throwable", "throwable", "concode_elem_sep", "List", "logEntries", "concode_elem_sep", "int", "LOG_LEVEL_OFF", "concode_elem_sep", "Object", "message", "concode_elem_sep", "int", "LOG_LEVEL_WARN", "concode_elem_sep", "int", "LOG_LEVEL_TRACE", "concode_elem_sep", "int", "LOG_LEVEL_ERROR", "concode_elem_sep", "int", "LOG_LEVEL_INFO", "concode_elem_sep", "String", "logName", "concode_elem_sep", "String", "name", "concode_elem_sep", "int", "LOG_LEVEL_FATAL", "concode_elem_sep", "int", "LOG_LEVEL_ALL", "concode_elem_sep", "int", "currentLogLevel", "concode_field_sep", "void", "debug", "concode_elem_sep", "void", "debug", "concode_elem_sep", "void", "log", "concode_elem_sep", "Object", "getMessage", "concode_elem_sep", "boolean", "isLevelEnabled", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "error", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "setLevel", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "String", "getLogName", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "warn", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "void", "reset", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "Throwable", "getThrowable", "concode_elem_sep", "List", "getLogEntries", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "int function ( ImageInputStream arg0 ) { int loc0 = arg0 . readUnsignedShort ( ) ; return ( ( loc0 & 0xf800 ) << 8 ) | ( ( loc0 & 0x3800 ) << 5 ) | ( ( loc0 & 0x07e0 ) << 5 ) | ( ( loc0 & 0x0060 ) << 3 ) | ( ( loc0 & 0x001f ) << 3 ) | ( ( loc0 & 0x0007 ) ) ; }", "nl": "reads 16-bit rgb and converts it to 24-bit rgb . endian is defined by input stream . concode_field_sep byte[] byteBuf concode_field_sep void writeInt24LE concode_elem_sep void readRGBs555to24 concode_elem_sep void readInts24LE concode_elem_sep void writeInts24LE concode_elem_sep void readRGBs565to24 concode_elem_sep void writeInts24 concode_elem_sep int readInt24LE concode_elem_sep int readRGB555to24 concode_elem_sep void readRGBs555to24LE concode_elem_sep int readRGB555to24LE concode_elem_sep void writeInt24", "code_tokens": ["int", "function", "(", "ImageInputStream", "arg0", ")", "{", "int", "loc0", "=", "arg0", ".", "readUnsignedShort", "(", ")", ";", "return", "(", "(", "loc0", "&", "0xf800", ")", "<<", "8", ")", "|", "(", "(", "loc0", "&", "0x3800", ")", "<<", "5", ")", "|", "(", "(", "loc0", "&", "0x07e0", ")", "<<", "5", ")", "|", "(", "(", "loc0", "&", "0x0060", ")", "<<", "3", ")", "|", "(", "(", "loc0", "&", "0x001f", ")", "<<", "3", ")", "|", "(", "(", "loc0", "&", "0x0007", ")", ")", ";", "}"], "nl_tokens": ["reads", "16", "-", "bit", "rgb", "and", "converts", "it", "to", "24", "-", "bit", "rgb", ".", "endian", "is", "defined", "by", "input", "stream", ".", "concode_field_sep", "byte", "[", "]", "byteBuf", "concode_field_sep", "void", "writeInt24LE", "concode_elem_sep", "void", "readRGBs555to24", "concode_elem_sep", "void", "readInts24LE", "concode_elem_sep", "void", "writeInts24LE", "concode_elem_sep", "void", "readRGBs565to24", "concode_elem_sep", "void", "writeInts24", "concode_elem_sep", "int", "readInt24LE", "concode_elem_sep", "int", "readRGB555to24", "concode_elem_sep", "void", "readRGBs555to24LE", "concode_elem_sep", "int", "readRGB555to24LE", "concode_elem_sep", "void", "writeInt24"]}
{"code": "Object function ( Object arg0 ) { iClosure . execute ( arg0 ) ; return arg0 ; }", "nl": "transforms the input to result by executing a closure . concode_field_sep long serialVersionUID concode_elem_sep Closure iClosure concode_field_sep Closure getClosure concode_elem_sep Transformer getInstance", "code_tokens": ["Object", "function", "(", "Object", "arg0", ")", "{", "iClosure", ".", "execute", "(", "arg0", ")", ";", "return", "arg0", ";", "}"], "nl_tokens": ["transforms", "the", "input", "to", "result", "by", "executing", "a", "closure", ".", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "Closure", "iClosure", "concode_field_sep", "Closure", "getClosure", "concode_elem_sep", "Transformer", "getInstance"]}
{"code": "Reflector function ( ) { return _delegate ; }", "nl": "returns delegate reflector concode_field_sep GenericArrayReflector _array concode_elem_sep Collection4 _collectionPredicates concode_elem_sep Hashtable4 _classByClass concode_elem_sep ObjectContainerBase _stream concode_elem_sep KnownClassesRepository _repository concode_elem_sep Transaction _trans concode_elem_sep Reflector _delegate concode_field_sep void setTransaction concode_elem_sep void registerCollection concode_elem_sep void registerCollection concode_elem_sep ReflectClass forName concode_elem_sep ReflectClass[] knownClasses concode_elem_sep void configuration concode_elem_sep GenericClass ensureDelegate concode_elem_sep GenericClass genericClass concode_elem_sep boolean isCollection concode_elem_sep ReflectClassPredicate classPredicate concode_elem_sep void registerPrimitiveClass concode_elem_sep boolean hasTransaction concode_elem_sep ReflectArray array concode_elem_sep Object deepClone concode_elem_sep ReflectClass forClass concode_elem_sep ReflectClass forGenericObject concode_elem_sep ObjectContainerBase getStream concode_elem_sep ReflectClass forObject concode_elem_sep void setParent concode_elem_sep T withLock concode_elem_sep void register", "code_tokens": ["Reflector", "function", "(", ")", "{", "return", "_delegate", ";", "}"], "nl_tokens": ["returns", "delegate", "reflector", "concode_field_sep", "GenericArrayReflector", "_array", "concode_elem_sep", "Collection4", "_collectionPredicates", "concode_elem_sep", "Hashtable4", "_classByClass", "concode_elem_sep", "ObjectContainerBase", "_stream", "concode_elem_sep", "KnownClassesRepository", "_repository", "concode_elem_sep", "Transaction", "_trans", "concode_elem_sep", "Reflector", "_delegate", "concode_field_sep", "void", "setTransaction", "concode_elem_sep", "void", "registerCollection", "concode_elem_sep", "void", "registerCollection", "concode_elem_sep", "ReflectClass", "forName", "concode_elem_sep", "ReflectClass", "[", "]", "knownClasses", "concode_elem_sep", "void", "configuration", "concode_elem_sep", "GenericClass", "ensureDelegate", "concode_elem_sep", "GenericClass", "genericClass", "concode_elem_sep", "boolean", "isCollection", "concode_elem_sep", "ReflectClassPredicate", "classPredicate", "concode_elem_sep", "void", "registerPrimitiveClass", "concode_elem_sep", "boolean", "hasTransaction", "concode_elem_sep", "ReflectArray", "array", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "ReflectClass", "forClass", "concode_elem_sep", "ReflectClass", "forGenericObject", "concode_elem_sep", "ObjectContainerBase", "getStream", "concode_elem_sep", "ReflectClass", "forObject", "concode_elem_sep", "void", "setParent", "concode_elem_sep", "T", "withLock", "concode_elem_sep", "void", "register"]}
{"code": "boolean function ( UserTransaction arg0 ) { return isCommitted ( getStatus ( arg0 ) ) ; }", "nl": "does the status code obtained from the given usertransaction indicate a commit ? concode_field_sep PlaceHolder placeHolder concode_field_sep boolean isRollback concode_elem_sep boolean isRollback concode_elem_sep boolean isRollback concode_elem_sep boolean isMarkedForRollback concode_elem_sep int getStatus concode_elem_sep int getStatus concode_elem_sep boolean isActive concode_elem_sep boolean isActive concode_elem_sep boolean isActive", "code_tokens": ["boolean", "function", "(", "UserTransaction", "arg0", ")", "{", "return", "isCommitted", "(", "getStatus", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["does", "the", "status", "code", "obtained", "from", "the", "given", "usertransaction", "indicate", "a", "commit", "?", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "boolean", "isRollback", "concode_elem_sep", "boolean", "isRollback", "concode_elem_sep", "boolean", "isRollback", "concode_elem_sep", "boolean", "isMarkedForRollback", "concode_elem_sep", "int", "getStatus", "concode_elem_sep", "int", "getStatus", "concode_elem_sep", "boolean", "isActive", "concode_elem_sep", "boolean", "isActive", "concode_elem_sep", "boolean", "isActive"]}
{"code": "DoubleListIterator function ( ListIterator arg0 ) { return null == arg0 ? null : new ListIteratorDoubleListIterator ( arg0 ) ; }", "nl": "create an doublelistiterator doublelistiterator wrappingthe specified listiterator listiterator . when the given iterator is null , returns null . concode_field_sep ListIterator _iterator concode_field_sep double next concode_elem_sep void add concode_elem_sep void set concode_elem_sep double previous concode_elem_sep boolean hasPrevious concode_elem_sep boolean hasNext concode_elem_sep int nextIndex concode_elem_sep int previousIndex concode_elem_sep void remove", "code_tokens": ["DoubleListIterator", "function", "(", "ListIterator", "arg0", ")", "{", "return", "null", "==", "arg0", "?", "null", ":", "new", "ListIteratorDoubleListIterator", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "an", "doublelistiterator", "doublelistiterator", "wrappingthe", "specified", "listiterator", "listiterator", ".", "when", "the", "given", "iterator", "is", "null", ",", "returns", "null", ".", "concode_field_sep", "ListIterator", "_iterator", "concode_field_sep", "double", "next", "concode_elem_sep", "void", "add", "concode_elem_sep", "void", "set", "concode_elem_sep", "double", "previous", "concode_elem_sep", "boolean", "hasPrevious", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "int", "nextIndex", "concode_elem_sep", "int", "previousIndex", "concode_elem_sep", "void", "remove"]}
{"code": "void function ( String arg0 ) { this . syncLevel = arg0 ; }", "nl": "sets the value of the synclevel property . concode_field_sep String syncToken concode_elem_sep Prop prop concode_elem_sep Limit limit concode_elem_sep String syncLevel concode_field_sep String getSyncToken concode_elem_sep void setSyncToken concode_elem_sep Limit getLimit concode_elem_sep String getSyncLevel concode_elem_sep void setLimit concode_elem_sep void setProp concode_elem_sep Prop getProp", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "syncLevel", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "value", "of", "the", "synclevel", "property", ".", "concode_field_sep", "String", "syncToken", "concode_elem_sep", "Prop", "prop", "concode_elem_sep", "Limit", "limit", "concode_elem_sep", "String", "syncLevel", "concode_field_sep", "String", "getSyncToken", "concode_elem_sep", "void", "setSyncToken", "concode_elem_sep", "Limit", "getLimit", "concode_elem_sep", "String", "getSyncLevel", "concode_elem_sep", "void", "setLimit", "concode_elem_sep", "void", "setProp", "concode_elem_sep", "Prop", "getProp"]}
{"code": "void function ( final String [ ] arg0 ) { new ClassInfo ( System . out ) . execute ( arg0 ) ; }", "nl": "entry point to run this examples as a java application . concode_field_sep Analyzer analyzer concode_elem_sep PrintStream out concode_field_sep void visitCoverage concode_elem_sep void execute", "code_tokens": ["void", "function", "(", "final", "String", "[", "]", "arg0", ")", "{", "new", "ClassInfo", "(", "System", ".", "out", ")", ".", "execute", "(", "arg0", ")", ";", "}"], "nl_tokens": ["entry", "point", "to", "run", "this", "examples", "as", "a", "java", "application", ".", "concode_field_sep", "Analyzer", "analyzer", "concode_elem_sep", "PrintStream", "out", "concode_field_sep", "void", "visitCoverage", "concode_elem_sep", "void", "execute"]}
{"code": "K function ( final Predicate < V > arg0 ) { for ( final Map . Entry < K , V > loc0 : kSmallest . entrySet ( ) ) { if ( arg0 . isTrue ( loc0 . getValue ( ) ) ) { return loc0 . getKey ( ) ; } } return null ; }", "nl": "get the minimal key from this map with respect to the preset comparator for which valuepredicate holds for its associated value . concode_field_sep SortedMap<K,V> kSmallest concode_elem_sep int k concode_field_sep boolean containsKey concode_elem_sep Collection<V> values concode_elem_sep void clear concode_elem_sep boolean isInRange concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep V remove concode_elem_sep boolean containsValue concode_elem_sep K getMaxKey concode_elem_sep int size concode_elem_sep K firstKey concode_elem_sep void putAll concode_elem_sep void putAll concode_elem_sep void putAll concode_elem_sep void putAll concode_elem_sep void putAll concode_elem_sep V get concode_elem_sep void setAllValues concode_elem_sep K lastKey concode_elem_sep String toString concode_elem_sep Set<K> keySet", "code_tokens": ["K", "function", "(", "final", "Predicate", "<", "V", ">", "arg0", ")", "{", "for", "(", "final", "Map", ".", "Entry", "<", "K", ",", "V", ">", "loc0", ":", "kSmallest", ".", "entrySet", "(", ")", ")", "{", "if", "(", "arg0", ".", "isTrue", "(", "loc0", ".", "getValue", "(", ")", ")", ")", "{", "return", "loc0", ".", "getKey", "(", ")", ";", "}", "}", "return", "null", ";", "}"], "nl_tokens": ["get", "the", "minimal", "key", "from", "this", "map", "with", "respect", "to", "the", "preset", "comparator", "for", "which", "valuepredicate", "holds", "for", "its", "associated", "value", ".", "concode_field_sep", "SortedMap", "<", "K", ",", "V", ">", "kSmallest", "concode_elem_sep", "int", "k", "concode_field_sep", "boolean", "containsKey", "concode_elem_sep", "Collection", "<", "V", ">", "values", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isInRange", "concode_elem_sep", "boolean", "put", "concode_elem_sep", "boolean", "put", "concode_elem_sep", "boolean", "put", "concode_elem_sep", "V", "remove", "concode_elem_sep", "boolean", "containsValue", "concode_elem_sep", "K", "getMaxKey", "concode_elem_sep", "int", "size", "concode_elem_sep", "K", "firstKey", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "void", "putAll", "concode_elem_sep", "V", "get", "concode_elem_sep", "void", "setAllValues", "concode_elem_sep", "K", "lastKey", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Set", "<", "K", ">", "keySet"]}
{"code": "List < UserAccount > function ( ) { List < UserAccount > loc0 = new ArrayList < > ( ) ; Node loc1 = head ; while ( loc1 != null ) { loc0 . add ( loc1 . userAccount ) ; loc1 = loc1 . next ; } return loc0 ; }", "nl": "returns cache data in list form . concode_field_sep Node next concode_elem_sep Map<String,Node> cache concode_elem_sep Node head concode_elem_sep Node previous concode_elem_sep Logger LOGGER concode_elem_sep UserAccount userAccount concode_elem_sep Node end concode_elem_sep String userId concode_elem_sep int capacity concode_field_sep boolean contains concode_elem_sep void set concode_elem_sep UserAccount getLruData concode_elem_sep UserAccount get concode_elem_sep void setHead concode_elem_sep void clear concode_elem_sep void invalidate concode_elem_sep boolean isFull concode_elem_sep void setCapacity concode_elem_sep void remove", "code_tokens": ["List", "<", "UserAccount", ">", "function", "(", ")", "{", "List", "<", "UserAccount", ">", "loc0", "=", "new", "ArrayList", "<", ">", "(", ")", ";", "Node", "loc1", "=", "head", ";", "while", "(", "loc1", "!=", "null", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "userAccount", ")", ";", "loc1", "=", "loc1", ".", "next", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["returns", "cache", "data", "in", "list", "form", ".", "concode_field_sep", "Node", "next", "concode_elem_sep", "Map", "<", "String", ",", "Node", ">", "cache", "concode_elem_sep", "Node", "head", "concode_elem_sep", "Node", "previous", "concode_elem_sep", "Logger", "LOGGER", "concode_elem_sep", "UserAccount", "userAccount", "concode_elem_sep", "Node", "end", "concode_elem_sep", "String", "userId", "concode_elem_sep", "int", "capacity", "concode_field_sep", "boolean", "contains", "concode_elem_sep", "void", "set", "concode_elem_sep", "UserAccount", "getLruData", "concode_elem_sep", "UserAccount", "get", "concode_elem_sep", "void", "setHead", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "invalidate", "concode_elem_sep", "boolean", "isFull", "concode_elem_sep", "void", "setCapacity", "concode_elem_sep", "void", "remove"]}
{"code": "Change function ( ) { return fChange ; }", "nl": "returns the change used by this operation . this is either the change passed to the constructor or the one create by the createchangeoperation . method returns null if the create operation did not create a corresponding change or has n't been executed yet . concode_field_sep Change fChange concode_elem_sep Change fUndoChange concode_elem_sep boolean fChangeExecutionFailed concode_elem_sep IUndoManager fUndoManager concode_elem_sep boolean fChangeExecuted concode_elem_sep CreateChangeOperation fCreateChangeOperation concode_elem_sep ISchedulingRule fSchedulingRule concode_elem_sep RefactoringStatus fValidationStatus concode_elem_sep String fUndoName concode_field_sep RefactoringStatus getConditionCheckingStatus concode_elem_sep boolean changeExecutionFailed concode_elem_sep Change getUndoChange concode_elem_sep boolean createChange concode_elem_sep void setUndoManager concode_elem_sep void run concode_elem_sep void executeChange concode_elem_sep void setSchedulingRule concode_elem_sep boolean changeExecuted concode_elem_sep RefactoringStatus getValidationStatus", "code_tokens": ["Change", "function", "(", ")", "{", "return", "fChange", ";", "}"], "nl_tokens": ["returns", "the", "change", "used", "by", "this", "operation", ".", "this", "is", "either", "the", "change", "passed", "to", "the", "constructor", "or", "the", "one", "create", "by", "the", "createchangeoperation", ".", "method", "returns", "null", "if", "the", "create", "operation", "did", "not", "create", "a", "corresponding", "change", "or", "has", "n", "'", "t", "been", "executed", "yet", ".", "concode_field_sep", "Change", "fChange", "concode_elem_sep", "Change", "fUndoChange", "concode_elem_sep", "boolean", "fChangeExecutionFailed", "concode_elem_sep", "IUndoManager", "fUndoManager", "concode_elem_sep", "boolean", "fChangeExecuted", "concode_elem_sep", "CreateChangeOperation", "fCreateChangeOperation", "concode_elem_sep", "ISchedulingRule", "fSchedulingRule", "concode_elem_sep", "RefactoringStatus", "fValidationStatus", "concode_elem_sep", "String", "fUndoName", "concode_field_sep", "RefactoringStatus", "getConditionCheckingStatus", "concode_elem_sep", "boolean", "changeExecutionFailed", "concode_elem_sep", "Change", "getUndoChange", "concode_elem_sep", "boolean", "createChange", "concode_elem_sep", "void", "setUndoManager", "concode_elem_sep", "void", "run", "concode_elem_sep", "void", "executeChange", "concode_elem_sep", "void", "setSchedulingRule", "concode_elem_sep", "boolean", "changeExecuted", "concode_elem_sep", "RefactoringStatus", "getValidationStatus"]}
{"code": "boolean function ( PdfName arg0 , PdfName [ ] arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 . length ; loc0 ++ ) { if ( arg1 [ loc0 ] . equals ( arg0 ) ) { return true ; } } return false ; }", "nl": "checks if some value is valid for a certain key . concode_field_sep PdfName NONFULLSCREENPAGEMODE_PREFERENCES[] concode_elem_sep int pageLayoutAndMode concode_elem_sep PdfName DIRECTION_PREFERENCES[] concode_elem_sep int viewerPreferencesMask concode_elem_sep PdfName PRINTSCALING_PREFERENCES[] concode_elem_sep PdfName DUPLEX_PREFERENCES[] concode_elem_sep PdfName PAGE_BOUNDARIES[] concode_elem_sep PdfDictionary viewerPreferences concode_elem_sep PdfName[] VIEWER_PREFERENCES concode_field_sep PdfDictionary getViewerPreferences concode_elem_sep PdfViewerPreferencesImp getViewerPreferences concode_elem_sep void setViewerPreferences concode_elem_sep int getPageLayoutAndMode concode_elem_sep int getIndex concode_elem_sep void addViewerPreference concode_elem_sep void addToCatalog", "code_tokens": ["boolean", "function", "(", "PdfName", "arg0", ",", "PdfName", "[", "]", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg1", ".", "length", ";", "loc0", "+", "+", ")", "{", "if", "(", "arg1", "[", "loc0", "]", ".", "equals", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl_tokens": ["checks", "if", "some", "value", "is", "valid", "for", "a", "certain", "key", ".", "concode_field_sep", "PdfName", "NONFULLSCREENPAGEMODE_PREFERENCES", "[", "]", "concode_elem_sep", "int", "pageLayoutAndMode", "concode_elem_sep", "PdfName", "DIRECTION_PREFERENCES", "[", "]", "concode_elem_sep", "int", "viewerPreferencesMask", "concode_elem_sep", "PdfName", "PRINTSCALING_PREFERENCES", "[", "]", "concode_elem_sep", "PdfName", "DUPLEX_PREFERENCES", "[", "]", "concode_elem_sep", "PdfName", "PAGE_BOUNDARIES", "[", "]", "concode_elem_sep", "PdfDictionary", "viewerPreferences", "concode_elem_sep", "PdfName", "[", "]", "VIEWER_PREFERENCES", "concode_field_sep", "PdfDictionary", "getViewerPreferences", "concode_elem_sep", "PdfViewerPreferencesImp", "getViewerPreferences", "concode_elem_sep", "void", "setViewerPreferences", "concode_elem_sep", "int", "getPageLayoutAndMode", "concode_elem_sep", "int", "getIndex", "concode_elem_sep", "void", "addViewerPreference", "concode_elem_sep", "void", "addToCatalog"]}
{"code": "boolean function ( String arg0 , String arg1 ) { if ( \"srini_string\" . equals ( arg0 ) && \"srini_string\" . equals ( arg1 ) ) return true ; Entry loc0 = sessions . get ( arg0 ) ; return loc0 != null && loc0 . arg1 . equals ( arg1 ) ; }", "nl": "for test use concode_field_sep Map<String,Entry> sessions concode_elem_sep long lastAccessTime concode_elem_sep String ticket concode_elem_sep TicketContainer instance concode_field_sep String getTicket", "code_tokens": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "\"srini_string\"", ".", "equals", "(", "arg0", ")", "&", "&", "\"srini_string\"", ".", "equals", "(", "arg1", ")", ")", "return", "true", ";", "Entry", "loc0", "=", "sessions", ".", "get", "(", "arg0", ")", ";", "return", "loc0", "!=", "null", "&", "&", "loc0", ".", "arg1", ".", "equals", "(", "arg1", ")", ";", "}"], "nl_tokens": ["for", "test", "use", "concode_field_sep", "Map", "<", "String", ",", "Entry", ">", "sessions", "concode_elem_sep", "long", "lastAccessTime", "concode_elem_sep", "String", "ticket", "concode_elem_sep", "TicketContainer", "instance", "concode_field_sep", "String", "getTicket"]}
{"code": "GenMatrix < C > function ( Reader arg0 ) { throw new RuntimeException ( \"srini_string\" ) ; }", "nl": "parse a matrix from a reader . concode_field_sep int blocksize concode_elem_sep GenMatrix<C> ZERO concode_elem_sep int DEFAULT_BSIZE concode_elem_sep GenMatrix<C> ONE concode_elem_sep Logger logger concode_elem_sep RingFactory<C> coFac concode_elem_sep float density concode_elem_sep int rows concode_elem_sep int cols concode_elem_sep Random random concode_elem_sep float DEFAULT_DENSITY concode_field_sep GenMatrix<C> randomUpper concode_elem_sep GenMatrix<C> randomUpper concode_elem_sep GenMatrix<C> randomLower concode_elem_sep GenMatrix<C> randomLower concode_elem_sep GenMatrixRing<C> product concode_elem_sep GenMatrix<C> fromList concode_elem_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep java.math.BigInteger characteristic concode_elem_sep GenMatrix<C> random concode_elem_sep GenMatrix<C> random concode_elem_sep GenMatrix<C> random concode_elem_sep GenMatrix<C> random concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep GenMatrix<C> getONE concode_elem_sep GenMatrix<C> getZERO concode_elem_sep GenMatrix<C> fromInteger concode_elem_sep GenMatrix<C> fromInteger concode_elem_sep String toString concode_elem_sep boolean isAssociative concode_elem_sep GenMatrixRing<C> transpose concode_elem_sep GenMatrix<C> copy", "code_tokens": ["GenMatrix", "<", "C", ">", "function", "(", "Reader", "arg0", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["parse", "a", "matrix", "from", "a", "reader", ".", "concode_field_sep", "int", "blocksize", "concode_elem_sep", "GenMatrix", "<", "C", ">", "ZERO", "concode_elem_sep", "int", "DEFAULT_BSIZE", "concode_elem_sep", "GenMatrix", "<", "C", ">", "ONE", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "RingFactory", "<", "C", ">", "coFac", "concode_elem_sep", "float", "density", "concode_elem_sep", "int", "rows", "concode_elem_sep", "int", "cols", "concode_elem_sep", "Random", "random", "concode_elem_sep", "float", "DEFAULT_DENSITY", "concode_field_sep", "GenMatrix", "<", "C", ">", "randomUpper", "concode_elem_sep", "GenMatrix", "<", "C", ">", "randomUpper", "concode_elem_sep", "GenMatrix", "<", "C", ">", "randomLower", "concode_elem_sep", "GenMatrix", "<", "C", ">", "randomLower", "concode_elem_sep", "GenMatrixRing", "<", "C", ">", "product", "concode_elem_sep", "GenMatrix", "<", "C", ">", "fromList", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "GenMatrix", "<", "C", ">", "random", "concode_elem_sep", "GenMatrix", "<", "C", ">", "random", "concode_elem_sep", "GenMatrix", "<", "C", ">", "random", "concode_elem_sep", "GenMatrix", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "GenMatrix", "<", "C", ">", "getONE", "concode_elem_sep", "GenMatrix", "<", "C", ">", "getZERO", "concode_elem_sep", "GenMatrix", "<", "C", ">", "fromInteger", "concode_elem_sep", "GenMatrix", "<", "C", ">", "fromInteger", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "GenMatrixRing", "<", "C", ">", "transpose", "concode_elem_sep", "GenMatrix", "<", "C", ">", "copy"]}
{"code": "String function ( ) { return name ; }", "nl": "name for this key concode_field_sep Date created concode_elem_sep String name concode_elem_sep String key concode_elem_sep Date created concode_field_sep Builder toBuilder concode_elem_sep Builder created concode_elem_sep Builder fromKey concode_elem_sep Date getCreated concode_elem_sep int compareTo concode_elem_sep Key build concode_elem_sep int hashCode concode_elem_sep String get concode_elem_sep boolean equals concode_elem_sep Builder builder concode_elem_sep Builder name concode_elem_sep String toString concode_elem_sep Builder key", "code_tokens": ["String", "function", "(", ")", "{", "return", "name", ";", "}"], "nl_tokens": ["name", "for", "this", "key", "concode_field_sep", "Date", "created", "concode_elem_sep", "String", "name", "concode_elem_sep", "String", "key", "concode_elem_sep", "Date", "created", "concode_field_sep", "Builder", "toBuilder", "concode_elem_sep", "Builder", "created", "concode_elem_sep", "Builder", "fromKey", "concode_elem_sep", "Date", "getCreated", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Key", "build", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "String", "get", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Builder", "builder", "concode_elem_sep", "Builder", "name", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Builder", "key"]}
{"code": "IJavaElement function ( final String arg0 , final String arg1 , final boolean arg2 ) { return handleToElement ( null , arg0 , arg1 , arg2 ) ; }", "nl": "converts an input handle back to the corresponding java element . concode_field_sep String ATTRIBUTE_SELECTION concode_elem_sep String ATTRIBUTE_ELEMENT concode_elem_sep String ATTRIBUTE_NAME concode_elem_sep String ATTRIBUTE_INPUT concode_elem_sep String ATTRIBUTE_REFERENCES concode_field_sep RefactoringStatus createInputFatalStatus concode_elem_sep String resourceToHandle concode_elem_sep IResource handleToResource concode_elem_sep RefactoringStatus createInputWarningStatus concode_elem_sep String elementToHandle", "code_tokens": ["IJavaElement", "function", "(", "final", "String", "arg0", ",", "final", "String", "arg1", ",", "final", "boolean", "arg2", ")", "{", "return", "handleToElement", "(", "null", ",", "arg0", ",", "arg1", ",", "arg2", ")", ";", "}"], "nl_tokens": ["converts", "an", "input", "handle", "back", "to", "the", "corresponding", "java", "element", ".", "concode_field_sep", "String", "ATTRIBUTE_SELECTION", "concode_elem_sep", "String", "ATTRIBUTE_ELEMENT", "concode_elem_sep", "String", "ATTRIBUTE_NAME", "concode_elem_sep", "String", "ATTRIBUTE_INPUT", "concode_elem_sep", "String", "ATTRIBUTE_REFERENCES", "concode_field_sep", "RefactoringStatus", "createInputFatalStatus", "concode_elem_sep", "String", "resourceToHandle", "concode_elem_sep", "IResource", "handleToResource", "concode_elem_sep", "RefactoringStatus", "createInputWarningStatus", "concode_elem_sep", "String", "elementToHandle"]}
{"code": "int function ( ) { return startingLocation ; }", "nl": "return the starting location of this move . concode_field_sep int startingLocation concode_elem_sep Player thePlayer concode_elem_sep int endingLocation concode_field_sep Player getPlayer concode_elem_sep int endLocation", "code_tokens": ["int", "function", "(", ")", "{", "return", "startingLocation", ";", "}"], "nl_tokens": ["return", "the", "starting", "location", "of", "this", "move", ".", "concode_field_sep", "int", "startingLocation", "concode_elem_sep", "Player", "thePlayer", "concode_elem_sep", "int", "endingLocation", "concode_field_sep", "Player", "getPlayer", "concode_elem_sep", "int", "endLocation"]}
{"code": "XMLElement function ( final String arg0 ) { if ( closed ) { throw new IOException ( format ( \"srini_string\" , name ) ) ; } finishOpenTag ( ) ; if ( lastchild != null ) { lastchild . close ( ) ; } quote ( arg0 ) ; return this ; }", "nl": "adds the given text as a child to this node . the text will be quoted . concode_field_sep char EQ concode_elem_sep char LT concode_elem_sep char AMP concode_elem_sep char QUOT concode_elem_sep char GT concode_elem_sep XMLElement lastchild concode_elem_sep char SPACE concode_elem_sep String name concode_elem_sep boolean closed concode_elem_sep Writer writer concode_elem_sep boolean openTagDone concode_elem_sep char SLASH concode_field_sep void quote concode_elem_sep void finishOpenTag concode_elem_sep void addChildElement concode_elem_sep XMLElement text concode_elem_sep XMLElement attr concode_elem_sep XMLElement attr concode_elem_sep XMLElement attr concode_elem_sep void close concode_elem_sep void beginOpenTag concode_elem_sep XMLElement element", "code_tokens": ["XMLElement", "function", "(", "final", "String", "arg0", ")", "{", "if", "(", "closed", ")", "{", "throw", "new", "IOException", "(", "format", "(", "\"srini_string\"", ",", "name", ")", ")", ";", "}", "finishOpenTag", "(", ")", ";", "if", "(", "lastchild", "!=", "null", ")", "{", "lastchild", ".", "close", "(", ")", ";", "}", "quote", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl_tokens": ["adds", "the", "given", "text", "as", "a", "child", "to", "this", "node", ".", "the", "text", "will", "be", "quoted", ".", "concode_field_sep", "char", "EQ", "concode_elem_sep", "char", "LT", "concode_elem_sep", "char", "AMP", "concode_elem_sep", "char", "QUOT", "concode_elem_sep", "char", "GT", "concode_elem_sep", "XMLElement", "lastchild", "concode_elem_sep", "char", "SPACE", "concode_elem_sep", "String", "name", "concode_elem_sep", "boolean", "closed", "concode_elem_sep", "Writer", "writer", "concode_elem_sep", "boolean", "openTagDone", "concode_elem_sep", "char", "SLASH", "concode_field_sep", "void", "quote", "concode_elem_sep", "void", "finishOpenTag", "concode_elem_sep", "void", "addChildElement", "concode_elem_sep", "XMLElement", "text", "concode_elem_sep", "XMLElement", "attr", "concode_elem_sep", "XMLElement", "attr", "concode_elem_sep", "XMLElement", "attr", "concode_elem_sep", "void", "close", "concode_elem_sep", "void", "beginOpenTag", "concode_elem_sep", "XMLElement", "element"]}
{"code": "int function ( int arg0 , int arg1 ) { if ( arg0 < 0 ) { arg0 = - arg0 ; } if ( arg1 < 0 ) { arg1 = - arg1 ; } while ( arg1 != 0 ) { int loc0 = arg0 % arg1 ; arg0 = arg1 ; arg1 = loc0 ; } return arg0 ; }", "nl": "calculate the greatest common divisor . concode_field_sep String PROMPT concode_field_sep void main", "code_tokens": ["int", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "if", "(", "arg0", "<", "0", ")", "{", "arg0", "=", "-", "arg0", ";", "}", "if", "(", "arg1", "<", "0", ")", "{", "arg1", "=", "-", "arg1", ";", "}", "while", "(", "arg1", "!=", "0", ")", "{", "int", "loc0", "=", "arg0", "%", "arg1", ";", "arg0", "=", "arg1", ";", "arg1", "=", "loc0", ";", "}", "return", "arg0", ";", "}"], "nl_tokens": ["calculate", "the", "greatest", "common", "divisor", ".", "concode_field_sep", "String", "PROMPT", "concode_field_sep", "void", "main"]}
{"code": "short function ( int arg0 ) { if ( list . isEmpty ( ) ) { throw new EmptyStackException ( ) ; } return list . get ( list . size ( ) - arg0 - 1 ) ; }", "nl": "return the n'th short down the stack , where 0 is the top element and size -1 is the bottom element . concode_field_sep ArrayShortList list concode_field_sep short pop concode_elem_sep int search concode_elem_sep int size concode_elem_sep short get concode_elem_sep void clear concode_elem_sep short push concode_elem_sep boolean empty", "code_tokens": ["short", "function", "(", "int", "arg0", ")", "{", "if", "(", "list", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "EmptyStackException", "(", ")", ";", "}", "return", "list", ".", "get", "(", "list", ".", "size", "(", ")", "-", "arg0", "-", "1", ")", ";", "}"], "nl_tokens": ["return", "the", "n", "'", "th", "short", "down", "the", "stack", ",", "where", "0", "is", "the", "top", "element", "and", "size", "-", "1", "is", "the", "bottom", "element", ".", "concode_field_sep", "ArrayShortList", "list", "concode_field_sep", "short", "pop", "concode_elem_sep", "int", "search", "concode_elem_sep", "int", "size", "concode_elem_sep", "short", "get", "concode_elem_sep", "void", "clear", "concode_elem_sep", "short", "push", "concode_elem_sep", "boolean", "empty"]}
{"code": "Bin function ( String arg0 ) { return _binsByUri . get ( arg0 ) ; }", "nl": "returns the memory bin for the given uri for external use . concode_field_sep int _pageSize concode_elem_sep int DEFAULT_PAGESIZE concode_elem_sep Map<String,Bin> _binsByUri concode_field_sep Bin produceBin concode_elem_sep void rename concode_elem_sep boolean exists concode_elem_sep void delete concode_elem_sep Bin open", "code_tokens": ["Bin", "function", "(", "String", "arg0", ")", "{", "return", "_binsByUri", ".", "get", "(", "arg0", ")", ";", "}"], "nl_tokens": ["returns", "the", "memory", "bin", "for", "the", "given", "uri", "for", "external", "use", ".", "concode_field_sep", "int", "_pageSize", "concode_elem_sep", "int", "DEFAULT_PAGESIZE", "concode_elem_sep", "Map", "<", "String", ",", "Bin", ">", "_binsByUri", "concode_field_sep", "Bin", "produceBin", "concode_elem_sep", "void", "rename", "concode_elem_sep", "boolean", "exists", "concode_elem_sep", "void", "delete", "concode_elem_sep", "Bin", "open"]}
{"code": "String function ( byte [ ] arg0 , byte [ ] arg1 ) { return Base64 . encodeBase64String ( hmacSha256 ( arg0 , arg1 ) ) ; }", "nl": "sign a hawk request string . concode_field_sep int HAWK_HEADER_VERSION concode_elem_sep long skewSeconds concode_elem_sep String LOG_TAG concode_elem_sep boolean includePayloadHash concode_elem_sep String id concode_elem_sep String HMAC_SHA256_ALGORITHM concode_elem_sep int NONCE_LENGTH_IN_BYTES concode_elem_sep byte[] key concode_field_sep long getTimestampSeconds concode_elem_sep String getPayloadHashString concode_elem_sep byte[] hmacSha256 concode_elem_sep long now concode_elem_sep String escapeExtraString concode_elem_sep String getBaseContentType concode_elem_sep String escapeExtraHeaderAttribute concode_elem_sep byte[] getPayloadHash concode_elem_sep String getRequestString concode_elem_sep Header getAuthHeader concode_elem_sep Header getAuthHeader", "code_tokens": ["String", "function", "(", "byte", "[", "]", "arg0", ",", "byte", "[", "]", "arg1", ")", "{", "return", "Base64", ".", "encodeBase64String", "(", "hmacSha256", "(", "arg0", ",", "arg1", ")", ")", ";", "}"], "nl_tokens": ["sign", "a", "hawk", "request", "string", ".", "concode_field_sep", "int", "HAWK_HEADER_VERSION", "concode_elem_sep", "long", "skewSeconds", "concode_elem_sep", "String", "LOG_TAG", "concode_elem_sep", "boolean", "includePayloadHash", "concode_elem_sep", "String", "id", "concode_elem_sep", "String", "HMAC_SHA256_ALGORITHM", "concode_elem_sep", "int", "NONCE_LENGTH_IN_BYTES", "concode_elem_sep", "byte", "[", "]", "key", "concode_field_sep", "long", "getTimestampSeconds", "concode_elem_sep", "String", "getPayloadHashString", "concode_elem_sep", "byte", "[", "]", "hmacSha256", "concode_elem_sep", "long", "now", "concode_elem_sep", "String", "escapeExtraString", "concode_elem_sep", "String", "getBaseContentType", "concode_elem_sep", "String", "escapeExtraHeaderAttribute", "concode_elem_sep", "byte", "[", "]", "getPayloadHash", "concode_elem_sep", "String", "getRequestString", "concode_elem_sep", "Header", "getAuthHeader", "concode_elem_sep", "Header", "getAuthHeader"]}
{"code": "T [ ] function ( T [ ] arg0 , T [ ] arg1 ) { return ArrayTool . transferValues ( arg0 , arg1 , 0 , arg1 . length ) ; }", "nl": "transfers from right to left concode_field_sep PlaceHolder placeHolder concode_field_sep void swap concode_elem_sep void swap", "code_tokens": ["T", "[", "]", "function", "(", "T", "[", "]", "arg0", ",", "T", "[", "]", "arg1", ")", "{", "return", "ArrayTool", ".", "transferValues", "(", "arg0", ",", "arg1", ",", "0", ",", "arg1", ".", "length", ")", ";", "}"], "nl_tokens": ["transfers", "from", "right", "to", "left", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "swap", "concode_elem_sep", "void", "swap"]}
{"code": "void function ( ReadOnlyPerson arg0 ) { allPersons . remove ( arg0 ) ; }", "nl": "removes the equivalent person from the address book . concode_field_sep UniquePersonList allPersons concode_elem_sep UniqueTagList allTags concode_field_sep boolean containsPerson concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep void clear concode_elem_sep UniquePersonList getAllPersons concode_elem_sep void removeTag concode_elem_sep UniqueTagList getAllTags concode_elem_sep void syncTagsWithMasterList concode_elem_sep void addTag concode_elem_sep void addPerson concode_elem_sep boolean containsTag concode_elem_sep AddressBook empty", "code_tokens": ["void", "function", "(", "ReadOnlyPerson", "arg0", ")", "{", "allPersons", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["removes", "the", "equivalent", "person", "from", "the", "address", "book", ".", "concode_field_sep", "UniquePersonList", "allPersons", "concode_elem_sep", "UniqueTagList", "allTags", "concode_field_sep", "boolean", "containsPerson", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "clear", "concode_elem_sep", "UniquePersonList", "getAllPersons", "concode_elem_sep", "void", "removeTag", "concode_elem_sep", "UniqueTagList", "getAllTags", "concode_elem_sep", "void", "syncTagsWithMasterList", "concode_elem_sep", "void", "addTag", "concode_elem_sep", "void", "addPerson", "concode_elem_sep", "boolean", "containsTag", "concode_elem_sep", "AddressBook", "empty"]}
{"code": "ModInteger function ( ) { return new ModInteger ( ring , val . negate ( ) ) ; }", "nl": "modinteger negative . concode_field_sep java.math.BigInteger val concode_elem_sep ModIntegerRing ring concode_field_sep ModInteger MIREM concode_elem_sep java.math.BigInteger getSymmetricVal concode_elem_sep int MISIGN concode_elem_sep ModInteger gcd concode_elem_sep ModInteger sum concode_elem_sep int compareTo concode_elem_sep ModInteger MINEG concode_elem_sep ModInteger MISUM concode_elem_sep int hashCode concode_elem_sep ModInteger MIDIF concode_elem_sep ModInteger divide concode_elem_sep ModInteger multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep ModInteger inverse concode_elem_sep int MICOMP concode_elem_sep java.math.BigInteger getVal concode_elem_sep boolean isUnit concode_elem_sep ModInteger subtract concode_elem_sep ModInteger MIABS concode_elem_sep ModInteger MIINV concode_elem_sep ModInteger[] egcd concode_elem_sep java.math.BigInteger getModul concode_elem_sep ModInteger abs concode_elem_sep ModInteger MIQ concode_elem_sep boolean equals concode_elem_sep ModInteger clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep ModInteger MIPROD concode_elem_sep ModInteger remainder", "code_tokens": ["ModInteger", "function", "(", ")", "{", "return", "new", "ModInteger", "(", "ring", ",", "val", ".", "negate", "(", ")", ")", ";", "}"], "nl_tokens": ["modinteger", "negative", ".", "concode_field_sep", "java", ".", "math", ".", "BigInteger", "val", "concode_elem_sep", "ModIntegerRing", "ring", "concode_field_sep", "ModInteger", "MIREM", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "getSymmetricVal", "concode_elem_sep", "int", "MISIGN", "concode_elem_sep", "ModInteger", "gcd", "concode_elem_sep", "ModInteger", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "ModInteger", "MINEG", "concode_elem_sep", "ModInteger", "MISUM", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "ModInteger", "MIDIF", "concode_elem_sep", "ModInteger", "divide", "concode_elem_sep", "ModInteger", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "ModInteger", "inverse", "concode_elem_sep", "int", "MICOMP", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "getVal", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "ModInteger", "subtract", "concode_elem_sep", "ModInteger", "MIABS", "concode_elem_sep", "ModInteger", "MIINV", "concode_elem_sep", "ModInteger", "[", "]", "egcd", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "getModul", "concode_elem_sep", "ModInteger", "abs", "concode_elem_sep", "ModInteger", "MIQ", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "ModInteger", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "ModInteger", "MIPROD", "concode_elem_sep", "ModInteger", "remainder"]}
{"code": "boolean function ( ISelection arg0 ) { if ( ( arg0 == null ) || ( arg0 . isEmpty ( ) ) ) { return true ; } else { return false ; } }", "nl": "is the iselectionempty or null ? concode_field_sep String DOT concode_elem_sep String SLASH_STRING concode_elem_sep char DOT_CHAR concode_elem_sep char SLASH_CHAR concode_field_sep void safeJoin concode_elem_sep void assertNotEmpty concode_elem_sep String slashAppend concode_elem_sep String slashAppend concode_elem_sep String dotAppend concode_elem_sep String dotAppend", "code_tokens": ["boolean", "function", "(", "ISelection", "arg0", ")", "{", "if", "(", "(", "arg0", "==", "null", ")", "|", "|", "(", "arg0", ".", "isEmpty", "(", ")", ")", ")", "{", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}"], "nl_tokens": ["is", "the", "iselectionempty", "or", "null", "?", "concode_field_sep", "String", "DOT", "concode_elem_sep", "String", "SLASH_STRING", "concode_elem_sep", "char", "DOT_CHAR", "concode_elem_sep", "char", "SLASH_CHAR", "concode_field_sep", "void", "safeJoin", "concode_elem_sep", "void", "assertNotEmpty", "concode_elem_sep", "String", "slashAppend", "concode_elem_sep", "String", "slashAppend", "concode_elem_sep", "String", "dotAppend", "concode_elem_sep", "String", "dotAppend"]}
{"code": "HttpRequestHandler function ( final HttpRequest arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; return matcher . lookup ( getRequestPath ( arg0 ) ) ; }", "nl": "looks up a handler matching the given request uri . concode_field_sep UriPatternMatcher<HttpRequestHandler> matcher concode_field_sep void unregister concode_elem_sep void register concode_elem_sep String getRequestPath", "code_tokens": ["HttpRequestHandler", "function", "(", "final", "HttpRequest", "arg0", ")", "{", "Args", ".", "notNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "return", "matcher", ".", "lookup", "(", "getRequestPath", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["looks", "up", "a", "handler", "matching", "the", "given", "request", "uri", ".", "concode_field_sep", "UriPatternMatcher", "<", "HttpRequestHandler", ">", "matcher", "concode_field_sep", "void", "unregister", "concode_elem_sep", "void", "register", "concode_elem_sep", "String", "getRequestPath"]}
{"code": "void function ( int arg0 , Color arg1 ) { if ( arg0 == 1 ) { playerOne . setColor ( arg1 ) ; } else { playerTwo . setColor ( arg1 ) ; } }", "nl": "set player color . concode_field_sep Player playerTwo concode_elem_sep int gameType concode_elem_sep Facade theFacade concode_elem_sep Rules theRules concode_elem_sep Player passivePlayer concode_elem_sep boolean isTimerRunning concode_elem_sep Player activePlayer concode_elem_sep IMediator mediator concode_elem_sep Timer theTimer concode_elem_sep Player playerOne concode_field_sep void endGame concode_elem_sep void setPlayerName concode_elem_sep IMediator getMediator concode_elem_sep void selectColors concode_elem_sep int getGameMode concode_elem_sep void ReceiveMessage concode_elem_sep void endTurn concode_elem_sep void setGameMode concode_elem_sep void RecievePassivePlayer concode_elem_sep void createPlayer concode_elem_sep void RecieveActivePlayer concode_elem_sep Notifier getTimerNotifier concode_elem_sep void requestActive concode_elem_sep void setMediator concode_elem_sep void requestPlayerName concode_elem_sep Player getOppositePlayer concode_elem_sep Facade getFacade concode_elem_sep void startGame concode_elem_sep void setTimer concode_elem_sep void SendMessage concode_elem_sep void requestPassive", "code_tokens": ["void", "function", "(", "int", "arg0", ",", "Color", "arg1", ")", "{", "if", "(", "arg0", "==", "1", ")", "{", "playerOne", ".", "setColor", "(", "arg1", ")", ";", "}", "else", "{", "playerTwo", ".", "setColor", "(", "arg1", ")", ";", "}", "}"], "nl_tokens": ["set", "player", "color", ".", "concode_field_sep", "Player", "playerTwo", "concode_elem_sep", "int", "gameType", "concode_elem_sep", "Facade", "theFacade", "concode_elem_sep", "Rules", "theRules", "concode_elem_sep", "Player", "passivePlayer", "concode_elem_sep", "boolean", "isTimerRunning", "concode_elem_sep", "Player", "activePlayer", "concode_elem_sep", "IMediator", "mediator", "concode_elem_sep", "Timer", "theTimer", "concode_elem_sep", "Player", "playerOne", "concode_field_sep", "void", "endGame", "concode_elem_sep", "void", "setPlayerName", "concode_elem_sep", "IMediator", "getMediator", "concode_elem_sep", "void", "selectColors", "concode_elem_sep", "int", "getGameMode", "concode_elem_sep", "void", "ReceiveMessage", "concode_elem_sep", "void", "endTurn", "concode_elem_sep", "void", "setGameMode", "concode_elem_sep", "void", "RecievePassivePlayer", "concode_elem_sep", "void", "createPlayer", "concode_elem_sep", "void", "RecieveActivePlayer", "concode_elem_sep", "Notifier", "getTimerNotifier", "concode_elem_sep", "void", "requestActive", "concode_elem_sep", "void", "setMediator", "concode_elem_sep", "void", "requestPlayerName", "concode_elem_sep", "Player", "getOppositePlayer", "concode_elem_sep", "Facade", "getFacade", "concode_elem_sep", "void", "startGame", "concode_elem_sep", "void", "setTimer", "concode_elem_sep", "void", "SendMessage", "concode_elem_sep", "void", "requestPassive"]}
{"code": "ConsumedPort function ( ) { return new ConsumedPort ( ) ; }", "nl": "create an instance of consumedport concode_field_sep QName _PropertyDeclaration_QNAME concode_elem_sep QName _ProvidedPort_QNAME concode_elem_sep QName _ApplicationPayload_QNAME concode_elem_sep QName _Application_QNAME concode_elem_sep QName _ApplicationID_QNAME concode_elem_sep QName _ApplicationReleaseBinding_QNAME concode_elem_sep QName _ConsumedPort_QNAME concode_elem_sep QName _ProvidedPortID_QNAME concode_field_sep ApplicationPayload createApplicationPayload concode_elem_sep JAXBElement<ApplicationPayload> createApplicationPayload concode_elem_sep ProvidedPortID createProvidedPortID concode_elem_sep JAXBElement<ProvidedPortID> createProvidedPortID concode_elem_sep ApplicationReleaseBinding createApplicationReleaseBinding concode_elem_sep JAXBElement<ApplicationReleaseBinding> createApplicationReleaseBinding concode_elem_sep Application createApplication concode_elem_sep JAXBElement<Application> createApplication concode_elem_sep PropertyDeclaration createPropertyDeclaration concode_elem_sep JAXBElement<PropertyDeclaration> createPropertyDeclaration concode_elem_sep ApplicationID createApplicationID concode_elem_sep JAXBElement<ApplicationID> createApplicationID concode_elem_sep ProvidedPort createProvidedPort concode_elem_sep JAXBElement<ProvidedPort> createProvidedPort", "code_tokens": ["ConsumedPort", "function", "(", ")", "{", "return", "new", "ConsumedPort", "(", ")", ";", "}"], "nl_tokens": ["create", "an", "instance", "of", "consumedport", "concode_field_sep", "QName", "_PropertyDeclaration_QNAME", "concode_elem_sep", "QName", "_ProvidedPort_QNAME", "concode_elem_sep", "QName", "_ApplicationPayload_QNAME", "concode_elem_sep", "QName", "_Application_QNAME", "concode_elem_sep", "QName", "_ApplicationID_QNAME", "concode_elem_sep", "QName", "_ApplicationReleaseBinding_QNAME", "concode_elem_sep", "QName", "_ConsumedPort_QNAME", "concode_elem_sep", "QName", "_ProvidedPortID_QNAME", "concode_field_sep", "ApplicationPayload", "createApplicationPayload", "concode_elem_sep", "JAXBElement", "<", "ApplicationPayload", ">", "createApplicationPayload", "concode_elem_sep", "ProvidedPortID", "createProvidedPortID", "concode_elem_sep", "JAXBElement", "<", "ProvidedPortID", ">", "createProvidedPortID", "concode_elem_sep", "ApplicationReleaseBinding", "createApplicationReleaseBinding", "concode_elem_sep", "JAXBElement", "<", "ApplicationReleaseBinding", ">", "createApplicationReleaseBinding", "concode_elem_sep", "Application", "createApplication", "concode_elem_sep", "JAXBElement", "<", "Application", ">", "createApplication", "concode_elem_sep", "PropertyDeclaration", "createPropertyDeclaration", "concode_elem_sep", "JAXBElement", "<", "PropertyDeclaration", ">", "createPropertyDeclaration", "concode_elem_sep", "ApplicationID", "createApplicationID", "concode_elem_sep", "JAXBElement", "<", "ApplicationID", ">", "createApplicationID", "concode_elem_sep", "ProvidedPort", "createProvidedPort", "concode_elem_sep", "JAXBElement", "<", "ProvidedPort", ">", "createProvidedPort"]}
{"code": "void function ( int arg0 ) { grid = new int [ arg0 ] [ arg0 ] ; }", "nl": "reset grid . concode_field_sep boolean[][] newCell concode_elem_sep int[][] grid concode_elem_sep boolean[][] hasCombined concode_field_sep boolean canMoveLeft concode_elem_sep int getCell concode_elem_sep boolean canMoveDown concode_elem_sep void generateNextCell concode_elem_sep void moveDown concode_elem_sep void resetMoved concode_elem_sep int getSize concode_elem_sep boolean canMoveUp concode_elem_sep boolean canMoveRight concode_elem_sep void moveRight concode_elem_sep boolean isGridFull concode_elem_sep void moveLeft concode_elem_sep boolean IsCellNew concode_elem_sep void initializeGame concode_elem_sep void moveUp", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "grid", "=", "new", "int", "[", "arg0", "]", "[", "arg0", "]", ";", "}"], "nl_tokens": ["reset", "grid", ".", "concode_field_sep", "boolean", "[", "]", "[", "]", "newCell", "concode_elem_sep", "int", "[", "]", "[", "]", "grid", "concode_elem_sep", "boolean", "[", "]", "[", "]", "hasCombined", "concode_field_sep", "boolean", "canMoveLeft", "concode_elem_sep", "int", "getCell", "concode_elem_sep", "boolean", "canMoveDown", "concode_elem_sep", "void", "generateNextCell", "concode_elem_sep", "void", "moveDown", "concode_elem_sep", "void", "resetMoved", "concode_elem_sep", "int", "getSize", "concode_elem_sep", "boolean", "canMoveUp", "concode_elem_sep", "boolean", "canMoveRight", "concode_elem_sep", "void", "moveRight", "concode_elem_sep", "boolean", "isGridFull", "concode_elem_sep", "void", "moveLeft", "concode_elem_sep", "boolean", "IsCellNew", "concode_elem_sep", "void", "initializeGame", "concode_elem_sep", "void", "moveUp"]}
{"code": "void function ( Object arg0 , Throwable arg1 ) { if ( isLevelEnabled ( MemoryLog . LOG_LEVEL_DEBUG ) ) { log ( MemoryLog . LOG_LEVEL_DEBUG , arg0 , arg1 ) ; } }", "nl": "log an error with debug log level . concode_field_sep Date date concode_elem_sep int LOG_LEVEL_DEBUG concode_elem_sep int level concode_elem_sep Throwable throwable concode_elem_sep List logEntries concode_elem_sep int LOG_LEVEL_OFF concode_elem_sep Object message concode_elem_sep int LOG_LEVEL_WARN concode_elem_sep int LOG_LEVEL_TRACE concode_elem_sep int LOG_LEVEL_ERROR concode_elem_sep int LOG_LEVEL_INFO concode_elem_sep String logName concode_elem_sep String name concode_elem_sep int LOG_LEVEL_FATAL concode_elem_sep int LOG_LEVEL_ALL concode_elem_sep int currentLogLevel concode_field_sep void log concode_elem_sep Object getMessage concode_elem_sep boolean isLevelEnabled concode_elem_sep boolean isWarnEnabled concode_elem_sep void error concode_elem_sep void error concode_elem_sep boolean isFatalEnabled concode_elem_sep void setLevel concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep String getLogName concode_elem_sep int getLevel concode_elem_sep int getLevel concode_elem_sep void warn concode_elem_sep void warn concode_elem_sep void trace concode_elem_sep void trace concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep void reset concode_elem_sep boolean isTraceEnabled concode_elem_sep Date getDate concode_elem_sep boolean isDebugEnabled concode_elem_sep Throwable getThrowable concode_elem_sep List getLogEntries concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["void", "function", "(", "Object", "arg0", ",", "Throwable", "arg1", ")", "{", "if", "(", "isLevelEnabled", "(", "MemoryLog", ".", "LOG_LEVEL_DEBUG", ")", ")", "{", "log", "(", "MemoryLog", ".", "LOG_LEVEL_DEBUG", ",", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl_tokens": ["log", "an", "error", "with", "debug", "log", "level", ".", "concode_field_sep", "Date", "date", "concode_elem_sep", "int", "LOG_LEVEL_DEBUG", "concode_elem_sep", "int", "level", "concode_elem_sep", "Throwable", "throwable", "concode_elem_sep", "List", "logEntries", "concode_elem_sep", "int", "LOG_LEVEL_OFF", "concode_elem_sep", "Object", "message", "concode_elem_sep", "int", "LOG_LEVEL_WARN", "concode_elem_sep", "int", "LOG_LEVEL_TRACE", "concode_elem_sep", "int", "LOG_LEVEL_ERROR", "concode_elem_sep", "int", "LOG_LEVEL_INFO", "concode_elem_sep", "String", "logName", "concode_elem_sep", "String", "name", "concode_elem_sep", "int", "LOG_LEVEL_FATAL", "concode_elem_sep", "int", "LOG_LEVEL_ALL", "concode_elem_sep", "int", "currentLogLevel", "concode_field_sep", "void", "log", "concode_elem_sep", "Object", "getMessage", "concode_elem_sep", "boolean", "isLevelEnabled", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "error", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "setLevel", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "String", "getLogName", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "int", "getLevel", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "trace", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "void", "reset", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "Date", "getDate", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "Throwable", "getThrowable", "concode_elem_sep", "List", "getLogEntries", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "BaseColor function ( ) { return strokeColor ; }", "nl": "gets the current stroke color concode_field_sep boolean knockout concode_elem_sep LineDashPattern lineDashPattern concode_elem_sep BaseColor fillColor concode_elem_sep float wordSpacing concode_elem_sep float leading concode_elem_sep BaseColor strokeColor concode_elem_sep int lineJoinStyle concode_elem_sep float miterLimit concode_elem_sep int lineCapStyle concode_elem_sep float lineWidth concode_elem_sep int renderMode concode_elem_sep PdfName colorSpaceFill concode_elem_sep PdfName colorSpaceStroke concode_elem_sep float fontSize concode_elem_sep float rise concode_elem_sep Matrix ctm concode_elem_sep float horizontalScaling concode_elem_sep float characterSpacing concode_elem_sep CMapAwareDocumentFont font concode_field_sep float getFontSize concode_elem_sep int getRenderMode concode_elem_sep void setLineDashPattern concode_elem_sep int getLineJoinStyle concode_elem_sep PdfName getColorSpaceStroke concode_elem_sep float getCharacterSpacing concode_elem_sep void setLineWidth concode_elem_sep Matrix getCtm concode_elem_sep void setLineCapStyle concode_elem_sep PdfName getColorSpaceFill concode_elem_sep float getMiterLimit concode_elem_sep float getLineWidth concode_elem_sep float getWordSpacing concode_elem_sep boolean isKnockout concode_elem_sep BaseColor getFillColor concode_elem_sep CMapAwareDocumentFont getFont concode_elem_sep void setMiterLimit concode_elem_sep float getRise concode_elem_sep int getLineCapStyle concode_elem_sep float getLeading concode_elem_sep LineDashPattern getLineDashPattern concode_elem_sep float getHorizontalScaling concode_elem_sep void setLineJoinStyle", "code_tokens": ["BaseColor", "function", "(", ")", "{", "return", "strokeColor", ";", "}"], "nl_tokens": ["gets", "the", "current", "stroke", "color", "concode_field_sep", "boolean", "knockout", "concode_elem_sep", "LineDashPattern", "lineDashPattern", "concode_elem_sep", "BaseColor", "fillColor", "concode_elem_sep", "float", "wordSpacing", "concode_elem_sep", "float", "leading", "concode_elem_sep", "BaseColor", "strokeColor", "concode_elem_sep", "int", "lineJoinStyle", "concode_elem_sep", "float", "miterLimit", "concode_elem_sep", "int", "lineCapStyle", "concode_elem_sep", "float", "lineWidth", "concode_elem_sep", "int", "renderMode", "concode_elem_sep", "PdfName", "colorSpaceFill", "concode_elem_sep", "PdfName", "colorSpaceStroke", "concode_elem_sep", "float", "fontSize", "concode_elem_sep", "float", "rise", "concode_elem_sep", "Matrix", "ctm", "concode_elem_sep", "float", "horizontalScaling", "concode_elem_sep", "float", "characterSpacing", "concode_elem_sep", "CMapAwareDocumentFont", "font", "concode_field_sep", "float", "getFontSize", "concode_elem_sep", "int", "getRenderMode", "concode_elem_sep", "void", "setLineDashPattern", "concode_elem_sep", "int", "getLineJoinStyle", "concode_elem_sep", "PdfName", "getColorSpaceStroke", "concode_elem_sep", "float", "getCharacterSpacing", "concode_elem_sep", "void", "setLineWidth", "concode_elem_sep", "Matrix", "getCtm", "concode_elem_sep", "void", "setLineCapStyle", "concode_elem_sep", "PdfName", "getColorSpaceFill", "concode_elem_sep", "float", "getMiterLimit", "concode_elem_sep", "float", "getLineWidth", "concode_elem_sep", "float", "getWordSpacing", "concode_elem_sep", "boolean", "isKnockout", "concode_elem_sep", "BaseColor", "getFillColor", "concode_elem_sep", "CMapAwareDocumentFont", "getFont", "concode_elem_sep", "void", "setMiterLimit", "concode_elem_sep", "float", "getRise", "concode_elem_sep", "int", "getLineCapStyle", "concode_elem_sep", "float", "getLeading", "concode_elem_sep", "LineDashPattern", "getLineDashPattern", "concode_elem_sep", "float", "getHorizontalScaling", "concode_elem_sep", "void", "setLineJoinStyle"]}
{"code": "void function ( ContentAssistInvocationContext arg0 ) { }", "nl": "called once before initial sorting starts the first time . note : as of 3.8 a completion proposal computer can request that proposals are resorted . if such a computer is active , then this method will not be called . clients may override , the default implementation does nothing . concode_field_sep PlaceHolder placeHolder concode_field_sep int compare concode_elem_sep void endSorting", "code_tokens": ["void", "function", "(", "ContentAssistInvocationContext", "arg0", ")", "{", "}"], "nl_tokens": ["called", "once", "before", "initial", "sorting", "starts", "the", "first", "time", ".", "note", ":", "as", "of", "3.8", "a", "completion", "proposal", "computer", "can", "request", "that", "proposals", "are", "resorted", ".", "if", "such", "a", "computer", "is", "active", ",", "then", "this", "method", "will", "not", "be", "called", ".", "clients", "may", "override", ",", "the", "default", "implementation", "does", "nothing", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "compare", "concode_elem_sep", "void", "endSorting"]}
{"code": "EdgeHandle function ( NetID arg0 , NetID arg1 ) { return addEdge ( arg0 , arg1 , null , Color . GREEN , \"srini_string\" ) ; }", "nl": "paints an overlay edge concode_field_sep Set<Class<? extends Object>> overlayImpls concode_elem_sep VisAnalyzer analyzer concode_field_sep void handleOverlayMsg concode_elem_sep void handleOperation concode_elem_sep void addOverlayUniverseMetric concode_elem_sep void handleNewHost concode_elem_sep void handleLeavingHost concode_elem_sep boolean isDedicatedOverlayImplFor concode_elem_sep void addOverlayNodeMetric concode_elem_sep void addOverlayImpl concode_elem_sep Translator getTranslator concode_elem_sep Object getBootstrapManagerFor concode_elem_sep String getOverlayName concode_elem_sep void removeEdge concode_elem_sep void addOverlayEdgeMetric concode_elem_sep SchematicPositioner getNewPositioner concode_elem_sep void handleNewHostAfter concode_elem_sep void flashEdge concode_elem_sep void flashEdge concode_elem_sep void flashEdge concode_elem_sep void flashEdge concode_elem_sep void setParentAnalyzer", "code_tokens": ["EdgeHandle", "function", "(", "NetID", "arg0", ",", "NetID", "arg1", ")", "{", "return", "addEdge", "(", "arg0", ",", "arg1", ",", "null", ",", "Color", ".", "GREEN", ",", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["paints", "an", "overlay", "edge", "concode_field_sep", "Set", "<", "Class", "<", "?", "extends", "Object", ">>", "overlayImpls", "concode_elem_sep", "VisAnalyzer", "analyzer", "concode_field_sep", "void", "handleOverlayMsg", "concode_elem_sep", "void", "handleOperation", "concode_elem_sep", "void", "addOverlayUniverseMetric", "concode_elem_sep", "void", "handleNewHost", "concode_elem_sep", "void", "handleLeavingHost", "concode_elem_sep", "boolean", "isDedicatedOverlayImplFor", "concode_elem_sep", "void", "addOverlayNodeMetric", "concode_elem_sep", "void", "addOverlayImpl", "concode_elem_sep", "Translator", "getTranslator", "concode_elem_sep", "Object", "getBootstrapManagerFor", "concode_elem_sep", "String", "getOverlayName", "concode_elem_sep", "void", "removeEdge", "concode_elem_sep", "void", "addOverlayEdgeMetric", "concode_elem_sep", "SchematicPositioner", "getNewPositioner", "concode_elem_sep", "void", "handleNewHostAfter", "concode_elem_sep", "void", "flashEdge", "concode_elem_sep", "void", "flashEdge", "concode_elem_sep", "void", "flashEdge", "concode_elem_sep", "void", "flashEdge", "concode_elem_sep", "void", "setParentAnalyzer"]}
{"code": "BigDecimal function ( ) { return ZERO ; }", "nl": "get the zero element . concode_field_sep java.math.BigDecimal val concode_elem_sep int DEFAULT_PRECISION concode_elem_sep BigDecimal ZERO concode_elem_sep MathContext DEFAULT_CONTEXT concode_elem_sep MathContext context concode_elem_sep BigDecimal ONE concode_elem_sep Random random concode_field_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep BigDecimal gcd concode_elem_sep BigDecimal sum concode_elem_sep int compareTo concode_elem_sep java.math.BigInteger characteristic concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep int hashCode concode_elem_sep BigDecimal divide concode_elem_sep BigDecimal copy concode_elem_sep BigDecimal multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep BigDecimal inverse concode_elem_sep BigDecimal valueOf concode_elem_sep BigDecimal valueOf concode_elem_sep boolean isUnit concode_elem_sep BigDecimal subtract concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal[] egcd concode_elem_sep BigDecimal abs concode_elem_sep BigDecimal[] divideAndRemainder concode_elem_sep BigDecimal negate concode_elem_sep boolean equals concode_elem_sep BigDecimal clone concode_elem_sep BigDecimal getONE concode_elem_sep BigDecimal fromInteger concode_elem_sep BigDecimal fromInteger concode_elem_sep boolean isZERO concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep BigDecimal remainder", "code_tokens": ["BigDecimal", "function", "(", ")", "{", "return", "ZERO", ";", "}"], "nl_tokens": ["get", "the", "zero", "element", ".", "concode_field_sep", "java", ".", "math", ".", "BigDecimal", "val", "concode_elem_sep", "int", "DEFAULT_PRECISION", "concode_elem_sep", "BigDecimal", "ZERO", "concode_elem_sep", "MathContext", "DEFAULT_CONTEXT", "concode_elem_sep", "MathContext", "context", "concode_elem_sep", "BigDecimal", "ONE", "concode_elem_sep", "Random", "random", "concode_field_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "BigDecimal", "gcd", "concode_elem_sep", "BigDecimal", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "BigDecimal", "divide", "concode_elem_sep", "BigDecimal", "copy", "concode_elem_sep", "BigDecimal", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "BigDecimal", "inverse", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "BigDecimal", "subtract", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "[", "]", "egcd", "concode_elem_sep", "BigDecimal", "abs", "concode_elem_sep", "BigDecimal", "[", "]", "divideAndRemainder", "concode_elem_sep", "BigDecimal", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "BigDecimal", "clone", "concode_elem_sep", "BigDecimal", "getONE", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "BigDecimal", "remainder"]}
{"code": "void function ( final AbstractNodeFactory arg0 ) { nodeFactory = arg0 ; }", "nl": "sets the currently used node factory . concode_field_sep KademliaSetup singleton concode_elem_sep WorkloadGenerator workloadGen concode_elem_sep Logger log concode_elem_sep AbstractNodeFactory nodeFactory concode_elem_sep KademliaMonitor monitor concode_elem_sep Config config concode_field_sep WorkloadGenerator getWorkloadGenerator concode_elem_sep void setMonitor concode_elem_sep void setWorkload concode_elem_sep KademliaMonitor getMonitor concode_elem_sep AbstractNodeFactory getNodeFactory concode_elem_sep KademliaSetup getInstance concode_elem_sep void setConfigPath concode_elem_sep Config getConfig concode_elem_sep void setConfig", "code_tokens": ["void", "function", "(", "final", "AbstractNodeFactory", "arg0", ")", "{", "nodeFactory", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "currently", "used", "node", "factory", ".", "concode_field_sep", "KademliaSetup", "singleton", "concode_elem_sep", "WorkloadGenerator", "workloadGen", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "AbstractNodeFactory", "nodeFactory", "concode_elem_sep", "KademliaMonitor", "monitor", "concode_elem_sep", "Config", "config", "concode_field_sep", "WorkloadGenerator", "getWorkloadGenerator", "concode_elem_sep", "void", "setMonitor", "concode_elem_sep", "void", "setWorkload", "concode_elem_sep", "KademliaMonitor", "getMonitor", "concode_elem_sep", "AbstractNodeFactory", "getNodeFactory", "concode_elem_sep", "KademliaSetup", "getInstance", "concode_elem_sep", "void", "setConfigPath", "concode_elem_sep", "Config", "getConfig", "concode_elem_sep", "void", "setConfig"]}
{"code": "void function ( String arg0 , Bundle arg1 , RequestListener arg2 , final Object arg3 ) { request ( arg0 , arg1 , \"srini_string\" , arg2 , arg3 ) ; }", "nl": "make a request to the facebook graph api with the given string parameters using an http get default method . see http://developers.facebook.com/docs/api note that this method is asynchronous and the callback will be invoked in a background thread ; operations that affect the ui will need to be posted to the ui thread or an appropriate handler . this method is deprecated . see facebook and com.facebook.request for more info . concode_field_sep Facebook fb concode_field_sep void onFileNotFoundException concode_elem_sep void logout concode_elem_sep void logout concode_elem_sep void onComplete concode_elem_sep void onIOException concode_elem_sep void onMalformedURLException concode_elem_sep void onFacebookError", "code_tokens": ["void", "function", "(", "String", "arg0", ",", "Bundle", "arg1", ",", "RequestListener", "arg2", ",", "final", "Object", "arg3", ")", "{", "request", "(", "arg0", ",", "arg1", ",", "\"srini_string\"", ",", "arg2", ",", "arg3", ")", ";", "}"], "nl_tokens": ["make", "a", "request", "to", "the", "facebook", "graph", "api", "with", "the", "given", "string", "parameters", "using", "an", "http", "get", "default", "method", ".", "see", "http", ":", "//", "developers", ".", "facebook", ".", "com", "/", "docs", "/", "api", "note", "that", "this", "method", "is", "asynchronous", "and", "the", "callback", "will", "be", "invoked", "in", "a", "background", "thread", ";", "operations", "that", "affect", "the", "ui", "will", "need", "to", "be", "posted", "to", "the", "ui", "thread", "or", "an", "appropriate", "handler", ".", "this", "method", "is", "deprecated", ".", "see", "facebook", "and", "com", ".", "facebook", ".", "request", "for", "more", "info", ".", "concode_field_sep", "Facebook", "fb", "concode_field_sep", "void", "onFileNotFoundException", "concode_elem_sep", "void", "logout", "concode_elem_sep", "void", "logout", "concode_elem_sep", "void", "onComplete", "concode_elem_sep", "void", "onIOException", "concode_elem_sep", "void", "onMalformedURLException", "concode_elem_sep", "void", "onFacebookError"]}
{"code": "DateTimeFieldType function ( int arg0 ) { return getField ( arg0 , getChronology ( ) ) . getType ( ) ; }", "nl": "gets the field type at the specifed index . concode_field_sep PlaceHolder placeHolder concode_field_sep int[] getValues concode_elem_sep boolean isEqual concode_elem_sep DateTimeField getField concode_elem_sep DateTimeField getField concode_elem_sep int indexOfSupported concode_elem_sep int indexOfSupported concode_elem_sep boolean isSupported concode_elem_sep int compareTo concode_elem_sep boolean isBefore concode_elem_sep DateTimeField[] getFields concode_elem_sep int hashCode concode_elem_sep int get concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep int indexOf concode_elem_sep int indexOf concode_elem_sep boolean isAfter concode_elem_sep DateTime toDateTime concode_elem_sep DateTimeFieldType[] getFieldTypes", "code_tokens": ["DateTimeFieldType", "function", "(", "int", "arg0", ")", "{", "return", "getField", "(", "arg0", ",", "getChronology", "(", ")", ")", ".", "getType", "(", ")", ";", "}"], "nl_tokens": ["gets", "the", "field", "type", "at", "the", "specifed", "index", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "[", "]", "getValues", "concode_elem_sep", "boolean", "isEqual", "concode_elem_sep", "DateTimeField", "getField", "concode_elem_sep", "DateTimeField", "getField", "concode_elem_sep", "int", "indexOfSupported", "concode_elem_sep", "int", "indexOfSupported", "concode_elem_sep", "boolean", "isSupported", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "boolean", "isBefore", "concode_elem_sep", "DateTimeField", "[", "]", "getFields", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "get", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "DateTime", "toDateTime", "concode_elem_sep", "DateTimeFieldType", "[", "]", "getFieldTypes"]}
{"code": "ModInteger function ( ModInteger arg0 , ModInteger arg1 ) { if ( arg0 == null ) return null ; return arg0 . remainder ( arg1 ) ; }", "nl": "modinteger remainder . concode_field_sep java.math.BigInteger val concode_elem_sep ModIntegerRing ring concode_field_sep java.math.BigInteger getSymmetricVal concode_elem_sep int MISIGN concode_elem_sep ModInteger gcd concode_elem_sep ModInteger sum concode_elem_sep int compareTo concode_elem_sep ModInteger MINEG concode_elem_sep ModInteger MISUM concode_elem_sep int hashCode concode_elem_sep ModInteger MIDIF concode_elem_sep ModInteger divide concode_elem_sep ModInteger multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep ModInteger inverse concode_elem_sep int MICOMP concode_elem_sep java.math.BigInteger getVal concode_elem_sep boolean isUnit concode_elem_sep ModInteger subtract concode_elem_sep ModInteger MIABS concode_elem_sep ModInteger MIINV concode_elem_sep ModInteger[] egcd concode_elem_sep java.math.BigInteger getModul concode_elem_sep ModInteger abs concode_elem_sep ModInteger MIQ concode_elem_sep ModInteger negate concode_elem_sep boolean equals concode_elem_sep ModInteger clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep ModInteger MIPROD concode_elem_sep ModInteger remainder", "code_tokens": ["ModInteger", "function", "(", "ModInteger", "arg0", ",", "ModInteger", "arg1", ")", "{", "if", "(", "arg0", "==", "null", ")", "return", "null", ";", "return", "arg0", ".", "remainder", "(", "arg1", ")", ";", "}"], "nl_tokens": ["modinteger", "remainder", ".", "concode_field_sep", "java", ".", "math", ".", "BigInteger", "val", "concode_elem_sep", "ModIntegerRing", "ring", "concode_field_sep", "java", ".", "math", ".", "BigInteger", "getSymmetricVal", "concode_elem_sep", "int", "MISIGN", "concode_elem_sep", "ModInteger", "gcd", "concode_elem_sep", "ModInteger", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "ModInteger", "MINEG", "concode_elem_sep", "ModInteger", "MISUM", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "ModInteger", "MIDIF", "concode_elem_sep", "ModInteger", "divide", "concode_elem_sep", "ModInteger", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "ModInteger", "inverse", "concode_elem_sep", "int", "MICOMP", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "getVal", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "ModInteger", "subtract", "concode_elem_sep", "ModInteger", "MIABS", "concode_elem_sep", "ModInteger", "MIINV", "concode_elem_sep", "ModInteger", "[", "]", "egcd", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "getModul", "concode_elem_sep", "ModInteger", "abs", "concode_elem_sep", "ModInteger", "MIQ", "concode_elem_sep", "ModInteger", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "ModInteger", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "ModInteger", "MIPROD", "concode_elem_sep", "ModInteger", "remainder"]}
{"code": "Coords function ( ) { return this . position . getTopoCoords ( ) ; }", "nl": "topologische position concode_field_sep long serialVersionUID concode_elem_sep PositionInfo position concode_elem_sep HashSet<Edge<TNode,TEdge>> edges concode_elem_sep VisualGraph<TNode,TEdge> graph concode_field_sep void setGraph concode_elem_sep void setPos concode_elem_sep void unsetGraph concode_elem_sep VisualGraph<TNode,TEdge> getGraph concode_elem_sep PositionInfo getPositionInfo concode_elem_sep Color getColor concode_elem_sep Coords getSchematicPosition concode_elem_sep void iterate", "code_tokens": ["Coords", "function", "(", ")", "{", "return", "this", ".", "position", ".", "getTopoCoords", "(", ")", ";", "}"], "nl_tokens": ["topologische", "position", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "PositionInfo", "position", "concode_elem_sep", "HashSet", "<", "Edge", "<", "TNode", ",", "TEdge", ">>", "edges", "concode_elem_sep", "VisualGraph", "<", "TNode", ",", "TEdge", ">", "graph", "concode_field_sep", "void", "setGraph", "concode_elem_sep", "void", "setPos", "concode_elem_sep", "void", "unsetGraph", "concode_elem_sep", "VisualGraph", "<", "TNode", ",", "TEdge", ">", "getGraph", "concode_elem_sep", "PositionInfo", "getPositionInfo", "concode_elem_sep", "Color", "getColor", "concode_elem_sep", "Coords", "getSchematicPosition", "concode_elem_sep", "void", "iterate"]}
{"code": "Object function ( UIRunnable arg0 , IUIContext arg1 ) { start ( ) ; try { Object loc0 = arg0 . runWithResult ( ) ; arg1 . wait ( TransactionCompleteCondition . forTransaction ( this ) , TRANSACTION_TIMEOUT ) ; return loc0 ; } finally { stop ( ) ; } }", "nl": "run this runnable as a transaction . concode_field_sep StackListener stackListener concode_elem_sep CommandStackTransaction UNCHECKED_TRANSACTION concode_elem_sep CommandStack stack concode_elem_sep List<Object> commands concode_elem_sep long TRANSACTION_TIMEOUT concode_elem_sep boolean started concode_field_sep boolean addEvent concode_elem_sep boolean containsUnfinishedCommmands concode_elem_sep void stop concode_elem_sep void stop concode_elem_sep CommandStackTransaction forStack concode_elem_sep boolean removeEvent concode_elem_sep void stackChanged concode_elem_sep CommandStackTransaction start concode_elem_sep CommandStackTransaction start concode_elem_sep CommandStackTransaction forActiveEditor concode_elem_sep boolean isStarted concode_elem_sep boolean isComplete concode_elem_sep boolean isComplete", "code_tokens": ["Object", "function", "(", "UIRunnable", "arg0", ",", "IUIContext", "arg1", ")", "{", "start", "(", ")", ";", "try", "{", "Object", "loc0", "=", "arg0", ".", "runWithResult", "(", ")", ";", "arg1", ".", "wait", "(", "TransactionCompleteCondition", ".", "forTransaction", "(", "this", ")", ",", "TRANSACTION_TIMEOUT", ")", ";", "return", "loc0", ";", "}", "finally", "{", "stop", "(", ")", ";", "}", "}"], "nl_tokens": ["run", "this", "runnable", "as", "a", "transaction", ".", "concode_field_sep", "StackListener", "stackListener", "concode_elem_sep", "CommandStackTransaction", "UNCHECKED_TRANSACTION", "concode_elem_sep", "CommandStack", "stack", "concode_elem_sep", "List", "<", "Object", ">", "commands", "concode_elem_sep", "long", "TRANSACTION_TIMEOUT", "concode_elem_sep", "boolean", "started", "concode_field_sep", "boolean", "addEvent", "concode_elem_sep", "boolean", "containsUnfinishedCommmands", "concode_elem_sep", "void", "stop", "concode_elem_sep", "void", "stop", "concode_elem_sep", "CommandStackTransaction", "forStack", "concode_elem_sep", "boolean", "removeEvent", "concode_elem_sep", "void", "stackChanged", "concode_elem_sep", "CommandStackTransaction", "start", "concode_elem_sep", "CommandStackTransaction", "start", "concode_elem_sep", "CommandStackTransaction", "forActiveEditor", "concode_elem_sep", "boolean", "isStarted", "concode_elem_sep", "boolean", "isComplete", "concode_elem_sep", "boolean", "isComplete"]}
{"code": "boolean function ( ) { return aliasSpecificLockModes != null && ! aliasSpecificLockModes . isEmpty ( ) ; }", "nl": "does this lockoptions object define alias-specific lock modes ? concode_field_sep Map<String,LockMode> aliasSpecificLockModes concode_elem_sep int NO_WAIT concode_elem_sep LockOptions NONE concode_elem_sep boolean scope concode_elem_sep int SKIP_LOCKED concode_elem_sep LockOptions READ concode_elem_sep LockOptions UPGRADE concode_elem_sep LockMode lockMode concode_elem_sep int timeout concode_elem_sep int WAIT_FOREVER concode_field_sep LockMode getLockMode concode_elem_sep LockOptions makeCopy concode_elem_sep LockMode getEffectiveLockMode concode_elem_sep int getAliasLockCount concode_elem_sep LockOptions setLockMode concode_elem_sep Iterator getAliasLockIterator concode_elem_sep LockOptions setAliasSpecificLockMode concode_elem_sep LockMode getAliasSpecificLockMode concode_elem_sep LockOptions setTimeOut concode_elem_sep LockMode findGreatestLockMode concode_elem_sep int getTimeOut concode_elem_sep LockOptions copy concode_elem_sep LockOptions setScope concode_elem_sep boolean getScope", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "aliasSpecificLockModes", "!=", "null", "&", "&", "!", "aliasSpecificLockModes", ".", "isEmpty", "(", ")", ";", "}"], "nl_tokens": ["does", "this", "lockoptions", "object", "define", "alias", "-", "specific", "lock", "modes", "?", "concode_field_sep", "Map", "<", "String", ",", "LockMode", ">", "aliasSpecificLockModes", "concode_elem_sep", "int", "NO_WAIT", "concode_elem_sep", "LockOptions", "NONE", "concode_elem_sep", "boolean", "scope", "concode_elem_sep", "int", "SKIP_LOCKED", "concode_elem_sep", "LockOptions", "READ", "concode_elem_sep", "LockOptions", "UPGRADE", "concode_elem_sep", "LockMode", "lockMode", "concode_elem_sep", "int", "timeout", "concode_elem_sep", "int", "WAIT_FOREVER", "concode_field_sep", "LockMode", "getLockMode", "concode_elem_sep", "LockOptions", "makeCopy", "concode_elem_sep", "LockMode", "getEffectiveLockMode", "concode_elem_sep", "int", "getAliasLockCount", "concode_elem_sep", "LockOptions", "setLockMode", "concode_elem_sep", "Iterator", "getAliasLockIterator", "concode_elem_sep", "LockOptions", "setAliasSpecificLockMode", "concode_elem_sep", "LockMode", "getAliasSpecificLockMode", "concode_elem_sep", "LockOptions", "setTimeOut", "concode_elem_sep", "LockMode", "findGreatestLockMode", "concode_elem_sep", "int", "getTimeOut", "concode_elem_sep", "LockOptions", "copy", "concode_elem_sep", "LockOptions", "setScope", "concode_elem_sep", "boolean", "getScope"]}
{"code": "void function ( String [ ] arg0 ) { SpringApplication . run ( PriceApplication . class , arg0 ) ; }", "nl": "microservice entry point concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["void", "function", "(", "String", "[", "]", "arg0", ")", "{", "SpringApplication", ".", "run", "(", "PriceApplication", ".", "class", ",", "arg0", ")", ";", "}"], "nl_tokens": ["microservice", "entry", "point", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "void function ( ) { if ( lastUsedIterator == null ) { throw new IllegalStateException ( \"srini_string\" ) ; } lastUsedIterator . remove ( ) ; lastUsedIterator = null ; }", "nl": "removes from the underlying collection the last element returned . this method calls remove on the underlying iterator and it may throw an unsupportedoperationexception if the underlying iterator does not support this method . concode_field_sep Iterator lastUsedIterator concode_elem_sep Object root concode_elem_sep Transformer transformer concode_elem_sep boolean hasNext concode_elem_sep Iterator currentIterator concode_elem_sep ArrayStack stack concode_elem_sep Object currentValue concode_field_sep Object next concode_elem_sep void findNextByIterator concode_elem_sep boolean hasNext concode_elem_sep void findNext concode_elem_sep void updateCurrentIterator", "code_tokens": ["void", "function", "(", ")", "{", "if", "(", "lastUsedIterator", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", "\"srini_string\"", ")", ";", "}", "lastUsedIterator", ".", "remove", "(", ")", ";", "lastUsedIterator", "=", "null", ";", "}"], "nl_tokens": ["removes", "from", "the", "underlying", "collection", "the", "last", "element", "returned", ".", "this", "method", "calls", "remove", "on", "the", "underlying", "iterator", "and", "it", "may", "throw", "an", "unsupportedoperationexception", "if", "the", "underlying", "iterator", "does", "not", "support", "this", "method", ".", "concode_field_sep", "Iterator", "lastUsedIterator", "concode_elem_sep", "Object", "root", "concode_elem_sep", "Transformer", "transformer", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "Iterator", "currentIterator", "concode_elem_sep", "ArrayStack", "stack", "concode_elem_sep", "Object", "currentValue", "concode_field_sep", "Object", "next", "concode_elem_sep", "void", "findNextByIterator", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "findNext", "concode_elem_sep", "void", "updateCurrentIterator"]}
{"code": "PreviewNode function ( ) { return fParent ; }", "nl": "returns the change element 's parent . concode_field_sep int PARTLY_ACTIVE concode_elem_sep int[][] ACTIVATION_TABLE concode_elem_sep int INACTIVE concode_elem_sep PreviewNode[] EMPTY_CHILDREN concode_elem_sep int ACTIVE concode_elem_sep PreviewNode fParent concode_field_sep void feedInput concode_elem_sep void setEnabled concode_elem_sep PreviewNode[] getChildren concode_elem_sep boolean hasOneGroupCategory concode_elem_sep String getText concode_elem_sep boolean hasDerived concode_elem_sep ChangePreviewViewerDescriptor getChangePreviewViewerDescriptor concode_elem_sep void setEnabledShallow concode_elem_sep int getActive concode_elem_sep void initialize concode_elem_sep ImageDescriptor getImageDescriptor", "code_tokens": ["PreviewNode", "function", "(", ")", "{", "return", "fParent", ";", "}"], "nl_tokens": ["returns", "the", "change", "element", "'", "s", "parent", ".", "concode_field_sep", "int", "PARTLY_ACTIVE", "concode_elem_sep", "int", "[", "]", "[", "]", "ACTIVATION_TABLE", "concode_elem_sep", "int", "INACTIVE", "concode_elem_sep", "PreviewNode", "[", "]", "EMPTY_CHILDREN", "concode_elem_sep", "int", "ACTIVE", "concode_elem_sep", "PreviewNode", "fParent", "concode_field_sep", "void", "feedInput", "concode_elem_sep", "void", "setEnabled", "concode_elem_sep", "PreviewNode", "[", "]", "getChildren", "concode_elem_sep", "boolean", "hasOneGroupCategory", "concode_elem_sep", "String", "getText", "concode_elem_sep", "boolean", "hasDerived", "concode_elem_sep", "ChangePreviewViewerDescriptor", "getChangePreviewViewerDescriptor", "concode_elem_sep", "void", "setEnabledShallow", "concode_elem_sep", "int", "getActive", "concode_elem_sep", "void", "initialize", "concode_elem_sep", "ImageDescriptor", "getImageDescriptor"]}
{"code": "void function ( String arg0 ) { if ( this . selectClause . length ( ) > 0 ) { this . selectClause . append ( \"srini_string\" ) ; this . guesstimatedBufferSize += 2 ; } this . selectClause . append ( arg0 ) ; this . guesstimatedBufferSize += arg0 . length ( ) ; }", "nl": "appends a select clause fragment concode_field_sep LockOptions lockOptions concode_elem_sep int guesstimatedBufferSize concode_elem_sep StringBuilder whereClause concode_elem_sep Dialect dialect concode_elem_sep StringBuilder selectClause concode_elem_sep String outerJoinsAfterWhere concode_elem_sep String outerJoinsAfterFrom concode_elem_sep StringBuilder fromClause concode_elem_sep String comment concode_elem_sep StringBuilder orderByClause concode_field_sep void appendFromClauseFragment concode_elem_sep void appendFromClauseFragment concode_elem_sep void setOuterJoins concode_elem_sep void setLockOptions concode_elem_sep void appendOrderByFragment concode_elem_sep void setComment concode_elem_sep String toStatementString concode_elem_sep boolean isNotEmpty concode_elem_sep boolean isNotEmpty concode_elem_sep String cleanRestrictions concode_elem_sep void setLockMode concode_elem_sep void appendRestrictions", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "if", "(", "this", ".", "selectClause", ".", "length", "(", ")", ">", "0", ")", "{", "this", ".", "selectClause", ".", "append", "(", "\"srini_string\"", ")", ";", "this", ".", "guesstimatedBufferSize", "+=", "2", ";", "}", "this", ".", "selectClause", ".", "append", "(", "arg0", ")", ";", "this", ".", "guesstimatedBufferSize", "+=", "arg0", ".", "length", "(", ")", ";", "}"], "nl_tokens": ["appends", "a", "select", "clause", "fragment", "concode_field_sep", "LockOptions", "lockOptions", "concode_elem_sep", "int", "guesstimatedBufferSize", "concode_elem_sep", "StringBuilder", "whereClause", "concode_elem_sep", "Dialect", "dialect", "concode_elem_sep", "StringBuilder", "selectClause", "concode_elem_sep", "String", "outerJoinsAfterWhere", "concode_elem_sep", "String", "outerJoinsAfterFrom", "concode_elem_sep", "StringBuilder", "fromClause", "concode_elem_sep", "String", "comment", "concode_elem_sep", "StringBuilder", "orderByClause", "concode_field_sep", "void", "appendFromClauseFragment", "concode_elem_sep", "void", "appendFromClauseFragment", "concode_elem_sep", "void", "setOuterJoins", "concode_elem_sep", "void", "setLockOptions", "concode_elem_sep", "void", "appendOrderByFragment", "concode_elem_sep", "void", "setComment", "concode_elem_sep", "String", "toStatementString", "concode_elem_sep", "boolean", "isNotEmpty", "concode_elem_sep", "boolean", "isNotEmpty", "concode_elem_sep", "String", "cleanRestrictions", "concode_elem_sep", "void", "setLockMode", "concode_elem_sep", "void", "appendRestrictions"]}
{"code": "long function ( ) { return - 1 ; }", "nl": "return the events of interest to this recorder . concode_field_sep Resolver resolver concode_elem_sep ActionListener al concode_elem_sep long lastEventTime concode_field_sep long getLastEventTime concode_elem_sep void recordEvent concode_elem_sep void insertStep concode_elem_sep Step createStep concode_elem_sep void addActionListener concode_elem_sep Step getStep concode_elem_sep void record concode_elem_sep void start concode_elem_sep void terminate concode_elem_sep ActionListener getListener concode_elem_sep Resolver getResolver concode_elem_sep void setStatus", "code_tokens": ["long", "function", "(", ")", "{", "return", "-", "1", ";", "}"], "nl_tokens": ["return", "the", "events", "of", "interest", "to", "this", "recorder", ".", "concode_field_sep", "Resolver", "resolver", "concode_elem_sep", "ActionListener", "al", "concode_elem_sep", "long", "lastEventTime", "concode_field_sep", "long", "getLastEventTime", "concode_elem_sep", "void", "recordEvent", "concode_elem_sep", "void", "insertStep", "concode_elem_sep", "Step", "createStep", "concode_elem_sep", "void", "addActionListener", "concode_elem_sep", "Step", "getStep", "concode_elem_sep", "void", "record", "concode_elem_sep", "void", "start", "concode_elem_sep", "void", "terminate", "concode_elem_sep", "ActionListener", "getListener", "concode_elem_sep", "Resolver", "getResolver", "concode_elem_sep", "void", "setStatus"]}
{"code": "ResourceEditPropertyBuilder function ( boolean arg0 ) { this . isTesting = arg0 ; return this ; }", "nl": "indicate if property is in testing mode concode_field_sep boolean isTesting concode_elem_sep String typeName concode_elem_sep Clob propertyValue concode_elem_sep Clob exampleValue concode_elem_sep boolean isEncrypted concode_elem_sep String propContName concode_elem_sep Integer descriptorId concode_elem_sep String typeContName concode_elem_sep Integer typeId concode_elem_sep Clob defaultValue concode_elem_sep String resourceName concode_elem_sep String fcExternalKey concode_elem_sep String technicalKey concode_elem_sep String mik concode_elem_sep Integer propContextId concode_elem_sep String origin concode_elem_sep Integer cardinalityProperty concode_elem_sep Integer propertyValueTypeId concode_elem_sep String displayName concode_elem_sep String fcOwner concode_elem_sep Integer propertyId concode_elem_sep Integer masterTypeId concode_elem_sep boolean isNullable concode_elem_sep String fcExternalLink concode_elem_sep String validationRegex concode_elem_sep String loadedFor concode_elem_sep boolean isOptional concode_elem_sep String validationLogic concode_elem_sep String descriptorOrigin concode_elem_sep Integer typeContextId concode_elem_sep Clob propertyComment concode_field_sep ResourceEditPropertyBuilder withDisplayAndTechKeyName concode_elem_sep ResourceEditPropertyBuilder withOrigin concode_elem_sep ResourceEditPropertyBuilder withValidationRegex concode_elem_sep ResourceEditPropertyBuilder withIsEncrypted concode_elem_sep ResourceEditPropertyBuilder withDescriptorOrigin concode_elem_sep Clob convert concode_elem_sep ResourceEditPropertyBuilder withTechnicalKey concode_elem_sep ResourceEditPropertyBuilder withMasterResTypeName concode_elem_sep ResourceEditPropertyBuilder withLoadedFor concode_elem_sep ResourceEditPropertyBuilder withDisplayName concode_elem_sep ResourceEditPropertyBuilder withValue concode_elem_sep ResourceEditPropertyBuilder withFcExternalLink concode_elem_sep ResourceEditPropertyBuilder withDefaultValue concode_elem_sep ResourceEditPropertyBuilder withDescriptorId concode_elem_sep ResourceEditPropertyBuilder withTypeId concode_elem_sep ResourceEditPropertyBuilder withDescriptor concode_elem_sep ResourceEditPropertyBuilder withCardinality concode_elem_sep ResourceEditPropertyBuilder withPropTypeContName concode_elem_sep ResourceEditPropertyBuilder withValidationLogic concode_elem_sep ResourceEditPropertyBuilder withPropertyContextTypeId concode_elem_sep ResourceEditPropertyBuilder withPropertyId concode_elem_sep ResourceEditPropertyBuilder withPropContName concode_elem_sep ResourceEditPropertyBuilder withComment concode_elem_sep ResourceEditPropertyBuilder withFcOwner concode_elem_sep ResourceEditPropertyBuilder withMasterResTypeId concode_elem_sep ResourceEditPropertyBuilder withFcExternalKey concode_elem_sep ResourceEditProperty build concode_elem_sep ResourceEditPropertyBuilder withExampleValue concode_elem_sep ResourceEditPropertyBuilder withResourceName concode_elem_sep ResourceEditPropertyBuilder withPropContextId concode_elem_sep ResourceEditPropertyBuilder withIsNullable", "code_tokens": ["ResourceEditPropertyBuilder", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "isTesting", "=", "arg0", ";", "return", "this", ";", "}"], "nl_tokens": ["indicate", "if", "property", "is", "in", "testing", "mode", "concode_field_sep", "boolean", "isTesting", "concode_elem_sep", "String", "typeName", "concode_elem_sep", "Clob", "propertyValue", "concode_elem_sep", "Clob", "exampleValue", "concode_elem_sep", "boolean", "isEncrypted", "concode_elem_sep", "String", "propContName", "concode_elem_sep", "Integer", "descriptorId", "concode_elem_sep", "String", "typeContName", "concode_elem_sep", "Integer", "typeId", "concode_elem_sep", "Clob", "defaultValue", "concode_elem_sep", "String", "resourceName", "concode_elem_sep", "String", "fcExternalKey", "concode_elem_sep", "String", "technicalKey", "concode_elem_sep", "String", "mik", "concode_elem_sep", "Integer", "propContextId", "concode_elem_sep", "String", "origin", "concode_elem_sep", "Integer", "cardinalityProperty", "concode_elem_sep", "Integer", "propertyValueTypeId", "concode_elem_sep", "String", "displayName", "concode_elem_sep", "String", "fcOwner", "concode_elem_sep", "Integer", "propertyId", "concode_elem_sep", "Integer", "masterTypeId", "concode_elem_sep", "boolean", "isNullable", "concode_elem_sep", "String", "fcExternalLink", "concode_elem_sep", "String", "validationRegex", "concode_elem_sep", "String", "loadedFor", "concode_elem_sep", "boolean", "isOptional", "concode_elem_sep", "String", "validationLogic", "concode_elem_sep", "String", "descriptorOrigin", "concode_elem_sep", "Integer", "typeContextId", "concode_elem_sep", "Clob", "propertyComment", "concode_field_sep", "ResourceEditPropertyBuilder", "withDisplayAndTechKeyName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withOrigin", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValidationRegex", "concode_elem_sep", "ResourceEditPropertyBuilder", "withIsEncrypted", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptorOrigin", "concode_elem_sep", "Clob", "convert", "concode_elem_sep", "ResourceEditPropertyBuilder", "withTechnicalKey", "concode_elem_sep", "ResourceEditPropertyBuilder", "withMasterResTypeName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withLoadedFor", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDisplayName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcExternalLink", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDefaultValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptorId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptor", "concode_elem_sep", "ResourceEditPropertyBuilder", "withCardinality", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropTypeContName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValidationLogic", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropertyContextTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropertyId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropContName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withComment", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcOwner", "concode_elem_sep", "ResourceEditPropertyBuilder", "withMasterResTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcExternalKey", "concode_elem_sep", "ResourceEditProperty", "build", "concode_elem_sep", "ResourceEditPropertyBuilder", "withExampleValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withResourceName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropContextId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withIsNullable"]}
{"code": "Object function ( Object arg0 ) { int loc0 = ( hashCode ( arg0 ) & 0x7FFFFFFF ) % elementData . length ; HashMapEntry loc1 = elementData [ loc0 ] ; while ( loc1 != null ) { if ( keyEquals ( arg0 , loc1 . arg0 ) ) return loc1 . arg0 ; loc1 = loc1 . next ; } return null ; }", "nl": "answers the stored key that is equal to the specified key . concode_field_sep HashMapEntry next concode_elem_sep HashMapEntry[] elementData concode_elem_sep int start concode_elem_sep int threshold concode_elem_sep IElementComparer comparer concode_elem_sep HashMapEntry entry concode_elem_sep float loadFactor concode_elem_sep int elementCount concode_elem_sep int lastSlot concode_elem_sep EmptyEnumerator emptyEnumerator concode_elem_sep int firstSlot concode_elem_sep Object value concode_elem_sep boolean key concode_elem_sep int DEFAULT_CAPACITY concode_field_sep boolean containsKey concode_elem_sep Enumeration keys concode_elem_sep void rehash concode_elem_sep boolean keyEquals concode_elem_sep Object put concode_elem_sep Object remove concode_elem_sep int size concode_elem_sep boolean hasMoreElements concode_elem_sep boolean hasMoreElements concode_elem_sep void computeMaxSize concode_elem_sep int hashCode concode_elem_sep Enumeration elements concode_elem_sep Object get concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep void appendToStringWithCommaNL concode_elem_sep HashMapEntry getEntry concode_elem_sep Object nextElement concode_elem_sep Object nextElement", "code_tokens": ["Object", "function", "(", "Object", "arg0", ")", "{", "int", "loc0", "=", "(", "hashCode", "(", "arg0", ")", "&", "0x7FFFFFFF", ")", "%", "elementData", ".", "length", ";", "HashMapEntry", "loc1", "=", "elementData", "[", "loc0", "]", ";", "while", "(", "loc1", "!=", "null", ")", "{", "if", "(", "keyEquals", "(", "arg0", ",", "loc1", ".", "arg0", ")", ")", "return", "loc1", ".", "arg0", ";", "loc1", "=", "loc1", ".", "next", ";", "}", "return", "null", ";", "}"], "nl_tokens": ["answers", "the", "stored", "key", "that", "is", "equal", "to", "the", "specified", "key", ".", "concode_field_sep", "HashMapEntry", "next", "concode_elem_sep", "HashMapEntry", "[", "]", "elementData", "concode_elem_sep", "int", "start", "concode_elem_sep", "int", "threshold", "concode_elem_sep", "IElementComparer", "comparer", "concode_elem_sep", "HashMapEntry", "entry", "concode_elem_sep", "float", "loadFactor", "concode_elem_sep", "int", "elementCount", "concode_elem_sep", "int", "lastSlot", "concode_elem_sep", "EmptyEnumerator", "emptyEnumerator", "concode_elem_sep", "int", "firstSlot", "concode_elem_sep", "Object", "value", "concode_elem_sep", "boolean", "key", "concode_elem_sep", "int", "DEFAULT_CAPACITY", "concode_field_sep", "boolean", "containsKey", "concode_elem_sep", "Enumeration", "keys", "concode_elem_sep", "void", "rehash", "concode_elem_sep", "boolean", "keyEquals", "concode_elem_sep", "Object", "put", "concode_elem_sep", "Object", "remove", "concode_elem_sep", "int", "size", "concode_elem_sep", "boolean", "hasMoreElements", "concode_elem_sep", "boolean", "hasMoreElements", "concode_elem_sep", "void", "computeMaxSize", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Enumeration", "elements", "concode_elem_sep", "Object", "get", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "appendToStringWithCommaNL", "concode_elem_sep", "HashMapEntry", "getEntry", "concode_elem_sep", "Object", "nextElement", "concode_elem_sep", "Object", "nextElement"]}
{"code": "String function ( IResource arg0 ) { return markLTR ( arg0 . getName ( ) , \"srini_string\" ) ; }", "nl": "returns a label for a resource name . concode_field_sep PlaceHolder placeHolder concode_field_sep String getURLPart concode_elem_sep String getFilePattern concode_elem_sep String markLTR concode_elem_sep String getVersionName concode_elem_sep String getPathLabel", "code_tokens": ["String", "function", "(", "IResource", "arg0", ")", "{", "return", "markLTR", "(", "arg0", ".", "getName", "(", ")", ",", "\"srini_string\"", ")", ";", "}"], "nl_tokens": ["returns", "a", "label", "for", "a", "resource", "name", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "getURLPart", "concode_elem_sep", "String", "getFilePattern", "concode_elem_sep", "String", "markLTR", "concode_elem_sep", "String", "getVersionName", "concode_elem_sep", "String", "getPathLabel"]}
{"code": "ByRef < T > function ( TransactionLocal < T > arg0 ) { final ByRef < T > loc0 = ( ByRef < T > ) _locals . get ( arg0 ) ; if ( null != loc0 ) return loc0 ; final ByRef < T > loc1 = ByRef . newInstance ( arg0 . initialValueFor ( this ) ) ; _locals . put ( arg0 , loc1 ) ; return loc1 ; }", "nl": "retrieves the value of a transaction local variables . if this is the first time the variable is accessed transactionlocal #initialvaluefor transaction will provide the initial value . concode_field_sep ObjectContainerBase _container concode_elem_sep Transaction _systemTransaction concode_elem_sep Map<TransactionLocal<?>,Object> _locals concode_elem_sep Tree _delete concode_elem_sep List4 _transactionListeners concode_elem_sep ObjectContainer _objectContainer concode_elem_sep ReferenceSystem _referenceSystem concode_field_sep void slotFreePointerOnCommit concode_elem_sep void slotFreePointerOnCommit concode_elem_sep ObjectContainerBase container concode_elem_sep void commitTransactionListeners concode_elem_sep void commit concode_elem_sep void checkSynchronization concode_elem_sep void writeUpdateAdjustIndexes concode_elem_sep void addNewReference concode_elem_sep boolean delete concode_elem_sep void clearAll concode_elem_sep ObjectContainer objectContainer concode_elem_sep void deactivate concode_elem_sep void slotFreeOnRollback concode_elem_sep void removeReference concode_elem_sep void produceUpdateSlotChange concode_elem_sep boolean isDeleted concode_elem_sep void slotDelete concode_elem_sep void commitReferenceSystem concode_elem_sep void rollbackReferenceSystem concode_elem_sep boolean supportsVirtualFields concode_elem_sep Context context concode_elem_sep void close concode_elem_sep Transaction systemTransaction concode_elem_sep void rollback concode_elem_sep void processDeletes concode_elem_sep void addTransactionListener concode_elem_sep void setPointer concode_elem_sep void setPointer concode_elem_sep void dontDelete concode_elem_sep ObjectReference referenceForId concode_elem_sep void clear concode_elem_sep void slotFreeOnRollbackCommitSetPointer concode_elem_sep void slotFreePointerOnRollback concode_elem_sep void traverseDelete concode_elem_sep void discardReferenceSystem concode_elem_sep void slotFreeOnCommit concode_elem_sep void rollBackTransactionListeners concode_elem_sep Reflector reflector concode_elem_sep Transaction parentTransaction concode_elem_sep void removeObjectFromReferenceSystem concode_elem_sep void setOutSideRepresentation concode_elem_sep ObjectReference referenceForObject concode_elem_sep boolean isSystemTransaction concode_elem_sep String toString concode_elem_sep Object wrap concode_elem_sep ReferenceSystem referenceSystem concode_elem_sep Object objectForIdFromCache", "code_tokens": ["ByRef", "<", "T", ">", "function", "(", "TransactionLocal", "<", "T", ">", "arg0", ")", "{", "final", "ByRef", "<", "T", ">", "loc0", "=", "(", "ByRef", "<", "T", ">", ")", "_locals", ".", "get", "(", "arg0", ")", ";", "if", "(", "null", "!=", "loc0", ")", "return", "loc0", ";", "final", "ByRef", "<", "T", ">", "loc1", "=", "ByRef", ".", "newInstance", "(", "arg0", ".", "initialValueFor", "(", "this", ")", ")", ";", "_locals", ".", "put", "(", "arg0", ",", "loc1", ")", ";", "return", "loc1", ";", "}"], "nl_tokens": ["retrieves", "the", "value", "of", "a", "transaction", "local", "variables", ".", "if", "this", "is", "the", "first", "time", "the", "variable", "is", "accessed", "transactionlocal", "#initialvaluefor transaction will provide the initial value . concode_field_sep ObjectContainerBase _container concode_elem_sep Transaction _systemTransaction concode_elem_sep Map<TransactionLocal<?>,Object> _locals concode_elem_sep Tree _delete concode_elem_sep List4 _transactionListeners concode_elem_sep ObjectContainer _objectContainer concode_elem_sep ReferenceSystem _referenceSystem concode_field_sep void slotFreePointerOnCommit concode_elem_sep void slotFreePointerOnCommit concode_elem_sep ObjectContainerBase container concode_elem_sep void commitTransactionListeners concode_elem_sep void commit concode_elem_sep void checkSynchronization concode_elem_sep void writeUpdateAdjustIndexes concode_elem_sep void addNewReference concode_elem_sep boolean delete concode_elem_sep void clearAll concode_elem_sep ObjectContainer objectContainer concode_elem_sep void deactivate concode_elem_sep void slotFreeOnRollback concode_elem_sep void removeReference concode_elem_sep void produceUpdateSlotChange concode_elem_sep boolean isDeleted concode_elem_sep void slotDelete concode_elem_sep void commitReferenceSystem concode_elem_sep void rollbackReferenceSystem concode_elem_sep boolean supportsVirtualFields concode_elem_sep Context context concode_elem_sep void close concode_elem_sep Transaction systemTransaction concode_elem_sep void rollback concode_elem_sep void processDeletes concode_elem_sep void addTransactionListener concode_elem_sep void setPointer concode_elem_sep void setPointer concode_elem_sep void dontDelete concode_elem_sep ObjectReference referenceForId concode_elem_sep void clear concode_elem_sep void slotFreeOnRollbackCommitSetPointer concode_elem_sep void slotFreePointerOnRollback concode_elem_sep void traverseDelete concode_elem_sep void discardReferenceSystem concode_elem_sep void slotFreeOnCommit concode_elem_sep void rollBackTransactionListeners concode_elem_sep Reflector reflector concode_elem_sep Transaction parentTransaction concode_elem_sep void removeObjectFromReferenceSystem concode_elem_sep void setOutSideRepresentation concode_elem_sep ObjectReference referenceForObject concode_elem_sep boolean isSystemTransaction concode_elem_sep String toString concode_elem_sep Object wrap concode_elem_sep ReferenceSystem referenceSystem concode_elem_sep Object objectForIdFromCache"]}
{"code": "Phenotype function ( Phenotype arg0 ) { String loc0 = \"srini_string\" ; checkArgument ( arg0 . getId ( ) . isPresent ( ) , loc0 ) ; checkArgument ( arg0 . getIssueNumber ( ) . isPresent ( ) , loc0 ) ; db . savePhenotype ( arg0 ) ; github . patchIssue ( arg0 ) ; return arg0 ; }", "nl": "persist the phenotype given and return it - does not create it . concode_field_sep GithubAPIFactory factory concode_elem_sep GithubAPI github concode_elem_sep boolean up concode_elem_sep DatabaseService db concode_field_sep void init concode_elem_sep List<Phenotype> search concode_elem_sep PhenotypeCreation createRequest concode_elem_sep void syncPhenotype concode_elem_sep Phenotype checkInDb concode_elem_sep void syncPhenotypes concode_elem_sep Phenotype checkInGithub concode_elem_sep void shutdown concode_elem_sep Phenotype getPhenotypeById", "code_tokens": ["Phenotype", "function", "(", "Phenotype", "arg0", ")", "{", "String", "loc0", "=", "\"srini_string\"", ";", "checkArgument", "(", "arg0", ".", "getId", "(", ")", ".", "isPresent", "(", ")", ",", "loc0", ")", ";", "checkArgument", "(", "arg0", ".", "getIssueNumber", "(", ")", ".", "isPresent", "(", ")", ",", "loc0", ")", ";", "db", ".", "savePhenotype", "(", "arg0", ")", ";", "github", ".", "patchIssue", "(", "arg0", ")", ";", "return", "arg0", ";", "}"], "nl_tokens": ["persist", "the", "phenotype", "given", "and", "return", "it", "-", "does", "not", "create", "it", ".", "concode_field_sep", "GithubAPIFactory", "factory", "concode_elem_sep", "GithubAPI", "github", "concode_elem_sep", "boolean", "up", "concode_elem_sep", "DatabaseService", "db", "concode_field_sep", "void", "init", "concode_elem_sep", "List", "<", "Phenotype", ">", "search", "concode_elem_sep", "PhenotypeCreation", "createRequest", "concode_elem_sep", "void", "syncPhenotype", "concode_elem_sep", "Phenotype", "checkInDb", "concode_elem_sep", "void", "syncPhenotypes", "concode_elem_sep", "Phenotype", "checkInGithub", "concode_elem_sep", "void", "shutdown", "concode_elem_sep", "Phenotype", "getPhenotypeById"]}
{"code": "void function ( boolean arg0 ) { this . useCriterion4 = arg0 ; }", "nl": "set usecriterion4 . concode_field_sep boolean useCriterion4 concode_elem_sep ColorPolynomial<C> pi concode_elem_sep int i concode_elem_sep ColorPolynomial<C> pj concode_elem_sep int j concode_elem_sep boolean useCriterion3 concode_elem_sep int n concode_elem_sep boolean toZero concode_field_sep int getPairNumber concode_elem_sep int hashCode concode_elem_sep void setUseCriterion3 concode_elem_sep boolean equals concode_elem_sep boolean getUseCriterion3 concode_elem_sep void setZero concode_elem_sep boolean isZero concode_elem_sep String toString concode_elem_sep int compareTo concode_elem_sep void pairNumber concode_elem_sep boolean getUseCriterion4", "code_tokens": ["void", "function", "(", "boolean", "arg0", ")", "{", "this", ".", "useCriterion4", "=", "arg0", ";", "}"], "nl_tokens": ["set", "usecriterion4", ".", "concode_field_sep", "boolean", "useCriterion4", "concode_elem_sep", "ColorPolynomial", "<", "C", ">", "pi", "concode_elem_sep", "int", "i", "concode_elem_sep", "ColorPolynomial", "<", "C", ">", "pj", "concode_elem_sep", "int", "j", "concode_elem_sep", "boolean", "useCriterion3", "concode_elem_sep", "int", "n", "concode_elem_sep", "boolean", "toZero", "concode_field_sep", "int", "getPairNumber", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "void", "setUseCriterion3", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "getUseCriterion3", "concode_elem_sep", "void", "setZero", "concode_elem_sep", "boolean", "isZero", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "void", "pairNumber", "concode_elem_sep", "boolean", "getUseCriterion4"]}
{"code": "Property function ( ) { return property ; }", "nl": "the violated property . concode_field_sep String xmlname concode_elem_sep Time onExit concode_elem_sep HashMap<Integer,Violation> violationsMap concode_elem_sep Time onEntry concode_elem_sep Property property concode_elem_sep String name concode_elem_sep long serialVersionUID concode_elem_sep Time time concode_field_sep Object readResolve concode_elem_sep Object readResolve concode_elem_sep Violation[] findViolations concode_elem_sep String toStringWithMethod concode_elem_sep String xmlString concode_elem_sep String xmlString concode_elem_sep Violation[] viosWithConfGEQ concode_elem_sep Violation[] withKind concode_elem_sep int hashCode concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep boolean equals concode_elem_sep Violation get concode_elem_sep Violation get concode_elem_sep Violation get concode_elem_sep String toNiceString concode_elem_sep String toNiceString concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep Time time concode_elem_sep Violation[] viosWithConfLT concode_elem_sep Violation[] withTime", "code_tokens": ["Property", "function", "(", ")", "{", "return", "property", ";", "}"], "nl_tokens": ["the", "violated", "property", ".", "concode_field_sep", "String", "xmlname", "concode_elem_sep", "Time", "onExit", "concode_elem_sep", "HashMap", "<", "Integer", ",", "Violation", ">", "violationsMap", "concode_elem_sep", "Time", "onEntry", "concode_elem_sep", "Property", "property", "concode_elem_sep", "String", "name", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "Time", "time", "concode_field_sep", "Object", "readResolve", "concode_elem_sep", "Object", "readResolve", "concode_elem_sep", "Violation", "[", "]", "findViolations", "concode_elem_sep", "String", "toStringWithMethod", "concode_elem_sep", "String", "xmlString", "concode_elem_sep", "String", "xmlString", "concode_elem_sep", "Violation", "[", "]", "viosWithConfGEQ", "concode_elem_sep", "Violation", "[", "]", "withKind", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Violation", "get", "concode_elem_sep", "Violation", "get", "concode_elem_sep", "Violation", "get", "concode_elem_sep", "String", "toNiceString", "concode_elem_sep", "String", "toNiceString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Time", "time", "concode_elem_sep", "Violation", "[", "]", "viosWithConfLT", "concode_elem_sep", "Violation", "[", "]", "withTime"]}
{"code": "String function ( ) { return cacheName ; }", "nl": "retrieves the name of the cache concode_field_sep String PUBLISH_THREAD_NAME concode_elem_sep String cacheName concode_elem_sep int eventQueueLength concode_elem_sep ExecutorService executorService concode_elem_sep Object EVENTQUEUELOCK concode_elem_sep Queue<LoggingEvent> eventQueue concode_elem_sep ICachePublisher cachePublisher concode_elem_sep int capacity concode_field_sep ExecutorService createExecutorService concode_elem_sep void add concode_elem_sep Future<Boolean> publishCache concode_elem_sep void publish concode_elem_sep PublishContext startPublish concode_elem_sep void flushAndPublishQueue concode_elem_sep void endPublish", "code_tokens": ["String", "function", "(", ")", "{", "return", "cacheName", ";", "}"], "nl_tokens": ["retrieves", "the", "name", "of", "the", "cache", "concode_field_sep", "String", "PUBLISH_THREAD_NAME", "concode_elem_sep", "String", "cacheName", "concode_elem_sep", "int", "eventQueueLength", "concode_elem_sep", "ExecutorService", "executorService", "concode_elem_sep", "Object", "EVENTQUEUELOCK", "concode_elem_sep", "Queue", "<", "LoggingEvent", ">", "eventQueue", "concode_elem_sep", "ICachePublisher", "cachePublisher", "concode_elem_sep", "int", "capacity", "concode_field_sep", "ExecutorService", "createExecutorService", "concode_elem_sep", "void", "add", "concode_elem_sep", "Future", "<", "Boolean", ">", "publishCache", "concode_elem_sep", "void", "publish", "concode_elem_sep", "PublishContext", "startPublish", "concode_elem_sep", "void", "flushAndPublishQueue", "concode_elem_sep", "void", "endPublish"]}
{"code": "boolean function ( ) { return ring . isAssociative ( ) ; }", "nl": "query if this ring is associative . concode_field_sep GenPolynomialRing<C> ring concode_elem_sep int isField concode_elem_sep GenPolynomial<C> modul concode_field_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep AlgebraicNumber<C> interpolate concode_elem_sep AlgebraicNumber<C> parse concode_elem_sep AlgebraicNumber<C> parse concode_elem_sep java.math.BigInteger characteristic concode_elem_sep AlgebraicNumber<C> random concode_elem_sep AlgebraicNumber<C> random concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep AlgebraicNumber<C> getONE concode_elem_sep AlgebraicNumber<C> getZERO concode_elem_sep AlgebraicNumber<C> fromInteger concode_elem_sep AlgebraicNumber<C> fromInteger concode_elem_sep String toString concode_elem_sep AlgebraicNumber<C> copy concode_elem_sep AlgebraicNumber<C> chineseRemainder", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "ring", ".", "isAssociative", "(", ")", ";", "}"], "nl_tokens": ["query", "if", "this", "ring", "is", "associative", ".", "concode_field_sep", "GenPolynomialRing", "<", "C", ">", "ring", "concode_elem_sep", "int", "isField", "concode_elem_sep", "GenPolynomial", "<", "C", ">", "modul", "concode_field_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "interpolate", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "parse", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "parse", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "random", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "getONE", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "getZERO", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "fromInteger", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "fromInteger", "concode_elem_sep", "String", "toString", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "copy", "concode_elem_sep", "AlgebraicNumber", "<", "C", ">", "chineseRemainder"]}
{"code": "void function ( Config4Impl arg0 ) { }", "nl": "always call super if you override concode_field_sep PlaceHolder placeHolder concode_field_sep void lockFile concode_elem_sep Object createWeakReference concode_elem_sep Reflector createReflector concode_elem_sep Class constructorClass concode_elem_sep void killYapRef concode_elem_sep boolean isConnected concode_elem_sep Thread addShutdownHook concode_elem_sep Object weakReferenceTarget concode_elem_sep Constructor serializableConstructor concode_elem_sep void forEachCollectionElement concode_elem_sep void registerCollections concode_elem_sep long nanoTime concode_elem_sep Reflector reflectorForType concode_elem_sep boolean methodIsAvailable concode_elem_sep Object deserialize concode_elem_sep void extendConfiguration concode_elem_sep Config4Class extendConfiguration concode_elem_sep void unlockFile concode_elem_sep Object createActivateObjectReference concode_elem_sep int ver concode_elem_sep NetTypeHandler[] types concode_elem_sep void setAccessible concode_elem_sep String format concode_elem_sep boolean isEnum concode_elem_sep void throwIllegalArgumentException concode_elem_sep Object createReferenceQueue concode_elem_sep byte[] serialize concode_elem_sep void pollReferenceQueue concode_elem_sep Object getContextClassLoader concode_elem_sep Object getYapRefObject concode_elem_sep Class loadClass concode_elem_sep void removeShutdownHook concode_elem_sep boolean isCollectionTranslator concode_elem_sep boolean useNativeSerialization concode_elem_sep NetTypeHandler[] netTypes", "code_tokens": ["void", "function", "(", "Config4Impl", "arg0", ")", "{", "}"], "nl_tokens": ["always", "call", "super", "if", "you", "override", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "lockFile", "concode_elem_sep", "Object", "createWeakReference", "concode_elem_sep", "Reflector", "createReflector", "concode_elem_sep", "Class", "constructorClass", "concode_elem_sep", "void", "killYapRef", "concode_elem_sep", "boolean", "isConnected", "concode_elem_sep", "Thread", "addShutdownHook", "concode_elem_sep", "Object", "weakReferenceTarget", "concode_elem_sep", "Constructor", "serializableConstructor", "concode_elem_sep", "void", "forEachCollectionElement", "concode_elem_sep", "void", "registerCollections", "concode_elem_sep", "long", "nanoTime", "concode_elem_sep", "Reflector", "reflectorForType", "concode_elem_sep", "boolean", "methodIsAvailable", "concode_elem_sep", "Object", "deserialize", "concode_elem_sep", "void", "extendConfiguration", "concode_elem_sep", "Config4Class", "extendConfiguration", "concode_elem_sep", "void", "unlockFile", "concode_elem_sep", "Object", "createActivateObjectReference", "concode_elem_sep", "int", "ver", "concode_elem_sep", "NetTypeHandler", "[", "]", "types", "concode_elem_sep", "void", "setAccessible", "concode_elem_sep", "String", "format", "concode_elem_sep", "boolean", "isEnum", "concode_elem_sep", "void", "throwIllegalArgumentException", "concode_elem_sep", "Object", "createReferenceQueue", "concode_elem_sep", "byte", "[", "]", "serialize", "concode_elem_sep", "void", "pollReferenceQueue", "concode_elem_sep", "Object", "getContextClassLoader", "concode_elem_sep", "Object", "getYapRefObject", "concode_elem_sep", "Class", "loadClass", "concode_elem_sep", "void", "removeShutdownHook", "concode_elem_sep", "boolean", "isCollectionTranslator", "concode_elem_sep", "boolean", "useNativeSerialization", "concode_elem_sep", "NetTypeHandler", "[", "]", "netTypes"]}
{"code": "void function ( final Object arg0 ) { this . endIndex = Array . getLength ( arg0 ) ; this . startIndex = 0 ; this . array = arg0 ; this . index = 0 ; }", "nl": "sets the array that the arrayiterator should iterate over . if an array has previously been set using the single-arg constructor or this method then that array is discarded in favour of this one . iteration is restarted at the start of the new array . although this can be used to reset iteration , the #reset methodis a more effective choice . concode_field_sep int index concode_elem_sep int startIndex concode_elem_sep Object array concode_elem_sep int endIndex concode_field_sep Object next concode_elem_sep void checkBound concode_elem_sep Object getArray concode_elem_sep void reset concode_elem_sep boolean hasNext concode_elem_sep void remove", "code_tokens": ["void", "function", "(", "final", "Object", "arg0", ")", "{", "this", ".", "endIndex", "=", "Array", ".", "getLength", "(", "arg0", ")", ";", "this", ".", "startIndex", "=", "0", ";", "this", ".", "array", "=", "arg0", ";", "this", ".", "index", "=", "0", ";", "}"], "nl_tokens": ["sets", "the", "array", "that", "the", "arrayiterator", "should", "iterate", "over", ".", "if", "an", "array", "has", "previously", "been", "set", "using", "the", "single", "-", "arg", "constructor", "or", "this", "method", "then", "that", "array", "is", "discarded", "in", "favour", "of", "this", "one", ".", "iteration", "is", "restarted", "at", "the", "start", "of", "the", "new", "array", ".", "although", "this", "can", "be", "used", "to", "reset", "iteration", ",", "the", "#reset methodis a more effective choice . concode_field_sep int index concode_elem_sep int startIndex concode_elem_sep Object array concode_elem_sep int endIndex concode_field_sep Object next concode_elem_sep void checkBound concode_elem_sep Object getArray concode_elem_sep void reset concode_elem_sep boolean hasNext concode_elem_sep void remove"]}
{"code": "void function ( double arg0 ) { assert ( currentWindowStart >= 0 ) ; slideWindowTo ( arg0 ) ; blockedTimeInWindow = arg0 - currentMarker ; currentMarker = arg0 ; eventDepth -- ; warmDownTimer . schedule ( TICK_TIME ) ; }", "nl": "called when an event is done busying up the ui thread . concode_field_sep int eventDepth concode_elem_sep GraphModel graphModel concode_elem_sep Timer warmDownTimer concode_elem_sep int TICK_TIME concode_elem_sep double blockedTimeInWindow concode_elem_sep double[] weights concode_elem_sep double WINDOW_SLIDE_INCREMENT concode_elem_sep double weightedUtilizationPercent concode_elem_sep double WINDOW_WIDTH concode_elem_sep double maxUtilization concode_elem_sep double[] windowHistory concode_elem_sep double currentWindowStart concode_elem_sep double currentMarker concode_elem_sep double scaledWeightedUtilization concode_field_sep void updateWeightedUtilization concode_elem_sep double calculateCurrentUtilization concode_elem_sep double getThreadUtilization concode_elem_sep void enterBlocking concode_elem_sep void slideWindowTo concode_elem_sep void run concode_elem_sep double dotProduct", "code_tokens": ["void", "function", "(", "double", "arg0", ")", "{", "assert", "(", "currentWindowStart", ">=", "0", ")", ";", "slideWindowTo", "(", "arg0", ")", ";", "blockedTimeInWindow", "=", "arg0", "-", "currentMarker", ";", "currentMarker", "=", "arg0", ";", "eventDepth", "-", "-", ";", "warmDownTimer", ".", "schedule", "(", "TICK_TIME", ")", ";", "}"], "nl_tokens": ["called", "when", "an", "event", "is", "done", "busying", "up", "the", "ui", "thread", ".", "concode_field_sep", "int", "eventDepth", "concode_elem_sep", "GraphModel", "graphModel", "concode_elem_sep", "Timer", "warmDownTimer", "concode_elem_sep", "int", "TICK_TIME", "concode_elem_sep", "double", "blockedTimeInWindow", "concode_elem_sep", "double", "[", "]", "weights", "concode_elem_sep", "double", "WINDOW_SLIDE_INCREMENT", "concode_elem_sep", "double", "weightedUtilizationPercent", "concode_elem_sep", "double", "WINDOW_WIDTH", "concode_elem_sep", "double", "maxUtilization", "concode_elem_sep", "double", "[", "]", "windowHistory", "concode_elem_sep", "double", "currentWindowStart", "concode_elem_sep", "double", "currentMarker", "concode_elem_sep", "double", "scaledWeightedUtilization", "concode_field_sep", "void", "updateWeightedUtilization", "concode_elem_sep", "double", "calculateCurrentUtilization", "concode_elem_sep", "double", "getThreadUtilization", "concode_elem_sep", "void", "enterBlocking", "concode_elem_sep", "void", "slideWindowTo", "concode_elem_sep", "void", "run", "concode_elem_sep", "double", "dotProduct"]}
{"code": "boolean function ( ) { return idler . isIdle ( ) ; }", "nl": "determine if the ui thread is idle concode_field_sep SWTIdler idler concode_field_sep String toString concode_elem_sep void waitForIdle", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "idler", ".", "isIdle", "(", ")", ";", "}"], "nl_tokens": ["determine", "if", "the", "ui", "thread", "is", "idle", "concode_field_sep", "SWTIdler", "idler", "concode_field_sep", "String", "toString", "concode_elem_sep", "void", "waitForIdle"]}
{"code": "int function ( int arg0 ) { int loc0 = ( arg0 >> 8 ) & 0xff ; return loc0 ; }", "nl": "method to get the green value from a pixel represented as an int concode_field_sep int x concode_elem_sep int y concode_elem_sep DigitalPicture picture concode_field_sep int getCol concode_elem_sep int correctValue concode_elem_sep Color getColor concode_elem_sep void setAlpha concode_elem_sep int getRow concode_elem_sep int getBlue concode_elem_sep int getBlue concode_elem_sep void setRed concode_elem_sep void setGreen concode_elem_sep double getAverage concode_elem_sep int getAlpha concode_elem_sep void updatePicture concode_elem_sep int getX concode_elem_sep int getY concode_elem_sep int getRed concode_elem_sep int getRed concode_elem_sep void setColor concode_elem_sep double colorDistance concode_elem_sep double colorDistance concode_elem_sep void setBlue concode_elem_sep String toString", "code_tokens": ["int", "function", "(", "int", "arg0", ")", "{", "int", "loc0", "=", "(", "arg0", ">>", "8", ")", "&", "0xff", ";", "return", "loc0", ";", "}"], "nl_tokens": ["method", "to", "get", "the", "green", "value", "from", "a", "pixel", "represented", "as", "an", "int", "concode_field_sep", "int", "x", "concode_elem_sep", "int", "y", "concode_elem_sep", "DigitalPicture", "picture", "concode_field_sep", "int", "getCol", "concode_elem_sep", "int", "correctValue", "concode_elem_sep", "Color", "getColor", "concode_elem_sep", "void", "setAlpha", "concode_elem_sep", "int", "getRow", "concode_elem_sep", "int", "getBlue", "concode_elem_sep", "int", "getBlue", "concode_elem_sep", "void", "setRed", "concode_elem_sep", "void", "setGreen", "concode_elem_sep", "double", "getAverage", "concode_elem_sep", "int", "getAlpha", "concode_elem_sep", "void", "updatePicture", "concode_elem_sep", "int", "getX", "concode_elem_sep", "int", "getY", "concode_elem_sep", "int", "getRed", "concode_elem_sep", "int", "getRed", "concode_elem_sep", "void", "setColor", "concode_elem_sep", "double", "colorDistance", "concode_elem_sep", "double", "colorDistance", "concode_elem_sep", "void", "setBlue", "concode_elem_sep", "String", "toString"]}
{"code": "GnpNetLayer function ( String arg0 ) { IPv4NetID loc0 = createNewID ( ) ; return newNetLayer ( loc0 ) ; }", "nl": "random node form group concode_field_sep double DEFAULT_DOWN_BANDWIDTH concode_elem_sep GnpSubnet subnet concode_elem_sep GnpPosition gnpPosition concode_elem_sep double DEFAULT_UP_BANDWIDTH concode_elem_sep int experimentSize concode_elem_sep double downBandwidth concode_elem_sep double upBandwidth concode_elem_sep PeerDistributionFromBitmap peerDistribution concode_elem_sep GeoLocation geoLoc concode_elem_sep Logger log concode_elem_sep Long idCounter concode_elem_sep Set<Long> usedIds concode_field_sep IPv4NetID createNewID concode_elem_sep void setDownBandwidth concode_elem_sep void setBandwidthManager concode_elem_sep void setPbaPeriod concode_elem_sep void setExperimentSize concode_elem_sep GnpNetLayer createComponent concode_elem_sep void setLatencyModel concode_elem_sep void setUpBandwidth concode_elem_sep void setBitmapPath", "code_tokens": ["GnpNetLayer", "function", "(", "String", "arg0", ")", "{", "IPv4NetID", "loc0", "=", "createNewID", "(", ")", ";", "return", "newNetLayer", "(", "loc0", ")", ";", "}"], "nl_tokens": ["random", "node", "form", "group", "concode_field_sep", "double", "DEFAULT_DOWN_BANDWIDTH", "concode_elem_sep", "GnpSubnet", "subnet", "concode_elem_sep", "GnpPosition", "gnpPosition", "concode_elem_sep", "double", "DEFAULT_UP_BANDWIDTH", "concode_elem_sep", "int", "experimentSize", "concode_elem_sep", "double", "downBandwidth", "concode_elem_sep", "double", "upBandwidth", "concode_elem_sep", "PeerDistributionFromBitmap", "peerDistribution", "concode_elem_sep", "GeoLocation", "geoLoc", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "Long", "idCounter", "concode_elem_sep", "Set", "<", "Long", ">", "usedIds", "concode_field_sep", "IPv4NetID", "createNewID", "concode_elem_sep", "void", "setDownBandwidth", "concode_elem_sep", "void", "setBandwidthManager", "concode_elem_sep", "void", "setPbaPeriod", "concode_elem_sep", "void", "setExperimentSize", "concode_elem_sep", "GnpNetLayer", "createComponent", "concode_elem_sep", "void", "setLatencyModel", "concode_elem_sep", "void", "setUpBandwidth", "concode_elem_sep", "void", "setBitmapPath"]}
{"code": "void function ( ) { try { tx . begin ( ) ; em . persist ( createEmployee ( \"srini_string\" , \"srini_string\" , 100 ) ) ; tx . commit ( ) ; } catch ( Exception loc0 ) { throw new Exception ( \"srini_string\" ) ; } }", "nl": "adds new employee concode_field_sep UserTransaction tx concode_elem_sep EntityManager em concode_field_sep void performFailCall concode_elem_sep String failInFirstCall concode_elem_sep Employee createEmployee concode_elem_sep int[] getEmployeeIDsNoEM concode_elem_sep String failAfterCalls concode_elem_sep String failInSecondCall", "code_tokens": ["void", "function", "(", ")", "{", "try", "{", "tx", ".", "begin", "(", ")", ";", "em", ".", "persist", "(", "createEmployee", "(", "\"srini_string\"", ",", "\"srini_string\"", ",", "100", ")", ")", ";", "tx", ".", "commit", "(", ")", ";", "}", "catch", "(", "Exception", "loc0", ")", "{", "throw", "new", "Exception", "(", "\"srini_string\"", ")", ";", "}", "}"], "nl_tokens": ["adds", "new", "employee", "concode_field_sep", "UserTransaction", "tx", "concode_elem_sep", "EntityManager", "em", "concode_field_sep", "void", "performFailCall", "concode_elem_sep", "String", "failInFirstCall", "concode_elem_sep", "Employee", "createEmployee", "concode_elem_sep", "int", "[", "]", "getEmployeeIDsNoEM", "concode_elem_sep", "String", "failAfterCalls", "concode_elem_sep", "String", "failInSecondCall"]}
{"code": "IJavaElement function ( IEditorInput arg0 ) { Assert . isNotNull ( arg0 ) ; IJavaElement loc0 = JavaUI . getWorkingCopyManager ( ) . getWorkingCopy ( arg0 ) ; if ( loc0 != null ) return loc0 ; return arg0 . getAdapter ( IJavaElement . class ) ; }", "nl": "note : this is an inlined version of javaui #geteditorinputjavaelement ieditorinput , which is not available in 3.1 . concode_field_sep PlaceHolder placeHolder concode_field_sep IOpenable getJavaInput concode_elem_sep void selectInEditor concode_elem_sep IEditorPart getActiveEditor", "code_tokens": ["IJavaElement", "function", "(", "IEditorInput", "arg0", ")", "{", "Assert", ".", "isNotNull", "(", "arg0", ")", ";", "IJavaElement", "loc0", "=", "JavaUI", ".", "getWorkingCopyManager", "(", ")", ".", "getWorkingCopy", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "return", "loc0", ";", "return", "arg0", ".", "getAdapter", "(", "IJavaElement", ".", "class", ")", ";", "}"], "nl_tokens": ["note", ":", "this", "is", "an", "inlined", "version", "of", "javaui", "#geteditorinputjavaelement ieditorinput , which is not available in 3.1 . concode_field_sep PlaceHolder placeHolder concode_field_sep IOpenable getJavaInput concode_elem_sep void selectInEditor concode_elem_sep IEditorPart getActiveEditor"]}
{"code": "void function ( boolean arg0 ) { debug = arg0 ; }", "nl": "enable or disable debug mode by default , debug mode is enabled for development builds and disabled for exported apks - see buildconfig.debug concode_field_sep int LOG_GENERAL concode_elem_sep OnLogListener logListener concode_elem_sep int LOG_COMMAND concode_elem_sep int LOG_NONE concode_elem_sep int LOG_ALL concode_elem_sep int logTypes concode_elem_sep int LOG_OUTPUT concode_elem_sep boolean sanityChecks concode_elem_sep boolean debug concode_elem_sep String TAG concode_field_sep void setOnLogListener concode_elem_sep boolean getSanityChecksEnabled concode_elem_sep OnLogListener getOnLogListener concode_elem_sep void log concode_elem_sep void logCommon concode_elem_sep void onLog concode_elem_sep void setSanityChecksEnabled concode_elem_sep boolean getLogTypeEnabledEffective concode_elem_sep boolean getDebug concode_elem_sep void logCommand concode_elem_sep boolean getLogTypeEnabled concode_elem_sep void logOutput concode_elem_sep void setLogTypeEnabled concode_elem_sep boolean getSanityChecksEnabledEffective concode_elem_sep boolean onMainThread", "code_tokens": ["void", "function", "(", "boolean", "arg0", ")", "{", "debug", "=", "arg0", ";", "}"], "nl_tokens": ["enable", "or", "disable", "debug", "mode", "by", "default", ",", "debug", "mode", "is", "enabled", "for", "development", "builds", "and", "disabled", "for", "exported", "apks", "-", "see", "buildconfig", ".", "debug", "concode_field_sep", "int", "LOG_GENERAL", "concode_elem_sep", "OnLogListener", "logListener", "concode_elem_sep", "int", "LOG_COMMAND", "concode_elem_sep", "int", "LOG_NONE", "concode_elem_sep", "int", "LOG_ALL", "concode_elem_sep", "int", "logTypes", "concode_elem_sep", "int", "LOG_OUTPUT", "concode_elem_sep", "boolean", "sanityChecks", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "String", "TAG", "concode_field_sep", "void", "setOnLogListener", "concode_elem_sep", "boolean", "getSanityChecksEnabled", "concode_elem_sep", "OnLogListener", "getOnLogListener", "concode_elem_sep", "void", "log", "concode_elem_sep", "void", "logCommon", "concode_elem_sep", "void", "onLog", "concode_elem_sep", "void", "setSanityChecksEnabled", "concode_elem_sep", "boolean", "getLogTypeEnabledEffective", "concode_elem_sep", "boolean", "getDebug", "concode_elem_sep", "void", "logCommand", "concode_elem_sep", "boolean", "getLogTypeEnabled", "concode_elem_sep", "void", "logOutput", "concode_elem_sep", "void", "setLogTypeEnabled", "concode_elem_sep", "boolean", "getSanityChecksEnabledEffective", "concode_elem_sep", "boolean", "onMainThread"]}
{"code": "Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( ring , val . sum ( arg0 . val ) ) ; }", "nl": "residue summation . concode_field_sep GenPolynomial<C> val concode_elem_sep ResidueRing<C> ring concode_elem_sep int isunit concode_field_sep int signum concode_elem_sep boolean isONE concode_elem_sep Residue<C> inverse concode_elem_sep boolean isUnit concode_elem_sep Residue<C> subtract concode_elem_sep Residue<C> gcd concode_elem_sep int compareTo concode_elem_sep Residue<C>[] egcd concode_elem_sep boolean isConstant concode_elem_sep Residue<C> monic concode_elem_sep Residue<C> abs concode_elem_sep int hashCode concode_elem_sep Residue<C> negate concode_elem_sep boolean equals concode_elem_sep Residue<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep Residue<C> divide concode_elem_sep Residue<C> multiply concode_elem_sep Residue<C> remainder", "code_tokens": ["Residue", "<", "C", ">", "function", "(", "Residue", "<", "C", ">", "arg0", ")", "{", "return", "new", "Residue", "<", "C", ">", "(", "ring", ",", "val", ".", "sum", "(", "arg0", ".", "val", ")", ")", ";", "}"], "nl_tokens": ["residue", "summation", ".", "concode_field_sep", "GenPolynomial", "<", "C", ">", "val", "concode_elem_sep", "ResidueRing", "<", "C", ">", "ring", "concode_elem_sep", "int", "isunit", "concode_field_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "Residue", "<", "C", ">", "inverse", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "Residue", "<", "C", ">", "subtract", "concode_elem_sep", "Residue", "<", "C", ">", "gcd", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Residue", "<", "C", ">", "[", "]", "egcd", "concode_elem_sep", "boolean", "isConstant", "concode_elem_sep", "Residue", "<", "C", ">", "monic", "concode_elem_sep", "Residue", "<", "C", ">", "abs", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Residue", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Residue", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Residue", "<", "C", ">", "divide", "concode_elem_sep", "Residue", "<", "C", ">", "multiply", "concode_elem_sep", "Residue", "<", "C", ">", "remainder"]}
{"code": "Buffer function ( Buffer arg0 ) { return SynchronizedBuffer . decorate ( arg0 ) ; }", "nl": "returns a synchronized buffer backed by the given buffer . much like the synchronized collections returned by java.util.collections , you must manually synchronize on the returned buffer 's iterator to avoid non-deterministic behavior : buffer b = bufferutils.synchronizedbuffer mybuffer ; synchronized b iterator i = b.iterator ; while i.hasnext process i.next ; concode_field_sep Buffer EMPTY_BUFFER concode_field_sep Buffer predicatedBuffer concode_elem_sep Buffer transformedBuffer concode_elem_sep Buffer unmodifiableBuffer concode_elem_sep Buffer typedBuffer concode_elem_sep Buffer blockingBuffer", "code_tokens": ["Buffer", "function", "(", "Buffer", "arg0", ")", "{", "return", "SynchronizedBuffer", ".", "decorate", "(", "arg0", ")", ";", "}"], "nl_tokens": ["returns", "a", "synchronized", "buffer", "backed", "by", "the", "given", "buffer", ".", "much", "like", "the", "synchronized", "collections", "returned", "by", "java", ".", "util", ".", "collections", ",", "you", "must", "manually", "synchronize", "on", "the", "returned", "buffer", "'", "s", "iterator", "to", "avoid", "non", "-", "deterministic", "behavior", ":", "buffer", "b", "=", "bufferutils", ".", "synchronizedbuffer", "mybuffer", ";", "synchronized", "b", "iterator", "i", "=", "b", ".", "iterator", ";", "while", "i", ".", "hasnext", "process", "i", ".", "next", ";", "concode_field_sep", "Buffer", "EMPTY_BUFFER", "concode_field_sep", "Buffer", "predicatedBuffer", "concode_elem_sep", "Buffer", "transformedBuffer", "concode_elem_sep", "Buffer", "unmodifiableBuffer", "concode_elem_sep", "Buffer", "typedBuffer", "concode_elem_sep", "Buffer", "blockingBuffer"]}
{"code": "MatchResult function ( ) { return new MatchResult ( WIDGET_NOT_FOUND ) ; }", "nl": "create a widget not found match result . concode_field_sep int MATCH concode_elem_sep Collection _widgets concode_elem_sep int _dbComparisons concode_elem_sep Widget _widget concode_elem_sep Hierarchy _hierarchy concode_elem_sep int BFS concode_elem_sep int DFS concode_elem_sep int _type concode_elem_sep ArrayList _list concode_elem_sep int WIDGET_NOT_FOUND concode_elem_sep int MULTIPLE_WIDGETS_FOUND concode_elem_sep int _searchType concode_field_sep Widget getParent concode_elem_sep Collection getRoots concode_elem_sep Widget getWidget concode_elem_sep Collection getWidgets concode_elem_sep Collection getWidgets concode_elem_sep MatchResult match concode_elem_sep void findMatches concode_elem_sep MatchResult multipleFound concode_elem_sep void pause concode_elem_sep boolean contains concode_elem_sep int getType concode_elem_sep MatchResult find concode_elem_sep MatchResult find concode_elem_sep MatchResult find concode_elem_sep MatchResult find concode_elem_sep MatchResult find concode_elem_sep MatchResult find concode_elem_sep void assertNotNull concode_elem_sep void assertNotNull concode_elem_sep MatchResult find0 concode_elem_sep void dispose concode_elem_sep int getFinderRetryInterval concode_elem_sep int getMaxFinderRetries concode_elem_sep void setFound", "code_tokens": ["MatchResult", "function", "(", ")", "{", "return", "new", "MatchResult", "(", "WIDGET_NOT_FOUND", ")", ";", "}"], "nl_tokens": ["create", "a", "widget", "not", "found", "match", "result", ".", "concode_field_sep", "int", "MATCH", "concode_elem_sep", "Collection", "_widgets", "concode_elem_sep", "int", "_dbComparisons", "concode_elem_sep", "Widget", "_widget", "concode_elem_sep", "Hierarchy", "_hierarchy", "concode_elem_sep", "int", "BFS", "concode_elem_sep", "int", "DFS", "concode_elem_sep", "int", "_type", "concode_elem_sep", "ArrayList", "_list", "concode_elem_sep", "int", "WIDGET_NOT_FOUND", "concode_elem_sep", "int", "MULTIPLE_WIDGETS_FOUND", "concode_elem_sep", "int", "_searchType", "concode_field_sep", "Widget", "getParent", "concode_elem_sep", "Collection", "getRoots", "concode_elem_sep", "Widget", "getWidget", "concode_elem_sep", "Collection", "getWidgets", "concode_elem_sep", "Collection", "getWidgets", "concode_elem_sep", "MatchResult", "match", "concode_elem_sep", "void", "findMatches", "concode_elem_sep", "MatchResult", "multipleFound", "concode_elem_sep", "void", "pause", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "int", "getType", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "MatchResult", "find", "concode_elem_sep", "void", "assertNotNull", "concode_elem_sep", "void", "assertNotNull", "concode_elem_sep", "MatchResult", "find0", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "int", "getFinderRetryInterval", "concode_elem_sep", "int", "getMaxFinderRetries", "concode_elem_sep", "void", "setFound"]}
{"code": "ObserverEqValue function ( Method arg0 , Object arg1 ) { return new ObserverEqValue ( arg0 , arg1 ) ; }", "nl": "create an observereqvalue from its basic parts used when reading from a serialized file . concode_field_sep long serialVersionUID concode_elem_sep Method observer concode_elem_sep Object value concode_field_sep String get_observer_str concode_elem_sep int hashCode concode_elem_sep String toCodeStringPreStatement concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep String toCodeString concode_elem_sep boolean evalExceptionMeansFailure concode_elem_sep Object writeReplace concode_elem_sep boolean evaluate concode_elem_sep int getArity concode_elem_sep String toCommentString", "code_tokens": ["ObserverEqValue", "function", "(", "Method", "arg0", ",", "Object", "arg1", ")", "{", "return", "new", "ObserverEqValue", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["create", "an", "observereqvalue", "from", "its", "basic", "parts", "used", "when", "reading", "from", "a", "serialized", "file", ".", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "Method", "observer", "concode_elem_sep", "Object", "value", "concode_field_sep", "String", "get_observer_str", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "String", "toCodeStringPreStatement", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toCodeString", "concode_elem_sep", "boolean", "evalExceptionMeansFailure", "concode_elem_sep", "Object", "writeReplace", "concode_elem_sep", "boolean", "evaluate", "concode_elem_sep", "int", "getArity", "concode_elem_sep", "String", "toCommentString"]}
{"code": "double [ ] function ( UnivariateRealFunction arg0 , double arg1 , double arg2 , double arg3 ) { return bracket ( arg0 , arg1 , arg2 , arg3 , Integer . MAX_VALUE ) ; }", "nl": "this method attempts to find two values a and b satisfying lowerbound f a f b if f is continuous on a , b , this means that a and b bracket a root of f . the algorithm starts by setting a : = initial -1 ; b : = initial +1 , examines the value of the function at a and b and keeps moving the endpoints out by one unit each time through a loop that terminates when one of the following happens : f a f b -- success ! a = lower and b = upper -- convergenceexception integer.max _ value iterations elapse -- convergenceexception note : this method can take integer.max _ value iterations to throw a convergenceexception . unless you are confident that there is a root between lowerbound and upperbound near initial , it is better to use #bracket univariaterealfunction , double , double , double , int , explicitly specifying the maximum number of iterations . concode_field_sep UnivariateRealSolverFactory factory concode_field_sep double solve concode_elem_sep double solve concode_elem_sep double midpoint concode_elem_sep void setup", "code_tokens": ["double", "[", "]", "function", "(", "UnivariateRealFunction", "arg0", ",", "double", "arg1", ",", "double", "arg2", ",", "double", "arg3", ")", "{", "return", "bracket", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ",", "Integer", ".", "MAX_VALUE", ")", ";", "}"], "nl_tokens": ["this", "method", "attempts", "to", "find", "two", "values", "a", "and", "b", "satisfying", "lowerbound", "f", "a", "f", "b", "if", "f", "is", "continuous", "on", "a", ",", "b", ",", "this", "means", "that", "a", "and", "b", "bracket", "a", "root", "of", "f", ".", "the", "algorithm", "starts", "by", "setting", "a", ":", "=", "initial", "-", "1", ";", "b", ":", "=", "initial", "+", "1", ",", "examines", "the", "value", "of", "the", "function", "at", "a", "and", "b", "and", "keeps", "moving", "the", "endpoints", "out", "by", "one", "unit", "each", "time", "through", "a", "loop", "that", "terminates", "when", "one", "of", "the", "following", "happens", ":", "f", "a", "f", "b", "-", "-", "success", "!", "a", "=", "lower", "and", "b", "=", "upper", "-", "-", "convergenceexception", "integer", ".", "max", "_", "value", "iterations", "elapse", "-", "-", "convergenceexception", "note", ":", "this", "method", "can", "take", "integer", ".", "max", "_", "value", "iterations", "to", "throw", "a", "convergenceexception", ".", "unless", "you", "are", "confident", "that", "there", "is", "a", "root", "between", "lowerbound", "and", "upperbound", "near", "initial", ",", "it", "is", "better", "to", "use", "#bracket univariaterealfunction , double , double , double , int , explicitly specifying the maximum number of iterations . concode_field_sep UnivariateRealSolverFactory factory concode_field_sep double solve concode_elem_sep double solve concode_elem_sep double midpoint concode_elem_sep void setup"]}
{"code": "void function ( ) { }", "nl": "called on the event dispatching thread not on the worker thread after the construct method has finished and after done or failed has been invoked . the default implementation does nothing . subclasses may override this method to perform completion actions on the event dispatch thread . concode_field_sep Throwable error concode_elem_sep T value concode_field_sep Throwable getError concode_elem_sep T getValue concode_elem_sep void setError concode_elem_sep void setValue concode_elem_sep void start concode_elem_sep void run concode_elem_sep T construct concode_elem_sep void failed concode_elem_sep void done", "code_tokens": ["void", "function", "(", ")", "{", "}"], "nl_tokens": ["called", "on", "the", "event", "dispatching", "thread", "not", "on", "the", "worker", "thread", "after", "the", "construct", "method", "has", "finished", "and", "after", "done", "or", "failed", "has", "been", "invoked", ".", "the", "default", "implementation", "does", "nothing", ".", "subclasses", "may", "override", "this", "method", "to", "perform", "completion", "actions", "on", "the", "event", "dispatch", "thread", ".", "concode_field_sep", "Throwable", "error", "concode_elem_sep", "T", "value", "concode_field_sep", "Throwable", "getError", "concode_elem_sep", "T", "getValue", "concode_elem_sep", "void", "setError", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "start", "concode_elem_sep", "void", "run", "concode_elem_sep", "T", "construct", "concode_elem_sep", "void", "failed", "concode_elem_sep", "void", "done"]}
{"code": "void function ( IUISemanticEvent arg0 ) { System . out . println ( \"srini_string\" + arg0 ) ; }", "nl": "a describer used for stateful event descrptions concode_field_sep PlaceHolder placeHolder concode_field_sep void notifyStart concode_elem_sep void notifyDispose concode_elem_sep void notifyDisplayNotFound concode_elem_sep void notifyPause concode_elem_sep void notifyAssertionHookAdded concode_elem_sep void notifyControllerStart concode_elem_sep void notifyWrite concode_elem_sep void notifyTrace concode_elem_sep void notifySpyModeToggle concode_elem_sep void notifyStop concode_elem_sep void notifyError concode_elem_sep void notifyRestart", "code_tokens": ["void", "function", "(", "IUISemanticEvent", "arg0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl_tokens": ["a", "describer", "used", "for", "stateful", "event", "descrptions", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "notifyStart", "concode_elem_sep", "void", "notifyDispose", "concode_elem_sep", "void", "notifyDisplayNotFound", "concode_elem_sep", "void", "notifyPause", "concode_elem_sep", "void", "notifyAssertionHookAdded", "concode_elem_sep", "void", "notifyControllerStart", "concode_elem_sep", "void", "notifyWrite", "concode_elem_sep", "void", "notifyTrace", "concode_elem_sep", "void", "notifySpyModeToggle", "concode_elem_sep", "void", "notifyStop", "concode_elem_sep", "void", "notifyError", "concode_elem_sep", "void", "notifyRestart"]}
{"code": "String [ ] function ( final int arg0 ) { return OPERATOR_METRICS [ arg0 ] ; }", "nl": "given an operator type , this method returns an array of metric names indexable by metric id . concode_field_sep String[][] OPERATOR_METRICS concode_field_sep void register", "code_tokens": ["String", "[", "]", "function", "(", "final", "int", "arg0", ")", "{", "return", "OPERATOR_METRICS", "[", "arg0", "]", ";", "}"], "nl_tokens": ["given", "an", "operator", "type", ",", "this", "method", "returns", "an", "array", "of", "metric", "names", "indexable", "by", "metric", "id", ".", "concode_field_sep", "String", "[", "]", "[", "]", "OPERATOR_METRICS", "concode_field_sep", "void", "register"]}
{"code": "void function ( ) { for ( int loc0 = 0 ; loc0 < larnacaAirportNumberOfRunways ; loc0 ++ ) if ( Scenario . getRunwaysArray ( ) [ loc0 ] . isRunwayOccupied ( ) ) { Scenario . getRunwaysArray ( ) [ loc0 ] . setRunwayOccupied ( false ) ; break ; } }", "nl": "free up runway concode_field_sep int larnacaAirportNumberOfRunways concode_elem_sep Passenger[] passengersArray concode_elem_sep Airport larnacaAirport concode_elem_sep Plane[] planesArray concode_elem_sep Flight[] flightsArray concode_elem_sep int numberOfPassengers concode_elem_sep int numberOfFlightAttributes concode_elem_sep Runway[] runwaysArray concode_elem_sep int numberOfFlights concode_field_sep void setLarnacaAirport concode_elem_sep void setPassengersArray concode_elem_sep void initializeLarnacaAirport concode_elem_sep void setFlightsArray concode_elem_sep Passenger[] getPassengersArray concode_elem_sep Object[][] getArrivalsOrDeparturesList concode_elem_sep void loadFromFile concode_elem_sep void initializeRunwaysArray concode_elem_sep Plane[] getPlanesArray concode_elem_sep void setRunwaysArray concode_elem_sep Object[][] getFlightData concode_elem_sep void initializePlanesArray concode_elem_sep void setPlanesArray concode_elem_sep void saveToFile concode_elem_sep void initializeFlightsArray concode_elem_sep boolean checkForFreeRunways concode_elem_sep void initializePassengersArray concode_elem_sep Airport getLarnacaAirport concode_elem_sep Object[] getArrivalsOrDeparturesRecord concode_elem_sep String[] getListOfAllFlightCodes concode_elem_sep Runway[] getRunwaysArray concode_elem_sep Flight[] getFlightsArray concode_elem_sep Object[] getFlightsRow", "code_tokens": ["void", "function", "(", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "larnacaAirportNumberOfRunways", ";", "loc0", "+", "+", ")", "if", "(", "Scenario", ".", "getRunwaysArray", "(", ")", "[", "loc0", "]", ".", "isRunwayOccupied", "(", ")", ")", "{", "Scenario", ".", "getRunwaysArray", "(", ")", "[", "loc0", "]", ".", "setRunwayOccupied", "(", "false", ")", ";", "break", ";", "}", "}"], "nl_tokens": ["free", "up", "runway", "concode_field_sep", "int", "larnacaAirportNumberOfRunways", "concode_elem_sep", "Passenger", "[", "]", "passengersArray", "concode_elem_sep", "Airport", "larnacaAirport", "concode_elem_sep", "Plane", "[", "]", "planesArray", "concode_elem_sep", "Flight", "[", "]", "flightsArray", "concode_elem_sep", "int", "numberOfPassengers", "concode_elem_sep", "int", "numberOfFlightAttributes", "concode_elem_sep", "Runway", "[", "]", "runwaysArray", "concode_elem_sep", "int", "numberOfFlights", "concode_field_sep", "void", "setLarnacaAirport", "concode_elem_sep", "void", "setPassengersArray", "concode_elem_sep", "void", "initializeLarnacaAirport", "concode_elem_sep", "void", "setFlightsArray", "concode_elem_sep", "Passenger", "[", "]", "getPassengersArray", "concode_elem_sep", "Object", "[", "]", "[", "]", "getArrivalsOrDeparturesList", "concode_elem_sep", "void", "loadFromFile", "concode_elem_sep", "void", "initializeRunwaysArray", "concode_elem_sep", "Plane", "[", "]", "getPlanesArray", "concode_elem_sep", "void", "setRunwaysArray", "concode_elem_sep", "Object", "[", "]", "[", "]", "getFlightData", "concode_elem_sep", "void", "initializePlanesArray", "concode_elem_sep", "void", "setPlanesArray", "concode_elem_sep", "void", "saveToFile", "concode_elem_sep", "void", "initializeFlightsArray", "concode_elem_sep", "boolean", "checkForFreeRunways", "concode_elem_sep", "void", "initializePassengersArray", "concode_elem_sep", "Airport", "getLarnacaAirport", "concode_elem_sep", "Object", "[", "]", "getArrivalsOrDeparturesRecord", "concode_elem_sep", "String", "[", "]", "getListOfAllFlightCodes", "concode_elem_sep", "Runway", "[", "]", "getRunwaysArray", "concode_elem_sep", "Flight", "[", "]", "getFlightsArray", "concode_elem_sep", "Object", "[", "]", "getFlightsRow"]}
{"code": "BufferedImage function ( int [ ] arg0 , int arg1 , int arg2 ) { return new BufferedImage ( DirectColorModel . getRGBdefault ( ) , Raster . createWritableRaster ( new SinglePixelPackedSampleModel ( DataBuffer . TYPE_INT , arg1 , arg2 , new int [ ] { 0xff00000 , 0xff00 , 0xff } ) , new DataBufferInt ( arg0 , arg1 * arg2 ) , new Point ( 0 , 0 ) ) , false , null ) ; }", "nl": "converts an array of integer pixels into an image . the array is referenced by the image . concode_field_sep PlaceHolder placeHolder concode_field_sep BufferedImage[] split concode_elem_sep Image createImage concode_elem_sep Image createImage concode_elem_sep BufferedImage toIntImage concode_elem_sep int[] toPixels concode_elem_sep BufferedImage cloneImage concode_elem_sep BufferedImage toBufferedImage concode_elem_sep BufferedImage toBufferedImage concode_elem_sep boolean hasAlpha", "code_tokens": ["BufferedImage", "function", "(", "int", "[", "]", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "return", "new", "BufferedImage", "(", "DirectColorModel", ".", "getRGBdefault", "(", ")", ",", "Raster", ".", "createWritableRaster", "(", "new", "SinglePixelPackedSampleModel", "(", "DataBuffer", ".", "TYPE_INT", ",", "arg1", ",", "arg2", ",", "new", "int", "[", "]", "{", "0xff00000", ",", "0xff00", ",", "0xff", "}", ")", ",", "new", "DataBufferInt", "(", "arg0", ",", "arg1", "*", "arg2", ")", ",", "new", "Point", "(", "0", ",", "0", ")", ")", ",", "false", ",", "null", ")", ";", "}"], "nl_tokens": ["converts", "an", "array", "of", "integer", "pixels", "into", "an", "image", ".", "the", "array", "is", "referenced", "by", "the", "image", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "BufferedImage", "[", "]", "split", "concode_elem_sep", "Image", "createImage", "concode_elem_sep", "Image", "createImage", "concode_elem_sep", "BufferedImage", "toIntImage", "concode_elem_sep", "int", "[", "]", "toPixels", "concode_elem_sep", "BufferedImage", "cloneImage", "concode_elem_sep", "BufferedImage", "toBufferedImage", "concode_elem_sep", "BufferedImage", "toBufferedImage", "concode_elem_sep", "boolean", "hasAlpha"]}
{"code": "PdfWriter function ( ) { return fc ; }", "nl": "gets the underlying pdfwriter . concode_field_sep PdfCopyFieldsImp fc concode_field_sep void setOutlines concode_elem_sep void setViewerPreferences concode_elem_sep void addJavaScript concode_elem_sep void addViewerPreference concode_elem_sep void addDocument concode_elem_sep void addDocument concode_elem_sep void addDocument concode_elem_sep boolean isFullCompression concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setFullCompression concode_elem_sep void close concode_elem_sep void open", "code_tokens": ["PdfWriter", "function", "(", ")", "{", "return", "fc", ";", "}"], "nl_tokens": ["gets", "the", "underlying", "pdfwriter", ".", "concode_field_sep", "PdfCopyFieldsImp", "fc", "concode_field_sep", "void", "setOutlines", "concode_elem_sep", "void", "setViewerPreferences", "concode_elem_sep", "void", "addJavaScript", "concode_elem_sep", "void", "addViewerPreference", "concode_elem_sep", "void", "addDocument", "concode_elem_sep", "void", "addDocument", "concode_elem_sep", "void", "addDocument", "concode_elem_sep", "boolean", "isFullCompression", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setFullCompression", "concode_elem_sep", "void", "close", "concode_elem_sep", "void", "open"]}
{"code": "int function ( Context arg0 ) { WindowManager loc0 = ( WindowManager ) arg0 . getSystemService ( Context . WINDOW_SERVICE ) ; DisplayMetrics loc1 = new DisplayMetrics ( ) ; loc0 . getDefaultDisplay ( ) . getMetrics ( loc1 ) ; return loc1 . widthPixels ; }", "nl": "get screen width concode_field_sep PlaceHolder placeHolder concode_field_sep float dip2Dimension concode_elem_sep Bitmap snapShotWithoutStatusBar concode_elem_sep int getStatusHeight concode_elem_sep Bitmap snapShotWithStatusBar concode_elem_sep float toDimension concode_elem_sep int getScreenHeight", "code_tokens": ["int", "function", "(", "Context", "arg0", ")", "{", "WindowManager", "loc0", "=", "(", "WindowManager", ")", "arg0", ".", "getSystemService", "(", "Context", ".", "WINDOW_SERVICE", ")", ";", "DisplayMetrics", "loc1", "=", "new", "DisplayMetrics", "(", ")", ";", "loc0", ".", "getDefaultDisplay", "(", ")", ".", "getMetrics", "(", "loc1", ")", ";", "return", "loc1", ".", "widthPixels", ";", "}"], "nl_tokens": ["get", "screen", "width", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "float", "dip2Dimension", "concode_elem_sep", "Bitmap", "snapShotWithoutStatusBar", "concode_elem_sep", "int", "getStatusHeight", "concode_elem_sep", "Bitmap", "snapShotWithStatusBar", "concode_elem_sep", "float", "toDimension", "concode_elem_sep", "int", "getScreenHeight"]}
{"code": "LinearLayout function ( Context arg0 , String arg1 , View arg2 , TextView arg3 ) { LinearLayout loc0 = new LinearLayout ( arg0 ) ; loc0 . setOrientation ( LinearLayout . VERTICAL ) ; if ( arg3 == null ) arg3 = new TextView ( arg0 ) ; arg3 . setTextSize ( 10.0f ) ; arg3 . setText ( arg1 ) ; loc0 . addView ( arg3 ) ; loc0 . addView ( arg2 ) ; return loc0 ; }", "nl": "generate linearlayout with given title concode_field_sep double textScale concode_elem_sep ArrayList<MyCard> cardsInPlay concode_elem_sep String TAG concode_field_sep void addCard concode_elem_sep GridView makeGV concode_elem_sep CardView getCardView concode_elem_sep void newCardGroup concode_elem_sep void clearCards", "code_tokens": ["LinearLayout", "function", "(", "Context", "arg0", ",", "String", "arg1", ",", "View", "arg2", ",", "TextView", "arg3", ")", "{", "LinearLayout", "loc0", "=", "new", "LinearLayout", "(", "arg0", ")", ";", "loc0", ".", "setOrientation", "(", "LinearLayout", ".", "VERTICAL", ")", ";", "if", "(", "arg3", "==", "null", ")", "arg3", "=", "new", "TextView", "(", "arg0", ")", ";", "arg3", ".", "setTextSize", "(", "10.0", "f", ")", ";", "arg3", ".", "setText", "(", "arg1", ")", ";", "loc0", ".", "addView", "(", "arg3", ")", ";", "loc0", ".", "addView", "(", "arg2", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["generate", "linearlayout", "with", "given", "title", "concode_field_sep", "double", "textScale", "concode_elem_sep", "ArrayList", "<", "MyCard", ">", "cardsInPlay", "concode_elem_sep", "String", "TAG", "concode_field_sep", "void", "addCard", "concode_elem_sep", "GridView", "makeGV", "concode_elem_sep", "CardView", "getCardView", "concode_elem_sep", "void", "newCardGroup", "concode_elem_sep", "void", "clearCards"]}
{"code": "String function ( ) { return \"srini_string\" + _topDistance + \"srini_string\" + _leftDistance + \"srini_string\" + _endTopDistance + \"srini_string\" + _endLeftDistance + \"srini_string\" ; }", "nl": "methode tostring du vector concode_field_sep double _size concode_elem_sep double _yDirection concode_elem_sep double _endTopDistance concode_elem_sep double _leftDistance concode_elem_sep double _topDistance concode_elem_sep double _xDirection concode_elem_sep double _endLeftDistance concode_field_sep double getLeftDistance concode_elem_sep double getXDirection concode_elem_sep Vector restore concode_elem_sep void setYDirection concode_elem_sep void setLeftDistance concode_elem_sep String save concode_elem_sep void _updateDirection concode_elem_sep void _updateEndDistance concode_elem_sep void setXDirection concode_elem_sep double getEndTopDistance concode_elem_sep void setEndTopDistance concode_elem_sep double getSize concode_elem_sep void setSize concode_elem_sep double getYDirection concode_elem_sep double getEndLeftDistance concode_elem_sep boolean equals concode_elem_sep void setEndLeftDistance concode_elem_sep Vector clone concode_elem_sep void setTopDistance concode_elem_sep double getTopDistance", "code_tokens": ["String", "function", "(", ")", "{", "return", "\"srini_string\"", "+", "_topDistance", "+", "\"srini_string\"", "+", "_leftDistance", "+", "\"srini_string\"", "+", "_endTopDistance", "+", "\"srini_string\"", "+", "_endLeftDistance", "+", "\"srini_string\"", ";", "}"], "nl_tokens": ["methode", "tostring", "du", "vector", "concode_field_sep", "double", "_size", "concode_elem_sep", "double", "_yDirection", "concode_elem_sep", "double", "_endTopDistance", "concode_elem_sep", "double", "_leftDistance", "concode_elem_sep", "double", "_topDistance", "concode_elem_sep", "double", "_xDirection", "concode_elem_sep", "double", "_endLeftDistance", "concode_field_sep", "double", "getLeftDistance", "concode_elem_sep", "double", "getXDirection", "concode_elem_sep", "Vector", "restore", "concode_elem_sep", "void", "setYDirection", "concode_elem_sep", "void", "setLeftDistance", "concode_elem_sep", "String", "save", "concode_elem_sep", "void", "_updateDirection", "concode_elem_sep", "void", "_updateEndDistance", "concode_elem_sep", "void", "setXDirection", "concode_elem_sep", "double", "getEndTopDistance", "concode_elem_sep", "void", "setEndTopDistance", "concode_elem_sep", "double", "getSize", "concode_elem_sep", "void", "setSize", "concode_elem_sep", "double", "getYDirection", "concode_elem_sep", "double", "getEndLeftDistance", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "setEndLeftDistance", "concode_elem_sep", "Vector", "clone", "concode_elem_sep", "void", "setTopDistance", "concode_elem_sep", "double", "getTopDistance"]}
{"code": "float function ( ) { return roll ; }", "nl": "get the current roll of the device in degrees . concode_field_sep float[] magData concode_elem_sep float[] accelData concode_elem_sep Sensor magnetometer concode_elem_sep float roll concode_elem_sep float yaw concode_elem_sep Sensor accelerometer concode_elem_sep Context context concode_elem_sep SensorManagerFactory instance concode_elem_sep SensorManager sensorManager concode_elem_sep float pitch concode_elem_sep float compassBearing concode_elem_sep float FILTER_ALPHA concode_elem_sep Object lock concode_elem_sep GPSTracker locationTracker concode_field_sep Location getLocation concode_elem_sep void onSensorChanged concode_elem_sep void onPause concode_elem_sep Intent getBatteryMonitor concode_elem_sep float getBatteryLevelPercent concode_elem_sep void registerListeners concode_elem_sep int getSatelliteCount concode_elem_sep void onAccuracyChanged concode_elem_sep float[] lowPassFilter concode_elem_sep void onDestroy concode_elem_sep int getBatteryStatus concode_elem_sep double getLongitude concode_elem_sep void recalculateAccelerometer concode_elem_sep double getAltitude concode_elem_sep double getLatitude concode_elem_sep float getCompassBearing concode_elem_sep double getBearing concode_elem_sep void clearGPSCache concode_elem_sep void onResume concode_elem_sep void initSensor concode_elem_sep float getYaw concode_elem_sep boolean isBatteryCharging concode_elem_sep float getPitch concode_elem_sep void initLocationTracker concode_elem_sep int getBatteryLevel concode_elem_sep List<GpsSatellite> getSatellites concode_elem_sep double getSpeed concode_elem_sep SensorManagerFactory getInstance concode_elem_sep SensorManagerFactory getInstance concode_elem_sep void recalculateMagnetometer", "code_tokens": ["float", "function", "(", ")", "{", "return", "roll", ";", "}"], "nl_tokens": ["get", "the", "current", "roll", "of", "the", "device", "in", "degrees", ".", "concode_field_sep", "float", "[", "]", "magData", "concode_elem_sep", "float", "[", "]", "accelData", "concode_elem_sep", "Sensor", "magnetometer", "concode_elem_sep", "float", "roll", "concode_elem_sep", "float", "yaw", "concode_elem_sep", "Sensor", "accelerometer", "concode_elem_sep", "Context", "context", "concode_elem_sep", "SensorManagerFactory", "instance", "concode_elem_sep", "SensorManager", "sensorManager", "concode_elem_sep", "float", "pitch", "concode_elem_sep", "float", "compassBearing", "concode_elem_sep", "float", "FILTER_ALPHA", "concode_elem_sep", "Object", "lock", "concode_elem_sep", "GPSTracker", "locationTracker", "concode_field_sep", "Location", "getLocation", "concode_elem_sep", "void", "onSensorChanged", "concode_elem_sep", "void", "onPause", "concode_elem_sep", "Intent", "getBatteryMonitor", "concode_elem_sep", "float", "getBatteryLevelPercent", "concode_elem_sep", "void", "registerListeners", "concode_elem_sep", "int", "getSatelliteCount", "concode_elem_sep", "void", "onAccuracyChanged", "concode_elem_sep", "float", "[", "]", "lowPassFilter", "concode_elem_sep", "void", "onDestroy", "concode_elem_sep", "int", "getBatteryStatus", "concode_elem_sep", "double", "getLongitude", "concode_elem_sep", "void", "recalculateAccelerometer", "concode_elem_sep", "double", "getAltitude", "concode_elem_sep", "double", "getLatitude", "concode_elem_sep", "float", "getCompassBearing", "concode_elem_sep", "double", "getBearing", "concode_elem_sep", "void", "clearGPSCache", "concode_elem_sep", "void", "onResume", "concode_elem_sep", "void", "initSensor", "concode_elem_sep", "float", "getYaw", "concode_elem_sep", "boolean", "isBatteryCharging", "concode_elem_sep", "float", "getPitch", "concode_elem_sep", "void", "initLocationTracker", "concode_elem_sep", "int", "getBatteryLevel", "concode_elem_sep", "List", "<", "GpsSatellite", ">", "getSatellites", "concode_elem_sep", "double", "getSpeed", "concode_elem_sep", "SensorManagerFactory", "getInstance", "concode_elem_sep", "SensorManagerFactory", "getInstance", "concode_elem_sep", "void", "recalculateMagnetometer"]}
{"code": "PaletteRoot function ( ) { PaletteRoot loc0 = new PaletteRoot ( ) ; loc0 . addAll ( createCategories ( loc0 ) ) ; return loc0 ; }", "nl": "creates the paletteroot and adds all palette elements . concode_field_sep PlaceHolder placeHolder concode_field_sep PaletteContainer createControlGroup concode_elem_sep List createCategories concode_elem_sep PaletteContainer createComponentsDrawer", "code_tokens": ["PaletteRoot", "function", "(", ")", "{", "PaletteRoot", "loc0", "=", "new", "PaletteRoot", "(", ")", ";", "loc0", ".", "addAll", "(", "createCategories", "(", "loc0", ")", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["creates", "the", "paletteroot", "and", "adds", "all", "palette", "elements", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "PaletteContainer", "createControlGroup", "concode_elem_sep", "List", "createCategories", "concode_elem_sep", "PaletteContainer", "createComponentsDrawer"]}
{"code": "byte [ ] function ( PrivateKey arg0 , X509Certificate arg1 , ReplyKeyPack arg2 ) { byte [ ] loc0 = KrbCodec . encode ( arg2 ) ; byte [ ] loc1 ; try { loc1 = PkiUtil . getSignedData ( arg0 , arg1 , loc0 , ID_PKINIT_AUTHDATA ) ; } catch ( PkiException loc2 ) { throw new KrbException ( \"srini_string\" , loc2 ) ; } return loc1 ; }", "nl": "uses a private key to sign data in a cms signeddata structure and returns the encoded cms signeddata as bytes . selected when public key encryption is used . the econtenttype field for the inner type signeddata when unencrypted is id-pkinit-rkeydata 1.3.6.1.5.2.3.3 and the econtent field contains the der encoding of the type replykeypack . concode_field_sep String ID_PKINIT_AUTHDATA concode_field_sep byte[] getSignedKdcDhKeyInfo concode_elem_sep byte[] getSignedAuthPack", "code_tokens": ["byte", "[", "]", "function", "(", "PrivateKey", "arg0", ",", "X509Certificate", "arg1", ",", "ReplyKeyPack", "arg2", ")", "{", "byte", "[", "]", "loc0", "=", "KrbCodec", ".", "encode", "(", "arg2", ")", ";", "byte", "[", "]", "loc1", ";", "try", "{", "loc1", "=", "PkiUtil", ".", "getSignedData", "(", "arg0", ",", "arg1", ",", "loc0", ",", "ID_PKINIT_AUTHDATA", ")", ";", "}", "catch", "(", "PkiException", "loc2", ")", "{", "throw", "new", "KrbException", "(", "\"srini_string\"", ",", "loc2", ")", ";", "}", "return", "loc1", ";", "}"], "nl_tokens": ["uses", "a", "private", "key", "to", "sign", "data", "in", "a", "cms", "signeddata", "structure", "and", "returns", "the", "encoded", "cms", "signeddata", "as", "bytes", ".", "selected", "when", "public", "key", "encryption", "is", "used", ".", "the", "econtenttype", "field", "for", "the", "inner", "type", "signeddata", "when", "unencrypted", "is", "id", "-", "pkinit", "-", "rkeydata", "1.3", ".6", ".1", ".5", ".2", ".3", ".3", "and", "the", "econtent", "field", "contains", "the", "der", "encoding", "of", "the", "type", "replykeypack", ".", "concode_field_sep", "String", "ID_PKINIT_AUTHDATA", "concode_field_sep", "byte", "[", "]", "getSignedKdcDhKeyInfo", "concode_elem_sep", "byte", "[", "]", "getSignedAuthPack"]}
{"code": "void function ( Schema arg0 , Object arg1 , Encoder arg2 ) { if ( ! data . isEnum ( arg1 ) ) throw new AvroTypeException ( \"srini_string\" + arg1 ) ; arg2 . writeEnum ( arg0 . getEnumOrdinal ( arg1 . toString ( ) ) ) ; }", "nl": "called to write an enum value . may be overridden for alternate enum representations . concode_field_sep GenericData data concode_elem_sep Schema root concode_field_sep NullPointerException npe concode_elem_sep void writeWithoutConversion concode_elem_sep Iterator<? extends Object> getArrayElements concode_elem_sep void writeFixed concode_elem_sep Object convert concode_elem_sep void writeField concode_elem_sep int getMapSize concode_elem_sep void error concode_elem_sep void writeMap concode_elem_sep void setSchema concode_elem_sep void writeRecord concode_elem_sep void writeBytes concode_elem_sep void writeArray concode_elem_sep Iterable<Map.Entry<Object,Object>> getMapEntries concode_elem_sep int resolveUnion concode_elem_sep long getArraySize concode_elem_sep void write concode_elem_sep void write concode_elem_sep void writeString concode_elem_sep void writeString concode_elem_sep GenericData getData", "code_tokens": ["void", "function", "(", "Schema", "arg0", ",", "Object", "arg1", ",", "Encoder", "arg2", ")", "{", "if", "(", "!", "data", ".", "isEnum", "(", "arg1", ")", ")", "throw", "new", "AvroTypeException", "(", "\"srini_string\"", "+", "arg1", ")", ";", "arg2", ".", "writeEnum", "(", "arg0", ".", "getEnumOrdinal", "(", "arg1", ".", "toString", "(", ")", ")", ")", ";", "}"], "nl_tokens": ["called", "to", "write", "an", "enum", "value", ".", "may", "be", "overridden", "for", "alternate", "enum", "representations", ".", "concode_field_sep", "GenericData", "data", "concode_elem_sep", "Schema", "root", "concode_field_sep", "NullPointerException", "npe", "concode_elem_sep", "void", "writeWithoutConversion", "concode_elem_sep", "Iterator", "<", "?", "extends", "Object", ">", "getArrayElements", "concode_elem_sep", "void", "writeFixed", "concode_elem_sep", "Object", "convert", "concode_elem_sep", "void", "writeField", "concode_elem_sep", "int", "getMapSize", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "writeMap", "concode_elem_sep", "void", "setSchema", "concode_elem_sep", "void", "writeRecord", "concode_elem_sep", "void", "writeBytes", "concode_elem_sep", "void", "writeArray", "concode_elem_sep", "Iterable", "<", "Map", ".", "Entry", "<", "Object", ",", "Object", ">>", "getMapEntries", "concode_elem_sep", "int", "resolveUnion", "concode_elem_sep", "long", "getArraySize", "concode_elem_sep", "void", "write", "concode_elem_sep", "void", "write", "concode_elem_sep", "void", "writeString", "concode_elem_sep", "void", "writeString", "concode_elem_sep", "GenericData", "getData"]}
{"code": "int function ( ) { return this . pending ; }", "nl": "gets the number of connection requests being blocked awaiting a free connection . this can happen only if there are more worker threads contending for fewer connections . concode_field_sep int leased concode_elem_sep int max concode_elem_sep int pending concode_elem_sep int available concode_field_sep int getMax concode_elem_sep String toString concode_elem_sep int getAvailable concode_elem_sep int getLeased", "code_tokens": ["int", "function", "(", ")", "{", "return", "this", ".", "pending", ";", "}"], "nl_tokens": ["gets", "the", "number", "of", "connection", "requests", "being", "blocked", "awaiting", "a", "free", "connection", ".", "this", "can", "happen", "only", "if", "there", "are", "more", "worker", "threads", "contending", "for", "fewer", "connections", ".", "concode_field_sep", "int", "leased", "concode_elem_sep", "int", "max", "concode_elem_sep", "int", "pending", "concode_elem_sep", "int", "available", "concode_field_sep", "int", "getMax", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "getAvailable", "concode_elem_sep", "int", "getLeased"]}
{"code": "void function ( PdfReader arg0 ) { fc . addDocument ( arg0 ) ; }", "nl": "concatenates a pdf document . concode_field_sep PdfCopyFieldsImp fc concode_field_sep void setOutlines concode_elem_sep void setViewerPreferences concode_elem_sep void addJavaScript concode_elem_sep void addViewerPreference concode_elem_sep PdfWriter getWriter concode_elem_sep boolean isFullCompression concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setEncryption concode_elem_sep void setFullCompression concode_elem_sep void close concode_elem_sep void open", "code_tokens": ["void", "function", "(", "PdfReader", "arg0", ")", "{", "fc", ".", "addDocument", "(", "arg0", ")", ";", "}"], "nl_tokens": ["concatenates", "a", "pdf", "document", ".", "concode_field_sep", "PdfCopyFieldsImp", "fc", "concode_field_sep", "void", "setOutlines", "concode_elem_sep", "void", "setViewerPreferences", "concode_elem_sep", "void", "addJavaScript", "concode_elem_sep", "void", "addViewerPreference", "concode_elem_sep", "PdfWriter", "getWriter", "concode_elem_sep", "boolean", "isFullCompression", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setEncryption", "concode_elem_sep", "void", "setFullCompression", "concode_elem_sep", "void", "close", "concode_elem_sep", "void", "open"]}
{"code": "SchemaValidatorBuilder function ( ) { this . strategy = new ValidateCanBeRead ( ) ; return this ; }", "nl": "use a strategy that validates that a schema can be read by existing schema s according to the avro default schema resolution . concode_field_sep SchemaValidationStrategy strategy concode_field_sep void valid concode_elem_sep SchemaValidatorBuilder canReadStrategy concode_elem_sep SchemaValidator validateAll concode_elem_sep SchemaValidator validateLatest concode_elem_sep SchemaValidatorBuilder mutualReadStrategy concode_elem_sep SchemaValidatorBuilder strategy", "code_tokens": ["SchemaValidatorBuilder", "function", "(", ")", "{", "this", ".", "strategy", "=", "new", "ValidateCanBeRead", "(", ")", ";", "return", "this", ";", "}"], "nl_tokens": ["use", "a", "strategy", "that", "validates", "that", "a", "schema", "can", "be", "read", "by", "existing", "schema", "s", "according", "to", "the", "avro", "default", "schema", "resolution", ".", "concode_field_sep", "SchemaValidationStrategy", "strategy", "concode_field_sep", "void", "valid", "concode_elem_sep", "SchemaValidatorBuilder", "canReadStrategy", "concode_elem_sep", "SchemaValidator", "validateAll", "concode_elem_sep", "SchemaValidator", "validateLatest", "concode_elem_sep", "SchemaValidatorBuilder", "mutualReadStrategy", "concode_elem_sep", "SchemaValidatorBuilder", "strategy"]}
{"code": "HttpRoute function ( final HttpParams arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; HttpRoute loc0 = ( HttpRoute ) arg0 . getParameter ( FORCED_ROUTE ) ; if ( ( loc0 != null ) && NO_ROUTE . equals ( loc0 ) ) { loc0 = null ; } return loc0 ; }", "nl": "obtains the connroutepnames #forced_route forced_route parameter value . #no_route will be mapped to null , to allow unsetting in a hierarchy . concode_field_sep HttpHost NO_HOST concode_elem_sep HttpRoute NO_ROUTE concode_field_sep void setLocalAddress concode_elem_sep void setDefaultProxy concode_elem_sep void setForcedRoute concode_elem_sep InetAddress getLocalAddress concode_elem_sep HttpHost getDefaultProxy", "code_tokens": ["HttpRoute", "function", "(", "final", "HttpParams", "arg0", ")", "{", "Args", ".", "notNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "HttpRoute", "loc0", "=", "(", "HttpRoute", ")", "arg0", ".", "getParameter", "(", "FORCED_ROUTE", ")", ";", "if", "(", "(", "loc0", "!=", "null", ")", "&", "&", "NO_ROUTE", ".", "equals", "(", "loc0", ")", ")", "{", "loc0", "=", "null", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["obtains", "the", "connroutepnames", "#forced_route forced_route parameter value . #no_route will be mapped to null , to allow unsetting in a hierarchy . concode_field_sep HttpHost NO_HOST concode_elem_sep HttpRoute NO_ROUTE concode_field_sep void setLocalAddress concode_elem_sep void setDefaultProxy concode_elem_sep void setForcedRoute concode_elem_sep InetAddress getLocalAddress concode_elem_sep HttpHost getDefaultProxy"]}
{"code": "Quadrant function ( int arg0 ) { if ( arg0 == QuadTreeNode . WEST || arg0 == QuadTreeNode . EAST ) { return cSouthEast ; } return cNorthWest ; }", "nl": "return the quadrant of a block of equal size that is adjacent to the given side of this quadrant . concode_field_sep PlaceHolder placeHolder concode_field_sep boolean adjacent concode_elem_sep QuadTreeNode child", "code_tokens": ["Quadrant", "function", "(", "int", "arg0", ")", "{", "if", "(", "arg0", "==", "QuadTreeNode", ".", "WEST", "|", "|", "arg0", "==", "QuadTreeNode", ".", "EAST", ")", "{", "return", "cSouthEast", ";", "}", "return", "cNorthWest", ";", "}"], "nl_tokens": ["return", "the", "quadrant", "of", "a", "block", "of", "equal", "size", "that", "is", "adjacent", "to", "the", "given", "side", "of", "this", "quadrant", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "boolean", "adjacent", "concode_elem_sep", "QuadTreeNode", "child"]}
{"code": "Dialog function ( Activity arg0 , String arg1 ) { return ( new AlertDialog . Builder ( arg0 ) ) . setMessage ( arg1 ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }", "nl": "create a simple dialog with an ` ok ' button and a message . concode_field_sep PlaceHolder placeHolder concode_field_sep boolean verifySampleSetup concode_elem_sep boolean resolveConnectionFailure concode_elem_sep void showActivityResultError concode_elem_sep void showAlert", "code_tokens": ["Dialog", "function", "(", "Activity", "arg0", ",", "String", "arg1", ")", "{", "return", "(", "new", "AlertDialog", ".", "Builder", "(", "arg0", ")", ")", ".", "setMessage", "(", "arg1", ")", ".", "setNeutralButton", "(", "android", ".", "R", ".", "string", ".", "ok", ",", "null", ")", ".", "create", "(", ")", ";", "}"], "nl_tokens": ["create", "a", "simple", "dialog", "with", "an", "`", "ok", "'", "button", "and", "a", "message", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "boolean", "verifySampleSetup", "concode_elem_sep", "boolean", "resolveConnectionFailure", "concode_elem_sep", "void", "showActivityResultError", "concode_elem_sep", "void", "showAlert"]}
{"code": "void function ( VarInfo [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( inv . ppt . var_infos [ loc0 ] != arg0 [ loc0 ] ) discardString += \"srini_string\" + inv . ppt . var_infos [ loc0 ] + \"srini_string\" + arg0 [ loc0 ] ; } }", "nl": "adds an equality string to the discardstring for each variable in in vis which is different from the leader concode_field_sep Invariant inv concode_elem_sep String discardFormat concode_elem_sep String discardString concode_elem_sep DiscardCode discardCode concode_elem_sep String className concode_field_sep String discardFormat concode_elem_sep String discardString concode_elem_sep void add_implied concode_elem_sep DiscardCode discardCode concode_elem_sep String format concode_elem_sep String className", "code_tokens": ["void", "function", "(", "VarInfo", "[", "]", "arg0", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ".", "length", ";", "loc0", "+", "+", ")", "{", "if", "(", "inv", ".", "ppt", ".", "var_infos", "[", "loc0", "]", "!=", "arg0", "[", "loc0", "]", ")", "discardString", "+=", "\"srini_string\"", "+", "inv", ".", "ppt", ".", "var_infos", "[", "loc0", "]", "+", "\"srini_string\"", "+", "arg0", "[", "loc0", "]", ";", "}", "}"], "nl_tokens": ["adds", "an", "equality", "string", "to", "the", "discardstring", "for", "each", "variable", "in", "in", "vis", "which", "is", "different", "from", "the", "leader", "concode_field_sep", "Invariant", "inv", "concode_elem_sep", "String", "discardFormat", "concode_elem_sep", "String", "discardString", "concode_elem_sep", "DiscardCode", "discardCode", "concode_elem_sep", "String", "className", "concode_field_sep", "String", "discardFormat", "concode_elem_sep", "String", "discardString", "concode_elem_sep", "void", "add_implied", "concode_elem_sep", "DiscardCode", "discardCode", "concode_elem_sep", "String", "format", "concode_elem_sep", "String", "className"]}
{"code": "Integer function ( ) { return null == intervalQualifier ? null : intervalQualifier . getFractionalSecondPrecisionPreservingDefault ( ) ; }", "nl": "gets the fractional second precision of the type qualifier of the interval data type descriptor of this field iff interval type . gets the interval type descriptor 's fractional second precision iff interval type . concode_field_sep SqlIntervalQualifier intervalQualifier concode_elem_sep Integer precision concode_elem_sep Boolean isNullable concode_elem_sep String name concode_elem_sep Integer scale concode_elem_sep List<String> workspaceSchemaPath concode_elem_sep List<FieldType> fields concode_elem_sep SqlTypeName type concode_elem_sep String sql concode_field_sep String getName concode_elem_sep String getName concode_elem_sep boolean isDynamic concode_elem_sep List<String> getWorkspaceSchemaPath concode_elem_sep SqlIntervalQualifier getIntervalQualifier concode_elem_sep boolean hasStar concode_elem_sep TimeUnit getEndUnit concode_elem_sep RelDataType getRowType concode_elem_sep Integer getPrecision concode_elem_sep void setSql concode_elem_sep String getSql concode_elem_sep TimeUnit getStartUnit concode_elem_sep List<FieldType> getFields concode_elem_sep Integer getScale concode_elem_sep SqlTypeName getType concode_elem_sep Boolean getIsNullable", "code_tokens": ["Integer", "function", "(", ")", "{", "return", "null", "==", "intervalQualifier", "?", "null", ":", "intervalQualifier", ".", "getFractionalSecondPrecisionPreservingDefault", "(", ")", ";", "}"], "nl_tokens": ["gets", "the", "fractional", "second", "precision", "of", "the", "type", "qualifier", "of", "the", "interval", "data", "type", "descriptor", "of", "this", "field", "iff", "interval", "type", ".", "gets", "the", "interval", "type", "descriptor", "'", "s", "fractional", "second", "precision", "iff", "interval", "type", ".", "concode_field_sep", "SqlIntervalQualifier", "intervalQualifier", "concode_elem_sep", "Integer", "precision", "concode_elem_sep", "Boolean", "isNullable", "concode_elem_sep", "String", "name", "concode_elem_sep", "Integer", "scale", "concode_elem_sep", "List", "<", "String", ">", "workspaceSchemaPath", "concode_elem_sep", "List", "<", "FieldType", ">", "fields", "concode_elem_sep", "SqlTypeName", "type", "concode_elem_sep", "String", "sql", "concode_field_sep", "String", "getName", "concode_elem_sep", "String", "getName", "concode_elem_sep", "boolean", "isDynamic", "concode_elem_sep", "List", "<", "String", ">", "getWorkspaceSchemaPath", "concode_elem_sep", "SqlIntervalQualifier", "getIntervalQualifier", "concode_elem_sep", "boolean", "hasStar", "concode_elem_sep", "TimeUnit", "getEndUnit", "concode_elem_sep", "RelDataType", "getRowType", "concode_elem_sep", "Integer", "getPrecision", "concode_elem_sep", "void", "setSql", "concode_elem_sep", "String", "getSql", "concode_elem_sep", "TimeUnit", "getStartUnit", "concode_elem_sep", "List", "<", "FieldType", ">", "getFields", "concode_elem_sep", "Integer", "getScale", "concode_elem_sep", "SqlTypeName", "getType", "concode_elem_sep", "Boolean", "getIsNullable"]}
{"code": "MatchResult function ( Display arg0 , Matcher arg1 ) { return find ( arg0 , arg1 , getMaxFinderRetries ( ) ) ; }", "nl": "find a widget , using the given matcher to determine whether a given widget in the hierarchy in the given display is the desired one . concode_field_sep int MATCH concode_elem_sep Collection _widgets concode_elem_sep int _dbComparisons concode_elem_sep Widget _widget concode_elem_sep Hierarchy _hierarchy concode_elem_sep int BFS concode_elem_sep int DFS concode_elem_sep int _type concode_elem_sep ArrayList _list concode_elem_sep int WIDGET_NOT_FOUND concode_elem_sep int MULTIPLE_WIDGETS_FOUND concode_elem_sep int _searchType concode_field_sep Widget getParent concode_elem_sep Collection getRoots concode_elem_sep Widget getWidget concode_elem_sep Collection getWidgets concode_elem_sep Collection getWidgets concode_elem_sep MatchResult match concode_elem_sep void findMatches concode_elem_sep MatchResult multipleFound concode_elem_sep void pause concode_elem_sep boolean contains concode_elem_sep int getType concode_elem_sep void assertNotNull concode_elem_sep void assertNotNull concode_elem_sep MatchResult find0 concode_elem_sep void dispose concode_elem_sep MatchResult notFound concode_elem_sep int getFinderRetryInterval concode_elem_sep int getMaxFinderRetries concode_elem_sep void setFound", "code_tokens": ["MatchResult", "function", "(", "Display", "arg0", ",", "Matcher", "arg1", ")", "{", "return", "find", "(", "arg0", ",", "arg1", ",", "getMaxFinderRetries", "(", ")", ")", ";", "}"], "nl_tokens": ["find", "a", "widget", ",", "using", "the", "given", "matcher", "to", "determine", "whether", "a", "given", "widget", "in", "the", "hierarchy", "in", "the", "given", "display", "is", "the", "desired", "one", ".", "concode_field_sep", "int", "MATCH", "concode_elem_sep", "Collection", "_widgets", "concode_elem_sep", "int", "_dbComparisons", "concode_elem_sep", "Widget", "_widget", "concode_elem_sep", "Hierarchy", "_hierarchy", "concode_elem_sep", "int", "BFS", "concode_elem_sep", "int", "DFS", "concode_elem_sep", "int", "_type", "concode_elem_sep", "ArrayList", "_list", "concode_elem_sep", "int", "WIDGET_NOT_FOUND", "concode_elem_sep", "int", "MULTIPLE_WIDGETS_FOUND", "concode_elem_sep", "int", "_searchType", "concode_field_sep", "Widget", "getParent", "concode_elem_sep", "Collection", "getRoots", "concode_elem_sep", "Widget", "getWidget", "concode_elem_sep", "Collection", "getWidgets", "concode_elem_sep", "Collection", "getWidgets", "concode_elem_sep", "MatchResult", "match", "concode_elem_sep", "void", "findMatches", "concode_elem_sep", "MatchResult", "multipleFound", "concode_elem_sep", "void", "pause", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "int", "getType", "concode_elem_sep", "void", "assertNotNull", "concode_elem_sep", "void", "assertNotNull", "concode_elem_sep", "MatchResult", "find0", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "MatchResult", "notFound", "concode_elem_sep", "int", "getFinderRetryInterval", "concode_elem_sep", "int", "getMaxFinderRetries", "concode_elem_sep", "void", "setFound"]}
{"code": "boolean function ( CanVID arg0 ) { if ( VID . size ( ) != arg0 . getVIDList ( ) . size ( ) ) return false ; for ( int loc0 = 0 ; loc0 < VID . size ( ) - 1 ; loc0 ++ ) { if ( ! VID . get ( loc0 ) . toString ( ) . equals ( arg0 . getVIDList ( ) . get ( loc0 ) . toString ( ) ) ) return false ; } return true ; }", "nl": "compares two canvid and if all value until the n-1 number are common the return value is true . so it is true , if all parents are common concode_field_sep List<String> VID concode_field_sep boolean inBetween concode_elem_sep List<String> listCommon concode_elem_sep boolean lower concode_elem_sep int numberCommon concode_elem_sep void addToVID concode_elem_sep boolean allZero concode_elem_sep void removeFromList concode_elem_sep String einzelnToString concode_elem_sep boolean allOne concode_elem_sep List<String> getVIDList concode_elem_sep String toString concode_elem_sep void setVIDList concode_elem_sep boolean higher", "code_tokens": ["boolean", "function", "(", "CanVID", "arg0", ")", "{", "if", "(", "VID", ".", "size", "(", ")", "!=", "arg0", ".", "getVIDList", "(", ")", ".", "size", "(", ")", ")", "return", "false", ";", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "VID", ".", "size", "(", ")", "-", "1", ";", "loc0", "+", "+", ")", "{", "if", "(", "!", "VID", ".", "get", "(", "loc0", ")", ".", "toString", "(", ")", ".", "equals", "(", "arg0", ".", "getVIDList", "(", ")", ".", "get", "(", "loc0", ")", ".", "toString", "(", ")", ")", ")", "return", "false", ";", "}", "return", "true", ";", "}"], "nl_tokens": ["compares", "two", "canvid", "and", "if", "all", "value", "until", "the", "n", "-", "1", "number", "are", "common", "the", "return", "value", "is", "true", ".", "so", "it", "is", "true", ",", "if", "all", "parents", "are", "common", "concode_field_sep", "List", "<", "String", ">", "VID", "concode_field_sep", "boolean", "inBetween", "concode_elem_sep", "List", "<", "String", ">", "listCommon", "concode_elem_sep", "boolean", "lower", "concode_elem_sep", "int", "numberCommon", "concode_elem_sep", "void", "addToVID", "concode_elem_sep", "boolean", "allZero", "concode_elem_sep", "void", "removeFromList", "concode_elem_sep", "String", "einzelnToString", "concode_elem_sep", "boolean", "allOne", "concode_elem_sep", "List", "<", "String", ">", "getVIDList", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "setVIDList", "concode_elem_sep", "boolean", "higher"]}
{"code": "ReflectClass function ( String arg0 ) { Class loc0 = _classLoader . loadClass ( arg0 ) ; if ( loc0 == null ) { return null ; } return createClass ( loc0 ) ; }", "nl": "returns reflectclass for the specified class name concode_field_sep Reflector _parent concode_elem_sep ReflectArray _array concode_elem_sep JdkLoader _classLoader concode_elem_sep ReflectorConfiguration _config concode_field_sep Reflector parent concode_elem_sep void configuration concode_elem_sep ReflectorConfiguration configuration concode_elem_sep boolean isCollection concode_elem_sep boolean methodCallsSupported concode_elem_sep Object nullValue concode_elem_sep Class[] toNative concode_elem_sep Class toNative concode_elem_sep ReflectClass[] toMeta concode_elem_sep ReflectArray array concode_elem_sep Object deepClone concode_elem_sep ReflectClass forClass concode_elem_sep JdkClass createClass concode_elem_sep ReflectClass forObject concode_elem_sep void setParent", "code_tokens": ["ReflectClass", "function", "(", "String", "arg0", ")", "{", "Class", "loc0", "=", "_classLoader", ".", "loadClass", "(", "arg0", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "null", ";", "}", "return", "createClass", "(", "loc0", ")", ";", "}"], "nl_tokens": ["returns", "reflectclass", "for", "the", "specified", "class", "name", "concode_field_sep", "Reflector", "_parent", "concode_elem_sep", "ReflectArray", "_array", "concode_elem_sep", "JdkLoader", "_classLoader", "concode_elem_sep", "ReflectorConfiguration", "_config", "concode_field_sep", "Reflector", "parent", "concode_elem_sep", "void", "configuration", "concode_elem_sep", "ReflectorConfiguration", "configuration", "concode_elem_sep", "boolean", "isCollection", "concode_elem_sep", "boolean", "methodCallsSupported", "concode_elem_sep", "Object", "nullValue", "concode_elem_sep", "Class", "[", "]", "toNative", "concode_elem_sep", "Class", "toNative", "concode_elem_sep", "ReflectClass", "[", "]", "toMeta", "concode_elem_sep", "ReflectArray", "array", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "ReflectClass", "forClass", "concode_elem_sep", "JdkClass", "createClass", "concode_elem_sep", "ReflectClass", "forObject", "concode_elem_sep", "void", "setParent"]}
{"code": "int function ( char arg0 ) { return arg0 - 'A' ; }", "nl": "convert character to integer concode_field_sep Cell[][] cells concode_elem_sep int width concode_elem_sep long serialVersionUID concode_elem_sep int height concode_field_sep Iterator<Cell> iterator concode_elem_sep boolean equals concode_elem_sep Cell getCellAtLocation concode_elem_sep char itoc", "code_tokens": ["int", "function", "(", "char", "arg0", ")", "{", "return", "arg0", "-", "'A'", ";", "}"], "nl_tokens": ["convert", "character", "to", "integer", "concode_field_sep", "Cell", "[", "]", "[", "]", "cells", "concode_elem_sep", "int", "width", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "int", "height", "concode_field_sep", "Iterator", "<", "Cell", ">", "iterator", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Cell", "getCellAtLocation", "concode_elem_sep", "char", "itoc"]}
{"code": "void function ( int arg0 ) { Event loc0 = createClickEvent ( arg0 ) ; loc0 . type = SWT . MouseUp ; new SWTPushEventOperation ( loc0 ) . execute ( ) ; }", "nl": "dispatch a mouserelease event . concode_field_sep Point pointT concode_elem_sep abbot.swt.Robot _robot concode_field_sep void robotKeyClick concode_elem_sep void doKeyDown concode_elem_sep void doKeyUp concode_elem_sep void mouseMove concode_elem_sep void mouseMove concode_elem_sep void keyUp concode_elem_sep void keyUp concode_elem_sep void mouseDown concode_elem_sep abbot.swt.Robot getAbbotRobot concode_elem_sep void mouseDoubleClick concode_elem_sep void pause concode_elem_sep boolean needsShift concode_elem_sep int[] extractKeys concode_elem_sep void keyClick concode_elem_sep void keyClick concode_elem_sep void keyDown concode_elem_sep void keyDown concode_elem_sep Event createClickEvent concode_elem_sep void enterText", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "Event", "loc0", "=", "createClickEvent", "(", "arg0", ")", ";", "loc0", ".", "type", "=", "SWT", ".", "MouseUp", ";", "new", "SWTPushEventOperation", "(", "loc0", ")", ".", "execute", "(", ")", ";", "}"], "nl_tokens": ["dispatch", "a", "mouserelease", "event", ".", "concode_field_sep", "Point", "pointT", "concode_elem_sep", "abbot", ".", "swt", ".", "Robot", "_robot", "concode_field_sep", "void", "robotKeyClick", "concode_elem_sep", "void", "doKeyDown", "concode_elem_sep", "void", "doKeyUp", "concode_elem_sep", "void", "mouseMove", "concode_elem_sep", "void", "mouseMove", "concode_elem_sep", "void", "keyUp", "concode_elem_sep", "void", "keyUp", "concode_elem_sep", "void", "mouseDown", "concode_elem_sep", "abbot", ".", "swt", ".", "Robot", "getAbbotRobot", "concode_elem_sep", "void", "mouseDoubleClick", "concode_elem_sep", "void", "pause", "concode_elem_sep", "boolean", "needsShift", "concode_elem_sep", "int", "[", "]", "extractKeys", "concode_elem_sep", "void", "keyClick", "concode_elem_sep", "void", "keyClick", "concode_elem_sep", "void", "keyDown", "concode_elem_sep", "void", "keyDown", "concode_elem_sep", "Event", "createClickEvent", "concode_elem_sep", "void", "enterText"]}
{"code": "void function ( ) { int loc0 = activeTransactionCountUpdater . decrementAndGet ( this ) ; if ( suspended && loc0 == 0 && activeInvocationCountUpdater . get ( this ) == 0 ) { doneSuspended ( ) ; } }", "nl": "decrements active tranbsaction count and completes suspension if we are suspending and there are no more active transactions left . concode_field_sep int activeInvocationCount concode_elem_sep InjectedValue<DeploymentRepository> deploymentRepositoryInjectedValue concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeTransactionCountUpdater concode_elem_sep boolean gracefulTxnShutdown concode_elem_sep ServerActivityCallback listener concode_elem_sep AtomicReferenceFieldUpdater<EJBSuspendHandlerService,ServerActivityCallback> listenerUpdater concode_elem_sep InjectedValue<SuspendController> suspendControllerInjectedValue concode_elem_sep InjectedValue<LocalTransactionContext> localTransactionContextInjectedValue concode_elem_sep int activeTransactionCount concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeInvocationCountUpdater concode_elem_sep boolean suspended concode_elem_sep ServiceName SERVICE_NAME concode_field_sep void resume concode_elem_sep void beforeCompletion concode_elem_sep void enableGracefulTxnShutdown concode_elem_sep void invocationComplete concode_elem_sep void doneSuspended concode_elem_sep boolean isSuspended concode_elem_sep void afterCompletion concode_elem_sep void start concode_elem_sep InjectedValue<SuspendController> getSuspendControllerInjectedValue concode_elem_sep void suspended concode_elem_sep void transactionCreated concode_elem_sep EJBSuspendHandlerService getValue concode_elem_sep void stop concode_elem_sep InjectedValue<LocalTransactionContext> getLocalTransactionContextInjectedValue concode_elem_sep InjectedValue<DeploymentRepository> getDeploymentRepositoryInjectedValue concode_elem_sep boolean acceptInvocation concode_elem_sep void preSuspend", "code_tokens": ["void", "function", "(", ")", "{", "int", "loc0", "=", "activeTransactionCountUpdater", ".", "decrementAndGet", "(", "this", ")", ";", "if", "(", "suspended", "&", "&", "loc0", "==", "0", "&", "&", "activeInvocationCountUpdater", ".", "get", "(", "this", ")", "==", "0", ")", "{", "doneSuspended", "(", ")", ";", "}", "}"], "nl_tokens": ["decrements", "active", "tranbsaction", "count", "and", "completes", "suspension", "if", "we", "are", "suspending", "and", "there", "are", "no", "more", "active", "transactions", "left", ".", "concode_field_sep", "int", "activeInvocationCount", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "deploymentRepositoryInjectedValue", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeTransactionCountUpdater", "concode_elem_sep", "boolean", "gracefulTxnShutdown", "concode_elem_sep", "ServerActivityCallback", "listener", "concode_elem_sep", "AtomicReferenceFieldUpdater", "<", "EJBSuspendHandlerService", ",", "ServerActivityCallback", ">", "listenerUpdater", "concode_elem_sep", "InjectedValue", "<", "SuspendController", ">", "suspendControllerInjectedValue", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "localTransactionContextInjectedValue", "concode_elem_sep", "int", "activeTransactionCount", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeInvocationCountUpdater", "concode_elem_sep", "boolean", "suspended", "concode_elem_sep", "ServiceName", "SERVICE_NAME", "concode_field_sep", "void", "resume", "concode_elem_sep", "void", "beforeCompletion", "concode_elem_sep", "void", "enableGracefulTxnShutdown", "concode_elem_sep", "void", "invocationComplete", "concode_elem_sep", "void", "doneSuspended", "concode_elem_sep", "boolean", "isSuspended", "concode_elem_sep", "void", "afterCompletion", "concode_elem_sep", "void", "start", "concode_elem_sep", "InjectedValue", "<", "SuspendController", ">", "getSuspendControllerInjectedValue", "concode_elem_sep", "void", "suspended", "concode_elem_sep", "void", "transactionCreated", "concode_elem_sep", "EJBSuspendHandlerService", "getValue", "concode_elem_sep", "void", "stop", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "getLocalTransactionContextInjectedValue", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "getDeploymentRepositoryInjectedValue", "concode_elem_sep", "boolean", "acceptInvocation", "concode_elem_sep", "void", "preSuspend"]}
{"code": "void function ( ) { LOGGER . info ( \"srini_string\" ) ; for ( Potion loc0 : topShelf ) { loc0 . drink ( ) ; } LOGGER . info ( \"srini_string\" ) ; for ( Potion loc0 : bottomShelf ) { loc0 . drink ( ) ; } }", "nl": "enumerate potions concode_field_sep List<Potion> topShelf concode_elem_sep List<Potion> bottomShelf concode_elem_sep Logger LOGGER concode_field_sep List<Potion> getBottomShelf concode_elem_sep List<Potion> getTopShelf concode_elem_sep void fillShelves", "code_tokens": ["void", "function", "(", ")", "{", "LOGGER", ".", "info", "(", "\"srini_string\"", ")", ";", "for", "(", "Potion", "loc0", ":", "topShelf", ")", "{", "loc0", ".", "drink", "(", ")", ";", "}", "LOGGER", ".", "info", "(", "\"srini_string\"", ")", ";", "for", "(", "Potion", "loc0", ":", "bottomShelf", ")", "{", "loc0", ".", "drink", "(", ")", ";", "}", "}"], "nl_tokens": ["enumerate", "potions", "concode_field_sep", "List", "<", "Potion", ">", "topShelf", "concode_elem_sep", "List", "<", "Potion", ">", "bottomShelf", "concode_elem_sep", "Logger", "LOGGER", "concode_field_sep", "List", "<", "Potion", ">", "getBottomShelf", "concode_elem_sep", "List", "<", "Potion", ">", "getTopShelf", "concode_elem_sep", "void", "fillShelves"]}
{"code": "void function ( IScreenCaptureHandler arg0 ) { ScreenCapture . arg0 = arg0 ; }", "nl": "override the default screen capture strategy with a user-defined one . concode_field_sep int MAX_CAPTURE_RETRIES concode_elem_sep int CAPTURE_RETRY_INTERVAL concode_elem_sep IScreenCaptureHandler handler concode_elem_sep String BASE_IMAGE_NAME concode_elem_sep String OUTPUT_DIR concode_elem_sep int _counter concode_elem_sep String WINDOW_TESTER_SCREEN_CAPTURE_PATHS_KEY concode_elem_sep String PATH_DELIM concode_elem_sep Robot _robot concode_elem_sep String IMAGE_EXT concode_field_sep File createScreenCaptureFile concode_elem_sep void ensureOutputDirExists concode_elem_sep String getOutputLocation concode_elem_sep File createScreenCapture concode_elem_sep File createScreenCapture concode_elem_sep File createScreenCapture concode_elem_sep File createScreenCapture concode_elem_sep IScreenCaptureHandler getDefaultHandler concode_elem_sep IScreenCaptureHandler getHandler concode_elem_sep void setOutputLocation concode_elem_sep BufferedImage captureScreen", "code_tokens": ["void", "function", "(", "IScreenCaptureHandler", "arg0", ")", "{", "ScreenCapture", ".", "arg0", "=", "arg0", ";", "}"], "nl_tokens": ["override", "the", "default", "screen", "capture", "strategy", "with", "a", "user", "-", "defined", "one", ".", "concode_field_sep", "int", "MAX_CAPTURE_RETRIES", "concode_elem_sep", "int", "CAPTURE_RETRY_INTERVAL", "concode_elem_sep", "IScreenCaptureHandler", "handler", "concode_elem_sep", "String", "BASE_IMAGE_NAME", "concode_elem_sep", "String", "OUTPUT_DIR", "concode_elem_sep", "int", "_counter", "concode_elem_sep", "String", "WINDOW_TESTER_SCREEN_CAPTURE_PATHS_KEY", "concode_elem_sep", "String", "PATH_DELIM", "concode_elem_sep", "Robot", "_robot", "concode_elem_sep", "String", "IMAGE_EXT", "concode_field_sep", "File", "createScreenCaptureFile", "concode_elem_sep", "void", "ensureOutputDirExists", "concode_elem_sep", "String", "getOutputLocation", "concode_elem_sep", "File", "createScreenCapture", "concode_elem_sep", "File", "createScreenCapture", "concode_elem_sep", "File", "createScreenCapture", "concode_elem_sep", "File", "createScreenCapture", "concode_elem_sep", "IScreenCaptureHandler", "getDefaultHandler", "concode_elem_sep", "IScreenCaptureHandler", "getHandler", "concode_elem_sep", "void", "setOutputLocation", "concode_elem_sep", "BufferedImage", "captureScreen"]}
{"code": "String function ( String arg0 , String arg1 ) { LanguageIdentifierBean loc0 ; try { loc0 = new LanguageIdentifierBean ( ) ; return ( arg1 . equals ( loc0 . classify ( arg0 ) ) ) ? arg0 : \"srini_string\" ; } catch ( CeonGeneralException loc1 ) { throw new IOException ( loc1 ) ; } }", "nl": "returns a text only if it is in given language concode_field_sep boolean fromContent concode_elem_sep Map<String,Map<String,Integer>> cooccurrences concode_elem_sep boolean fromAbstract concode_elem_sep List<KeywordCandidate> keywordCandidates concode_elem_sep String ILLEGAL_CHARS concode_elem_sep Logger logger concode_elem_sep int DEFAULT_KEYWORDS_NUMBER concode_elem_sep ExtractionOption extractionOption concode_elem_sep Lang lang concode_elem_sep Map<Lang,Set<String>> stopwords concode_elem_sep String content concode_field_sep void setOption concode_elem_sep boolean isNum concode_elem_sep void countCooccurrences concode_elem_sep String extractTextFromPdf concode_elem_sep List<String> getSupportedLanguages concode_elem_sep void prepareToExtraction concode_elem_sep List<String> choiceKeywords concode_elem_sep List<String> getKeywords concode_elem_sep List<String> getKeywords concode_elem_sep void countMetrics concode_elem_sep void setLang concode_elem_sep void extractKeywordCandidates concode_elem_sep List<String> getAvailableExtractionOptions", "code_tokens": ["String", "function", "(", "String", "arg0", ",", "String", "arg1", ")", "{", "LanguageIdentifierBean", "loc0", ";", "try", "{", "loc0", "=", "new", "LanguageIdentifierBean", "(", ")", ";", "return", "(", "arg1", ".", "equals", "(", "loc0", ".", "classify", "(", "arg0", ")", ")", ")", "?", "arg0", ":", "\"srini_string\"", ";", "}", "catch", "(", "CeonGeneralException", "loc1", ")", "{", "throw", "new", "IOException", "(", "loc1", ")", ";", "}", "}"], "nl_tokens": ["returns", "a", "text", "only", "if", "it", "is", "in", "given", "language", "concode_field_sep", "boolean", "fromContent", "concode_elem_sep", "Map", "<", "String", ",", "Map", "<", "String", ",", "Integer", ">>", "cooccurrences", "concode_elem_sep", "boolean", "fromAbstract", "concode_elem_sep", "List", "<", "KeywordCandidate", ">", "keywordCandidates", "concode_elem_sep", "String", "ILLEGAL_CHARS", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "int", "DEFAULT_KEYWORDS_NUMBER", "concode_elem_sep", "ExtractionOption", "extractionOption", "concode_elem_sep", "Lang", "lang", "concode_elem_sep", "Map", "<", "Lang", ",", "Set", "<", "String", ">>", "stopwords", "concode_elem_sep", "String", "content", "concode_field_sep", "void", "setOption", "concode_elem_sep", "boolean", "isNum", "concode_elem_sep", "void", "countCooccurrences", "concode_elem_sep", "String", "extractTextFromPdf", "concode_elem_sep", "List", "<", "String", ">", "getSupportedLanguages", "concode_elem_sep", "void", "prepareToExtraction", "concode_elem_sep", "List", "<", "String", ">", "choiceKeywords", "concode_elem_sep", "List", "<", "String", ">", "getKeywords", "concode_elem_sep", "List", "<", "String", ">", "getKeywords", "concode_elem_sep", "void", "countMetrics", "concode_elem_sep", "void", "setLang", "concode_elem_sep", "void", "extractKeywordCandidates", "concode_elem_sep", "List", "<", "String", ">", "getAvailableExtractionOptions"]}
{"code": "int function ( ) { return values [ values . length - 1 ] ; }", "nl": "get the high value in the range the lookup values . concode_field_sep Label defaultTarget concode_elem_sep int[] values concode_elem_sep Label[] targets concode_field_sep Label defaultTarget concode_elem_sep int lowValue concode_elem_sep boolean hasContiguousValues concode_elem_sep int partition concode_elem_sep int[] values concode_elem_sep void uniq concode_elem_sep void setDefaultTarget concode_elem_sep String toString concode_elem_sep void sort concode_elem_sep Label[] targets concode_elem_sep void quicksort", "code_tokens": ["int", "function", "(", ")", "{", "return", "values", "[", "values", ".", "length", "-", "1", "]", ";", "}"], "nl_tokens": ["get", "the", "high", "value", "in", "the", "range", "the", "lookup", "values", ".", "concode_field_sep", "Label", "defaultTarget", "concode_elem_sep", "int", "[", "]", "values", "concode_elem_sep", "Label", "[", "]", "targets", "concode_field_sep", "Label", "defaultTarget", "concode_elem_sep", "int", "lowValue", "concode_elem_sep", "boolean", "hasContiguousValues", "concode_elem_sep", "int", "partition", "concode_elem_sep", "int", "[", "]", "values", "concode_elem_sep", "void", "uniq", "concode_elem_sep", "void", "setDefaultTarget", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "sort", "concode_elem_sep", "Label", "[", "]", "targets", "concode_elem_sep", "void", "quicksort"]}
{"code": "Residue < C > function ( Residue < C > arg0 ) { return new Residue < C > ( arg0 . ring , arg0 . val ) ; }", "nl": "copy residue element c. concode_field_sep Logger logger concode_elem_sep RingFactory<C> ring concode_elem_sep int isField concode_elem_sep C modul concode_field_sep Residue<C> random concode_elem_sep Residue<C> random concode_elem_sep int hashCode concode_elem_sep boolean isField concode_elem_sep boolean equals concode_elem_sep Residue<C> getONE concode_elem_sep boolean isCommutative concode_elem_sep Residue<C> getZERO concode_elem_sep Residue<C> fromInteger concode_elem_sep Residue<C> fromInteger concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep Residue<C> parse concode_elem_sep Residue<C> parse concode_elem_sep java.math.BigInteger characteristic", "code_tokens": ["Residue", "<", "C", ">", "function", "(", "Residue", "<", "C", ">", "arg0", ")", "{", "return", "new", "Residue", "<", "C", ">", "(", "arg0", ".", "ring", ",", "arg0", ".", "val", ")", ";", "}"], "nl_tokens": ["copy", "residue", "element", "c", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "RingFactory", "<", "C", ">", "ring", "concode_elem_sep", "int", "isField", "concode_elem_sep", "C", "modul", "concode_field_sep", "Residue", "<", "C", ">", "random", "concode_elem_sep", "Residue", "<", "C", ">", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Residue", "<", "C", ">", "getONE", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "Residue", "<", "C", ">", "getZERO", "concode_elem_sep", "Residue", "<", "C", ">", "fromInteger", "concode_elem_sep", "Residue", "<", "C", ">", "fromInteger", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Residue", "<", "C", ">", "parse", "concode_elem_sep", "Residue", "<", "C", ">", "parse", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic"]}
{"code": "String function ( ) { return suit ; }", "nl": "accesses this card 's suit . concode_field_sep int pointValue concode_elem_sep String rank concode_elem_sep String suit concode_field_sep int pointValue concode_elem_sep String rank concode_elem_sep String toString concode_elem_sep boolean matches", "code_tokens": ["String", "function", "(", ")", "{", "return", "suit", ";", "}"], "nl_tokens": ["accesses", "this", "card", "'", "s", "suit", ".", "concode_field_sep", "int", "pointValue", "concode_elem_sep", "String", "rank", "concode_elem_sep", "String", "suit", "concode_field_sep", "int", "pointValue", "concode_elem_sep", "String", "rank", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "matches"]}
{"code": "void function ( Fum arg0 ) { this . fum = arg0 ; }", "nl": "sets the fum . concode_field_sep Locale locale concode_elem_sep Fum fum concode_field_sep Fum getFum concode_elem_sep void setId concode_elem_sep FumCompositeID getId concode_elem_sep Locale getLocale concode_elem_sep void setLocale", "code_tokens": ["void", "function", "(", "Fum", "arg0", ")", "{", "this", ".", "fum", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "fum", ".", "concode_field_sep", "Locale", "locale", "concode_elem_sep", "Fum", "fum", "concode_field_sep", "Fum", "getFum", "concode_elem_sep", "void", "setId", "concode_elem_sep", "FumCompositeID", "getId", "concode_elem_sep", "Locale", "getLocale", "concode_elem_sep", "void", "setLocale"]}
{"code": "SchemaPlus function ( final String arg0 ) { return schemaTreeProvider . createRootSchema ( arg0 , this ) ; }", "nl": "return root schema with schema owner as the given user . concode_field_sep UserSession session concode_elem_sep OptionManager queryOptions concode_elem_sep ContextInformation contextInformation concode_elem_sep PlannerSettings plannerSettings concode_elem_sep SchemaTreeProvider schemaTreeProvider concode_elem_sep QueryContextInformation queryContextInfo concode_elem_sep BufferManager bufferManager concode_elem_sep ViewExpansionContext viewExpansionContext concode_elem_sep BufferAllocator allocator concode_elem_sep org.slf4j.Logger logger concode_elem_sep DrillbitContext drillbitContext concode_elem_sep ExecutionControls executionControls concode_elem_sep DrillOperatorTable table concode_elem_sep boolean closed concode_field_sep ContextInformation getContextInformation concode_elem_sep DrillbitEndpoint getCurrentEndpoint concode_elem_sep DrillBuf getManagedBuffer concode_elem_sep String getQueryUserName concode_elem_sep OptionValue getOption concode_elem_sep LogicalPlanPersistence getLpPersistence concode_elem_sep DrillOperatorTable getDrillOperatorTable concode_elem_sep DrillConfig getConfig concode_elem_sep FunctionImplementationRegistry getFunctionRegistry concode_elem_sep BufferAllocator getAllocator concode_elem_sep boolean isUserAuthenticationEnabled concode_elem_sep ExecutionControls getExecutionControls concode_elem_sep boolean isImpersonationEnabled concode_elem_sep StoragePluginRegistry getStorage concode_elem_sep PartitionExplorer getPartitionExplorer concode_elem_sep Collection<DrillbitEndpoint> getActiveEndpoints concode_elem_sep ViewExpansionContext getViewExpansionContext concode_elem_sep OptionManager getOptions concode_elem_sep UserSession getSession concode_elem_sep SchemaPlus getNewDefaultSchema concode_elem_sep QueryContextInformation getQueryContextInfo concode_elem_sep void close concode_elem_sep PlannerSettings getPlannerSettings", "code_tokens": ["SchemaPlus", "function", "(", "final", "String", "arg0", ")", "{", "return", "schemaTreeProvider", ".", "createRootSchema", "(", "arg0", ",", "this", ")", ";", "}"], "nl_tokens": ["return", "root", "schema", "with", "schema", "owner", "as", "the", "given", "user", ".", "concode_field_sep", "UserSession", "session", "concode_elem_sep", "OptionManager", "queryOptions", "concode_elem_sep", "ContextInformation", "contextInformation", "concode_elem_sep", "PlannerSettings", "plannerSettings", "concode_elem_sep", "SchemaTreeProvider", "schemaTreeProvider", "concode_elem_sep", "QueryContextInformation", "queryContextInfo", "concode_elem_sep", "BufferManager", "bufferManager", "concode_elem_sep", "ViewExpansionContext", "viewExpansionContext", "concode_elem_sep", "BufferAllocator", "allocator", "concode_elem_sep", "org", ".", "slf4j", ".", "Logger", "logger", "concode_elem_sep", "DrillbitContext", "drillbitContext", "concode_elem_sep", "ExecutionControls", "executionControls", "concode_elem_sep", "DrillOperatorTable", "table", "concode_elem_sep", "boolean", "closed", "concode_field_sep", "ContextInformation", "getContextInformation", "concode_elem_sep", "DrillbitEndpoint", "getCurrentEndpoint", "concode_elem_sep", "DrillBuf", "getManagedBuffer", "concode_elem_sep", "String", "getQueryUserName", "concode_elem_sep", "OptionValue", "getOption", "concode_elem_sep", "LogicalPlanPersistence", "getLpPersistence", "concode_elem_sep", "DrillOperatorTable", "getDrillOperatorTable", "concode_elem_sep", "DrillConfig", "getConfig", "concode_elem_sep", "FunctionImplementationRegistry", "getFunctionRegistry", "concode_elem_sep", "BufferAllocator", "getAllocator", "concode_elem_sep", "boolean", "isUserAuthenticationEnabled", "concode_elem_sep", "ExecutionControls", "getExecutionControls", "concode_elem_sep", "boolean", "isImpersonationEnabled", "concode_elem_sep", "StoragePluginRegistry", "getStorage", "concode_elem_sep", "PartitionExplorer", "getPartitionExplorer", "concode_elem_sep", "Collection", "<", "DrillbitEndpoint", ">", "getActiveEndpoints", "concode_elem_sep", "ViewExpansionContext", "getViewExpansionContext", "concode_elem_sep", "OptionManager", "getOptions", "concode_elem_sep", "UserSession", "getSession", "concode_elem_sep", "SchemaPlus", "getNewDefaultSchema", "concode_elem_sep", "QueryContextInformation", "getQueryContextInfo", "concode_elem_sep", "void", "close", "concode_elem_sep", "PlannerSettings", "getPlannerSettings"]}
{"code": "Object function ( Class arg0 ) { return map . remove ( arg0 ) ; }", "nl": "removes a class to transformer mapping in the map . concode_field_sep NumberTransformer defaultTransformer concode_elem_sep Map map concode_elem_sep long serialVersionUID concode_field_sep boolean containsTransformer concode_elem_sep Collection transformers concode_elem_sep double transform concode_elem_sep NumberTransformer getTransformer concode_elem_sep Set classes concode_elem_sep void clear concode_elem_sep boolean containsClass concode_elem_sep Object putTransformer", "code_tokens": ["Object", "function", "(", "Class", "arg0", ")", "{", "return", "map", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["removes", "a", "class", "to", "transformer", "mapping", "in", "the", "map", ".", "concode_field_sep", "NumberTransformer", "defaultTransformer", "concode_elem_sep", "Map", "map", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "boolean", "containsTransformer", "concode_elem_sep", "Collection", "transformers", "concode_elem_sep", "double", "transform", "concode_elem_sep", "NumberTransformer", "getTransformer", "concode_elem_sep", "Set", "classes", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "containsClass", "concode_elem_sep", "Object", "putTransformer"]}
{"code": "Throwable function ( ) { return cause ; }", "nl": "get cause concode_field_sep FailedType failedType concode_elem_sep Throwable cause concode_field_sep FailedType getFailedType", "code_tokens": ["Throwable", "function", "(", ")", "{", "return", "cause", ";", "}"], "nl_tokens": ["get", "cause", "concode_field_sep", "FailedType", "failedType", "concode_elem_sep", "Throwable", "cause", "concode_field_sep", "FailedType", "getFailedType"]}
{"code": "DateTime function ( ) { return new DateTime ( getMillis ( ) , ISOChronology . getInstance ( getZone ( ) ) ) ; }", "nl": "get this object as a datetime using isochronology in the same zone . concode_field_sep PlaceHolder placeHolder concode_field_sep MutableDateTime toMutableDateTime concode_elem_sep MutableDateTime toMutableDateTime concode_elem_sep MutableDateTime toMutableDateTime concode_elem_sep Date toDate concode_elem_sep boolean isEqual concode_elem_sep boolean isEqual concode_elem_sep DateTimeZone getZone concode_elem_sep boolean isSupported concode_elem_sep int compareTo concode_elem_sep boolean isBeforeNow concode_elem_sep Instant toInstant concode_elem_sep boolean isBefore concode_elem_sep boolean isBefore concode_elem_sep boolean isEqualNow concode_elem_sep MutableDateTime toMutableDateTimeISO concode_elem_sep int hashCode concode_elem_sep int get concode_elem_sep int get concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep boolean isAfter concode_elem_sep boolean isAfter concode_elem_sep DateTime toDateTime concode_elem_sep DateTime toDateTime concode_elem_sep DateTime toDateTime concode_elem_sep boolean isAfterNow", "code_tokens": ["DateTime", "function", "(", ")", "{", "return", "new", "DateTime", "(", "getMillis", "(", ")", ",", "ISOChronology", ".", "getInstance", "(", "getZone", "(", ")", ")", ")", ";", "}"], "nl_tokens": ["get", "this", "object", "as", "a", "datetime", "using", "isochronology", "in", "the", "same", "zone", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "MutableDateTime", "toMutableDateTime", "concode_elem_sep", "MutableDateTime", "toMutableDateTime", "concode_elem_sep", "MutableDateTime", "toMutableDateTime", "concode_elem_sep", "Date", "toDate", "concode_elem_sep", "boolean", "isEqual", "concode_elem_sep", "boolean", "isEqual", "concode_elem_sep", "DateTimeZone", "getZone", "concode_elem_sep", "boolean", "isSupported", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "boolean", "isBeforeNow", "concode_elem_sep", "Instant", "toInstant", "concode_elem_sep", "boolean", "isBefore", "concode_elem_sep", "boolean", "isBefore", "concode_elem_sep", "boolean", "isEqualNow", "concode_elem_sep", "MutableDateTime", "toMutableDateTimeISO", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "get", "concode_elem_sep", "int", "get", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "boolean", "isAfter", "concode_elem_sep", "DateTime", "toDateTime", "concode_elem_sep", "DateTime", "toDateTime", "concode_elem_sep", "DateTime", "toDateTime", "concode_elem_sep", "boolean", "isAfterNow"]}
{"code": "void function ( String arg0 ) { this . outOfServiceByRelease = arg0 ; }", "nl": "sets the value of the outofservicebyrelease property . concode_field_sep String fcLink concode_elem_sep String techStack concode_elem_sep String fcKey concode_elem_sep String outOfServiceByRelease concode_elem_sep ApplicationID id concode_elem_sep List<ApplicationReleaseBinding> structure concode_field_sep String getFcLink concode_elem_sep void setTechStack concode_elem_sep String getTechStack concode_elem_sep String getFcKey concode_elem_sep void setFcKey concode_elem_sep List<ApplicationReleaseBinding> getStructure concode_elem_sep void setFcLink concode_elem_sep void setId concode_elem_sep ApplicationID getId concode_elem_sep String getOutOfServiceByRelease", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "outOfServiceByRelease", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "value", "of", "the", "outofservicebyrelease", "property", ".", "concode_field_sep", "String", "fcLink", "concode_elem_sep", "String", "techStack", "concode_elem_sep", "String", "fcKey", "concode_elem_sep", "String", "outOfServiceByRelease", "concode_elem_sep", "ApplicationID", "id", "concode_elem_sep", "List", "<", "ApplicationReleaseBinding", ">", "structure", "concode_field_sep", "String", "getFcLink", "concode_elem_sep", "void", "setTechStack", "concode_elem_sep", "String", "getTechStack", "concode_elem_sep", "String", "getFcKey", "concode_elem_sep", "void", "setFcKey", "concode_elem_sep", "List", "<", "ApplicationReleaseBinding", ">", "getStructure", "concode_elem_sep", "void", "setFcLink", "concode_elem_sep", "void", "setId", "concode_elem_sep", "ApplicationID", "getId", "concode_elem_sep", "String", "getOutOfServiceByRelease"]}
{"code": "GenVector < C > function ( int arg0 ) { return random ( arg0 , density , random ) ; }", "nl": "random vector . concode_field_sep GenVector<C> ZERO concode_elem_sep Logger logger concode_elem_sep RingFactory<C> coFac concode_elem_sep float density concode_elem_sep int cols concode_elem_sep List<GenVector<C>> BASIS concode_elem_sep Random random concode_elem_sep float DEFAULT_DENSITY concode_field_sep GenVector<C> fromList concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep GenVector<C> getZERO concode_elem_sep GenVector<C> fromInteger concode_elem_sep GenVector<C> fromInteger concode_elem_sep String toString concode_elem_sep GenVector<C> copy concode_elem_sep GenVector<C> parse concode_elem_sep GenVector<C> parse", "code_tokens": ["GenVector", "<", "C", ">", "function", "(", "int", "arg0", ")", "{", "return", "random", "(", "arg0", ",", "density", ",", "random", ")", ";", "}"], "nl_tokens": ["random", "vector", ".", "concode_field_sep", "GenVector", "<", "C", ">", "ZERO", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "RingFactory", "<", "C", ">", "coFac", "concode_elem_sep", "float", "density", "concode_elem_sep", "int", "cols", "concode_elem_sep", "List", "<", "GenVector", "<", "C", ">>", "BASIS", "concode_elem_sep", "Random", "random", "concode_elem_sep", "float", "DEFAULT_DENSITY", "concode_field_sep", "GenVector", "<", "C", ">", "fromList", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "GenVector", "<", "C", ">", "getZERO", "concode_elem_sep", "GenVector", "<", "C", ">", "fromInteger", "concode_elem_sep", "GenVector", "<", "C", ">", "fromInteger", "concode_elem_sep", "String", "toString", "concode_elem_sep", "GenVector", "<", "C", ">", "copy", "concode_elem_sep", "GenVector", "<", "C", ">", "parse", "concode_elem_sep", "GenVector", "<", "C", ">", "parse"]}
{"code": "void function ( ) { try { sb . append ( ' ' ) ; } catch ( NullPointerException loc0 ) { } }", "nl": "appends a column separator to the output file . concode_field_sep int initialBufferCapacity concode_elem_sep Logger log concode_elem_sep boolean started concode_elem_sep Writer out concode_elem_sep StringBuilder sb concode_field_sep void stopped concode_elem_sep void stop concode_elem_sep void appendToFile concode_elem_sep void appendToFile concode_elem_sep void appendToFile concode_elem_sep void appendToFile concode_elem_sep void appendToFile concode_elem_sep void start concode_elem_sep void appendNewLine concode_elem_sep void started concode_elem_sep boolean isStarted concode_elem_sep void setOutputFile", "code_tokens": ["void", "function", "(", ")", "{", "try", "{", "sb", ".", "append", "(", "' '", ")", ";", "}", "catch", "(", "NullPointerException", "loc0", ")", "{", "}", "}"], "nl_tokens": ["appends", "a", "column", "separator", "to", "the", "output", "file", ".", "concode_field_sep", "int", "initialBufferCapacity", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "boolean", "started", "concode_elem_sep", "Writer", "out", "concode_elem_sep", "StringBuilder", "sb", "concode_field_sep", "void", "stopped", "concode_elem_sep", "void", "stop", "concode_elem_sep", "void", "appendToFile", "concode_elem_sep", "void", "appendToFile", "concode_elem_sep", "void", "appendToFile", "concode_elem_sep", "void", "appendToFile", "concode_elem_sep", "void", "appendToFile", "concode_elem_sep", "void", "start", "concode_elem_sep", "void", "appendNewLine", "concode_elem_sep", "void", "started", "concode_elem_sep", "boolean", "isStarted", "concode_elem_sep", "void", "setOutputFile"]}
{"code": "void function ( LineNumberReader arg0 , List < List < String >> arg1 , String arg2 ) { List < String > loc0 = new ArrayList < String > ( ) ; loc0 . add ( arg2 ) ; String loc1 = arg0 . readLine ( ) ; while ( ( loc1 != null ) && ( ! loc1 . trim ( ) . equals ( \"srini_string\" ) ) ) { loc0 . add ( loc1 ) ; loc1 = arg0 . readLine ( ) ; } arg1 . add ( loc0 ) ; }", "nl": "reads a group of ppt statements statements following the line `` ppt_name ... '' . all the lines between firstline and the first empty line are placed into a list and then this list is placed in to pptsections . concode_field_sep String lineSep concode_elem_sep StatementReplacer statementReplacer concode_elem_sep String spinfoFileName concode_elem_sep String tempDir concode_elem_sep SplitterObject[][] splitterObjects concode_field_sep boolean isComment concode_elem_sep StatementReplacer getReplacer concode_elem_sep SplitterObject[][] createSplitterObjects concode_elem_sep void setFormatting concode_elem_sep void readReplaceStatements concode_elem_sep void parseFile concode_elem_sep boolean isFormatting concode_elem_sep boolean isBlank concode_elem_sep SplitterObject[][] getSplitterObjects", "code_tokens": ["void", "function", "(", "LineNumberReader", "arg0", ",", "List", "<", "List", "<", "String", ">>", "arg1", ",", "String", "arg2", ")", "{", "List", "<", "String", ">", "loc0", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "loc0", ".", "add", "(", "arg2", ")", ";", "String", "loc1", "=", "arg0", ".", "readLine", "(", ")", ";", "while", "(", "(", "loc1", "!=", "null", ")", "&", "&", "(", "!", "loc1", ".", "trim", "(", ")", ".", "equals", "(", "\"srini_string\"", ")", ")", ")", "{", "loc0", ".", "add", "(", "loc1", ")", ";", "loc1", "=", "arg0", ".", "readLine", "(", ")", ";", "}", "arg1", ".", "add", "(", "loc0", ")", ";", "}"], "nl_tokens": ["reads", "a", "group", "of", "ppt", "statements", "statements", "following", "the", "line", "`", "`", "ppt_name", "...", "''", ".", "all", "the", "lines", "between", "firstline", "and", "the", "first", "empty", "line", "are", "placed", "into", "a", "list", "and", "then", "this", "list", "is", "placed", "in", "to", "pptsections", ".", "concode_field_sep", "String", "lineSep", "concode_elem_sep", "StatementReplacer", "statementReplacer", "concode_elem_sep", "String", "spinfoFileName", "concode_elem_sep", "String", "tempDir", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "splitterObjects", "concode_field_sep", "boolean", "isComment", "concode_elem_sep", "StatementReplacer", "getReplacer", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "createSplitterObjects", "concode_elem_sep", "void", "setFormatting", "concode_elem_sep", "void", "readReplaceStatements", "concode_elem_sep", "void", "parseFile", "concode_elem_sep", "boolean", "isFormatting", "concode_elem_sep", "boolean", "isBlank", "concode_elem_sep", "SplitterObject", "[", "]", "[", "]", "getSplitterObjects"]}
{"code": "Iterator < String > function ( ) { return this ; }", "nl": "returns a line-by-line interator for this file . concode_field_sep String lineSep concode_elem_sep Pattern entry_stop_re concode_elem_sep String first_line concode_elem_sep BufferedReader reader concode_elem_sep Pattern include_re concode_elem_sep Pattern comment_re concode_elem_sep String body concode_elem_sep String filename concode_elem_sep Stack<ReaderInfo> readers concode_elem_sep String pushback_line concode_elem_sep long line_number concode_elem_sep Pattern entry_start_re concode_elem_sep boolean short_entry concode_field_sep String next concode_elem_sep String get_filename concode_elem_sep void set_entry_start_stop concode_elem_sep void set_entry_start_stop concode_elem_sep void putback concode_elem_sep Entry get_entry concode_elem_sep boolean hasNext concode_elem_sep void main concode_elem_sep String get_description concode_elem_sep String readLine concode_elem_sep void remove concode_elem_sep String get_next_line concode_elem_sep long get_line_number", "code_tokens": ["Iterator", "<", "String", ">", "function", "(", ")", "{", "return", "this", ";", "}"], "nl_tokens": ["returns", "a", "line", "-", "by", "-", "line", "interator", "for", "this", "file", ".", "concode_field_sep", "String", "lineSep", "concode_elem_sep", "Pattern", "entry_stop_re", "concode_elem_sep", "String", "first_line", "concode_elem_sep", "BufferedReader", "reader", "concode_elem_sep", "Pattern", "include_re", "concode_elem_sep", "Pattern", "comment_re", "concode_elem_sep", "String", "body", "concode_elem_sep", "String", "filename", "concode_elem_sep", "Stack", "<", "ReaderInfo", ">", "readers", "concode_elem_sep", "String", "pushback_line", "concode_elem_sep", "long", "line_number", "concode_elem_sep", "Pattern", "entry_start_re", "concode_elem_sep", "boolean", "short_entry", "concode_field_sep", "String", "next", "concode_elem_sep", "String", "get_filename", "concode_elem_sep", "void", "set_entry_start_stop", "concode_elem_sep", "void", "set_entry_start_stop", "concode_elem_sep", "void", "putback", "concode_elem_sep", "Entry", "get_entry", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "main", "concode_elem_sep", "String", "get_description", "concode_elem_sep", "String", "readLine", "concode_elem_sep", "void", "remove", "concode_elem_sep", "String", "get_next_line", "concode_elem_sep", "long", "get_line_number"]}
{"code": "PrintWriter function ( ) { throw new SQLException ( Resources . getMessage ( \"srini_string\" ) ) ; }", "nl": "always throws a sqlexception . not supported . concode_field_sep String password concode_elem_sep Log log concode_elem_sep String driverClassName concode_elem_sep String jdbcURL concode_elem_sep String userName concode_field_sep void setPassword concode_elem_sep Connection getConnection concode_elem_sep Connection getConnection concode_elem_sep void setDriverClassName concode_elem_sep void setLoginTimeout concode_elem_sep void setLogWriter concode_elem_sep void setUserName concode_elem_sep void setJdbcURL concode_elem_sep int getLoginTimeout", "code_tokens": ["PrintWriter", "function", "(", ")", "{", "throw", "new", "SQLException", "(", "Resources", ".", "getMessage", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl_tokens": ["always", "throws", "a", "sqlexception", ".", "not", "supported", ".", "concode_field_sep", "String", "password", "concode_elem_sep", "Log", "log", "concode_elem_sep", "String", "driverClassName", "concode_elem_sep", "String", "jdbcURL", "concode_elem_sep", "String", "userName", "concode_field_sep", "void", "setPassword", "concode_elem_sep", "Connection", "getConnection", "concode_elem_sep", "Connection", "getConnection", "concode_elem_sep", "void", "setDriverClassName", "concode_elem_sep", "void", "setLoginTimeout", "concode_elem_sep", "void", "setLogWriter", "concode_elem_sep", "void", "setUserName", "concode_elem_sep", "void", "setJdbcURL", "concode_elem_sep", "int", "getLoginTimeout"]}
{"code": "boolean function ( ) { return true ; }", "nl": "method stub . returns false . concode_field_sep Reflector _parent concode_elem_sep ReflectArray _array concode_elem_sep JdkLoader _classLoader concode_elem_sep ReflectorConfiguration _config concode_field_sep Reflector parent concode_elem_sep ReflectClass forName concode_elem_sep void configuration concode_elem_sep ReflectorConfiguration configuration concode_elem_sep boolean isCollection concode_elem_sep Object nullValue concode_elem_sep Class[] toNative concode_elem_sep Class toNative concode_elem_sep ReflectClass[] toMeta concode_elem_sep ReflectArray array concode_elem_sep Object deepClone concode_elem_sep ReflectClass forClass concode_elem_sep JdkClass createClass concode_elem_sep ReflectClass forObject concode_elem_sep void setParent", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "true", ";", "}"], "nl_tokens": ["method", "stub", ".", "returns", "false", ".", "concode_field_sep", "Reflector", "_parent", "concode_elem_sep", "ReflectArray", "_array", "concode_elem_sep", "JdkLoader", "_classLoader", "concode_elem_sep", "ReflectorConfiguration", "_config", "concode_field_sep", "Reflector", "parent", "concode_elem_sep", "ReflectClass", "forName", "concode_elem_sep", "void", "configuration", "concode_elem_sep", "ReflectorConfiguration", "configuration", "concode_elem_sep", "boolean", "isCollection", "concode_elem_sep", "Object", "nullValue", "concode_elem_sep", "Class", "[", "]", "toNative", "concode_elem_sep", "Class", "toNative", "concode_elem_sep", "ReflectClass", "[", "]", "toMeta", "concode_elem_sep", "ReflectArray", "array", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "ReflectClass", "forClass", "concode_elem_sep", "JdkClass", "createClass", "concode_elem_sep", "ReflectClass", "forObject", "concode_elem_sep", "void", "setParent"]}
{"code": "BusinessException function ( ) { return new BusinessException ( ) ; }", "nl": "create an instance of businessexception concode_field_sep QName _HistoryHeader_QNAME concode_elem_sep QName _ISDVInfo_QNAME concode_elem_sep QName _KeyValuePairList_QNAME concode_elem_sep QName _LocalizedMessage_QNAME concode_elem_sep QName _BusinessException_QNAME concode_elem_sep QName _Message_QNAME concode_elem_sep QName _CallContext_QNAME concode_elem_sep QName _ValidationException_QNAME concode_elem_sep QName _NotFoundException_QNAME concode_elem_sep QName _ValidationContext_QNAME concode_elem_sep QName _TimePeriod_QNAME concode_elem_sep QName _OpenTimePeriod_QNAME concode_elem_sep QName _LocalizedString_QNAME concode_elem_sep QName _KeyValuePair_QNAME concode_elem_sep QName _TechnicalException_QNAME concode_field_sep ISDVInfo createISDVInfo concode_elem_sep JAXBElement<ISDVInfo> createISDVInfo concode_elem_sep ValidationException createValidationException concode_elem_sep JAXBElement<ValidationException> createValidationException concode_elem_sep CallContext createCallContext concode_elem_sep JAXBElement<CallContext> createCallContext concode_elem_sep OpenTimePeriod createOpenTimePeriod concode_elem_sep JAXBElement<OpenTimePeriod> createOpenTimePeriod concode_elem_sep LocalizedMessage createLocalizedMessage concode_elem_sep JAXBElement<LocalizedMessage> createLocalizedMessage concode_elem_sep TechnicalException createTechnicalException concode_elem_sep JAXBElement<TechnicalException> createTechnicalException concode_elem_sep KeyValuePairList createKeyValuePairList concode_elem_sep JAXBElement<KeyValuePairList> createKeyValuePairList concode_elem_sep TimePeriod createTimePeriod concode_elem_sep JAXBElement<TimePeriod> createTimePeriod concode_elem_sep LocalizedString createLocalizedString concode_elem_sep JAXBElement<LocalizedString> createLocalizedString concode_elem_sep HistoryHeader createHistoryHeader concode_elem_sep JAXBElement<HistoryHeader> createHistoryHeader concode_elem_sep KeyValuePair createKeyValuePair concode_elem_sep JAXBElement<KeyValuePair> createKeyValuePair concode_elem_sep NotFoundException createNotFoundException concode_elem_sep JAXBElement<NotFoundException> createNotFoundException concode_elem_sep ValidationContext createValidationContext concode_elem_sep JAXBElement<ValidationContext> createValidationContext concode_elem_sep Message createMessage concode_elem_sep JAXBElement<Message> createMessage", "code_tokens": ["BusinessException", "function", "(", ")", "{", "return", "new", "BusinessException", "(", ")", ";", "}"], "nl_tokens": ["create", "an", "instance", "of", "businessexception", "concode_field_sep", "QName", "_HistoryHeader_QNAME", "concode_elem_sep", "QName", "_ISDVInfo_QNAME", "concode_elem_sep", "QName", "_KeyValuePairList_QNAME", "concode_elem_sep", "QName", "_LocalizedMessage_QNAME", "concode_elem_sep", "QName", "_BusinessException_QNAME", "concode_elem_sep", "QName", "_Message_QNAME", "concode_elem_sep", "QName", "_CallContext_QNAME", "concode_elem_sep", "QName", "_ValidationException_QNAME", "concode_elem_sep", "QName", "_NotFoundException_QNAME", "concode_elem_sep", "QName", "_ValidationContext_QNAME", "concode_elem_sep", "QName", "_TimePeriod_QNAME", "concode_elem_sep", "QName", "_OpenTimePeriod_QNAME", "concode_elem_sep", "QName", "_LocalizedString_QNAME", "concode_elem_sep", "QName", "_KeyValuePair_QNAME", "concode_elem_sep", "QName", "_TechnicalException_QNAME", "concode_field_sep", "ISDVInfo", "createISDVInfo", "concode_elem_sep", "JAXBElement", "<", "ISDVInfo", ">", "createISDVInfo", "concode_elem_sep", "ValidationException", "createValidationException", "concode_elem_sep", "JAXBElement", "<", "ValidationException", ">", "createValidationException", "concode_elem_sep", "CallContext", "createCallContext", "concode_elem_sep", "JAXBElement", "<", "CallContext", ">", "createCallContext", "concode_elem_sep", "OpenTimePeriod", "createOpenTimePeriod", "concode_elem_sep", "JAXBElement", "<", "OpenTimePeriod", ">", "createOpenTimePeriod", "concode_elem_sep", "LocalizedMessage", "createLocalizedMessage", "concode_elem_sep", "JAXBElement", "<", "LocalizedMessage", ">", "createLocalizedMessage", "concode_elem_sep", "TechnicalException", "createTechnicalException", "concode_elem_sep", "JAXBElement", "<", "TechnicalException", ">", "createTechnicalException", "concode_elem_sep", "KeyValuePairList", "createKeyValuePairList", "concode_elem_sep", "JAXBElement", "<", "KeyValuePairList", ">", "createKeyValuePairList", "concode_elem_sep", "TimePeriod", "createTimePeriod", "concode_elem_sep", "JAXBElement", "<", "TimePeriod", ">", "createTimePeriod", "concode_elem_sep", "LocalizedString", "createLocalizedString", "concode_elem_sep", "JAXBElement", "<", "LocalizedString", ">", "createLocalizedString", "concode_elem_sep", "HistoryHeader", "createHistoryHeader", "concode_elem_sep", "JAXBElement", "<", "HistoryHeader", ">", "createHistoryHeader", "concode_elem_sep", "KeyValuePair", "createKeyValuePair", "concode_elem_sep", "JAXBElement", "<", "KeyValuePair", ">", "createKeyValuePair", "concode_elem_sep", "NotFoundException", "createNotFoundException", "concode_elem_sep", "JAXBElement", "<", "NotFoundException", ">", "createNotFoundException", "concode_elem_sep", "ValidationContext", "createValidationContext", "concode_elem_sep", "JAXBElement", "<", "ValidationContext", ">", "createValidationContext", "concode_elem_sep", "Message", "createMessage", "concode_elem_sep", "JAXBElement", "<", "Message", ">", "createMessage"]}
{"code": "boolean function ( ) { return num . equals ( den ) ; }", "nl": "is local one . concode_field_sep Logger logger concode_elem_sep LocalRing<C> ring concode_elem_sep boolean debug concode_elem_sep C num concode_elem_sep int isunit concode_elem_sep C den concode_field_sep int signum concode_elem_sep Local<C> inverse concode_elem_sep boolean isUnit concode_elem_sep Local<C> subtract concode_elem_sep Local<C> gcd concode_elem_sep Local<C> sum concode_elem_sep int compareTo concode_elem_sep Local<C>[] egcd concode_elem_sep Local<C> abs concode_elem_sep int hashCode concode_elem_sep Local<C> negate concode_elem_sep boolean equals concode_elem_sep Local<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep Local<C> divide concode_elem_sep Local<C> multiply concode_elem_sep Local<C> remainder", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "num", ".", "equals", "(", "den", ")", ";", "}"], "nl_tokens": ["is", "local", "one", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "LocalRing", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "C", "num", "concode_elem_sep", "int", "isunit", "concode_elem_sep", "C", "den", "concode_field_sep", "int", "signum", "concode_elem_sep", "Local", "<", "C", ">", "inverse", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "Local", "<", "C", ">", "subtract", "concode_elem_sep", "Local", "<", "C", ">", "gcd", "concode_elem_sep", "Local", "<", "C", ">", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Local", "<", "C", ">", "[", "]", "egcd", "concode_elem_sep", "Local", "<", "C", ">", "abs", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Local", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Local", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Local", "<", "C", ">", "divide", "concode_elem_sep", "Local", "<", "C", ">", "multiply", "concode_elem_sep", "Local", "<", "C", ">", "remainder"]}
{"code": "PaintSurface function ( ) { return paintSurface ; }", "nl": "returns the paint surface associated with this paint session . concode_field_sep PaintSurface paintSurface concode_field_sep placeholderType placeHolder", "code_tokens": ["PaintSurface", "function", "(", ")", "{", "return", "paintSurface", ";", "}"], "nl_tokens": ["returns", "the", "paint", "surface", "associated", "with", "this", "paint", "session", ".", "concode_field_sep", "PaintSurface", "paintSurface", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "int function ( ) { return comparatorChain . size ( ) ; }", "nl": "number of comparators in the current comparatorchain . concode_field_sep BitSet orderingBits concode_elem_sep List comparatorChain concode_elem_sep boolean isLocked concode_elem_sep long serialVersionUID concode_field_sep int compare concode_elem_sep void checkLocked concode_elem_sep void setComparator concode_elem_sep void setComparator concode_elem_sep void setForwardSort concode_elem_sep int hashCode concode_elem_sep void setReverseSort concode_elem_sep boolean isLocked concode_elem_sep boolean equals concode_elem_sep void checkChainIntegrity concode_elem_sep void addComparator concode_elem_sep void addComparator", "code_tokens": ["int", "function", "(", ")", "{", "return", "comparatorChain", ".", "size", "(", ")", ";", "}"], "nl_tokens": ["number", "of", "comparators", "in", "the", "current", "comparatorchain", ".", "concode_field_sep", "BitSet", "orderingBits", "concode_elem_sep", "List", "comparatorChain", "concode_elem_sep", "boolean", "isLocked", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "int", "compare", "concode_elem_sep", "void", "checkLocked", "concode_elem_sep", "void", "setComparator", "concode_elem_sep", "void", "setComparator", "concode_elem_sep", "void", "setForwardSort", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "void", "setReverseSort", "concode_elem_sep", "boolean", "isLocked", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "checkChainIntegrity", "concode_elem_sep", "void", "addComparator", "concode_elem_sep", "void", "addComparator"]}
{"code": "void function ( String arg0 , IPath arg1 ) { IIndex loc0 = getIndex ( arg1 , false ) ; if ( loc0 != null ) loc0 . remove ( arg0 ) ; }", "nl": "trigger removal of a resource to an index note : the actual operation is performed in background concode_field_sep int CANCEL_IF_NOT_READY_TO_SEARCH concode_elem_sep SearchEngine fgSearchEngine concode_elem_sep HashMap fIndexes concode_elem_sep HashMap fMap concode_elem_sep int WAIT_UNTIL_READY_TO_SEARCH concode_field_sep void add concode_elem_sep SearchEngine getSearchEngine concode_elem_sep void search concode_elem_sep boolean search concode_elem_sep IIndex getIndex concode_elem_sep void addRef concode_elem_sep IIndex[] getIndexes concode_elem_sep IFile[] getFiles concode_elem_sep boolean execute concode_elem_sep void queryPrefix", "code_tokens": ["void", "function", "(", "String", "arg0", ",", "IPath", "arg1", ")", "{", "IIndex", "loc0", "=", "getIndex", "(", "arg1", ",", "false", ")", ";", "if", "(", "loc0", "!=", "null", ")", "loc0", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["trigger", "removal", "of", "a", "resource", "to", "an", "index", "note", ":", "the", "actual", "operation", "is", "performed", "in", "background", "concode_field_sep", "int", "CANCEL_IF_NOT_READY_TO_SEARCH", "concode_elem_sep", "SearchEngine", "fgSearchEngine", "concode_elem_sep", "HashMap", "fIndexes", "concode_elem_sep", "HashMap", "fMap", "concode_elem_sep", "int", "WAIT_UNTIL_READY_TO_SEARCH", "concode_field_sep", "void", "add", "concode_elem_sep", "SearchEngine", "getSearchEngine", "concode_elem_sep", "void", "search", "concode_elem_sep", "boolean", "search", "concode_elem_sep", "IIndex", "getIndex", "concode_elem_sep", "void", "addRef", "concode_elem_sep", "IIndex", "[", "]", "getIndexes", "concode_elem_sep", "IFile", "[", "]", "getFiles", "concode_elem_sep", "boolean", "execute", "concode_elem_sep", "void", "queryPrefix"]}
{"code": "void function ( int arg0 ) { if ( ! eventPool . containsKey ( arg0 ) ) { throw new EventDoesNotExistException ( arg0 + \"srini_string\" ) ; } eventPool . get ( arg0 ) . status ( ) ; }", "nl": "get status of a running event . concode_field_sep Random rand concode_elem_sep int currentlyRunningSyncEvent concode_elem_sep int MIN_ID concode_elem_sep int MAX_RUNNING_EVENTS concode_elem_sep int MAX_EVENT_TIME concode_elem_sep Map<Integer,Event> eventPool concode_elem_sep int MAX_ID concode_field_sep void cancel concode_elem_sep void completedEventHandler concode_elem_sep void start concode_elem_sep int generateId concode_elem_sep int create concode_elem_sep int createEvent concode_elem_sep Map<Integer,Event> getEventPool concode_elem_sep int numOfCurrentlyRunningSyncEvent concode_elem_sep int createAsync concode_elem_sep void statusOfAllEvents concode_elem_sep void shutdown", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "if", "(", "!", "eventPool", ".", "containsKey", "(", "arg0", ")", ")", "{", "throw", "new", "EventDoesNotExistException", "(", "arg0", "+", "\"srini_string\"", ")", ";", "}", "eventPool", ".", "get", "(", "arg0", ")", ".", "status", "(", ")", ";", "}"], "nl_tokens": ["get", "status", "of", "a", "running", "event", ".", "concode_field_sep", "Random", "rand", "concode_elem_sep", "int", "currentlyRunningSyncEvent", "concode_elem_sep", "int", "MIN_ID", "concode_elem_sep", "int", "MAX_RUNNING_EVENTS", "concode_elem_sep", "int", "MAX_EVENT_TIME", "concode_elem_sep", "Map", "<", "Integer", ",", "Event", ">", "eventPool", "concode_elem_sep", "int", "MAX_ID", "concode_field_sep", "void", "cancel", "concode_elem_sep", "void", "completedEventHandler", "concode_elem_sep", "void", "start", "concode_elem_sep", "int", "generateId", "concode_elem_sep", "int", "create", "concode_elem_sep", "int", "createEvent", "concode_elem_sep", "Map", "<", "Integer", ",", "Event", ">", "getEventPool", "concode_elem_sep", "int", "numOfCurrentlyRunningSyncEvent", "concode_elem_sep", "int", "createAsync", "concode_elem_sep", "void", "statusOfAllEvents", "concode_elem_sep", "void", "shutdown"]}
{"code": "int function ( ) { return _index ; }", "nl": "get this widget 's index relative to its parent widget . concode_field_sep long serialVersionUID concode_elem_sep HashMap _map concode_elem_sep int UNASSIGNED concode_elem_sep int _index concode_elem_sep WidgetLocator _parentInfo concode_elem_sep Class _cls concode_elem_sep String _nameOrLabel concode_elem_sep IWidgetMatcher _matcher concode_field_sep void setData concode_elem_sep WidgetLocator getParentInfo concode_elem_sep String getNameOrLabel concode_elem_sep IWidgetLocator[] findAll concode_elem_sep boolean matches concode_elem_sep Map getDataMap concode_elem_sep void setParentInfo concode_elem_sep Class getTargetClass concode_elem_sep void setIndex concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep String toString concode_elem_sep String getTargetClassName concode_elem_sep String getData", "code_tokens": ["int", "function", "(", ")", "{", "return", "_index", ";", "}"], "nl_tokens": ["get", "this", "widget", "'", "s", "index", "relative", "to", "its", "parent", "widget", ".", "concode_field_sep", "long", "serialVersionUID", "concode_elem_sep", "HashMap", "_map", "concode_elem_sep", "int", "UNASSIGNED", "concode_elem_sep", "int", "_index", "concode_elem_sep", "WidgetLocator", "_parentInfo", "concode_elem_sep", "Class", "_cls", "concode_elem_sep", "String", "_nameOrLabel", "concode_elem_sep", "IWidgetMatcher", "_matcher", "concode_field_sep", "void", "setData", "concode_elem_sep", "WidgetLocator", "getParentInfo", "concode_elem_sep", "String", "getNameOrLabel", "concode_elem_sep", "IWidgetLocator", "[", "]", "findAll", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "Map", "getDataMap", "concode_elem_sep", "void", "setParentInfo", "concode_elem_sep", "Class", "getTargetClass", "concode_elem_sep", "void", "setIndex", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getTargetClassName", "concode_elem_sep", "String", "getData"]}
{"code": "void function ( Component arg0 ) { this . component = arg0 ; }", "nl": "sets the component . concode_field_sep Component component concode_elem_sep GridBagConstraints constraints concode_field_sep GridBagConstraints getConstraints concode_elem_sep void setConstraints concode_elem_sep Component getComponent", "code_tokens": ["void", "function", "(", "Component", "arg0", ")", "{", "this", ".", "component", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "component", ".", "concode_field_sep", "Component", "component", "concode_elem_sep", "GridBagConstraints", "constraints", "concode_field_sep", "GridBagConstraints", "getConstraints", "concode_elem_sep", "void", "setConstraints", "concode_elem_sep", "Component", "getComponent"]}
{"code": "boolean function ( ) { return _exists == _project . exists ( ) ; }", "nl": "test for the existence of the given project . concode_field_sep IProject _project concode_elem_sep boolean _exists concode_field_sep String toString", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "_exists", "==", "_project", ".", "exists", "(", ")", ";", "}"], "nl_tokens": ["test", "for", "the", "existence", "of", "the", "given", "project", ".", "concode_field_sep", "IProject", "_project", "concode_elem_sep", "boolean", "_exists", "concode_field_sep", "String", "toString"]}
{"code": "DetachedCriteria function ( String arg0 ) { criteria . setComment ( arg0 ) ; return this ; }", "nl": "set the sql comment to use . concode_field_sep CriteriaImpl impl concode_elem_sep Criteria criteria concode_field_sep DetachedCriteria add concode_elem_sep Criteria getExecutableCriteria concode_elem_sep DetachedCriteria setFetchMode concode_elem_sep DetachedCriteria setProjection concode_elem_sep DetachedCriteria forEntityName concode_elem_sep DetachedCriteria forEntityName concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria createCriteria concode_elem_sep DetachedCriteria setLockMode concode_elem_sep DetachedCriteria setLockMode concode_elem_sep DetachedCriteria setResultTransformer concode_elem_sep CriteriaImpl getCriteriaImpl concode_elem_sep DetachedCriteria forClass concode_elem_sep DetachedCriteria forClass concode_elem_sep DetachedCriteria addOrder concode_elem_sep String toString concode_elem_sep String getAlias concode_elem_sep DetachedCriteria createAlias concode_elem_sep DetachedCriteria createAlias concode_elem_sep DetachedCriteria createAlias concode_elem_sep DetachedCriteria createAlias concode_elem_sep DetachedCriteria createAlias", "code_tokens": ["DetachedCriteria", "function", "(", "String", "arg0", ")", "{", "criteria", ".", "setComment", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl_tokens": ["set", "the", "sql", "comment", "to", "use", ".", "concode_field_sep", "CriteriaImpl", "impl", "concode_elem_sep", "Criteria", "criteria", "concode_field_sep", "DetachedCriteria", "add", "concode_elem_sep", "Criteria", "getExecutableCriteria", "concode_elem_sep", "DetachedCriteria", "setFetchMode", "concode_elem_sep", "DetachedCriteria", "setProjection", "concode_elem_sep", "DetachedCriteria", "forEntityName", "concode_elem_sep", "DetachedCriteria", "forEntityName", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "createCriteria", "concode_elem_sep", "DetachedCriteria", "setLockMode", "concode_elem_sep", "DetachedCriteria", "setLockMode", "concode_elem_sep", "DetachedCriteria", "setResultTransformer", "concode_elem_sep", "CriteriaImpl", "getCriteriaImpl", "concode_elem_sep", "DetachedCriteria", "forClass", "concode_elem_sep", "DetachedCriteria", "forClass", "concode_elem_sep", "DetachedCriteria", "addOrder", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getAlias", "concode_elem_sep", "DetachedCriteria", "createAlias", "concode_elem_sep", "DetachedCriteria", "createAlias", "concode_elem_sep", "DetachedCriteria", "createAlias", "concode_elem_sep", "DetachedCriteria", "createAlias", "concode_elem_sep", "DetachedCriteria", "createAlias"]}
{"code": "double function ( double [ ] arg0 , double [ ] arg1 ) { assert ( ( arg0 . length == 3 ) && ( arg1 . length == 3 ) ) ; return ( arg0 [ 2 ] * arg1 [ 2 ] ) + ( arg0 [ 1 ] * arg1 [ 1 ] ) + ( arg0 [ 0 ] * arg1 [ 0 ] ) ; }", "nl": "computes the dotproduct of our sliding windows and weights vectors . todo jaimeyap : i could make this a general purpose dotproduct function , but for now , this is more performant . trivial to add later . concode_field_sep int eventDepth concode_elem_sep GraphModel graphModel concode_elem_sep Timer warmDownTimer concode_elem_sep int TICK_TIME concode_elem_sep double blockedTimeInWindow concode_elem_sep double[] weights concode_elem_sep double WINDOW_SLIDE_INCREMENT concode_elem_sep double weightedUtilizationPercent concode_elem_sep double WINDOW_WIDTH concode_elem_sep double maxUtilization concode_elem_sep double[] windowHistory concode_elem_sep double currentWindowStart concode_elem_sep double currentMarker concode_elem_sep double scaledWeightedUtilization concode_field_sep void updateWeightedUtilization concode_elem_sep double calculateCurrentUtilization concode_elem_sep double getThreadUtilization concode_elem_sep void enterBlocking concode_elem_sep void slideWindowTo concode_elem_sep void run concode_elem_sep void releaseBlocking", "code_tokens": ["double", "function", "(", "double", "[", "]", "arg0", ",", "double", "[", "]", "arg1", ")", "{", "assert", "(", "(", "arg0", ".", "length", "==", "3", ")", "&", "&", "(", "arg1", ".", "length", "==", "3", ")", ")", ";", "return", "(", "arg0", "[", "2", "]", "*", "arg1", "[", "2", "]", ")", "+", "(", "arg0", "[", "1", "]", "*", "arg1", "[", "1", "]", ")", "+", "(", "arg0", "[", "0", "]", "*", "arg1", "[", "0", "]", ")", ";", "}"], "nl_tokens": ["computes", "the", "dotproduct", "of", "our", "sliding", "windows", "and", "weights", "vectors", ".", "todo", "jaimeyap", ":", "i", "could", "make", "this", "a", "general", "purpose", "dotproduct", "function", ",", "but", "for", "now", ",", "this", "is", "more", "performant", ".", "trivial", "to", "add", "later", ".", "concode_field_sep", "int", "eventDepth", "concode_elem_sep", "GraphModel", "graphModel", "concode_elem_sep", "Timer", "warmDownTimer", "concode_elem_sep", "int", "TICK_TIME", "concode_elem_sep", "double", "blockedTimeInWindow", "concode_elem_sep", "double", "[", "]", "weights", "concode_elem_sep", "double", "WINDOW_SLIDE_INCREMENT", "concode_elem_sep", "double", "weightedUtilizationPercent", "concode_elem_sep", "double", "WINDOW_WIDTH", "concode_elem_sep", "double", "maxUtilization", "concode_elem_sep", "double", "[", "]", "windowHistory", "concode_elem_sep", "double", "currentWindowStart", "concode_elem_sep", "double", "currentMarker", "concode_elem_sep", "double", "scaledWeightedUtilization", "concode_field_sep", "void", "updateWeightedUtilization", "concode_elem_sep", "double", "calculateCurrentUtilization", "concode_elem_sep", "double", "getThreadUtilization", "concode_elem_sep", "void", "enterBlocking", "concode_elem_sep", "void", "slideWindowTo", "concode_elem_sep", "void", "run", "concode_elem_sep", "void", "releaseBlocking"]}
{"code": "Sardine function ( ) { return begin ( null , null ) ; }", "nl": "default begin for when you do n't need anything but no authentication and default settings for ssl . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["Sardine", "function", "(", ")", "{", "return", "begin", "(", "null", ",", "null", ")", ";", "}"], "nl_tokens": ["default", "begin", "for", "when", "you", "do", "n", "'", "t", "need", "anything", "but", "no", "authentication", "and", "default", "settings", "for", "ssl", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "Iterable4 function ( final Iterable4 arg0 ) { return new Iterable4 ( ) { public Iterator4 iterator ( ) { return new EnumerateIterator ( arg0 . iterator ( ) ) ; } } ; }", "nl": "generates enumerateiterator.tuple items with indexes starting at 0 . concode_field_sep Object NO_ELEMENT concode_elem_sep Object SKIP concode_elem_sep Iterator4 EMPTY_ITERATOR concode_elem_sep Iterable4 EMPTY_ITERABLE concode_field_sep Object next concode_elem_sep Iterable4 crossProduct concode_elem_sep Iterable4 crossProduct concode_elem_sep Iterable4 crossProduct concode_elem_sep Iterable4 iterable concode_elem_sep Iterable4 iterable concode_elem_sep Iterator4<Integer> range concode_elem_sep Iterator4 flatten concode_elem_sep Object current concode_elem_sep Iterator4 iterator concode_elem_sep Iterator4 iterator concode_elem_sep Iterator4 iterator concode_elem_sep Object[] toArray concode_elem_sep Object[] toArray concode_elem_sep String join concode_elem_sep String join concode_elem_sep String join concode_elem_sep Iterator4 copy concode_elem_sep Iterator4 map concode_elem_sep Iterator4 map concode_elem_sep Iterable4 map concode_elem_sep Iterator4 iterate concode_elem_sep Iterator4 singletonIterator concode_elem_sep boolean moveNext concode_elem_sep Iterable4 singletonIterable concode_elem_sep java.util.Iterator<T> platformIterator concode_elem_sep Iterator4 concat concode_elem_sep Iterator4 concat concode_elem_sep Iterable4 concat concode_elem_sep Iterable4 concat concode_elem_sep Iterator4 concat concode_elem_sep Iterable4 concatMap concode_elem_sep boolean any concode_elem_sep Iterator4<T> filter concode_elem_sep Iterable4 filter concode_elem_sep Iterator4 filter concode_elem_sep Iterator4<T> take concode_elem_sep int size concode_elem_sep int size concode_elem_sep Iterable4<T> series concode_elem_sep void reset concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep Iterable4 append", "code_tokens": ["Iterable4", "function", "(", "final", "Iterable4", "arg0", ")", "{", "return", "new", "Iterable4", "(", ")", "{", "public", "Iterator4", "iterator", "(", ")", "{", "return", "new", "EnumerateIterator", "(", "arg0", ".", "iterator", "(", ")", ")", ";", "}", "}", ";", "}"], "nl_tokens": ["generates", "enumerateiterator", ".", "tuple", "items", "with", "indexes", "starting", "at", "0", ".", "concode_field_sep", "Object", "NO_ELEMENT", "concode_elem_sep", "Object", "SKIP", "concode_elem_sep", "Iterator4", "EMPTY_ITERATOR", "concode_elem_sep", "Iterable4", "EMPTY_ITERABLE", "concode_field_sep", "Object", "next", "concode_elem_sep", "Iterable4", "crossProduct", "concode_elem_sep", "Iterable4", "crossProduct", "concode_elem_sep", "Iterable4", "crossProduct", "concode_elem_sep", "Iterable4", "iterable", "concode_elem_sep", "Iterable4", "iterable", "concode_elem_sep", "Iterator4", "<", "Integer", ">", "range", "concode_elem_sep", "Iterator4", "flatten", "concode_elem_sep", "Object", "current", "concode_elem_sep", "Iterator4", "iterator", "concode_elem_sep", "Iterator4", "iterator", "concode_elem_sep", "Iterator4", "iterator", "concode_elem_sep", "Object", "[", "]", "toArray", "concode_elem_sep", "Object", "[", "]", "toArray", "concode_elem_sep", "String", "join", "concode_elem_sep", "String", "join", "concode_elem_sep", "String", "join", "concode_elem_sep", "Iterator4", "copy", "concode_elem_sep", "Iterator4", "map", "concode_elem_sep", "Iterator4", "map", "concode_elem_sep", "Iterable4", "map", "concode_elem_sep", "Iterator4", "iterate", "concode_elem_sep", "Iterator4", "singletonIterator", "concode_elem_sep", "boolean", "moveNext", "concode_elem_sep", "Iterable4", "singletonIterable", "concode_elem_sep", "java", ".", "util", ".", "Iterator", "<", "T", ">", "platformIterator", "concode_elem_sep", "Iterator4", "concat", "concode_elem_sep", "Iterator4", "concat", "concode_elem_sep", "Iterable4", "concat", "concode_elem_sep", "Iterable4", "concat", "concode_elem_sep", "Iterator4", "concat", "concode_elem_sep", "Iterable4", "concatMap", "concode_elem_sep", "boolean", "any", "concode_elem_sep", "Iterator4", "<", "T", ">", "filter", "concode_elem_sep", "Iterable4", "filter", "concode_elem_sep", "Iterator4", "filter", "concode_elem_sep", "Iterator4", "<", "T", ">", "take", "concode_elem_sep", "int", "size", "concode_elem_sep", "int", "size", "concode_elem_sep", "Iterable4", "<", "T", ">", "series", "concode_elem_sep", "void", "reset", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Iterable4", "append"]}
{"code": "IntListIterator function ( int arg0 ) { return singletonIntList ( arg0 ) . listIterator ( ) ; }", "nl": "returns an unmodifiable intlistiterator containing only the specified element . concode_field_sep IntListIterator EMPTY_INT_LIST_ITERATOR concode_elem_sep IntList EMPTY_INT_LIST concode_elem_sep IntIterator EMPTY_INT_ITERATOR concode_field_sep IntListIterator getEmptyIntListIterator concode_elem_sep IntIterator unmodifiableIntIterator concode_elem_sep IntIterator singletonIntIterator concode_elem_sep IntList getEmptyIntList concode_elem_sep IntIterator getEmptyIntIterator concode_elem_sep IntList unmodifiableIntList concode_elem_sep IntListIterator unmodifiableIntListIterator concode_elem_sep IntList singletonIntList", "code_tokens": ["IntListIterator", "function", "(", "int", "arg0", ")", "{", "return", "singletonIntList", "(", "arg0", ")", ".", "listIterator", "(", ")", ";", "}"], "nl_tokens": ["returns", "an", "unmodifiable", "intlistiterator", "containing", "only", "the", "specified", "element", ".", "concode_field_sep", "IntListIterator", "EMPTY_INT_LIST_ITERATOR", "concode_elem_sep", "IntList", "EMPTY_INT_LIST", "concode_elem_sep", "IntIterator", "EMPTY_INT_ITERATOR", "concode_field_sep", "IntListIterator", "getEmptyIntListIterator", "concode_elem_sep", "IntIterator", "unmodifiableIntIterator", "concode_elem_sep", "IntIterator", "singletonIntIterator", "concode_elem_sep", "IntList", "getEmptyIntList", "concode_elem_sep", "IntIterator", "getEmptyIntIterator", "concode_elem_sep", "IntList", "unmodifiableIntList", "concode_elem_sep", "IntListIterator", "unmodifiableIntListIterator", "concode_elem_sep", "IntList", "singletonIntList"]}
{"code": "void function ( InputStream arg0 , OutputStream arg1 ) { int loc0 = 0 ; while ( loc0 != - 1 ) { loc0 = arg0 . read ( fgBuffer , 0 , fgBuffer . length ) ; if ( loc0 != - 1 ) { arg1 . write ( fgBuffer , 0 , loc0 ) ; } } }", "nl": "copies all bytes in the given source stream to the given destination stream . neither streams are closed . concode_field_sep byte[] fgBuffer concode_field_sep String changeSeparator concode_elem_sep StringBuffer read concode_elem_sep StringBuffer read concode_elem_sep File getFileInPlugin concode_elem_sep void copy concode_elem_sep void unzip concode_elem_sep void write", "code_tokens": ["void", "function", "(", "InputStream", "arg0", ",", "OutputStream", "arg1", ")", "{", "int", "loc0", "=", "0", ";", "while", "(", "loc0", "!=", "-", "1", ")", "{", "loc0", "=", "arg0", ".", "read", "(", "fgBuffer", ",", "0", ",", "fgBuffer", ".", "length", ")", ";", "if", "(", "loc0", "!=", "-", "1", ")", "{", "arg1", ".", "write", "(", "fgBuffer", ",", "0", ",", "loc0", ")", ";", "}", "}", "}"], "nl_tokens": ["copies", "all", "bytes", "in", "the", "given", "source", "stream", "to", "the", "given", "destination", "stream", ".", "neither", "streams", "are", "closed", ".", "concode_field_sep", "byte", "[", "]", "fgBuffer", "concode_field_sep", "String", "changeSeparator", "concode_elem_sep", "StringBuffer", "read", "concode_elem_sep", "StringBuffer", "read", "concode_elem_sep", "File", "getFileInPlugin", "concode_elem_sep", "void", "copy", "concode_elem_sep", "void", "unzip", "concode_elem_sep", "void", "write"]}
{"code": "Widget function ( Matcher arg0 ) { dbComparisons = 0 ; _attempts = 0 ; return findInShellScope ( arg0 ) ; }", "nl": "find a widget , using the given matcher to determine whether a given widget in the hierarchy used by this widgetfinder is the desired one . concode_field_sep int dbComparisons concode_elem_sep int searchType concode_elem_sep SWTHierarchy hierarchy concode_elem_sep int BFS concode_elem_sep SearchScopeHelper _searchScopeHelper concode_elem_sep List _listeners concode_elem_sep ArrayList list concode_elem_sep int DFS concode_elem_sep int _attempts concode_elem_sep BasicFinder2 DEFAULT concode_field_sep Widget getParent concode_elem_sep Widget getWidgetParent concode_elem_sep Collection getRoots concode_elem_sep Widget findInShellScope concode_elem_sep Collection getWidgets concode_elem_sep void findMatches concode_elem_sep BasicFinder2 getDefault concode_elem_sep Widget findInShellScope0 concode_elem_sep void pause concode_elem_sep boolean contains concode_elem_sep void dbPrintWidgets concode_elem_sep void addExceptionListener concode_elem_sep void informExceptionListeners concode_elem_sep Widget find0 concode_elem_sep void printWidgets concode_elem_sep void dispose concode_elem_sep Hierarchy getHierarchy", "code_tokens": ["Widget", "function", "(", "Matcher", "arg0", ")", "{", "dbComparisons", "=", "0", ";", "_attempts", "=", "0", ";", "return", "findInShellScope", "(", "arg0", ")", ";", "}"], "nl_tokens": ["find", "a", "widget", ",", "using", "the", "given", "matcher", "to", "determine", "whether", "a", "given", "widget", "in", "the", "hierarchy", "used", "by", "this", "widgetfinder", "is", "the", "desired", "one", ".", "concode_field_sep", "int", "dbComparisons", "concode_elem_sep", "int", "searchType", "concode_elem_sep", "SWTHierarchy", "hierarchy", "concode_elem_sep", "int", "BFS", "concode_elem_sep", "SearchScopeHelper", "_searchScopeHelper", "concode_elem_sep", "List", "_listeners", "concode_elem_sep", "ArrayList", "list", "concode_elem_sep", "int", "DFS", "concode_elem_sep", "int", "_attempts", "concode_elem_sep", "BasicFinder2", "DEFAULT", "concode_field_sep", "Widget", "getParent", "concode_elem_sep", "Widget", "getWidgetParent", "concode_elem_sep", "Collection", "getRoots", "concode_elem_sep", "Widget", "findInShellScope", "concode_elem_sep", "Collection", "getWidgets", "concode_elem_sep", "void", "findMatches", "concode_elem_sep", "BasicFinder2", "getDefault", "concode_elem_sep", "Widget", "findInShellScope0", "concode_elem_sep", "void", "pause", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "void", "dbPrintWidgets", "concode_elem_sep", "void", "addExceptionListener", "concode_elem_sep", "void", "informExceptionListeners", "concode_elem_sep", "Widget", "find0", "concode_elem_sep", "void", "printWidgets", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "Hierarchy", "getHierarchy"]}
{"code": "boolean function ( long arg0 ) { return ( ( blockStart >= arg0 + SYNC_SIZE ) || ( blockStart >= in . length ( ) ) ) ; }", "nl": "return true if past the next synchronization point after a position . concode_field_sep byte[] MAGIC concode_elem_sep String CODEC concode_elem_sep Schema schema concode_elem_sep long blockCount concode_elem_sep int SYNC_SIZE concode_elem_sep String SYNC concode_elem_sep DataFileReader.SeekableInputStream in concode_elem_sep DatumReader<D> reader concode_elem_sep long count concode_elem_sep byte[] sync concode_elem_sep String SCHEMA concode_elem_sep Map<String,byte[]> meta concode_elem_sep D peek concode_elem_sep long blockStart concode_elem_sep byte VERSION concode_elem_sep byte[] syncBuffer concode_elem_sep String COUNT concode_elem_sep long FOOTER_BLOCK concode_elem_sep BinaryDecoder vin concode_elem_sep String NULL_CODEC concode_elem_sep int SYNC_INTERVAL concode_field_sep D next concode_elem_sep D next concode_elem_sep long tell concode_elem_sep String getMetaString concode_elem_sep long getMetaLong concode_elem_sep boolean hasNext concode_elem_sep void seek concode_elem_sep void sync concode_elem_sep void remove concode_elem_sep Schema getSchema concode_elem_sep Iterator<D> iterator concode_elem_sep byte[] getMeta concode_elem_sep void skipSync concode_elem_sep void close", "code_tokens": ["boolean", "function", "(", "long", "arg0", ")", "{", "return", "(", "(", "blockStart", ">=", "arg0", "+", "SYNC_SIZE", ")", "|", "|", "(", "blockStart", ">=", "in", ".", "length", "(", ")", ")", ")", ";", "}"], "nl_tokens": ["return", "true", "if", "past", "the", "next", "synchronization", "point", "after", "a", "position", ".", "concode_field_sep", "byte", "[", "]", "MAGIC", "concode_elem_sep", "String", "CODEC", "concode_elem_sep", "Schema", "schema", "concode_elem_sep", "long", "blockCount", "concode_elem_sep", "int", "SYNC_SIZE", "concode_elem_sep", "String", "SYNC", "concode_elem_sep", "DataFileReader", ".", "SeekableInputStream", "in", "concode_elem_sep", "DatumReader", "<", "D", ">", "reader", "concode_elem_sep", "long", "count", "concode_elem_sep", "byte", "[", "]", "sync", "concode_elem_sep", "String", "SCHEMA", "concode_elem_sep", "Map", "<", "String", ",", "byte", "[", "]", ">", "meta", "concode_elem_sep", "D", "peek", "concode_elem_sep", "long", "blockStart", "concode_elem_sep", "byte", "VERSION", "concode_elem_sep", "byte", "[", "]", "syncBuffer", "concode_elem_sep", "String", "COUNT", "concode_elem_sep", "long", "FOOTER_BLOCK", "concode_elem_sep", "BinaryDecoder", "vin", "concode_elem_sep", "String", "NULL_CODEC", "concode_elem_sep", "int", "SYNC_INTERVAL", "concode_field_sep", "D", "next", "concode_elem_sep", "D", "next", "concode_elem_sep", "long", "tell", "concode_elem_sep", "String", "getMetaString", "concode_elem_sep", "long", "getMetaLong", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "seek", "concode_elem_sep", "void", "sync", "concode_elem_sep", "void", "remove", "concode_elem_sep", "Schema", "getSchema", "concode_elem_sep", "Iterator", "<", "D", ">", "iterator", "concode_elem_sep", "byte", "[", "]", "getMeta", "concode_elem_sep", "void", "skipSync", "concode_elem_sep", "void", "close"]}
{"code": "boolean function ( String arg0 , String arg1 , char [ ] arg2 ) { byte [ ] loc0 = hexStringToByteArray ( arg0 ) ; return arg1 . equals ( hashPassword ( arg2 , loc0 ) . get ( \"srini_string\" ) ) ; }", "nl": "checks if the given password matches the hash and salt . the original password should be kept in the database along with its salt . concode_field_sep PlaceHolder placeHolder concode_field_sep byte[] generateSalt concode_elem_sep Map<String,String> hashPassword concode_elem_sep Map<String,String> hashPassword concode_elem_sep byte[] charToBytesASCII concode_elem_sep String byteArrayToHexString concode_elem_sep byte[] hexStringToByteArray", "code_tokens": ["boolean", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "char", "[", "]", "arg2", ")", "{", "byte", "[", "]", "loc0", "=", "hexStringToByteArray", "(", "arg0", ")", ";", "return", "arg1", ".", "equals", "(", "hashPassword", "(", "arg2", ",", "loc0", ")", ".", "get", "(", "\"srini_string\"", ")", ")", ";", "}"], "nl_tokens": ["checks", "if", "the", "given", "password", "matches", "the", "hash", "and", "salt", ".", "the", "original", "password", "should", "be", "kept", "in", "the", "database", "along", "with", "its", "salt", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "byte", "[", "]", "generateSalt", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "hashPassword", "concode_elem_sep", "Map", "<", "String", ",", "String", ">", "hashPassword", "concode_elem_sep", "byte", "[", "]", "charToBytesASCII", "concode_elem_sep", "String", "byteArrayToHexString", "concode_elem_sep", "byte", "[", "]", "hexStringToByteArray"]}
{"code": "VectorXZ function ( double arg0 ) { return new VectorXZ ( sin ( arg0 ) , cos ( arg0 ) ) ; }", "nl": "returns a unit vector based on an angular direction . for example , angle 0 creates vector 0,1 , angle pi/2 creates vector 1,0 . concode_field_sep VectorXZ NULL_VECTOR concode_elem_sep VectorXZ Z_UNIT concode_elem_sep double x concode_elem_sep VectorXZ X_UNIT concode_elem_sep double z concode_field_sep VectorXZ add concode_elem_sep Function<VectorXZ,VectorXYZ> xyzFunction concode_elem_sep double angleTo concode_elem_sep VectorXZ mult concode_elem_sep List<VectorXYZ> listXYZ concode_elem_sep double lengthSquared concode_elem_sep double distance concode_elem_sep VectorXZ invert concode_elem_sep VectorXZ subtract concode_elem_sep double dot concode_elem_sep double length concode_elem_sep double distanceTo concode_elem_sep double angleBetween concode_elem_sep double distanceSquared concode_elem_sep double getX concode_elem_sep double getY concode_elem_sep double getZ concode_elem_sep int hashCode concode_elem_sep VectorXZ normalize concode_elem_sep boolean equals concode_elem_sep VectorXYZ xyz concode_elem_sep double angle concode_elem_sep String toString concode_elem_sep VectorXZ rightNormal", "code_tokens": ["VectorXZ", "function", "(", "double", "arg0", ")", "{", "return", "new", "VectorXZ", "(", "sin", "(", "arg0", ")", ",", "cos", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["returns", "a", "unit", "vector", "based", "on", "an", "angular", "direction", ".", "for", "example", ",", "angle", "0", "creates", "vector", "0", ",", "1", ",", "angle", "pi", "/", "2", "creates", "vector", "1", ",", "0", ".", "concode_field_sep", "VectorXZ", "NULL_VECTOR", "concode_elem_sep", "VectorXZ", "Z_UNIT", "concode_elem_sep", "double", "x", "concode_elem_sep", "VectorXZ", "X_UNIT", "concode_elem_sep", "double", "z", "concode_field_sep", "VectorXZ", "add", "concode_elem_sep", "Function", "<", "VectorXZ", ",", "VectorXYZ", ">", "xyzFunction", "concode_elem_sep", "double", "angleTo", "concode_elem_sep", "VectorXZ", "mult", "concode_elem_sep", "List", "<", "VectorXYZ", ">", "listXYZ", "concode_elem_sep", "double", "lengthSquared", "concode_elem_sep", "double", "distance", "concode_elem_sep", "VectorXZ", "invert", "concode_elem_sep", "VectorXZ", "subtract", "concode_elem_sep", "double", "dot", "concode_elem_sep", "double", "length", "concode_elem_sep", "double", "distanceTo", "concode_elem_sep", "double", "angleBetween", "concode_elem_sep", "double", "distanceSquared", "concode_elem_sep", "double", "getX", "concode_elem_sep", "double", "getY", "concode_elem_sep", "double", "getZ", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "VectorXZ", "normalize", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "VectorXYZ", "xyz", "concode_elem_sep", "double", "angle", "concode_elem_sep", "String", "toString", "concode_elem_sep", "VectorXZ", "rightNormal"]}
{"code": "Criteria function ( String arg0 , String arg1 , String arg2 ) { Criteria loc0 = new Criteria ( ValueNode . toValueNode ( arg0 ) ) ; loc0 . criteriaType = RelationalOperator . fromString ( arg1 ) ; loc0 . arg2 = ValueNode . toValueNode ( arg2 ) ; return loc0 ; }", "nl": "creates a new criteria concode_field_sep List<Criteria> criteriaChain concode_elem_sep ValueNode left concode_elem_sep ValueNode right concode_elem_sep RelationalOperator criteriaType concode_field_sep Criteria lt concode_elem_sep Criteria type concode_elem_sep String prefixPath concode_elem_sep Criteria empty concode_elem_sep void checkComplete concode_elem_sep Criteria nin concode_elem_sep Criteria nin concode_elem_sep Criteria and concode_elem_sep Criteria gte concode_elem_sep Criteria where concode_elem_sep Criteria where concode_elem_sep Criteria lte concode_elem_sep Criteria all concode_elem_sep Criteria all concode_elem_sep boolean apply concode_elem_sep Criteria in concode_elem_sep Criteria in concode_elem_sep Criteria is concode_elem_sep Criteria parse concode_elem_sep Criteria eq concode_elem_sep Criteria gt concode_elem_sep Criteria matches concode_elem_sep Criteria regex concode_elem_sep Criteria contains concode_elem_sep Criteria size concode_elem_sep Criteria ne concode_elem_sep Criteria exists concode_elem_sep String toString concode_elem_sep Collection<RelationalExpressionNode> toRelationalExpressionNodes concode_elem_sep Criteria notEmpty", "code_tokens": ["Criteria", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "String", "arg2", ")", "{", "Criteria", "loc0", "=", "new", "Criteria", "(", "ValueNode", ".", "toValueNode", "(", "arg0", ")", ")", ";", "loc0", ".", "criteriaType", "=", "RelationalOperator", ".", "fromString", "(", "arg1", ")", ";", "loc0", ".", "arg2", "=", "ValueNode", ".", "toValueNode", "(", "arg2", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["creates", "a", "new", "criteria", "concode_field_sep", "List", "<", "Criteria", ">", "criteriaChain", "concode_elem_sep", "ValueNode", "left", "concode_elem_sep", "ValueNode", "right", "concode_elem_sep", "RelationalOperator", "criteriaType", "concode_field_sep", "Criteria", "lt", "concode_elem_sep", "Criteria", "type", "concode_elem_sep", "String", "prefixPath", "concode_elem_sep", "Criteria", "empty", "concode_elem_sep", "void", "checkComplete", "concode_elem_sep", "Criteria", "nin", "concode_elem_sep", "Criteria", "nin", "concode_elem_sep", "Criteria", "and", "concode_elem_sep", "Criteria", "gte", "concode_elem_sep", "Criteria", "where", "concode_elem_sep", "Criteria", "where", "concode_elem_sep", "Criteria", "lte", "concode_elem_sep", "Criteria", "all", "concode_elem_sep", "Criteria", "all", "concode_elem_sep", "boolean", "apply", "concode_elem_sep", "Criteria", "in", "concode_elem_sep", "Criteria", "in", "concode_elem_sep", "Criteria", "is", "concode_elem_sep", "Criteria", "parse", "concode_elem_sep", "Criteria", "eq", "concode_elem_sep", "Criteria", "gt", "concode_elem_sep", "Criteria", "matches", "concode_elem_sep", "Criteria", "regex", "concode_elem_sep", "Criteria", "contains", "concode_elem_sep", "Criteria", "size", "concode_elem_sep", "Criteria", "ne", "concode_elem_sep", "Criteria", "exists", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Collection", "<", "RelationalExpressionNode", ">", "toRelationalExpressionNodes", "concode_elem_sep", "Criteria", "notEmpty"]}
{"code": "HashCodeBuilder function ( float [ ] arg0 ) { if ( arg0 == null ) { iTotal = iTotal * iConstant ; } else { for ( float loc0 : arg0 ) { append ( loc0 ) ; } } return this ; }", "nl": "append a hashcode for a float array . concode_field_sep int iConstant concode_elem_sep int iTotal concode_field_sep HashCodeBuilder appendSuper concode_elem_sep int toHashCode", "code_tokens": ["HashCodeBuilder", "function", "(", "float", "[", "]", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "iTotal", "=", "iTotal", "*", "iConstant", ";", "}", "else", "{", "for", "(", "float", "loc0", ":", "arg0", ")", "{", "append", "(", "loc0", ")", ";", "}", "}", "return", "this", ";", "}"], "nl_tokens": ["append", "a", "hashcode", "for", "a", "float", "array", ".", "concode_field_sep", "int", "iConstant", "concode_elem_sep", "int", "iTotal", "concode_field_sep", "HashCodeBuilder", "appendSuper", "concode_elem_sep", "int", "toHashCode"]}
{"code": "boolean function ( ) { return size == 0 ; }", "nl": "tests if the dictionary is empty . concode_field_sep int size concode_elem_sep BinaryTreeNode root concode_field_sep void insertHelper concode_elem_sep BinaryTreeNode findHelper concode_elem_sep int size concode_elem_sep void testFind concode_elem_sep void testRemove concode_elem_sep Entry find concode_elem_sep void makeEmpty concode_elem_sep Entry insert concode_elem_sep BinaryTreeNode findSmallest concode_elem_sep void main concode_elem_sep String toString concode_elem_sep Entry remove", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "size", "==", "0", ";", "}"], "nl_tokens": ["tests", "if", "the", "dictionary", "is", "empty", ".", "concode_field_sep", "int", "size", "concode_elem_sep", "BinaryTreeNode", "root", "concode_field_sep", "void", "insertHelper", "concode_elem_sep", "BinaryTreeNode", "findHelper", "concode_elem_sep", "int", "size", "concode_elem_sep", "void", "testFind", "concode_elem_sep", "void", "testRemove", "concode_elem_sep", "Entry", "find", "concode_elem_sep", "void", "makeEmpty", "concode_elem_sep", "Entry", "insert", "concode_elem_sep", "BinaryTreeNode", "findSmallest", "concode_elem_sep", "void", "main", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Entry", "remove"]}
{"code": "BasicType function ( String arg0 ) { return basicTypeRegistry . getRegisteredType ( arg0 ) ; }", "nl": "locate a hibernate @linkplain basictype basic type given one of its registration names . concode_field_sep TypeFactory typeFactory concode_elem_sep BasicTypeRegistry basicTypeRegistry concode_field_sep void registerTypeOverride concode_elem_sep void registerTypeOverride concode_elem_sep void registerTypeOverride concode_elem_sep TypeFactory getTypeFactory concode_elem_sep TypeResolver scope concode_elem_sep Type heuristicType concode_elem_sep Type heuristicType", "code_tokens": ["BasicType", "function", "(", "String", "arg0", ")", "{", "return", "basicTypeRegistry", ".", "getRegisteredType", "(", "arg0", ")", ";", "}"], "nl_tokens": ["locate", "a", "hibernate", "@", "linkplain", "basictype", "basic", "type", "given", "one", "of", "its", "registration", "names", ".", "concode_field_sep", "TypeFactory", "typeFactory", "concode_elem_sep", "BasicTypeRegistry", "basicTypeRegistry", "concode_field_sep", "void", "registerTypeOverride", "concode_elem_sep", "void", "registerTypeOverride", "concode_elem_sep", "void", "registerTypeOverride", "concode_elem_sep", "TypeFactory", "getTypeFactory", "concode_elem_sep", "TypeResolver", "scope", "concode_elem_sep", "Type", "heuristicType", "concode_elem_sep", "Type", "heuristicType"]}
{"code": "Bitmap function ( String arg0 , int arg1 , Map < String , String > arg2 ) { InputStream loc0 = getInputStreamFromUrl ( arg0 , arg1 , arg2 ) ; Bitmap loc1 = BitmapFactory . decodeStream ( loc0 ) ; closeInputStream ( loc0 ) ; return loc1 ; }", "nl": "get bitmap by imageurl concode_field_sep PlaceHolder placeHolder concode_field_sep Drawable bitmapToDrawable concode_elem_sep void closeInputStream concode_elem_sep Bitmap drawableToBitmap concode_elem_sep Bitmap byteToBitmap concode_elem_sep byte[] drawableToByte concode_elem_sep Bitmap scaleImage concode_elem_sep byte[] bitmapToByte concode_elem_sep Bitmap scaleImageTo concode_elem_sep Drawable byteToDrawable concode_elem_sep Drawable getDrawableFromUrl concode_elem_sep Drawable getDrawableFromUrl concode_elem_sep InputStream getInputStreamFromUrl concode_elem_sep InputStream getInputStreamFromUrl", "code_tokens": ["Bitmap", "function", "(", "String", "arg0", ",", "int", "arg1", ",", "Map", "<", "String", ",", "String", ">", "arg2", ")", "{", "InputStream", "loc0", "=", "getInputStreamFromUrl", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "Bitmap", "loc1", "=", "BitmapFactory", ".", "decodeStream", "(", "loc0", ")", ";", "closeInputStream", "(", "loc0", ")", ";", "return", "loc1", ";", "}"], "nl_tokens": ["get", "bitmap", "by", "imageurl", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Drawable", "bitmapToDrawable", "concode_elem_sep", "void", "closeInputStream", "concode_elem_sep", "Bitmap", "drawableToBitmap", "concode_elem_sep", "Bitmap", "byteToBitmap", "concode_elem_sep", "byte", "[", "]", "drawableToByte", "concode_elem_sep", "Bitmap", "scaleImage", "concode_elem_sep", "byte", "[", "]", "bitmapToByte", "concode_elem_sep", "Bitmap", "scaleImageTo", "concode_elem_sep", "Drawable", "byteToDrawable", "concode_elem_sep", "Drawable", "getDrawableFromUrl", "concode_elem_sep", "Drawable", "getDrawableFromUrl", "concode_elem_sep", "InputStream", "getInputStreamFromUrl", "concode_elem_sep", "InputStream", "getInputStreamFromUrl"]}
{"code": "double function ( ) { return mu ; }", "nl": "getter for property mu . concode_field_sep int DIGEST_MODE concode_elem_sep BufferedReader filePointer concode_elem_sep int CONSTANT_MODE concode_elem_sep int mode concode_elem_sep double mu concode_elem_sep EmpiricalDistribution empiricalDistribution concode_elem_sep URL valuesFileURL concode_elem_sep double sigma concode_elem_sep RandomDataImpl randomData concode_elem_sep int REPLAY_MODE concode_elem_sep int EXPONENTIAL_MODE concode_elem_sep int GAUSSIAN_MODE concode_elem_sep int UNIFORM_MODE concode_field_sep EmpiricalDistribution getEmpiricalDistribution concode_elem_sep double getNextUniform concode_elem_sep void closeReplayFile concode_elem_sep void setMode concode_elem_sep double getNext concode_elem_sep void fill concode_elem_sep double[] fill concode_elem_sep double getSigma concode_elem_sep void computeDistribution concode_elem_sep void computeDistribution concode_elem_sep void setMu concode_elem_sep void setValuesFileURL concode_elem_sep void setValuesFileURL concode_elem_sep double getNextReplay concode_elem_sep URL getValuesFileURL concode_elem_sep void setSigma concode_elem_sep void resetReplayFile concode_elem_sep double getNextGaussian concode_elem_sep int getMode concode_elem_sep double getNextDigest concode_elem_sep double getNextExponential", "code_tokens": ["double", "function", "(", ")", "{", "return", "mu", ";", "}"], "nl_tokens": ["getter", "for", "property", "mu", ".", "concode_field_sep", "int", "DIGEST_MODE", "concode_elem_sep", "BufferedReader", "filePointer", "concode_elem_sep", "int", "CONSTANT_MODE", "concode_elem_sep", "int", "mode", "concode_elem_sep", "double", "mu", "concode_elem_sep", "EmpiricalDistribution", "empiricalDistribution", "concode_elem_sep", "URL", "valuesFileURL", "concode_elem_sep", "double", "sigma", "concode_elem_sep", "RandomDataImpl", "randomData", "concode_elem_sep", "int", "REPLAY_MODE", "concode_elem_sep", "int", "EXPONENTIAL_MODE", "concode_elem_sep", "int", "GAUSSIAN_MODE", "concode_elem_sep", "int", "UNIFORM_MODE", "concode_field_sep", "EmpiricalDistribution", "getEmpiricalDistribution", "concode_elem_sep", "double", "getNextUniform", "concode_elem_sep", "void", "closeReplayFile", "concode_elem_sep", "void", "setMode", "concode_elem_sep", "double", "getNext", "concode_elem_sep", "void", "fill", "concode_elem_sep", "double", "[", "]", "fill", "concode_elem_sep", "double", "getSigma", "concode_elem_sep", "void", "computeDistribution", "concode_elem_sep", "void", "computeDistribution", "concode_elem_sep", "void", "setMu", "concode_elem_sep", "void", "setValuesFileURL", "concode_elem_sep", "void", "setValuesFileURL", "concode_elem_sep", "double", "getNextReplay", "concode_elem_sep", "URL", "getValuesFileURL", "concode_elem_sep", "void", "setSigma", "concode_elem_sep", "void", "resetReplayFile", "concode_elem_sep", "double", "getNextGaussian", "concode_elem_sep", "int", "getMode", "concode_elem_sep", "double", "getNextDigest", "concode_elem_sep", "double", "getNextExponential"]}
{"code": "void function ( final int arg0 ) { final int loc0 = this . m_value ; this . m_value -= arg0 ; if ( loc0 < this . m_value ) { this . m_value = loc0 ; throw new ArithmeticException ( \"srini_string\" ) ; } }", "nl": "substracts the given value from the internal value . concode_field_sep int MIN_VALUE concode_elem_sep int MAX_VALUE concode_elem_sep int m_value concode_field_sep void add concode_elem_sep void add concode_elem_sep void add concode_elem_sep int getValue concode_elem_sep int hashCode concode_elem_sep int intValue concode_elem_sep boolean equals concode_elem_sep void setValue concode_elem_sep String toString", "code_tokens": ["void", "function", "(", "final", "int", "arg0", ")", "{", "final", "int", "loc0", "=", "this", ".", "m_value", ";", "this", ".", "m_value", "-=", "arg0", ";", "if", "(", "loc0", "<", "this", ".", "m_value", ")", "{", "this", ".", "m_value", "=", "loc0", ";", "throw", "new", "ArithmeticException", "(", "\"srini_string\"", ")", ";", "}", "}"], "nl_tokens": ["substracts", "the", "given", "value", "from", "the", "internal", "value", ".", "concode_field_sep", "int", "MIN_VALUE", "concode_elem_sep", "int", "MAX_VALUE", "concode_elem_sep", "int", "m_value", "concode_field_sep", "void", "add", "concode_elem_sep", "void", "add", "concode_elem_sep", "void", "add", "concode_elem_sep", "int", "getValue", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "intValue", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "String", "toString"]}
{"code": "Type function ( String arg0 , Properties arg1 ) { Type loc0 = basic ( arg0 ) ; if ( loc0 != null ) { return loc0 ; } try { Class loc1 = ReflectHelper . classForName ( arg0 ) ; if ( loc1 != null ) { return typeFactory . byClass ( loc1 , arg1 ) ; } } catch ( ClassNotFoundException loc1 ) { } return null ; }", "nl": "uses heuristics to deduce the proper type given a string naming the type or java class . the search goes as follows : search for a basic type with ` typename ' as a registration key look for ` typename ' as a class name and if it names a type implementor , return an instanceif it names a compositeusertype or a usertype , return an instance of class wrapped intot the appropriate type adapterif it implements lifecycle , return the corresponding entity type if it implements serializable , return the corresponding serializable type concode_field_sep TypeFactory typeFactory concode_elem_sep BasicTypeRegistry basicTypeRegistry concode_field_sep void registerTypeOverride concode_elem_sep void registerTypeOverride concode_elem_sep void registerTypeOverride concode_elem_sep TypeFactory getTypeFactory concode_elem_sep TypeResolver scope concode_elem_sep BasicType basic", "code_tokens": ["Type", "function", "(", "String", "arg0", ",", "Properties", "arg1", ")", "{", "Type", "loc0", "=", "basic", "(", "arg0", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "try", "{", "Class", "loc1", "=", "ReflectHelper", ".", "classForName", "(", "arg0", ")", ";", "if", "(", "loc1", "!=", "null", ")", "{", "return", "typeFactory", ".", "byClass", "(", "loc1", ",", "arg1", ")", ";", "}", "}", "catch", "(", "ClassNotFoundException", "loc1", ")", "{", "}", "return", "null", ";", "}"], "nl_tokens": ["uses", "heuristics", "to", "deduce", "the", "proper", "type", "given", "a", "string", "naming", "the", "type", "or", "java", "class", ".", "the", "search", "goes", "as", "follows", ":", "search", "for", "a", "basic", "type", "with", "`", "typename", "' as a registration key look for ` typename '", "as", "a", "class", "name", "and", "if", "it", "names", "a", "type", "implementor", ",", "return", "an", "instanceif", "it", "names", "a", "compositeusertype", "or", "a", "usertype", ",", "return", "an", "instance", "of", "class", "wrapped", "intot", "the", "appropriate", "type", "adapterif", "it", "implements", "lifecycle", ",", "return", "the", "corresponding", "entity", "type", "if", "it", "implements", "serializable", ",", "return", "the", "corresponding", "serializable", "type", "concode_field_sep", "TypeFactory", "typeFactory", "concode_elem_sep", "BasicTypeRegistry", "basicTypeRegistry", "concode_field_sep", "void", "registerTypeOverride", "concode_elem_sep", "void", "registerTypeOverride", "concode_elem_sep", "void", "registerTypeOverride", "concode_elem_sep", "TypeFactory", "getTypeFactory", "concode_elem_sep", "TypeResolver", "scope", "concode_elem_sep", "BasicType", "basic"]}
{"code": "KrbClient function ( File arg0 ) { KrbClient loc0 ; if ( arg0 != null ) { loc0 = new KrbClient ( arg0 ) ; } else { loc0 = new KrbClient ( ) ; } loc0 . init ( ) ; return loc0 ; }", "nl": "init the client . concode_field_sep String USAGE concode_field_sep String getPassword concode_elem_sep void requestTicket concode_elem_sep KOptions convertOptions concode_elem_sep void main concode_elem_sep void printUsage", "code_tokens": ["KrbClient", "function", "(", "File", "arg0", ")", "{", "KrbClient", "loc0", ";", "if", "(", "arg0", "!=", "null", ")", "{", "loc0", "=", "new", "KrbClient", "(", "arg0", ")", ";", "}", "else", "{", "loc0", "=", "new", "KrbClient", "(", ")", ";", "}", "loc0", ".", "init", "(", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["init", "the", "client", ".", "concode_field_sep", "String", "USAGE", "concode_field_sep", "String", "getPassword", "concode_elem_sep", "void", "requestTicket", "concode_elem_sep", "KOptions", "convertOptions", "concode_elem_sep", "void", "main", "concode_elem_sep", "void", "printUsage"]}
{"code": "double function ( ) { double loc0 = ( getRed ( ) + getGreen ( ) + getBlue ( ) ) / 3.0 ; return loc0 ; }", "nl": "method to get the average of the colors of this pixel concode_field_sep int x concode_elem_sep int y concode_elem_sep DigitalPicture picture concode_field_sep int getCol concode_elem_sep int correctValue concode_elem_sep Color getColor concode_elem_sep void setAlpha concode_elem_sep int getRow concode_elem_sep int getBlue concode_elem_sep int getBlue concode_elem_sep void setRed concode_elem_sep void setGreen concode_elem_sep int getAlpha concode_elem_sep void updatePicture concode_elem_sep int getX concode_elem_sep int getY concode_elem_sep int getRed concode_elem_sep int getRed concode_elem_sep int getGreen concode_elem_sep int getGreen concode_elem_sep void setColor concode_elem_sep double colorDistance concode_elem_sep double colorDistance concode_elem_sep void setBlue concode_elem_sep String toString", "code_tokens": ["double", "function", "(", ")", "{", "double", "loc0", "=", "(", "getRed", "(", ")", "+", "getGreen", "(", ")", "+", "getBlue", "(", ")", ")", "/", "3.0", ";", "return", "loc0", ";", "}"], "nl_tokens": ["method", "to", "get", "the", "average", "of", "the", "colors", "of", "this", "pixel", "concode_field_sep", "int", "x", "concode_elem_sep", "int", "y", "concode_elem_sep", "DigitalPicture", "picture", "concode_field_sep", "int", "getCol", "concode_elem_sep", "int", "correctValue", "concode_elem_sep", "Color", "getColor", "concode_elem_sep", "void", "setAlpha", "concode_elem_sep", "int", "getRow", "concode_elem_sep", "int", "getBlue", "concode_elem_sep", "int", "getBlue", "concode_elem_sep", "void", "setRed", "concode_elem_sep", "void", "setGreen", "concode_elem_sep", "int", "getAlpha", "concode_elem_sep", "void", "updatePicture", "concode_elem_sep", "int", "getX", "concode_elem_sep", "int", "getY", "concode_elem_sep", "int", "getRed", "concode_elem_sep", "int", "getRed", "concode_elem_sep", "int", "getGreen", "concode_elem_sep", "int", "getGreen", "concode_elem_sep", "void", "setColor", "concode_elem_sep", "double", "colorDistance", "concode_elem_sep", "double", "colorDistance", "concode_elem_sep", "void", "setBlue", "concode_elem_sep", "String", "toString"]}
{"code": "void function ( ) { pos ++ ; }", "nl": "skips the next char . concode_field_sep String str concode_elem_sep int pos concode_field_sep char ch concode_elem_sep char ch concode_elem_sep int pos concode_elem_sep int length concode_elem_sep boolean hasNext concode_elem_sep XMPDateTime parse concode_elem_sep XMPDateTime parse concode_elem_sep String render concode_elem_sep int gatherInt", "code_tokens": ["void", "function", "(", ")", "{", "pos", "+", "+", ";", "}"], "nl_tokens": ["skips", "the", "next", "char", ".", "concode_field_sep", "String", "str", "concode_elem_sep", "int", "pos", "concode_field_sep", "char", "ch", "concode_elem_sep", "char", "ch", "concode_elem_sep", "int", "pos", "concode_elem_sep", "int", "length", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "XMPDateTime", "parse", "concode_elem_sep", "XMPDateTime", "parse", "concode_elem_sep", "String", "render", "concode_elem_sep", "int", "gatherInt"]}
{"code": "ConditionMapping function ( ICondition arg0 ) { ConditionMapping loc0 ; synchronized ( _mappings ) { for ( Iterator loc1 = _mappings . iterator ( ) ; loc1 . hasNext ( ) ; ) { loc0 = ( ConditionMapping ) loc1 . next ( ) ; if ( loc0 . arg0 == arg0 ) return loc0 ; } } return null ; }", "nl": "find the mapping associated with this condition or null if no associated mapping can be found . concode_field_sep List _mappings concode_elem_sep IHandler handler concode_elem_sep IConditionMonitor _parent concode_elem_sep ICondition condition concode_elem_sep ConditionMonitor ROOT concode_elem_sep boolean _isProcessing concode_elem_sep ConditionMapping[] _cachedMappings concode_field_sep void add concode_elem_sep void add concode_elem_sep void removeAll concode_elem_sep int process concode_elem_sep boolean test concode_elem_sep ICondition[] getConditions concode_elem_sep ConditionMonitor getInstance concode_elem_sep void removeHandler", "code_tokens": ["ConditionMapping", "function", "(", "ICondition", "arg0", ")", "{", "ConditionMapping", "loc0", ";", "synchronized", "(", "_mappings", ")", "{", "for", "(", "Iterator", "loc1", "=", "_mappings", ".", "iterator", "(", ")", ";", "loc1", ".", "hasNext", "(", ")", ";", ")", "{", "loc0", "=", "(", "ConditionMapping", ")", "loc1", ".", "next", "(", ")", ";", "if", "(", "loc0", ".", "arg0", "==", "arg0", ")", "return", "loc0", ";", "}", "}", "return", "null", ";", "}"], "nl_tokens": ["find", "the", "mapping", "associated", "with", "this", "condition", "or", "null", "if", "no", "associated", "mapping", "can", "be", "found", ".", "concode_field_sep", "List", "_mappings", "concode_elem_sep", "IHandler", "handler", "concode_elem_sep", "IConditionMonitor", "_parent", "concode_elem_sep", "ICondition", "condition", "concode_elem_sep", "ConditionMonitor", "ROOT", "concode_elem_sep", "boolean", "_isProcessing", "concode_elem_sep", "ConditionMapping", "[", "]", "_cachedMappings", "concode_field_sep", "void", "add", "concode_elem_sep", "void", "add", "concode_elem_sep", "void", "removeAll", "concode_elem_sep", "int", "process", "concode_elem_sep", "boolean", "test", "concode_elem_sep", "ICondition", "[", "]", "getConditions", "concode_elem_sep", "ConditionMonitor", "getInstance", "concode_elem_sep", "void", "removeHandler"]}
{"code": "void function ( OutputStream arg0 ) { writeHeader ( arg0 ) ; for ( int loc0 = 0 ; loc0 < columnCount ; loc0 ++ ) columns [ loc0 ] . writeTo ( arg0 ) ; }", "nl": "write all rows added to the named output stream . concode_field_sep byte[] MAGIC_1 concode_elem_sep ColumnFileMetaData metaData concode_elem_sep long size concode_elem_sep byte[] MAGIC_0 concode_elem_sep ColumnOutputBuffer[] columns concode_elem_sep long rowCount concode_elem_sep int columnCount concode_elem_sep byte[] MAGIC concode_field_sep void writeLength concode_elem_sep void writeHeader concode_elem_sep long[] computeStarts concode_elem_sep void startRow concode_elem_sep void endRow concode_elem_sep void checkColumns concode_elem_sep int getColumnCount concode_elem_sep void writeRow concode_elem_sep void incrementSize concode_elem_sep ColumnFileMetaData getMetaData concode_elem_sep void writeValue concode_elem_sep long sizeEstimate", "code_tokens": ["void", "function", "(", "OutputStream", "arg0", ")", "{", "writeHeader", "(", "arg0", ")", ";", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "columnCount", ";", "loc0", "+", "+", ")", "columns", "[", "loc0", "]", ".", "writeTo", "(", "arg0", ")", ";", "}"], "nl_tokens": ["write", "all", "rows", "added", "to", "the", "named", "output", "stream", ".", "concode_field_sep", "byte", "[", "]", "MAGIC_1", "concode_elem_sep", "ColumnFileMetaData", "metaData", "concode_elem_sep", "long", "size", "concode_elem_sep", "byte", "[", "]", "MAGIC_0", "concode_elem_sep", "ColumnOutputBuffer", "[", "]", "columns", "concode_elem_sep", "long", "rowCount", "concode_elem_sep", "int", "columnCount", "concode_elem_sep", "byte", "[", "]", "MAGIC", "concode_field_sep", "void", "writeLength", "concode_elem_sep", "void", "writeHeader", "concode_elem_sep", "long", "[", "]", "computeStarts", "concode_elem_sep", "void", "startRow", "concode_elem_sep", "void", "endRow", "concode_elem_sep", "void", "checkColumns", "concode_elem_sep", "int", "getColumnCount", "concode_elem_sep", "void", "writeRow", "concode_elem_sep", "void", "incrementSize", "concode_elem_sep", "ColumnFileMetaData", "getMetaData", "concode_elem_sep", "void", "writeValue", "concode_elem_sep", "long", "sizeEstimate"]}
{"code": "String function ( Object arg0 ) { return ( arg0 == null ? \"srini_string\" : ( arg0 instanceof String ? ( String ) arg0 : arg0 . toString ( ) ) ) ; }", "nl": "null object to empty string nullstrtoempty null = '' '' ; nullstrtoempty '' '' = '' '' ; nullstrtoempty `` aa '' = `` aa '' ; concode_field_sep PlaceHolder placeHolder concode_field_sep Long[] transformLongArray concode_elem_sep long[] transformLongArray concode_elem_sep int compare concode_elem_sep Integer[] transformIntArray concode_elem_sep int[] transformIntArray concode_elem_sep boolean isEquals", "code_tokens": ["String", "function", "(", "Object", "arg0", ")", "{", "return", "(", "arg0", "==", "null", "?", "\"srini_string\"", ":", "(", "arg0", "instanceof", "String", "?", "(", "String", ")", "arg0", ":", "arg0", ".", "toString", "(", ")", ")", ")", ";", "}"], "nl_tokens": ["null", "object", "to", "empty", "string", "nullstrtoempty", "null", "=", "''", "''", ";", "nullstrtoempty", "''", "''", "=", "''", "''", ";", "nullstrtoempty", "`", "`", "aa", "''", "=", "`", "`", "aa", "''", ";", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "Long", "[", "]", "transformLongArray", "concode_elem_sep", "long", "[", "]", "transformLongArray", "concode_elem_sep", "int", "compare", "concode_elem_sep", "Integer", "[", "]", "transformIntArray", "concode_elem_sep", "int", "[", "]", "transformIntArray", "concode_elem_sep", "boolean", "isEquals"]}
{"code": "void function ( String arg0 ) { this . localeKey = arg0 ; }", "nl": "set the context attribute key under which we will store the request locale . concode_field_sep String localeKey concode_field_sep String getLocaleKey concode_elem_sep boolean execute concode_elem_sep Locale getLocale", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "localeKey", "=", "arg0", ";", "}"], "nl_tokens": ["set", "the", "context", "attribute", "key", "under", "which", "we", "will", "store", "the", "request", "locale", ".", "concode_field_sep", "String", "localeKey", "concode_field_sep", "String", "getLocaleKey", "concode_elem_sep", "boolean", "execute", "concode_elem_sep", "Locale", "getLocale"]}
{"code": "TabularData function ( ) { return new TabularDataSupport ( TABULAR_TYPE ) ; }", "nl": "creates a new tabulardata concode_field_sep long executionMaxTime concode_elem_sep String[] ITEM_DESCRIPTIONS concode_elem_sep long cacheHitCount concode_elem_sep String query concode_elem_sep String TABULAR_TYPE_NAME concode_elem_sep long cachePutCount concode_elem_sep CompositeType COMPOSITE_TYPE concode_elem_sep long cacheMissCount concode_elem_sep String[] INDEX_NAMES concode_elem_sep long executionAvgTime concode_elem_sep long executionMinTime concode_elem_sep String COMPOSITE_TYPE_NAME concode_elem_sep OpenType[] ITEM_TYPES concode_elem_sep long executionCount concode_elem_sep String[] ITEM_NAMES concode_elem_sep String COMPOSITE_TYPE_DESCRIPTION concode_elem_sep long executionRowCount concode_elem_sep TabularType TABULAR_TYPE concode_elem_sep String TABULAR_TYPE_DESCRIPTION concode_field_sep void add concode_elem_sep long getCachePutCount concode_elem_sep long getExecutionCount concode_elem_sep long getExecutionAvgTime concode_elem_sep long getCacheMissCount concode_elem_sep long getExecutionRowCount concode_elem_sep long getCacheHitCount concode_elem_sep long getExecutionMinTime concode_elem_sep QueryStats[] fromTabularData concode_elem_sep String toString concode_elem_sep CompositeData toCompositeData concode_elem_sep String getQuery concode_elem_sep long getExecutionMaxTime", "code_tokens": ["TabularData", "function", "(", ")", "{", "return", "new", "TabularDataSupport", "(", "TABULAR_TYPE", ")", ";", "}"], "nl_tokens": ["creates", "a", "new", "tabulardata", "concode_field_sep", "long", "executionMaxTime", "concode_elem_sep", "String", "[", "]", "ITEM_DESCRIPTIONS", "concode_elem_sep", "long", "cacheHitCount", "concode_elem_sep", "String", "query", "concode_elem_sep", "String", "TABULAR_TYPE_NAME", "concode_elem_sep", "long", "cachePutCount", "concode_elem_sep", "CompositeType", "COMPOSITE_TYPE", "concode_elem_sep", "long", "cacheMissCount", "concode_elem_sep", "String", "[", "]", "INDEX_NAMES", "concode_elem_sep", "long", "executionAvgTime", "concode_elem_sep", "long", "executionMinTime", "concode_elem_sep", "String", "COMPOSITE_TYPE_NAME", "concode_elem_sep", "OpenType", "[", "]", "ITEM_TYPES", "concode_elem_sep", "long", "executionCount", "concode_elem_sep", "String", "[", "]", "ITEM_NAMES", "concode_elem_sep", "String", "COMPOSITE_TYPE_DESCRIPTION", "concode_elem_sep", "long", "executionRowCount", "concode_elem_sep", "TabularType", "TABULAR_TYPE", "concode_elem_sep", "String", "TABULAR_TYPE_DESCRIPTION", "concode_field_sep", "void", "add", "concode_elem_sep", "long", "getCachePutCount", "concode_elem_sep", "long", "getExecutionCount", "concode_elem_sep", "long", "getExecutionAvgTime", "concode_elem_sep", "long", "getCacheMissCount", "concode_elem_sep", "long", "getExecutionRowCount", "concode_elem_sep", "long", "getCacheHitCount", "concode_elem_sep", "long", "getExecutionMinTime", "concode_elem_sep", "QueryStats", "[", "]", "fromTabularData", "concode_elem_sep", "String", "toString", "concode_elem_sep", "CompositeData", "toCompositeData", "concode_elem_sep", "String", "getQuery", "concode_elem_sep", "long", "getExecutionMaxTime"]}
{"code": "EmbeddedObjectContainer function ( EmbeddedConfiguration arg0 , String arg1 ) { if ( null == arg0 ) { throw new ArgumentNullException ( ) ; } return ObjectContainerFactory . openObjectContainer ( arg0 , arg1 ) ; }", "nl": "opens an objectcontainer objectcontainer on the specified database file for local use . a database file can only be opened once , subsequent attempts to open another objectcontainer objectcontainer against the same file will result ina databasefilelockedexception databasefilelockedexception . database files can only be accessed for read/write access from one process one java vm at one time . all versions except for db4o mobile edition use an internal mechanism to lock the database file for other processes . concode_field_sep PlaceHolder placeHolder concode_field_sep EmbeddedConfiguration newConfiguration", "code_tokens": ["EmbeddedObjectContainer", "function", "(", "EmbeddedConfiguration", "arg0", ",", "String", "arg1", ")", "{", "if", "(", "null", "==", "arg0", ")", "{", "throw", "new", "ArgumentNullException", "(", ")", ";", "}", "return", "ObjectContainerFactory", ".", "openObjectContainer", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["opens", "an", "objectcontainer", "objectcontainer", "on", "the", "specified", "database", "file", "for", "local", "use", ".", "a", "database", "file", "can", "only", "be", "opened", "once", ",", "subsequent", "attempts", "to", "open", "another", "objectcontainer", "objectcontainer", "against", "the", "same", "file", "will", "result", "ina", "databasefilelockedexception", "databasefilelockedexception", ".", "database", "files", "can", "only", "be", "accessed", "for", "read", "/", "write", "access", "from", "one", "process", "one", "java", "vm", "at", "one", "time", ".", "all", "versions", "except", "for", "db4o", "mobile", "edition", "use", "an", "internal", "mechanism", "to", "lock", "the", "database", "file", "for", "other", "processes", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "EmbeddedConfiguration", "newConfiguration"]}
{"code": "boolean function ( double arg0 , double arg1 ) { return ( ( arg0 > arg1 ) && ne ( arg0 , arg1 ) ) ; }", "nl": "test d1 and d2 for d1 > d2 . if d1 is equal to d2 using the current ratio , this returns false . concode_field_sep double max_ratio concode_elem_sep double min_ratio concode_elem_sep boolean off concode_field_sep boolean isElemMatch concode_elem_sep int compare concode_elem_sep boolean isSubset concode_elem_sep boolean ne concode_elem_sep boolean lt concode_elem_sep boolean gte concode_elem_sep void set_rel_diff concode_elem_sep boolean eq concode_elem_sep boolean lte concode_elem_sep int indexOf concode_elem_sep int indexOf", "code_tokens": ["boolean", "function", "(", "double", "arg0", ",", "double", "arg1", ")", "{", "return", "(", "(", "arg0", ">", "arg1", ")", "&", "&", "ne", "(", "arg0", ",", "arg1", ")", ")", ";", "}"], "nl_tokens": ["test", "d1", "and", "d2", "for", "d1", ">", "d2", ".", "if", "d1", "is", "equal", "to", "d2", "using", "the", "current", "ratio", ",", "this", "returns", "false", ".", "concode_field_sep", "double", "max_ratio", "concode_elem_sep", "double", "min_ratio", "concode_elem_sep", "boolean", "off", "concode_field_sep", "boolean", "isElemMatch", "concode_elem_sep", "int", "compare", "concode_elem_sep", "boolean", "isSubset", "concode_elem_sep", "boolean", "ne", "concode_elem_sep", "boolean", "lt", "concode_elem_sep", "boolean", "gte", "concode_elem_sep", "void", "set_rel_diff", "concode_elem_sep", "boolean", "eq", "concode_elem_sep", "boolean", "lte", "concode_elem_sep", "int", "indexOf", "concode_elem_sep", "int", "indexOf"]}
{"code": "ResultWithNofifications < R , BE > function ( TransactionPayload < R , BE > arg0 ) { return inCommittableTxWithNotifications ( context , TransactionPayload . Committing . committing ( arg0 ) ) ; }", "nl": "identical to #intx transactionpayload but also returns the notifications emitted from the transaction.the list of notifications is final and they have already been sent . the caller should not send them again . concode_field_sep R result concode_elem_sep TraversalContext<BE,E> context concode_elem_sep List<EntityAndPendingNotifications<BE,?>> sentNotifications concode_field_sep BE getSingle concode_elem_sep List<EntityAndPendingNotifications<BE,?>> getSentNotifications concode_elem_sep R getResult concode_elem_sep boolean isApplicable concode_elem_sep R inTx concode_elem_sep R inTx concode_elem_sep R inCommittableTx concode_elem_sep R inCommittableTx concode_elem_sep ResultWithNofifications<R,BE> inCommittableTxWithNotifications", "code_tokens": ["ResultWithNofifications", "<", "R", ",", "BE", ">", "function", "(", "TransactionPayload", "<", "R", ",", "BE", ">", "arg0", ")", "{", "return", "inCommittableTxWithNotifications", "(", "context", ",", "TransactionPayload", ".", "Committing", ".", "committing", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["identical", "to", "#intx transactionpayload but also returns the notifications emitted from the transaction.the list of notifications is final and they have already been sent . the caller should not send them again . concode_field_sep R result concode_elem_sep TraversalContext<BE,E> context concode_elem_sep List<EntityAndPendingNotifications<BE,?>> sentNotifications concode_field_sep BE getSingle concode_elem_sep List<EntityAndPendingNotifications<BE,?>> getSentNotifications concode_elem_sep R getResult concode_elem_sep boolean isApplicable concode_elem_sep R inTx concode_elem_sep R inTx concode_elem_sep R inCommittableTx concode_elem_sep R inCommittableTx concode_elem_sep ResultWithNofifications<R,BE> inCommittableTxWithNotifications"]}
{"code": "BigDecimal function ( int arg0 , int arg1 , Random arg2 ) { java . math . BigInteger loc0 = new java . math . BigInteger ( arg0 , arg2 ) ; if ( arg2 . nextBoolean ( ) ) { loc0 = loc0 . negate ( ) ; } int loc1 = arg2 . nextInt ( arg1 ) ; if ( arg2 . nextBoolean ( ) ) { loc1 = - loc1 ; } java . math . BigDecimal loc2 = new java . math . BigDecimal ( loc0 , loc1 , context ) ; return new BigDecimal ( loc2 , context ) ; }", "nl": "bigdecimal random . concode_field_sep java.math.BigDecimal val concode_elem_sep int DEFAULT_PRECISION concode_elem_sep BigDecimal ZERO concode_elem_sep MathContext DEFAULT_CONTEXT concode_elem_sep MathContext context concode_elem_sep BigDecimal ONE concode_elem_sep Random random concode_field_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep BigDecimal gcd concode_elem_sep BigDecimal sum concode_elem_sep int compareTo concode_elem_sep java.math.BigInteger characteristic concode_elem_sep int hashCode concode_elem_sep BigDecimal divide concode_elem_sep BigDecimal copy concode_elem_sep BigDecimal multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep BigDecimal inverse concode_elem_sep BigDecimal valueOf concode_elem_sep BigDecimal valueOf concode_elem_sep boolean isUnit concode_elem_sep BigDecimal subtract concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal[] egcd concode_elem_sep BigDecimal abs concode_elem_sep BigDecimal[] divideAndRemainder concode_elem_sep BigDecimal negate concode_elem_sep boolean equals concode_elem_sep BigDecimal clone concode_elem_sep BigDecimal getONE concode_elem_sep BigDecimal getZERO concode_elem_sep BigDecimal fromInteger concode_elem_sep BigDecimal fromInteger concode_elem_sep boolean isZERO concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep BigDecimal remainder", "code_tokens": ["BigDecimal", "function", "(", "int", "arg0", ",", "int", "arg1", ",", "Random", "arg2", ")", "{", "java", ".", "math", ".", "BigInteger", "loc0", "=", "new", "java", ".", "math", ".", "BigInteger", "(", "arg0", ",", "arg2", ")", ";", "if", "(", "arg2", ".", "nextBoolean", "(", ")", ")", "{", "loc0", "=", "loc0", ".", "negate", "(", ")", ";", "}", "int", "loc1", "=", "arg2", ".", "nextInt", "(", "arg1", ")", ";", "if", "(", "arg2", ".", "nextBoolean", "(", ")", ")", "{", "loc1", "=", "-", "loc1", ";", "}", "java", ".", "math", ".", "BigDecimal", "loc2", "=", "new", "java", ".", "math", ".", "BigDecimal", "(", "loc0", ",", "loc1", ",", "context", ")", ";", "return", "new", "BigDecimal", "(", "loc2", ",", "context", ")", ";", "}"], "nl_tokens": ["bigdecimal", "random", ".", "concode_field_sep", "java", ".", "math", ".", "BigDecimal", "val", "concode_elem_sep", "int", "DEFAULT_PRECISION", "concode_elem_sep", "BigDecimal", "ZERO", "concode_elem_sep", "MathContext", "DEFAULT_CONTEXT", "concode_elem_sep", "MathContext", "context", "concode_elem_sep", "BigDecimal", "ONE", "concode_elem_sep", "Random", "random", "concode_field_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "BigDecimal", "gcd", "concode_elem_sep", "BigDecimal", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "BigDecimal", "divide", "concode_elem_sep", "BigDecimal", "copy", "concode_elem_sep", "BigDecimal", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "BigDecimal", "inverse", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "BigDecimal", "subtract", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "[", "]", "egcd", "concode_elem_sep", "BigDecimal", "abs", "concode_elem_sep", "BigDecimal", "[", "]", "divideAndRemainder", "concode_elem_sep", "BigDecimal", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "BigDecimal", "clone", "concode_elem_sep", "BigDecimal", "getONE", "concode_elem_sep", "BigDecimal", "getZERO", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "BigDecimal", "remainder"]}
{"code": "void function ( int arg0 , int arg1 ) { addPageLabel ( arg0 , arg1 , null , 1 ) ; }", "nl": "adds or replaces a page label . there is no text prefix and the first logical page has the default of 1 . concode_field_sep int DECIMAL_ARABIC_NUMERALS concode_elem_sep int UPPERCASE_ROMAN_NUMERALS concode_elem_sep int physicalPage concode_elem_sep int LOWERCASE_LETTERS concode_elem_sep int EMPTY concode_elem_sep int LOWERCASE_ROMAN_NUMERALS concode_elem_sep PdfName numberingStyle[] concode_elem_sep String prefix concode_elem_sep int logicalPage concode_elem_sep int numberStyle concode_elem_sep int UPPERCASE_LETTERS concode_elem_sep HashMap<Integer,PdfDictionary> map concode_field_sep void removePageLabel concode_elem_sep String[] getPageLabels concode_elem_sep PdfDictionary getDictionary concode_elem_sep String toString concode_elem_sep PdfPageLabelFormat[] getPageLabelFormats", "code_tokens": ["void", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "addPageLabel", "(", "arg0", ",", "arg1", ",", "null", ",", "1", ")", ";", "}"], "nl_tokens": ["adds", "or", "replaces", "a", "page", "label", ".", "there", "is", "no", "text", "prefix", "and", "the", "first", "logical", "page", "has", "the", "default", "of", "1", ".", "concode_field_sep", "int", "DECIMAL_ARABIC_NUMERALS", "concode_elem_sep", "int", "UPPERCASE_ROMAN_NUMERALS", "concode_elem_sep", "int", "physicalPage", "concode_elem_sep", "int", "LOWERCASE_LETTERS", "concode_elem_sep", "int", "EMPTY", "concode_elem_sep", "int", "LOWERCASE_ROMAN_NUMERALS", "concode_elem_sep", "PdfName", "numberingStyle", "[", "]", "concode_elem_sep", "String", "prefix", "concode_elem_sep", "int", "logicalPage", "concode_elem_sep", "int", "numberStyle", "concode_elem_sep", "int", "UPPERCASE_LETTERS", "concode_elem_sep", "HashMap", "<", "Integer", ",", "PdfDictionary", ">", "map", "concode_field_sep", "void", "removePageLabel", "concode_elem_sep", "String", "[", "]", "getPageLabels", "concode_elem_sep", "PdfDictionary", "getDictionary", "concode_elem_sep", "String", "toString", "concode_elem_sep", "PdfPageLabelFormat", "[", "]", "getPageLabelFormats"]}
{"code": "Class function ( ) { return clz ; }", "nl": "gets the exception class . concode_field_sep Class clz concode_elem_sep String reposId concode_elem_sep CDRStreamReader[] paramReaders concode_elem_sep java.lang.reflect.Method writeMethod concode_elem_sep CDRStreamWriter retvalWriter concode_elem_sep Method m concode_elem_sep ExceptionWriter[] excepWriters concode_field_sep boolean isNonVoid concode_elem_sep void arraysort concode_elem_sep Object[] readParams concode_elem_sep void writeRetval concode_elem_sep Method getMethod concode_elem_sep void writeException concode_elem_sep void write", "code_tokens": ["Class", "function", "(", ")", "{", "return", "clz", ";", "}"], "nl_tokens": ["gets", "the", "exception", "class", ".", "concode_field_sep", "Class", "clz", "concode_elem_sep", "String", "reposId", "concode_elem_sep", "CDRStreamReader", "[", "]", "paramReaders", "concode_elem_sep", "java", ".", "lang", ".", "reflect", ".", "Method", "writeMethod", "concode_elem_sep", "CDRStreamWriter", "retvalWriter", "concode_elem_sep", "Method", "m", "concode_elem_sep", "ExceptionWriter", "[", "]", "excepWriters", "concode_field_sep", "boolean", "isNonVoid", "concode_elem_sep", "void", "arraysort", "concode_elem_sep", "Object", "[", "]", "readParams", "concode_elem_sep", "void", "writeRetval", "concode_elem_sep", "Method", "getMethod", "concode_elem_sep", "void", "writeException", "concode_elem_sep", "void", "write"]}
{"code": "List < ColumnMetaData > function ( ) { List < ColumnMetaData > loc0 = new ArrayList < ColumnMetaData > ( ) ; for ( int loc1 = 0 ; loc1 < columnCount ; loc1 ++ ) if ( columns [ loc1 ] . metaData . getParent ( ) == null ) loc0 . add ( columns [ loc1 ] . metaData ) ; return loc0 ; }", "nl": "return root columns ' metadata . roots are columns that have no parent . concode_field_sep ColumnFileMetaData metaData concode_elem_sep Map<String,ColumnDescriptor> columnsByName concode_elem_sep Input file concode_elem_sep ColumnDescriptor[] columns concode_elem_sep long rowCount concode_elem_sep int columnCount concode_field_sep ColumnMetaData[] getColumnMetaData concode_elem_sep ColumnMetaData getColumnMetaData concode_elem_sep ColumnMetaData getColumnMetaData concode_elem_sep long getRowCount concode_elem_sep void readColumnMetaData concode_elem_sep ColumnValues<T> getValues concode_elem_sep ColumnValues<T> getValues concode_elem_sep void readColumnStarts concode_elem_sep ColumnDescriptor<T> getColumn concode_elem_sep long getColumnCount concode_elem_sep ColumnFileMetaData getMetaData concode_elem_sep void readHeader concode_elem_sep void readMagic concode_elem_sep void close", "code_tokens": ["List", "<", "ColumnMetaData", ">", "function", "(", ")", "{", "List", "<", "ColumnMetaData", ">", "loc0", "=", "new", "ArrayList", "<", "ColumnMetaData", ">", "(", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "columnCount", ";", "loc1", "+", "+", ")", "if", "(", "columns", "[", "loc1", "]", ".", "metaData", ".", "getParent", "(", ")", "==", "null", ")", "loc0", ".", "add", "(", "columns", "[", "loc1", "]", ".", "metaData", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["return", "root", "columns", "'", "metadata", ".", "roots", "are", "columns", "that", "have", "no", "parent", ".", "concode_field_sep", "ColumnFileMetaData", "metaData", "concode_elem_sep", "Map", "<", "String", ",", "ColumnDescriptor", ">", "columnsByName", "concode_elem_sep", "Input", "file", "concode_elem_sep", "ColumnDescriptor", "[", "]", "columns", "concode_elem_sep", "long", "rowCount", "concode_elem_sep", "int", "columnCount", "concode_field_sep", "ColumnMetaData", "[", "]", "getColumnMetaData", "concode_elem_sep", "ColumnMetaData", "getColumnMetaData", "concode_elem_sep", "ColumnMetaData", "getColumnMetaData", "concode_elem_sep", "long", "getRowCount", "concode_elem_sep", "void", "readColumnMetaData", "concode_elem_sep", "ColumnValues", "<", "T", ">", "getValues", "concode_elem_sep", "ColumnValues", "<", "T", ">", "getValues", "concode_elem_sep", "void", "readColumnStarts", "concode_elem_sep", "ColumnDescriptor", "<", "T", ">", "getColumn", "concode_elem_sep", "long", "getColumnCount", "concode_elem_sep", "ColumnFileMetaData", "getMetaData", "concode_elem_sep", "void", "readHeader", "concode_elem_sep", "void", "readMagic", "concode_elem_sep", "void", "close"]}
{"code": "boolean function ( ) { return quirks ; }", "nl": "returns the quirks . concode_field_sep T headPointer concode_elem_sep int mode concode_elem_sep boolean quirks concode_elem_sep T formPointer concode_elem_sep StackNode<T>[] stack concode_elem_sep boolean framesetOk concode_elem_sep boolean needToDropLF concode_elem_sep T deepTreeSurrogateParent concode_elem_sep int[] templateModeStack concode_elem_sep StackNode<T>[] listOfActiveFormattingElements concode_elem_sep int originalMode concode_field_sep T getDeepTreeSurrogateParent concode_elem_sep int getListOfActiveFormattingElementsLength concode_elem_sep boolean isFramesetOk concode_elem_sep void destructor concode_elem_sep int[] getTemplateModeStack concode_elem_sep int getStackLength concode_elem_sep T getHeadPointer concode_elem_sep int getOriginalMode concode_elem_sep int getTemplateModeStackLength concode_elem_sep StackNode<T>[] getStack concode_elem_sep boolean isNeedToDropLF concode_elem_sep StackNode<T>[] getListOfActiveFormattingElements concode_elem_sep int getMode concode_elem_sep T getFormPointer", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "quirks", ";", "}"], "nl_tokens": ["returns", "the", "quirks", ".", "concode_field_sep", "T", "headPointer", "concode_elem_sep", "int", "mode", "concode_elem_sep", "boolean", "quirks", "concode_elem_sep", "T", "formPointer", "concode_elem_sep", "StackNode", "<", "T", ">", "[", "]", "stack", "concode_elem_sep", "boolean", "framesetOk", "concode_elem_sep", "boolean", "needToDropLF", "concode_elem_sep", "T", "deepTreeSurrogateParent", "concode_elem_sep", "int", "[", "]", "templateModeStack", "concode_elem_sep", "StackNode", "<", "T", ">", "[", "]", "listOfActiveFormattingElements", "concode_elem_sep", "int", "originalMode", "concode_field_sep", "T", "getDeepTreeSurrogateParent", "concode_elem_sep", "int", "getListOfActiveFormattingElementsLength", "concode_elem_sep", "boolean", "isFramesetOk", "concode_elem_sep", "void", "destructor", "concode_elem_sep", "int", "[", "]", "getTemplateModeStack", "concode_elem_sep", "int", "getStackLength", "concode_elem_sep", "T", "getHeadPointer", "concode_elem_sep", "int", "getOriginalMode", "concode_elem_sep", "int", "getTemplateModeStackLength", "concode_elem_sep", "StackNode", "<", "T", ">", "[", "]", "getStack", "concode_elem_sep", "boolean", "isNeedToDropLF", "concode_elem_sep", "StackNode", "<", "T", ">", "[", "]", "getListOfActiveFormattingElements", "concode_elem_sep", "int", "getMode", "concode_elem_sep", "T", "getFormPointer"]}
{"code": "Environment function ( ProfileInformationProvider arg0 , ConfigurationProvider arg1 ) { Environment loc0 = new Environment ( ) { @ Override public int register ( ) { return 0 ; } } ; populateEnvironment ( loc0 , arg0 , arg1 ) ; return loc0 ; }", "nl": "returns an environment not linked to a storage instance , butpopulated with current field values . concode_field_sep String LOG_TAG concode_field_sep int getScreenYInMM concode_elem_sep int registerCurrentEnvironment concode_elem_sep String getDistributionString concode_elem_sep String getOSLocale concode_elem_sep void populateEnvironment concode_elem_sep ContentProviderClient getContentProviderClient concode_elem_sep UIType getUIType concode_elem_sep boolean isBlocklistEnabled concode_elem_sep boolean hasHardwareKeyboard concode_elem_sep String getAppLocale concode_elem_sep long getProfileCreationTime concode_elem_sep JSONObject getAddonsJSON concode_elem_sep int getScreenLayoutSize concode_elem_sep int getScreenXInMM concode_elem_sep HealthReportDatabaseStorage getStorage concode_elem_sep int getUIModeType concode_elem_sep boolean isAcceptLangUserSet concode_elem_sep boolean isTelemetryEnabled", "code_tokens": ["Environment", "function", "(", "ProfileInformationProvider", "arg0", ",", "ConfigurationProvider", "arg1", ")", "{", "Environment", "loc0", "=", "new", "Environment", "(", ")", "{", "@", "Override", "public", "int", "register", "(", ")", "{", "return", "0", ";", "}", "}", ";", "populateEnvironment", "(", "loc0", ",", "arg0", ",", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["returns", "an", "environment", "not", "linked", "to", "a", "storage", "instance", ",", "butpopulated", "with", "current", "field", "values", ".", "concode_field_sep", "String", "LOG_TAG", "concode_field_sep", "int", "getScreenYInMM", "concode_elem_sep", "int", "registerCurrentEnvironment", "concode_elem_sep", "String", "getDistributionString", "concode_elem_sep", "String", "getOSLocale", "concode_elem_sep", "void", "populateEnvironment", "concode_elem_sep", "ContentProviderClient", "getContentProviderClient", "concode_elem_sep", "UIType", "getUIType", "concode_elem_sep", "boolean", "isBlocklistEnabled", "concode_elem_sep", "boolean", "hasHardwareKeyboard", "concode_elem_sep", "String", "getAppLocale", "concode_elem_sep", "long", "getProfileCreationTime", "concode_elem_sep", "JSONObject", "getAddonsJSON", "concode_elem_sep", "int", "getScreenLayoutSize", "concode_elem_sep", "int", "getScreenXInMM", "concode_elem_sep", "HealthReportDatabaseStorage", "getStorage", "concode_elem_sep", "int", "getUIModeType", "concode_elem_sep", "boolean", "isAcceptLangUserSet", "concode_elem_sep", "boolean", "isTelemetryEnabled"]}
{"code": "boolean function ( ) { return SwitchBoard . hasExperimentValues ( context , experimentName ) ; }", "nl": "returns true if the experiment has aditional values . concode_field_sep Context context concode_elem_sep String experimentName concode_field_sep JSONObject getValues concode_elem_sep boolean isActive concode_elem_sep boolean isActive", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "SwitchBoard", ".", "hasExperimentValues", "(", "context", ",", "experimentName", ")", ";", "}"], "nl_tokens": ["returns", "true", "if", "the", "experiment", "has", "aditional", "values", ".", "concode_field_sep", "Context", "context", "concode_elem_sep", "String", "experimentName", "concode_field_sep", "JSONObject", "getValues", "concode_elem_sep", "boolean", "isActive", "concode_elem_sep", "boolean", "isActive"]}
{"code": "void function ( final TagState arg0 ) { this . tagState = arg0 ; }", "nl": "set the state of the current tag concode_field_sep String text concode_elem_sep Charset charset concode_elem_sep StateController controller concode_elem_sep XMLParserMemory memory concode_elem_sep List<XMLParserListener> listeners concode_elem_sep TagState tagState concode_elem_sep ParserMonitor monitor concode_elem_sep State state concode_field_sep XMLParserMemory memory concode_elem_sep void startElement concode_elem_sep InputStreamReader detectEncoding concode_elem_sep char currentLastChar concode_elem_sep XMLParser removeListener concode_elem_sep void parse concode_elem_sep void parse concode_elem_sep void parse concode_elem_sep void parse concode_elem_sep Charset getCharset concode_elem_sep String current concode_elem_sep void endElement concode_elem_sep void flush concode_elem_sep void parseWithReader concode_elem_sep void unknownData concode_elem_sep String currentTag concode_elem_sep void setMonitor concode_elem_sep String bufferToString concode_elem_sep void setState concode_elem_sep void comment concode_elem_sep StateController selectState concode_elem_sep void text concode_elem_sep XMLParser append concode_elem_sep XMLParser append concode_elem_sep XMLParser append concode_elem_sep void callText concode_elem_sep XMLParser addListener concode_elem_sep int bufferSize", "code_tokens": ["void", "function", "(", "final", "TagState", "arg0", ")", "{", "this", ".", "tagState", "=", "arg0", ";", "}"], "nl_tokens": ["set", "the", "state", "of", "the", "current", "tag", "concode_field_sep", "String", "text", "concode_elem_sep", "Charset", "charset", "concode_elem_sep", "StateController", "controller", "concode_elem_sep", "XMLParserMemory", "memory", "concode_elem_sep", "List", "<", "XMLParserListener", ">", "listeners", "concode_elem_sep", "TagState", "tagState", "concode_elem_sep", "ParserMonitor", "monitor", "concode_elem_sep", "State", "state", "concode_field_sep", "XMLParserMemory", "memory", "concode_elem_sep", "void", "startElement", "concode_elem_sep", "InputStreamReader", "detectEncoding", "concode_elem_sep", "char", "currentLastChar", "concode_elem_sep", "XMLParser", "removeListener", "concode_elem_sep", "void", "parse", "concode_elem_sep", "void", "parse", "concode_elem_sep", "void", "parse", "concode_elem_sep", "void", "parse", "concode_elem_sep", "Charset", "getCharset", "concode_elem_sep", "String", "current", "concode_elem_sep", "void", "endElement", "concode_elem_sep", "void", "flush", "concode_elem_sep", "void", "parseWithReader", "concode_elem_sep", "void", "unknownData", "concode_elem_sep", "String", "currentTag", "concode_elem_sep", "void", "setMonitor", "concode_elem_sep", "String", "bufferToString", "concode_elem_sep", "void", "setState", "concode_elem_sep", "void", "comment", "concode_elem_sep", "StateController", "selectState", "concode_elem_sep", "void", "text", "concode_elem_sep", "XMLParser", "append", "concode_elem_sep", "XMLParser", "append", "concode_elem_sep", "XMLParser", "append", "concode_elem_sep", "void", "callText", "concode_elem_sep", "XMLParser", "addListener", "concode_elem_sep", "int", "bufferSize"]}
{"code": "void function ( Integer arg0 ) { this . deptId = arg0 ; }", "nl": "this method was generated by mybatis generator . this method sets the value of the database column company.dept _ id concode_field_sep Integer compId concode_elem_sep Integer deptId concode_field_sep Integer getCompId concode_elem_sep void setCompId concode_elem_sep Integer getDeptId", "code_tokens": ["void", "function", "(", "Integer", "arg0", ")", "{", "this", ".", "deptId", "=", "arg0", ";", "}"], "nl_tokens": ["this", "method", "was", "generated", "by", "mybatis", "generator", ".", "this", "method", "sets", "the", "value", "of", "the", "database", "column", "company", ".", "dept", "_", "id", "concode_field_sep", "Integer", "compId", "concode_elem_sep", "Integer", "deptId", "concode_field_sep", "Integer", "getCompId", "concode_elem_sep", "void", "setCompId", "concode_elem_sep", "Integer", "getDeptId"]}
{"code": "void function ( double arg0 ) { VectorXYZ loc0 = getViewDirection ( ) ; up = up . rotateVec ( arg0 , loc0 ) ; }", "nl": "rolls the camera concode_field_sep VectorXYZ pos concode_elem_sep VectorXYZ lookAt concode_elem_sep VectorXYZ up concode_field_sep void moveMapRight concode_elem_sep void setCamera concode_elem_sep void setCamera concode_elem_sep void moveForward concode_elem_sep void move concode_elem_sep void move concode_elem_sep VectorXYZ getUp concode_elem_sep void yaw concode_elem_sep void moveMapUp concode_elem_sep void setPos concode_elem_sep void setPos concode_elem_sep void mapPitch concode_elem_sep VectorXYZ getRight concode_elem_sep void setLookAt concode_elem_sep void setLookAt concode_elem_sep VectorXYZ getViewDirection concode_elem_sep VectorXYZ getPos concode_elem_sep void moveRight concode_elem_sep VectorXYZ getLookAt concode_elem_sep void moveMapForward concode_elem_sep String toString concode_elem_sep void pitch concode_elem_sep void rotateY concode_elem_sep void moveUp", "code_tokens": ["void", "function", "(", "double", "arg0", ")", "{", "VectorXYZ", "loc0", "=", "getViewDirection", "(", ")", ";", "up", "=", "up", ".", "rotateVec", "(", "arg0", ",", "loc0", ")", ";", "}"], "nl_tokens": ["rolls", "the", "camera", "concode_field_sep", "VectorXYZ", "pos", "concode_elem_sep", "VectorXYZ", "lookAt", "concode_elem_sep", "VectorXYZ", "up", "concode_field_sep", "void", "moveMapRight", "concode_elem_sep", "void", "setCamera", "concode_elem_sep", "void", "setCamera", "concode_elem_sep", "void", "moveForward", "concode_elem_sep", "void", "move", "concode_elem_sep", "void", "move", "concode_elem_sep", "VectorXYZ", "getUp", "concode_elem_sep", "void", "yaw", "concode_elem_sep", "void", "moveMapUp", "concode_elem_sep", "void", "setPos", "concode_elem_sep", "void", "setPos", "concode_elem_sep", "void", "mapPitch", "concode_elem_sep", "VectorXYZ", "getRight", "concode_elem_sep", "void", "setLookAt", "concode_elem_sep", "void", "setLookAt", "concode_elem_sep", "VectorXYZ", "getViewDirection", "concode_elem_sep", "VectorXYZ", "getPos", "concode_elem_sep", "void", "moveRight", "concode_elem_sep", "VectorXYZ", "getLookAt", "concode_elem_sep", "void", "moveMapForward", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "pitch", "concode_elem_sep", "void", "rotateY", "concode_elem_sep", "void", "moveUp"]}
{"code": "IStatus function ( IResource [ ] arg0 ) { IStatus loc0 = null ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { IResource loc2 = arg0 [ loc1 ] ; if ( ! loc2 . isSynchronized ( IResource . DEPTH_INFINITE ) ) { loc0 = addOutOfSync ( loc0 , loc2 ) ; } } if ( loc0 != null ) return loc0 ; return Status . OK_STATUS ; }", "nl": "checks if the given resources are in sync with the underlying file system . concode_field_sep PlaceHolder placeHolder concode_field_sep boolean isReadOnly concode_elem_sep IStatus addModified concode_elem_sep int getSelectedResourceTypes concode_elem_sep IStatus addOutOfSync concode_elem_sep boolean containsOnlyProjects concode_elem_sep Map<IFile,Long> createModificationStampMap concode_elem_sep void setReadOnly concode_elem_sep IStatus makeCommittable concode_elem_sep IStatus makeCommittable concode_elem_sep boolean containsOnlyNonProjects", "code_tokens": ["IStatus", "function", "(", "IResource", "[", "]", "arg0", ")", "{", "IStatus", "loc0", "=", "null", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "length", ";", "loc1", "+", "+", ")", "{", "IResource", "loc2", "=", "arg0", "[", "loc1", "]", ";", "if", "(", "!", "loc2", ".", "isSynchronized", "(", "IResource", ".", "DEPTH_INFINITE", ")", ")", "{", "loc0", "=", "addOutOfSync", "(", "loc0", ",", "loc2", ")", ";", "}", "}", "if", "(", "loc0", "!=", "null", ")", "return", "loc0", ";", "return", "Status", ".", "OK_STATUS", ";", "}"], "nl_tokens": ["checks", "if", "the", "given", "resources", "are", "in", "sync", "with", "the", "underlying", "file", "system", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "boolean", "isReadOnly", "concode_elem_sep", "IStatus", "addModified", "concode_elem_sep", "int", "getSelectedResourceTypes", "concode_elem_sep", "IStatus", "addOutOfSync", "concode_elem_sep", "boolean", "containsOnlyProjects", "concode_elem_sep", "Map", "<", "IFile", ",", "Long", ">", "createModificationStampMap", "concode_elem_sep", "void", "setReadOnly", "concode_elem_sep", "IStatus", "makeCommittable", "concode_elem_sep", "IStatus", "makeCommittable", "concode_elem_sep", "boolean", "containsOnlyNonProjects"]}
{"code": "List < Application > function ( ) { if ( applications == null ) { applications = new ArrayList < Application > ( ) ; } return this . applications ; }", "nl": "gets the value of the applications property . this accessor method returns a reference to the live list , not a snapshot . therefore any modification you make to the returned list will be present inside the jaxb object . this is why there is not a set method for the applications property . for example , to add a new item , do as follows : getapplications . add newitem ; objects of the following type s are allowed in the list application concode_field_sep List<ApplicationPredecessorRelation> applicationPredecessors concode_elem_sep List<ApplicationID> removedApplications concode_elem_sep List<Application> applications concode_field_sep List<ApplicationID> getRemovedApplications concode_elem_sep List<ApplicationPredecessorRelation> getApplicationPredecessors", "code_tokens": ["List", "<", "Application", ">", "function", "(", ")", "{", "if", "(", "applications", "==", "null", ")", "{", "applications", "=", "new", "ArrayList", "<", "Application", ">", "(", ")", ";", "}", "return", "this", ".", "applications", ";", "}"], "nl_tokens": ["gets", "the", "value", "of", "the", "applications", "property", ".", "this", "accessor", "method", "returns", "a", "reference", "to", "the", "live", "list", ",", "not", "a", "snapshot", ".", "therefore", "any", "modification", "you", "make", "to", "the", "returned", "list", "will", "be", "present", "inside", "the", "jaxb", "object", ".", "this", "is", "why", "there", "is", "not", "a", "set", "method", "for", "the", "applications", "property", ".", "for", "example", ",", "to", "add", "a", "new", "item", ",", "do", "as", "follows", ":", "getapplications", ".", "add", "newitem", ";", "objects", "of", "the", "following", "type", "s", "are", "allowed", "in", "the", "list", "application", "concode_field_sep", "List", "<", "ApplicationPredecessorRelation", ">", "applicationPredecessors", "concode_elem_sep", "List", "<", "ApplicationID", ">", "removedApplications", "concode_elem_sep", "List", "<", "Application", ">", "applications", "concode_field_sep", "List", "<", "ApplicationID", ">", "getRemovedApplications", "concode_elem_sep", "List", "<", "ApplicationPredecessorRelation", ">", "getApplicationPredecessors"]}
{"code": "void function ( StyleListener arg0 ) { listeners . remove ( arg0 ) ; }", "nl": "removes the first occurrence of the given listener . concode_field_sep Object STATE_EDITABLE concode_elem_sep StyleProvider provider concode_elem_sep List listeners concode_elem_sep Object UNDEFINED concode_elem_sep Object STATE_READ_ONLY concode_elem_sep StyleListener providerListener concode_field_sep Object getStyle concode_elem_sep void setStyleProvider concode_elem_sep void addStyleListener concode_elem_sep Object getStyleState concode_elem_sep void setStyle concode_elem_sep void styleChanged concode_elem_sep void propogateChange", "code_tokens": ["void", "function", "(", "StyleListener", "arg0", ")", "{", "listeners", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["removes", "the", "first", "occurrence", "of", "the", "given", "listener", ".", "concode_field_sep", "Object", "STATE_EDITABLE", "concode_elem_sep", "StyleProvider", "provider", "concode_elem_sep", "List", "listeners", "concode_elem_sep", "Object", "UNDEFINED", "concode_elem_sep", "Object", "STATE_READ_ONLY", "concode_elem_sep", "StyleListener", "providerListener", "concode_field_sep", "Object", "getStyle", "concode_elem_sep", "void", "setStyleProvider", "concode_elem_sep", "void", "addStyleListener", "concode_elem_sep", "Object", "getStyleState", "concode_elem_sep", "void", "setStyle", "concode_elem_sep", "void", "styleChanged", "concode_elem_sep", "void", "propogateChange"]}
{"code": "int function ( GenVector < C > arg0 ) { if ( ! modul . equals ( arg0 . modul ) ) { return - 1 ; } List < C > loc0 = arg0 . val ; int loc1 = 0 ; for ( C loc2 : val ) { int loc3 = loc2 . compareTo ( loc0 . get ( loc1 ++ ) ) ; if ( loc3 != 0 ) { return loc3 ; } } return 0 ; }", "nl": "compareto , lexicogaphical comparison . concode_field_sep List<C> val concode_elem_sep Logger logger concode_elem_sep GenVectorModul<C> modul concode_field_sep int signum concode_elem_sep GenVector<C> leftLinearCombination concode_elem_sep GenVector<C> rightScalarProduct concode_elem_sep GenVector<C> subtract concode_elem_sep GenVector<C> scalarMultiply concode_elem_sep GenVector<C> sum concode_elem_sep GenVector<C> linearCombination concode_elem_sep GenVector<C> linearCombination concode_elem_sep GenVector<C> linearCombination concode_elem_sep GenVector<C> leftScalarMultiply concode_elem_sep C scalarProduct concode_elem_sep GenVector<C> scalarProduct concode_elem_sep GenVector<C> abs concode_elem_sep int hashCode concode_elem_sep GenVector<C> negate concode_elem_sep boolean equals concode_elem_sep GenVector<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString", "code_tokens": ["int", "function", "(", "GenVector", "<", "C", ">", "arg0", ")", "{", "if", "(", "!", "modul", ".", "equals", "(", "arg0", ".", "modul", ")", ")", "{", "return", "-", "1", ";", "}", "List", "<", "C", ">", "loc0", "=", "arg0", ".", "val", ";", "int", "loc1", "=", "0", ";", "for", "(", "C", "loc2", ":", "val", ")", "{", "int", "loc3", "=", "loc2", ".", "compareTo", "(", "loc0", ".", "get", "(", "loc1", "+", "+", ")", ")", ";", "if", "(", "loc3", "!=", "0", ")", "{", "return", "loc3", ";", "}", "}", "return", "0", ";", "}"], "nl_tokens": ["compareto", ",", "lexicogaphical", "comparison", ".", "concode_field_sep", "List", "<", "C", ">", "val", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "GenVectorModul", "<", "C", ">", "modul", "concode_field_sep", "int", "signum", "concode_elem_sep", "GenVector", "<", "C", ">", "leftLinearCombination", "concode_elem_sep", "GenVector", "<", "C", ">", "rightScalarProduct", "concode_elem_sep", "GenVector", "<", "C", ">", "subtract", "concode_elem_sep", "GenVector", "<", "C", ">", "scalarMultiply", "concode_elem_sep", "GenVector", "<", "C", ">", "sum", "concode_elem_sep", "GenVector", "<", "C", ">", "linearCombination", "concode_elem_sep", "GenVector", "<", "C", ">", "linearCombination", "concode_elem_sep", "GenVector", "<", "C", ">", "linearCombination", "concode_elem_sep", "GenVector", "<", "C", ">", "leftScalarMultiply", "concode_elem_sep", "C", "scalarProduct", "concode_elem_sep", "GenVector", "<", "C", ">", "scalarProduct", "concode_elem_sep", "GenVector", "<", "C", ">", "abs", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "GenVector", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "GenVector", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString"]}
{"code": "Protocol function ( ) { return REMOTE . get ( ) ; }", "nl": "return the remote protocol . accesses a threadlocal that 's setaround calls to #respond protocol.message , object . concode_field_sep Map<MD5,Protocol> protocols concode_elem_sep Logger LOG concode_elem_sep GenericDatumReader<Map<String,ByteBuffer>> META_READER concode_elem_sep List<RPCPlugin> rpcMetaPlugins concode_elem_sep Schema META concode_elem_sep ThreadLocal<Protocol> REMOTE concode_elem_sep SpecificDatumWriter<HandshakeResponse> handshakeWriter concode_elem_sep SpecificDatumReader<HandshakeRequest> handshakeReader concode_elem_sep MD5 localHash concode_elem_sep Protocol local concode_elem_sep GenericDatumWriter<Map<String,ByteBuffer>> META_WRITER concode_field_sep Protocol handshake concode_elem_sep Object readRequest concode_elem_sep Protocol getLocal concode_elem_sep void writeResponse concode_elem_sep void addRPCPlugin concode_elem_sep List<ByteBuffer> respond concode_elem_sep List<ByteBuffer> respond concode_elem_sep Object respond concode_elem_sep void writeError", "code_tokens": ["Protocol", "function", "(", ")", "{", "return", "REMOTE", ".", "get", "(", ")", ";", "}"], "nl_tokens": ["return", "the", "remote", "protocol", ".", "accesses", "a", "threadlocal", "that", "'", "s", "setaround", "calls", "to", "#respond protocol.message , object . concode_field_sep Map<MD5,Protocol> protocols concode_elem_sep Logger LOG concode_elem_sep GenericDatumReader<Map<String,ByteBuffer>> META_READER concode_elem_sep List<RPCPlugin> rpcMetaPlugins concode_elem_sep Schema META concode_elem_sep ThreadLocal<Protocol> REMOTE concode_elem_sep SpecificDatumWriter<HandshakeResponse> handshakeWriter concode_elem_sep SpecificDatumReader<HandshakeRequest> handshakeReader concode_elem_sep MD5 localHash concode_elem_sep Protocol local concode_elem_sep GenericDatumWriter<Map<String,ByteBuffer>> META_WRITER concode_field_sep Protocol handshake concode_elem_sep Object readRequest concode_elem_sep Protocol getLocal concode_elem_sep void writeResponse concode_elem_sep void addRPCPlugin concode_elem_sep List<ByteBuffer> respond concode_elem_sep List<ByteBuffer> respond concode_elem_sep Object respond concode_elem_sep void writeError"]}
{"code": "void function ( ) { }", "nl": "called once after the initial sorting finished . note : as of 3.8 a completion proposal computer can request that proposals are resorted . if such a computer is active , then this method will not be called . clients may override , the default implementation does nothing . concode_field_sep PlaceHolder placeHolder concode_field_sep int compare concode_elem_sep void beginSorting", "code_tokens": ["void", "function", "(", ")", "{", "}"], "nl_tokens": ["called", "once", "after", "the", "initial", "sorting", "finished", ".", "note", ":", "as", "of", "3.8", "a", "completion", "proposal", "computer", "can", "request", "that", "proposals", "are", "resorted", ".", "if", "such", "a", "computer", "is", "active", ",", "then", "this", "method", "will", "not", "be", "called", ".", "clients", "may", "override", ",", "the", "default", "implementation", "does", "nothing", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "int", "compare", "concode_elem_sep", "void", "beginSorting"]}
{"code": "AST function ( AST arg0 , int arg1 ) { AST loc0 = arg0 . getFirstChild ( ) ; while ( loc0 != null && loc0 . getType ( ) != arg1 ) { loc0 = loc0 . getNextSibling ( ) ; } return loc0 ; }", "nl": "finds the first node of the specified type in the chain of children . concode_field_sep FilterPredicate predicate concode_elem_sep List collectedNodes concode_field_sep AST getLastSibling concode_elem_sep AST findPreviousSibling concode_elem_sep String getPathText concode_elem_sep void getPathText concode_elem_sep String getTokenTypeName concode_elem_sep boolean isSubtreeChild concode_elem_sep String getDebugString concode_elem_sep List getCollectedNodes concode_elem_sep Integer extractIntegerValue concode_elem_sep AST create concode_elem_sep AST createParent concode_elem_sep String getConstantName concode_elem_sep boolean exclude concode_elem_sep boolean exclude concode_elem_sep AST createBinarySubtree concode_elem_sep boolean include concode_elem_sep Map generateTokenNameCache concode_elem_sep void appendSibling concode_elem_sep ASTArray createAstArray concode_elem_sep AST createTree concode_elem_sep void insertChild concode_elem_sep List collectChildren concode_elem_sep AST getLastChild concode_elem_sep void makeSiblingOfParent concode_elem_sep void visit concode_elem_sep boolean hasExactlyOneChild concode_elem_sep AST insertSibling concode_elem_sep List collect concode_elem_sep AST createSibling", "code_tokens": ["AST", "function", "(", "AST", "arg0", ",", "int", "arg1", ")", "{", "AST", "loc0", "=", "arg0", ".", "getFirstChild", "(", ")", ";", "while", "(", "loc0", "!=", "null", "&", "&", "loc0", ".", "getType", "(", ")", "!=", "arg1", ")", "{", "loc0", "=", "loc0", ".", "getNextSibling", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["finds", "the", "first", "node", "of", "the", "specified", "type", "in", "the", "chain", "of", "children", ".", "concode_field_sep", "FilterPredicate", "predicate", "concode_elem_sep", "List", "collectedNodes", "concode_field_sep", "AST", "getLastSibling", "concode_elem_sep", "AST", "findPreviousSibling", "concode_elem_sep", "String", "getPathText", "concode_elem_sep", "void", "getPathText", "concode_elem_sep", "String", "getTokenTypeName", "concode_elem_sep", "boolean", "isSubtreeChild", "concode_elem_sep", "String", "getDebugString", "concode_elem_sep", "List", "getCollectedNodes", "concode_elem_sep", "Integer", "extractIntegerValue", "concode_elem_sep", "AST", "create", "concode_elem_sep", "AST", "createParent", "concode_elem_sep", "String", "getConstantName", "concode_elem_sep", "boolean", "exclude", "concode_elem_sep", "boolean", "exclude", "concode_elem_sep", "AST", "createBinarySubtree", "concode_elem_sep", "boolean", "include", "concode_elem_sep", "Map", "generateTokenNameCache", "concode_elem_sep", "void", "appendSibling", "concode_elem_sep", "ASTArray", "createAstArray", "concode_elem_sep", "AST", "createTree", "concode_elem_sep", "void", "insertChild", "concode_elem_sep", "List", "collectChildren", "concode_elem_sep", "AST", "getLastChild", "concode_elem_sep", "void", "makeSiblingOfParent", "concode_elem_sep", "void", "visit", "concode_elem_sep", "boolean", "hasExactlyOneChild", "concode_elem_sep", "AST", "insertSibling", "concode_elem_sep", "List", "collect", "concode_elem_sep", "AST", "createSibling"]}
{"code": "InjectedValue < SuspendController > function ( ) { return suspendControllerInjectedValue ; }", "nl": "returns suspend controller injected value . concode_field_sep int activeInvocationCount concode_elem_sep InjectedValue<DeploymentRepository> deploymentRepositoryInjectedValue concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeTransactionCountUpdater concode_elem_sep boolean gracefulTxnShutdown concode_elem_sep ServerActivityCallback listener concode_elem_sep AtomicReferenceFieldUpdater<EJBSuspendHandlerService,ServerActivityCallback> listenerUpdater concode_elem_sep InjectedValue<SuspendController> suspendControllerInjectedValue concode_elem_sep InjectedValue<LocalTransactionContext> localTransactionContextInjectedValue concode_elem_sep int activeTransactionCount concode_elem_sep AtomicIntegerFieldUpdater<EJBSuspendHandlerService> activeInvocationCountUpdater concode_elem_sep boolean suspended concode_elem_sep ServiceName SERVICE_NAME concode_field_sep void resume concode_elem_sep void beforeCompletion concode_elem_sep void enableGracefulTxnShutdown concode_elem_sep void invocationComplete concode_elem_sep void doneSuspended concode_elem_sep boolean isSuspended concode_elem_sep void decrementTransactionCount concode_elem_sep void afterCompletion concode_elem_sep void start concode_elem_sep void suspended concode_elem_sep void transactionCreated concode_elem_sep EJBSuspendHandlerService getValue concode_elem_sep void stop concode_elem_sep InjectedValue<LocalTransactionContext> getLocalTransactionContextInjectedValue concode_elem_sep InjectedValue<DeploymentRepository> getDeploymentRepositoryInjectedValue concode_elem_sep boolean acceptInvocation concode_elem_sep void preSuspend", "code_tokens": ["InjectedValue", "<", "SuspendController", ">", "function", "(", ")", "{", "return", "suspendControllerInjectedValue", ";", "}"], "nl_tokens": ["returns", "suspend", "controller", "injected", "value", ".", "concode_field_sep", "int", "activeInvocationCount", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "deploymentRepositoryInjectedValue", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeTransactionCountUpdater", "concode_elem_sep", "boolean", "gracefulTxnShutdown", "concode_elem_sep", "ServerActivityCallback", "listener", "concode_elem_sep", "AtomicReferenceFieldUpdater", "<", "EJBSuspendHandlerService", ",", "ServerActivityCallback", ">", "listenerUpdater", "concode_elem_sep", "InjectedValue", "<", "SuspendController", ">", "suspendControllerInjectedValue", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "localTransactionContextInjectedValue", "concode_elem_sep", "int", "activeTransactionCount", "concode_elem_sep", "AtomicIntegerFieldUpdater", "<", "EJBSuspendHandlerService", ">", "activeInvocationCountUpdater", "concode_elem_sep", "boolean", "suspended", "concode_elem_sep", "ServiceName", "SERVICE_NAME", "concode_field_sep", "void", "resume", "concode_elem_sep", "void", "beforeCompletion", "concode_elem_sep", "void", "enableGracefulTxnShutdown", "concode_elem_sep", "void", "invocationComplete", "concode_elem_sep", "void", "doneSuspended", "concode_elem_sep", "boolean", "isSuspended", "concode_elem_sep", "void", "decrementTransactionCount", "concode_elem_sep", "void", "afterCompletion", "concode_elem_sep", "void", "start", "concode_elem_sep", "void", "suspended", "concode_elem_sep", "void", "transactionCreated", "concode_elem_sep", "EJBSuspendHandlerService", "getValue", "concode_elem_sep", "void", "stop", "concode_elem_sep", "InjectedValue", "<", "LocalTransactionContext", ">", "getLocalTransactionContextInjectedValue", "concode_elem_sep", "InjectedValue", "<", "DeploymentRepository", ">", "getDeploymentRepositoryInjectedValue", "concode_elem_sep", "boolean", "acceptInvocation", "concode_elem_sep", "void", "preSuspend"]}
{"code": "void function ( final Player arg0 ) { Scoreboard loc0 = arg0 . getScoreboard ( ) ; if ( loc0 != null ) { this . originalScoreboard . put ( arg0 . getName ( ) , loc0 ) ; } arg0 . setScoreboard ( this . scoreboard ) ; }", "nl": "add a scoreboard for a player concode_field_sep int gameID concode_elem_sep Team deadTeam concode_elem_sep Objective sidebarObjective concode_elem_sep Team waitingTeam concode_elem_sep Scoreboard scoreboard concode_elem_sep ArrayList<String> activePlayers concode_elem_sep Team livingTeam concode_elem_sep HashMap<String,Scoreboard> originalScoreboard concode_field_sep void playerDead concode_elem_sep void addPlayer concode_elem_sep void playerLiving concode_elem_sep void reset concode_elem_sep void removeScoreboard concode_elem_sep void incScore concode_elem_sep void removePlayer concode_elem_sep void updateSidebarTitle", "code_tokens": ["void", "function", "(", "final", "Player", "arg0", ")", "{", "Scoreboard", "loc0", "=", "arg0", ".", "getScoreboard", "(", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "this", ".", "originalScoreboard", ".", "put", "(", "arg0", ".", "getName", "(", ")", ",", "loc0", ")", ";", "}", "arg0", ".", "setScoreboard", "(", "this", ".", "scoreboard", ")", ";", "}"], "nl_tokens": ["add", "a", "scoreboard", "for", "a", "player", "concode_field_sep", "int", "gameID", "concode_elem_sep", "Team", "deadTeam", "concode_elem_sep", "Objective", "sidebarObjective", "concode_elem_sep", "Team", "waitingTeam", "concode_elem_sep", "Scoreboard", "scoreboard", "concode_elem_sep", "ArrayList", "<", "String", ">", "activePlayers", "concode_elem_sep", "Team", "livingTeam", "concode_elem_sep", "HashMap", "<", "String", ",", "Scoreboard", ">", "originalScoreboard", "concode_field_sep", "void", "playerDead", "concode_elem_sep", "void", "addPlayer", "concode_elem_sep", "void", "playerLiving", "concode_elem_sep", "void", "reset", "concode_elem_sep", "void", "removeScoreboard", "concode_elem_sep", "void", "incScore", "concode_elem_sep", "void", "removePlayer", "concode_elem_sep", "void", "updateSidebarTitle"]}
{"code": "PMML function ( InputStream arg0 ) { Objects . requireNonNull ( arg0 ) ; return IOUtil . unmarshal ( arg0 ) ; }", "nl": "creates a new pmml object representing the pmml model defined in the inputstream specified as argument concode_field_sep ModelOutputs outFields concode_elem_sep String blobKey concode_elem_sep File model concode_elem_sep Map<String,Object> config concode_elem_sep ModelOutputs modelOutputs concode_field_sep ModelRunner newModelRunner concode_elem_sep ModelRunner newModelRunner concode_elem_sep InputStream getPmmlModelBlob concode_elem_sep InputStream getPmmlModelBlob concode_elem_sep Evaluator newEvaluator concode_elem_sep Evaluator newEvaluator concode_elem_sep Evaluator newEvaluator concode_elem_sep Evaluator newEvaluator concode_elem_sep Evaluator newEvaluator", "code_tokens": ["PMML", "function", "(", "InputStream", "arg0", ")", "{", "Objects", ".", "requireNonNull", "(", "arg0", ")", ";", "return", "IOUtil", ".", "unmarshal", "(", "arg0", ")", ";", "}"], "nl_tokens": ["creates", "a", "new", "pmml", "object", "representing", "the", "pmml", "model", "defined", "in", "the", "inputstream", "specified", "as", "argument", "concode_field_sep", "ModelOutputs", "outFields", "concode_elem_sep", "String", "blobKey", "concode_elem_sep", "File", "model", "concode_elem_sep", "Map", "<", "String", ",", "Object", ">", "config", "concode_elem_sep", "ModelOutputs", "modelOutputs", "concode_field_sep", "ModelRunner", "newModelRunner", "concode_elem_sep", "ModelRunner", "newModelRunner", "concode_elem_sep", "InputStream", "getPmmlModelBlob", "concode_elem_sep", "InputStream", "getPmmlModelBlob", "concode_elem_sep", "Evaluator", "newEvaluator", "concode_elem_sep", "Evaluator", "newEvaluator", "concode_elem_sep", "Evaluator", "newEvaluator", "concode_elem_sep", "Evaluator", "newEvaluator", "concode_elem_sep", "Evaluator", "newEvaluator"]}
{"code": "Parser function ( Class arg0 , Parser arg1 ) { Parser loc0 = ( Parser ) parsers . get ( arg0 ) ; parsers . put ( arg0 , arg1 ) ; return loc0 ; }", "nl": "set the parser for a given class . returns the old one , if any . concode_field_sep String copyright concode_elem_sep HashMap parsers concode_field_sep Object[] eval concode_elem_sep Object eval concode_elem_sep Parser getParser concode_elem_sep String replace concode_elem_sep String[] parseArgumentList concode_elem_sep String unescapeBrackets concode_elem_sep Parser findParser concode_elem_sep String substitute concode_elem_sep boolean isExtension", "code_tokens": ["Parser", "function", "(", "Class", "arg0", ",", "Parser", "arg1", ")", "{", "Parser", "loc0", "=", "(", "Parser", ")", "parsers", ".", "get", "(", "arg0", ")", ";", "parsers", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "return", "loc0", ";", "}"], "nl_tokens": ["set", "the", "parser", "for", "a", "given", "class", ".", "returns", "the", "old", "one", ",", "if", "any", ".", "concode_field_sep", "String", "copyright", "concode_elem_sep", "HashMap", "parsers", "concode_field_sep", "Object", "[", "]", "eval", "concode_elem_sep", "Object", "eval", "concode_elem_sep", "Parser", "getParser", "concode_elem_sep", "String", "replace", "concode_elem_sep", "String", "[", "]", "parseArgumentList", "concode_elem_sep", "String", "unescapeBrackets", "concode_elem_sep", "Parser", "findParser", "concode_elem_sep", "String", "substitute", "concode_elem_sep", "boolean", "isExtension"]}
{"code": "ITracePoint2D function ( ) { return this . m_previousPoint ; }", "nl": "returns the previous trace point that had to be painted by #paintpoint int , int , int , int , graphics , itracepoint2d . this value will be null if no previous point had to be painted . concode_field_sep ITracePoint2D m_previousPoint concode_elem_sep int m_previousY concode_elem_sep int m_previousX concode_elem_sep long serialVersionUID concode_elem_sep boolean m_isEnded concode_field_sep void discontinue concode_elem_sep void endPaintIteration concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep void paintPoint concode_elem_sep void startPaintIteration concode_elem_sep int getPreviousX concode_elem_sep int compareTo concode_elem_sep int getPreviousY", "code_tokens": ["ITracePoint2D", "function", "(", ")", "{", "return", "this", ".", "m_previousPoint", ";", "}"], "nl_tokens": ["returns", "the", "previous", "trace", "point", "that", "had", "to", "be", "painted", "by", "#paintpoint int , int , int , int , graphics , itracepoint2d . this value will be null if no previous point had to be painted . concode_field_sep ITracePoint2D m_previousPoint concode_elem_sep int m_previousY concode_elem_sep int m_previousX concode_elem_sep long serialVersionUID concode_elem_sep boolean m_isEnded concode_field_sep void discontinue concode_elem_sep void endPaintIteration concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep void paintPoint concode_elem_sep void startPaintIteration concode_elem_sep int getPreviousX concode_elem_sep int compareTo concode_elem_sep int getPreviousY"]}
{"code": "Object function ( ) { return debug ; }", "nl": "returns the debug . concode_field_sep Object warn concode_elem_sep Object trace concode_elem_sep Object debug concode_elem_sep Throwable lastThrowable concode_elem_sep Object error concode_elem_sep Object info concode_elem_sep Object fatal concode_field_sep void debug concode_elem_sep void debug concode_elem_sep Object getInfo concode_elem_sep Object getFatal concode_elem_sep Throwable getLastThrowable concode_elem_sep void clear concode_elem_sep boolean isWarnEnabled concode_elem_sep void error concode_elem_sep void error concode_elem_sep boolean isFatalEnabled concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep Object getError concode_elem_sep void warn concode_elem_sep void warn concode_elem_sep void trace concode_elem_sep void trace concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep boolean isTraceEnabled concode_elem_sep Object getWarn concode_elem_sep Object getTrace concode_elem_sep boolean isDebugEnabled concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["Object", "function", "(", ")", "{", "return", "debug", ";", "}"], "nl_tokens": ["returns", "the", "debug", ".", "concode_field_sep", "Object", "warn", "concode_elem_sep", "Object", "trace", "concode_elem_sep", "Object", "debug", "concode_elem_sep", "Throwable", "lastThrowable", "concode_elem_sep", "Object", "error", "concode_elem_sep", "Object", "info", "concode_elem_sep", "Object", "fatal", "concode_field_sep", "void", "debug", "concode_elem_sep", "void", "debug", "concode_elem_sep", "Object", "getInfo", "concode_elem_sep", "Object", "getFatal", "concode_elem_sep", "Throwable", "getLastThrowable", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "void", "error", "concode_elem_sep", "void", "error", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "Object", "getError", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "trace", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "Object", "getWarn", "concode_elem_sep", "Object", "getTrace", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "void function ( FlowControl arg0 ) { if ( arg0 == FlowControl . XON_XOFF ) throw new IllegalArgumentException ( Localizer . getLocalizedMessage ( Port . class , \"srini_string\" ) ) ; setFlowControl ( device . getHandle ( ) , arg0 . value , ( char ) 0 , ( char ) 0 ) ; }", "nl": "sets the flow control mode for this port . note : this method only supports modes different from xon xoff , because for this mode additional parameters are needed . in order to set xon xoff mode use #setflowcontrol flowcontrol , char , char instead . concode_field_sep Device device concode_field_sep void setBaudRate concode_elem_sep void setBaudRate concode_elem_sep void setDTR concode_elem_sep void setDTR concode_elem_sep void setDivisor concode_elem_sep void setDivisor concode_elem_sep void setDataCharacteristics concode_elem_sep void setDataCharacteristics concode_elem_sep void reset concode_elem_sep void reset concode_elem_sep void setBreakOn concode_elem_sep void setBreakOn concode_elem_sep void setRTS concode_elem_sep void setRTS", "code_tokens": ["void", "function", "(", "FlowControl", "arg0", ")", "{", "if", "(", "arg0", "==", "FlowControl", ".", "XON_XOFF", ")", "throw", "new", "IllegalArgumentException", "(", "Localizer", ".", "getLocalizedMessage", "(", "Port", ".", "class", ",", "\"srini_string\"", ")", ")", ";", "setFlowControl", "(", "device", ".", "getHandle", "(", ")", ",", "arg0", ".", "value", ",", "(", "char", ")", "0", ",", "(", "char", ")", "0", ")", ";", "}"], "nl_tokens": ["sets", "the", "flow", "control", "mode", "for", "this", "port", ".", "note", ":", "this", "method", "only", "supports", "modes", "different", "from", "xon", "xoff", ",", "because", "for", "this", "mode", "additional", "parameters", "are", "needed", ".", "in", "order", "to", "set", "xon", "xoff", "mode", "use", "#setflowcontrol flowcontrol , char , char instead . concode_field_sep Device device concode_field_sep void setBaudRate concode_elem_sep void setBaudRate concode_elem_sep void setDTR concode_elem_sep void setDTR concode_elem_sep void setDivisor concode_elem_sep void setDivisor concode_elem_sep void setDataCharacteristics concode_elem_sep void setDataCharacteristics concode_elem_sep void reset concode_elem_sep void reset concode_elem_sep void setBreakOn concode_elem_sep void setBreakOn concode_elem_sep void setRTS concode_elem_sep void setRTS"]}
{"code": "HttpResponse function ( Request arg0 ) { arg0 . addHeader ( \"srini_string\" , \"srini_string\" + repository . getToken ( ) ) ; Response loc0 = arg0 . execute ( ) ; return loc0 . returnResponse ( ) ; }", "nl": "execute an authenticated request and return the response . concode_field_sep String IF_NONE_MATCH concode_elem_sep String GITHUB concode_elem_sep ObjectMapper mapper concode_elem_sep URL GITHUB_URL concode_elem_sep Repository repository concode_field_sep String getIssueEndpoint concode_elem_sep void patchIssue concode_elem_sep byte[] buildRequest concode_elem_sep Phenotype readPhenotype concode_elem_sep Repository getRepository concode_elem_sep String buildSearch concode_elem_sep InputStream getStream concode_elem_sep void openIssue concode_elem_sep URI getURI concode_elem_sep Optional<String> searchForIssue concode_elem_sep void checkCode concode_elem_sep String getRepoMethod", "code_tokens": ["HttpResponse", "function", "(", "Request", "arg0", ")", "{", "arg0", ".", "addHeader", "(", "\"srini_string\"", ",", "\"srini_string\"", "+", "repository", ".", "getToken", "(", ")", ")", ";", "Response", "loc0", "=", "arg0", ".", "execute", "(", ")", ";", "return", "loc0", ".", "returnResponse", "(", ")", ";", "}"], "nl_tokens": ["execute", "an", "authenticated", "request", "and", "return", "the", "response", ".", "concode_field_sep", "String", "IF_NONE_MATCH", "concode_elem_sep", "String", "GITHUB", "concode_elem_sep", "ObjectMapper", "mapper", "concode_elem_sep", "URL", "GITHUB_URL", "concode_elem_sep", "Repository", "repository", "concode_field_sep", "String", "getIssueEndpoint", "concode_elem_sep", "void", "patchIssue", "concode_elem_sep", "byte", "[", "]", "buildRequest", "concode_elem_sep", "Phenotype", "readPhenotype", "concode_elem_sep", "Repository", "getRepository", "concode_elem_sep", "String", "buildSearch", "concode_elem_sep", "InputStream", "getStream", "concode_elem_sep", "void", "openIssue", "concode_elem_sep", "URI", "getURI", "concode_elem_sep", "Optional", "<", "String", ">", "searchForIssue", "concode_elem_sep", "void", "checkCode", "concode_elem_sep", "String", "getRepoMethod"]}
{"code": "void function ( LoggingEvent arg0 ) { boolean loc0 = false ; synchronized ( EVENTQUEUELOCK ) { if ( eventQueueLength < capacity ) { eventQueue . add ( arg0 ) ; eventQueueLength ++ ; } else { loc0 = true ; } } if ( loc0 ) { flushAndPublishQueue ( false ) ; } }", "nl": "adds a log event to the cache . if the number of events reach the capacity of the batch , they will be published . concode_field_sep String PUBLISH_THREAD_NAME concode_elem_sep String cacheName concode_elem_sep int eventQueueLength concode_elem_sep ExecutorService executorService concode_elem_sep Object EVENTQUEUELOCK concode_elem_sep Queue<LoggingEvent> eventQueue concode_elem_sep ICachePublisher cachePublisher concode_elem_sep int capacity concode_field_sep ExecutorService createExecutorService concode_elem_sep Future<Boolean> publishCache concode_elem_sep void publish concode_elem_sep PublishContext startPublish concode_elem_sep void flushAndPublishQueue concode_elem_sep void endPublish concode_elem_sep String getCacheName", "code_tokens": ["void", "function", "(", "LoggingEvent", "arg0", ")", "{", "boolean", "loc0", "=", "false", ";", "synchronized", "(", "EVENTQUEUELOCK", ")", "{", "if", "(", "eventQueueLength", "<", "capacity", ")", "{", "eventQueue", ".", "add", "(", "arg0", ")", ";", "eventQueueLength", "+", "+", ";", "}", "else", "{", "loc0", "=", "true", ";", "}", "}", "if", "(", "loc0", ")", "{", "flushAndPublishQueue", "(", "false", ")", ";", "}", "}"], "nl_tokens": ["adds", "a", "log", "event", "to", "the", "cache", ".", "if", "the", "number", "of", "events", "reach", "the", "capacity", "of", "the", "batch", ",", "they", "will", "be", "published", ".", "concode_field_sep", "String", "PUBLISH_THREAD_NAME", "concode_elem_sep", "String", "cacheName", "concode_elem_sep", "int", "eventQueueLength", "concode_elem_sep", "ExecutorService", "executorService", "concode_elem_sep", "Object", "EVENTQUEUELOCK", "concode_elem_sep", "Queue", "<", "LoggingEvent", ">", "eventQueue", "concode_elem_sep", "ICachePublisher", "cachePublisher", "concode_elem_sep", "int", "capacity", "concode_field_sep", "ExecutorService", "createExecutorService", "concode_elem_sep", "Future", "<", "Boolean", ">", "publishCache", "concode_elem_sep", "void", "publish", "concode_elem_sep", "PublishContext", "startPublish", "concode_elem_sep", "void", "flushAndPublishQueue", "concode_elem_sep", "void", "endPublish", "concode_elem_sep", "String", "getCacheName"]}
{"code": "boolean function ( ) { return Platform . isLinux ( ) && Platform . JAVA_VERSION <= 0x1424 ; }", "nl": "locking key state is reported incorrectly . concode_field_sep boolean gotBug1Event concode_elem_sep java.util.ArrayList bugList concode_field_sep boolean fileDialogRequiresDismiss concode_elem_sep boolean hasHierarchyEventGenerationBug concode_elem_sep boolean hasKeyStrokeGenerationBug concode_elem_sep String[] bugCheck concode_elem_sep boolean hasRobotMotionBug concode_elem_sep boolean fileDialogMisreportsBounds concode_elem_sep boolean needsRobotVerification concode_elem_sep boolean hasMenuDisableBug concode_elem_sep boolean hasInputMethodInsteadOfKeyTyped concode_elem_sep boolean hasMissingWindowMouseMotion concode_elem_sep boolean hasEscapeGenerationBug concode_elem_sep boolean showAWTPopupMenuBlocks concode_elem_sep boolean hasChoiceLockupBug concode_elem_sep boolean hasRobotButtonsSwapped concode_elem_sep boolean hasKeyInputDelay concode_elem_sep boolean hasFrameDeiconifyBug concode_elem_sep boolean dragDropRequiresNativeEvents concode_elem_sep boolean hasTextComponentSelectionDelay concode_elem_sep boolean hasMultiClickFrameBug concode_elem_sep boolean fileDialogRequiresVisibleFrame", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "Platform", ".", "isLinux", "(", ")", "&", "&", "Platform", ".", "JAVA_VERSION", "<=", "0x1424", ";", "}"], "nl_tokens": ["locking", "key", "state", "is", "reported", "incorrectly", ".", "concode_field_sep", "boolean", "gotBug1Event", "concode_elem_sep", "java", ".", "util", ".", "ArrayList", "bugList", "concode_field_sep", "boolean", "fileDialogRequiresDismiss", "concode_elem_sep", "boolean", "hasHierarchyEventGenerationBug", "concode_elem_sep", "boolean", "hasKeyStrokeGenerationBug", "concode_elem_sep", "String", "[", "]", "bugCheck", "concode_elem_sep", "boolean", "hasRobotMotionBug", "concode_elem_sep", "boolean", "fileDialogMisreportsBounds", "concode_elem_sep", "boolean", "needsRobotVerification", "concode_elem_sep", "boolean", "hasMenuDisableBug", "concode_elem_sep", "boolean", "hasInputMethodInsteadOfKeyTyped", "concode_elem_sep", "boolean", "hasMissingWindowMouseMotion", "concode_elem_sep", "boolean", "hasEscapeGenerationBug", "concode_elem_sep", "boolean", "showAWTPopupMenuBlocks", "concode_elem_sep", "boolean", "hasChoiceLockupBug", "concode_elem_sep", "boolean", "hasRobotButtonsSwapped", "concode_elem_sep", "boolean", "hasKeyInputDelay", "concode_elem_sep", "boolean", "hasFrameDeiconifyBug", "concode_elem_sep", "boolean", "dragDropRequiresNativeEvents", "concode_elem_sep", "boolean", "hasTextComponentSelectionDelay", "concode_elem_sep", "boolean", "hasMultiClickFrameBug", "concode_elem_sep", "boolean", "fileDialogRequiresVisibleFrame"]}
{"code": "RuleBasedScanner function ( ) { return fMultilineCommentScanner ; }", "nl": "returns a scanner which is configured to scan java multi-line comments . concode_field_sep JavaCommentScanner fMultilineCommentScanner concode_elem_sep JavaCommentScanner fSinglelineCommentScanner concode_elem_sep JavaDocScanner fJavaDocScanner concode_elem_sep PreferenceListener fPreferenceListener concode_elem_sep JavaCodeScanner fCodeScanner concode_elem_sep IPreferenceStore fPreferenceStore concode_elem_sep SingleTokenJavaScanner fStringScanner concode_elem_sep String[] LEGAL_CONTENT_TYPES concode_elem_sep JavaColorManager fColorManager concode_elem_sep Preferences fCorePreferenceStore concode_field_sep RuleBasedScanner getJavaDocScanner concode_elem_sep RuleBasedScanner getSinglelineCommentScanner concode_elem_sep IDocumentPartitioner createDocumentPartitioner concode_elem_sep RuleBasedScanner getStringScanner concode_elem_sep IPreferenceStore getPreferenceStore concode_elem_sep RuleBasedScanner getCodeScanner concode_elem_sep void setupJavaDocumentPartitioner concode_elem_sep void setupJavaDocumentPartitioner concode_elem_sep void adaptToPreferenceChange concode_elem_sep String[] getPartitionManagingPositionCategories concode_elem_sep IPartitionTokenScanner getPartitionScanner concode_elem_sep void propertyChange concode_elem_sep void propertyChange concode_elem_sep void dispose concode_elem_sep boolean affectsBehavior concode_elem_sep IColorManager getColorManager concode_elem_sep Preferences getCorePreferenceStore", "code_tokens": ["RuleBasedScanner", "function", "(", ")", "{", "return", "fMultilineCommentScanner", ";", "}"], "nl_tokens": ["returns", "a", "scanner", "which", "is", "configured", "to", "scan", "java", "multi", "-", "line", "comments", ".", "concode_field_sep", "JavaCommentScanner", "fMultilineCommentScanner", "concode_elem_sep", "JavaCommentScanner", "fSinglelineCommentScanner", "concode_elem_sep", "JavaDocScanner", "fJavaDocScanner", "concode_elem_sep", "PreferenceListener", "fPreferenceListener", "concode_elem_sep", "JavaCodeScanner", "fCodeScanner", "concode_elem_sep", "IPreferenceStore", "fPreferenceStore", "concode_elem_sep", "SingleTokenJavaScanner", "fStringScanner", "concode_elem_sep", "String", "[", "]", "LEGAL_CONTENT_TYPES", "concode_elem_sep", "JavaColorManager", "fColorManager", "concode_elem_sep", "Preferences", "fCorePreferenceStore", "concode_field_sep", "RuleBasedScanner", "getJavaDocScanner", "concode_elem_sep", "RuleBasedScanner", "getSinglelineCommentScanner", "concode_elem_sep", "IDocumentPartitioner", "createDocumentPartitioner", "concode_elem_sep", "RuleBasedScanner", "getStringScanner", "concode_elem_sep", "IPreferenceStore", "getPreferenceStore", "concode_elem_sep", "RuleBasedScanner", "getCodeScanner", "concode_elem_sep", "void", "setupJavaDocumentPartitioner", "concode_elem_sep", "void", "setupJavaDocumentPartitioner", "concode_elem_sep", "void", "adaptToPreferenceChange", "concode_elem_sep", "String", "[", "]", "getPartitionManagingPositionCategories", "concode_elem_sep", "IPartitionTokenScanner", "getPartitionScanner", "concode_elem_sep", "void", "propertyChange", "concode_elem_sep", "void", "propertyChange", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "boolean", "affectsBehavior", "concode_elem_sep", "IColorManager", "getColorManager", "concode_elem_sep", "Preferences", "getCorePreferenceStore"]}
{"code": "boolean function ( Bundle arg0 ) { if ( null == arg0 ) { return false ; } if ( ! arg0 . containsKey ( BUNDLE_EXTRA_STRING_MESSAGE ) ) { return false ; } return true ; }", "nl": "method to verify the content of the bundle are correct . this method will not mutate bundle . concode_field_sep String BUNDLE_EXTRA_STRING_MESSAGE concode_field_sep Bundle generateBundle", "code_tokens": ["boolean", "function", "(", "Bundle", "arg0", ")", "{", "if", "(", "null", "==", "arg0", ")", "{", "return", "false", ";", "}", "if", "(", "!", "arg0", ".", "containsKey", "(", "BUNDLE_EXTRA_STRING_MESSAGE", ")", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "nl_tokens": ["method", "to", "verify", "the", "content", "of", "the", "bundle", "are", "correct", ".", "this", "method", "will", "not", "mutate", "bundle", ".", "concode_field_sep", "String", "BUNDLE_EXTRA_STRING_MESSAGE", "concode_field_sep", "Bundle", "generateBundle"]}
{"code": "Scene function ( ) { return focusScene ; }", "nl": "get reference to the scene that has the input focus concode_field_sep List<Scene> scenes concode_elem_sep Map<String,Scene> sceneHashMap concode_elem_sep List<Btimer> btimers concode_elem_sep Scene focusScene concode_field_sep void startScene concode_elem_sep void startScene concode_elem_sep void addTimer concode_elem_sep void stopScene concode_elem_sep void setInputFocus concode_elem_sep void setInputFocus concode_elem_sep List<Scene> getScenes concode_elem_sep void updateTimers concode_elem_sep boolean sceneExist concode_elem_sep void addScene", "code_tokens": ["Scene", "function", "(", ")", "{", "return", "focusScene", ";", "}"], "nl_tokens": ["get", "reference", "to", "the", "scene", "that", "has", "the", "input", "focus", "concode_field_sep", "List", "<", "Scene", ">", "scenes", "concode_elem_sep", "Map", "<", "String", ",", "Scene", ">", "sceneHashMap", "concode_elem_sep", "List", "<", "Btimer", ">", "btimers", "concode_elem_sep", "Scene", "focusScene", "concode_field_sep", "void", "startScene", "concode_elem_sep", "void", "startScene", "concode_elem_sep", "void", "addTimer", "concode_elem_sep", "void", "stopScene", "concode_elem_sep", "void", "setInputFocus", "concode_elem_sep", "void", "setInputFocus", "concode_elem_sep", "List", "<", "Scene", ">", "getScenes", "concode_elem_sep", "void", "updateTimers", "concode_elem_sep", "boolean", "sceneExist", "concode_elem_sep", "void", "addScene"]}
{"code": "void function ( int arg0 ) { int [ ] loc0 = { arg0 } ; waitForState ( loc0 ) ; }", "nl": "waits until the statemodel reaches the indicated state . note : waitforstate methods may not be called from multiple threads simoultaneously . concode_field_sep int[] targetStates_ concode_elem_sep StateModel model_ concode_field_sep void stateChanged concode_elem_sep void setStateModel", "code_tokens": ["void", "function", "(", "int", "arg0", ")", "{", "int", "[", "]", "loc0", "=", "{", "arg0", "}", ";", "waitForState", "(", "loc0", ")", ";", "}"], "nl_tokens": ["waits", "until", "the", "statemodel", "reaches", "the", "indicated", "state", ".", "note", ":", "waitforstate", "methods", "may", "not", "be", "called", "from", "multiple", "threads", "simoultaneously", ".", "concode_field_sep", "int", "[", "]", "targetStates_", "concode_elem_sep", "StateModel", "model_", "concode_field_sep", "void", "stateChanged", "concode_elem_sep", "void", "setStateModel"]}
{"code": "Map < K , V > function ( int arg0 ) { return new HashMap < K , V > ( determineProperSizing ( arg0 ) , LOAD_FACTOR ) ; }", "nl": "build a properly sized map , especially handling load size and load factor to prevent immediate resizing . especially helpful for copy map contents . concode_field_sep int MINIMUM_INITIAL_CAPACITY concode_elem_sep List EMPTY_LIST concode_elem_sep Collection EMPTY_COLLECTION concode_elem_sep Map EMPTY_MAP concode_elem_sep float LOAD_FACTOR concode_field_sep Set<T> makeCopy concode_elem_sep Map<X,Y> makeCopy concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep boolean isEmpty concode_elem_sep ArrayList<T> arrayList concode_elem_sep boolean isNotEmpty concode_elem_sep boolean isNotEmpty concode_elem_sep ConcurrentHashMap<K,V> concurrentMap concode_elem_sep ConcurrentHashMap<K,V> concurrentMap concode_elem_sep int determineProperSizing concode_elem_sep int determineProperSizing concode_elem_sep int determineProperSizing", "code_tokens": ["Map", "<", "K", ",", "V", ">", "function", "(", "int", "arg0", ")", "{", "return", "new", "HashMap", "<", "K", ",", "V", ">", "(", "determineProperSizing", "(", "arg0", ")", ",", "LOAD_FACTOR", ")", ";", "}"], "nl_tokens": ["build", "a", "properly", "sized", "map", ",", "especially", "handling", "load", "size", "and", "load", "factor", "to", "prevent", "immediate", "resizing", ".", "especially", "helpful", "for", "copy", "map", "contents", ".", "concode_field_sep", "int", "MINIMUM_INITIAL_CAPACITY", "concode_elem_sep", "List", "EMPTY_LIST", "concode_elem_sep", "Collection", "EMPTY_COLLECTION", "concode_elem_sep", "Map", "EMPTY_MAP", "concode_elem_sep", "float", "LOAD_FACTOR", "concode_field_sep", "Set", "<", "T", ">", "makeCopy", "concode_elem_sep", "Map", "<", "X", ",", "Y", ">", "makeCopy", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "ArrayList", "<", "T", ">", "arrayList", "concode_elem_sep", "boolean", "isNotEmpty", "concode_elem_sep", "boolean", "isNotEmpty", "concode_elem_sep", "ConcurrentHashMap", "<", "K", ",", "V", ">", "concurrentMap", "concode_elem_sep", "ConcurrentHashMap", "<", "K", ",", "V", ">", "concurrentMap", "concode_elem_sep", "int", "determineProperSizing", "concode_elem_sep", "int", "determineProperSizing", "concode_elem_sep", "int", "determineProperSizing"]}
{"code": "TriangleXZ function ( ) { return makeRotationSense ( false ) ; }", "nl": "returns this triangle if it is clockwise , or the reversed triangle if it is counterclockwise . concode_field_sep VectorXZ v1 concode_elem_sep VectorXZ v2 concode_elem_sep VectorXZ v3 concode_field_sep VectorXZ getCenter concode_elem_sep boolean contains concode_elem_sep TriangleXZ makeClockwise concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep TriangleXYZ xyz concode_elem_sep List<VectorXZ> getVertices concode_elem_sep boolean isClockwise concode_elem_sep String toString concode_elem_sep TriangleXZ makeRotationSense concode_elem_sep TriangleXZ reverse concode_elem_sep double getArea", "code_tokens": ["TriangleXZ", "function", "(", ")", "{", "return", "makeRotationSense", "(", "false", ")", ";", "}"], "nl_tokens": ["returns", "this", "triangle", "if", "it", "is", "clockwise", ",", "or", "the", "reversed", "triangle", "if", "it", "is", "counterclockwise", ".", "concode_field_sep", "VectorXZ", "v1", "concode_elem_sep", "VectorXZ", "v2", "concode_elem_sep", "VectorXZ", "v3", "concode_field_sep", "VectorXZ", "getCenter", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "TriangleXZ", "makeClockwise", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "TriangleXYZ", "xyz", "concode_elem_sep", "List", "<", "VectorXZ", ">", "getVertices", "concode_elem_sep", "boolean", "isClockwise", "concode_elem_sep", "String", "toString", "concode_elem_sep", "TriangleXZ", "makeRotationSense", "concode_elem_sep", "TriangleXZ", "reverse", "concode_elem_sep", "double", "getArea"]}
{"code": "void function ( Host arg0 ) { rttToMonitors . remove ( arg0 ) ; }", "nl": "remove them measured rtt from host to monitor concode_field_sep int MONITOR concode_elem_sep AverageAccumulator avgPingAttemptsPerNode concode_elem_sep long serialVersionUID concode_elem_sep double latitude concode_elem_sep String city concode_elem_sep String isp concode_elem_sep boolean locatable concode_elem_sep boolean useCountryNames concode_elem_sep int type concode_elem_sep String countryCode concode_elem_sep GnpPosition coordinateRef concode_elem_sep HostMap mapRef concode_elem_sep int HOST concode_elem_sep String area concode_elem_sep int ipAddress concode_elem_sep HashMap<Host,List<Double>> rttToMonitors concode_elem_sep CumulateRTTStrategy currentStrategy concode_elem_sep HashMap<Host,Double> cumulatedRTTs concode_elem_sep int isNotLocatable concode_elem_sep int regionNotFound concode_elem_sep double longitude concode_elem_sep int ccNotFound concode_elem_sep String region concode_elem_sep int cityNotFound concode_elem_sep String countryName concode_field_sep boolean issetUseCountryNames concode_elem_sep void setUseCountryNames concode_elem_sep void setPositionReference concode_elem_sep int getIpAddress concode_elem_sep int getHostType concode_elem_sep void setLocation concode_elem_sep int hashCode concode_elem_sep String getISP concode_elem_sep String getCountryName concode_elem_sep Set<Host> getMeasuredMonitors concode_elem_sep boolean isLocatable concode_elem_sep String getCity concode_elem_sep String getCountryCode concode_elem_sep void printLocatorStats concode_elem_sep void addRtt concode_elem_sep double getLongitude concode_elem_sep double getLatitude concode_elem_sep void setHostType concode_elem_sep double getAvgPingAttemptsPerNode concode_elem_sep Double cumulate concode_elem_sep void setRtt concode_elem_sep double getRtt concode_elem_sep String getRegion concode_elem_sep boolean equals concode_elem_sep void setRTTCumulationStrategy concode_elem_sep void cumulateRTTsCond concode_elem_sep String toString concode_elem_sep String getArea concode_elem_sep GnpPosition getGnpPositionReference", "code_tokens": ["void", "function", "(", "Host", "arg0", ")", "{", "rttToMonitors", ".", "remove", "(", "arg0", ")", ";", "}"], "nl_tokens": ["remove", "them", "measured", "rtt", "from", "host", "to", "monitor", "concode_field_sep", "int", "MONITOR", "concode_elem_sep", "AverageAccumulator", "avgPingAttemptsPerNode", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "double", "latitude", "concode_elem_sep", "String", "city", "concode_elem_sep", "String", "isp", "concode_elem_sep", "boolean", "locatable", "concode_elem_sep", "boolean", "useCountryNames", "concode_elem_sep", "int", "type", "concode_elem_sep", "String", "countryCode", "concode_elem_sep", "GnpPosition", "coordinateRef", "concode_elem_sep", "HostMap", "mapRef", "concode_elem_sep", "int", "HOST", "concode_elem_sep", "String", "area", "concode_elem_sep", "int", "ipAddress", "concode_elem_sep", "HashMap", "<", "Host", ",", "List", "<", "Double", ">>", "rttToMonitors", "concode_elem_sep", "CumulateRTTStrategy", "currentStrategy", "concode_elem_sep", "HashMap", "<", "Host", ",", "Double", ">", "cumulatedRTTs", "concode_elem_sep", "int", "isNotLocatable", "concode_elem_sep", "int", "regionNotFound", "concode_elem_sep", "double", "longitude", "concode_elem_sep", "int", "ccNotFound", "concode_elem_sep", "String", "region", "concode_elem_sep", "int", "cityNotFound", "concode_elem_sep", "String", "countryName", "concode_field_sep", "boolean", "issetUseCountryNames", "concode_elem_sep", "void", "setUseCountryNames", "concode_elem_sep", "void", "setPositionReference", "concode_elem_sep", "int", "getIpAddress", "concode_elem_sep", "int", "getHostType", "concode_elem_sep", "void", "setLocation", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "String", "getISP", "concode_elem_sep", "String", "getCountryName", "concode_elem_sep", "Set", "<", "Host", ">", "getMeasuredMonitors", "concode_elem_sep", "boolean", "isLocatable", "concode_elem_sep", "String", "getCity", "concode_elem_sep", "String", "getCountryCode", "concode_elem_sep", "void", "printLocatorStats", "concode_elem_sep", "void", "addRtt", "concode_elem_sep", "double", "getLongitude", "concode_elem_sep", "double", "getLatitude", "concode_elem_sep", "void", "setHostType", "concode_elem_sep", "double", "getAvgPingAttemptsPerNode", "concode_elem_sep", "Double", "cumulate", "concode_elem_sep", "void", "setRtt", "concode_elem_sep", "double", "getRtt", "concode_elem_sep", "String", "getRegion", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "setRTTCumulationStrategy", "concode_elem_sep", "void", "cumulateRTTsCond", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getArea", "concode_elem_sep", "GnpPosition", "getGnpPositionReference"]}
{"code": "void function ( Operator arg0 ) { calculate ( arg0 ) ; }", "nl": "addoperator runs operator through calculate as soon as it gets it so the stack is always up to date . concode_field_sep Stack<Double> operands concode_elem_sep Stack<OperationsInterface> operators concode_field_sep int size concode_elem_sep void debugPrintStacks concode_elem_sep void clear concode_elem_sep void addGrouping concode_elem_sep double getTotal concode_elem_sep void calculate concode_elem_sep void addOperand", "code_tokens": ["void", "function", "(", "Operator", "arg0", ")", "{", "calculate", "(", "arg0", ")", ";", "}"], "nl_tokens": ["addoperator", "runs", "operator", "through", "calculate", "as", "soon", "as", "it", "gets", "it", "so", "the", "stack", "is", "always", "up", "to", "date", ".", "concode_field_sep", "Stack", "<", "Double", ">", "operands", "concode_elem_sep", "Stack", "<", "OperationsInterface", ">", "operators", "concode_field_sep", "int", "size", "concode_elem_sep", "void", "debugPrintStacks", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "addGrouping", "concode_elem_sep", "double", "getTotal", "concode_elem_sep", "void", "calculate", "concode_elem_sep", "void", "addOperand"]}
{"code": "Object function ( ) { if ( collection . size ( ) == 0 ) { throw new NoSuchElementException ( \"srini_string\" ) ; } if ( iterator . hasNext ( ) == false ) { reset ( ) ; } return iterator . next ( ) ; }", "nl": "returns the next object in the collection . if at the end of the collection , return the first element . concode_field_sep Iterator iterator concode_elem_sep Collection collection concode_field_sep int size concode_elem_sep void reset concode_elem_sep boolean hasNext concode_elem_sep void remove", "code_tokens": ["Object", "function", "(", ")", "{", "if", "(", "collection", ".", "size", "(", ")", "==", "0", ")", "{", "throw", "new", "NoSuchElementException", "(", "\"srini_string\"", ")", ";", "}", "if", "(", "iterator", ".", "hasNext", "(", ")", "==", "false", ")", "{", "reset", "(", ")", ";", "}", "return", "iterator", ".", "next", "(", ")", ";", "}"], "nl_tokens": ["returns", "the", "next", "object", "in", "the", "collection", ".", "if", "at", "the", "end", "of", "the", "collection", ",", "return", "the", "first", "element", ".", "concode_field_sep", "Iterator", "iterator", "concode_elem_sep", "Collection", "collection", "concode_field_sep", "int", "size", "concode_elem_sep", "void", "reset", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "remove"]}
{"code": "boolean function ( ) { return fIsEnabled ; }", "nl": "returns whether the group is enabled or not . concode_field_sep TextEditBasedChange fChange concode_elem_sep TextEditGroup fTextEditGroup concode_elem_sep boolean fIsEnabled concode_field_sep void setEnabled concode_elem_sep String getName concode_elem_sep IRegion getRegion concode_elem_sep TextEditGroup getTextEditGroup concode_elem_sep TextEdit[] getTextEdits concode_elem_sep TextEditBasedChange getTextEditChange concode_elem_sep GroupCategorySet getGroupCategorySet", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "fIsEnabled", ";", "}"], "nl_tokens": ["returns", "whether", "the", "group", "is", "enabled", "or", "not", ".", "concode_field_sep", "TextEditBasedChange", "fChange", "concode_elem_sep", "TextEditGroup", "fTextEditGroup", "concode_elem_sep", "boolean", "fIsEnabled", "concode_field_sep", "void", "setEnabled", "concode_elem_sep", "String", "getName", "concode_elem_sep", "IRegion", "getRegion", "concode_elem_sep", "TextEditGroup", "getTextEditGroup", "concode_elem_sep", "TextEdit", "[", "]", "getTextEdits", "concode_elem_sep", "TextEditBasedChange", "getTextEditChange", "concode_elem_sep", "GroupCategorySet", "getGroupCategorySet"]}
{"code": "List function ( ) { return ones ; }", "nl": "returns the ones . concode_field_sep String name concode_elem_sep List ones concode_elem_sep Holder otherHolder concode_elem_sep String id concode_elem_sep Foo[] fooArray concode_elem_sep Set foos concode_field_sep Foo[] getFooArray concode_elem_sep void setName concode_elem_sep void setOnes concode_elem_sep String getName concode_elem_sep void setFooArray concode_elem_sep void setFoos concode_elem_sep void setOtherHolder concode_elem_sep void setId concode_elem_sep String getId concode_elem_sep Holder getOtherHolder concode_elem_sep Set getFoos", "code_tokens": ["List", "function", "(", ")", "{", "return", "ones", ";", "}"], "nl_tokens": ["returns", "the", "ones", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "List", "ones", "concode_elem_sep", "Holder", "otherHolder", "concode_elem_sep", "String", "id", "concode_elem_sep", "Foo", "[", "]", "fooArray", "concode_elem_sep", "Set", "foos", "concode_field_sep", "Foo", "[", "]", "getFooArray", "concode_elem_sep", "void", "setName", "concode_elem_sep", "void", "setOnes", "concode_elem_sep", "String", "getName", "concode_elem_sep", "void", "setFooArray", "concode_elem_sep", "void", "setFoos", "concode_elem_sep", "void", "setOtherHolder", "concode_elem_sep", "void", "setId", "concode_elem_sep", "String", "getId", "concode_elem_sep", "Holder", "getOtherHolder", "concode_elem_sep", "Set", "getFoos"]}
{"code": "void function ( PropertyChangeListener arg0 ) { if ( arg0 == null ) { throw new IllegalArgumentException ( ) ; } pcsDelegate . addPropertyChangeListener ( arg0 ) ; }", "nl": "attach a non-null propertychangelistener to this object . concode_field_sep IPropertyDescriptor[] EMPTY_ARRAY concode_elem_sep PropertyChangeSupport pcsDelegate concode_elem_sep long serialVersionUID concode_field_sep void firePropertyChange concode_elem_sep Object getPropertyValue concode_elem_sep void setPropertyValue concode_elem_sep Object getEditableValue concode_elem_sep IPropertyDescriptor[] getPropertyDescriptors concode_elem_sep void resetPropertyValue concode_elem_sep boolean isPropertySet concode_elem_sep void removePropertyChangeListener concode_elem_sep void readObject", "code_tokens": ["void", "function", "(", "PropertyChangeListener", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "pcsDelegate", ".", "addPropertyChangeListener", "(", "arg0", ")", ";", "}"], "nl_tokens": ["attach", "a", "non", "-", "null", "propertychangelistener", "to", "this", "object", ".", "concode_field_sep", "IPropertyDescriptor", "[", "]", "EMPTY_ARRAY", "concode_elem_sep", "PropertyChangeSupport", "pcsDelegate", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "void", "firePropertyChange", "concode_elem_sep", "Object", "getPropertyValue", "concode_elem_sep", "void", "setPropertyValue", "concode_elem_sep", "Object", "getEditableValue", "concode_elem_sep", "IPropertyDescriptor", "[", "]", "getPropertyDescriptors", "concode_elem_sep", "void", "resetPropertyValue", "concode_elem_sep", "boolean", "isPropertySet", "concode_elem_sep", "void", "removePropertyChangeListener", "concode_elem_sep", "void", "readObject"]}
{"code": "int [ ] function ( Integer [ ] arg0 ) { int [ ] loc0 = new int [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < arg0 . length ; loc1 ++ ) { loc0 [ loc1 ] = arg0 [ loc1 ] ; } return loc0 ; }", "nl": "convert integer array to int array concode_field_sep PlaceHolder placeHolder concode_field_sep String nullStrToEmpty concode_elem_sep Long[] transformLongArray concode_elem_sep long[] transformLongArray concode_elem_sep int compare concode_elem_sep boolean isEquals", "code_tokens": ["int", "[", "]", "function", "(", "Integer", "[", "]", "arg0", ")", "{", "int", "[", "]", "loc0", "=", "new", "int", "[", "arg0", ".", "length", "]", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "arg0", ".", "length", ";", "loc1", "+", "+", ")", "{", "loc0", "[", "loc1", "]", "=", "arg0", "[", "loc1", "]", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["convert", "integer", "array", "to", "int", "array", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "nullStrToEmpty", "concode_elem_sep", "Long", "[", "]", "transformLongArray", "concode_elem_sep", "long", "[", "]", "transformLongArray", "concode_elem_sep", "int", "compare", "concode_elem_sep", "boolean", "isEquals"]}
{"code": "boolean function ( ) { return coalescing ; }", "nl": "indicates whether or not the factory is configured to produce parsers which converts cdata nodes to text nodes and appends it to the adjacent if any text node . concode_field_sep boolean validating concode_elem_sep boolean namespaceAware concode_elem_sep boolean whitespace concode_elem_sep boolean expandEntityRef concode_elem_sep boolean coalescing concode_elem_sep boolean ignoreComments concode_field_sep void setCoalescing concode_elem_sep boolean isIgnoringElementContentWhitespace concode_elem_sep void setIgnoringElementContentWhitespace concode_elem_sep boolean isNamespaceAware concode_elem_sep void setNamespaceAware concode_elem_sep DocumentBuilderFactory newInstance concode_elem_sep boolean isValidating concode_elem_sep void setAttribute concode_elem_sep Object getAttribute concode_elem_sep boolean isExpandEntityReferences concode_elem_sep DocumentBuilder newDocumentBuilder concode_elem_sep void setValidating concode_elem_sep void setIgnoringComments concode_elem_sep void setExpandEntityReferences concode_elem_sep boolean isIgnoringComments", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "coalescing", ";", "}"], "nl_tokens": ["indicates", "whether", "or", "not", "the", "factory", "is", "configured", "to", "produce", "parsers", "which", "converts", "cdata", "nodes", "to", "text", "nodes", "and", "appends", "it", "to", "the", "adjacent", "if", "any", "text", "node", ".", "concode_field_sep", "boolean", "validating", "concode_elem_sep", "boolean", "namespaceAware", "concode_elem_sep", "boolean", "whitespace", "concode_elem_sep", "boolean", "expandEntityRef", "concode_elem_sep", "boolean", "coalescing", "concode_elem_sep", "boolean", "ignoreComments", "concode_field_sep", "void", "setCoalescing", "concode_elem_sep", "boolean", "isIgnoringElementContentWhitespace", "concode_elem_sep", "void", "setIgnoringElementContentWhitespace", "concode_elem_sep", "boolean", "isNamespaceAware", "concode_elem_sep", "void", "setNamespaceAware", "concode_elem_sep", "DocumentBuilderFactory", "newInstance", "concode_elem_sep", "boolean", "isValidating", "concode_elem_sep", "void", "setAttribute", "concode_elem_sep", "Object", "getAttribute", "concode_elem_sep", "boolean", "isExpandEntityReferences", "concode_elem_sep", "DocumentBuilder", "newDocumentBuilder", "concode_elem_sep", "void", "setValidating", "concode_elem_sep", "void", "setIgnoringComments", "concode_elem_sep", "void", "setExpandEntityReferences", "concode_elem_sep", "boolean", "isIgnoringComments"]}
{"code": "Document function ( ) { return xfaForm . getDomDocument ( ) ; }", "nl": "gets document to sign concode_field_sep XfaForm xfaForm concode_elem_sep PdfStamper stamper concode_elem_sep String encoding concode_field_sep String getEncoding concode_elem_sep void createXfaForm concode_elem_sep void setDocument concode_elem_sep void setEncoding", "code_tokens": ["Document", "function", "(", ")", "{", "return", "xfaForm", ".", "getDomDocument", "(", ")", ";", "}"], "nl_tokens": ["gets", "document", "to", "sign", "concode_field_sep", "XfaForm", "xfaForm", "concode_elem_sep", "PdfStamper", "stamper", "concode_elem_sep", "String", "encoding", "concode_field_sep", "String", "getEncoding", "concode_elem_sep", "void", "createXfaForm", "concode_elem_sep", "void", "setDocument", "concode_elem_sep", "void", "setEncoding"]}
{"code": "void function ( Throwable arg0 ) { log ( \"srini_string\" , arg0 ) ; }", "nl": "log the specified exception . concode_field_sep ILog sysOutLog concode_elem_sep PrintWriter sysOut concode_elem_sep ILog log concode_elem_sep String PRODUCT_ID concode_field_sep void setLog concode_elem_sep void printLogObject concode_elem_sep void removeLogListener concode_elem_sep void logNoHeader concode_elem_sep void logStackTrace concode_elem_sep void printLogStatus concode_elem_sep IStatus createLogStatus concode_elem_sep void printLogMessage concode_elem_sep void printLog concode_elem_sep void close concode_elem_sep void addLogListener concode_elem_sep org.osgi.framework.Bundle getBundle", "code_tokens": ["void", "function", "(", "Throwable", "arg0", ")", "{", "log", "(", "\"srini_string\"", ",", "arg0", ")", ";", "}"], "nl_tokens": ["log", "the", "specified", "exception", ".", "concode_field_sep", "ILog", "sysOutLog", "concode_elem_sep", "PrintWriter", "sysOut", "concode_elem_sep", "ILog", "log", "concode_elem_sep", "String", "PRODUCT_ID", "concode_field_sep", "void", "setLog", "concode_elem_sep", "void", "printLogObject", "concode_elem_sep", "void", "removeLogListener", "concode_elem_sep", "void", "logNoHeader", "concode_elem_sep", "void", "logStackTrace", "concode_elem_sep", "void", "printLogStatus", "concode_elem_sep", "IStatus", "createLogStatus", "concode_elem_sep", "void", "printLogMessage", "concode_elem_sep", "void", "printLog", "concode_elem_sep", "void", "close", "concode_elem_sep", "void", "addLogListener", "concode_elem_sep", "org", ".", "osgi", ".", "framework", ".", "Bundle", "getBundle"]}
{"code": "int function ( ) { return this . max ; }", "nl": "gets the maximum number of allowed persistent connections . concode_field_sep int leased concode_elem_sep int max concode_elem_sep int pending concode_elem_sep int available concode_field_sep String toString concode_elem_sep int getPending concode_elem_sep int getAvailable concode_elem_sep int getLeased", "code_tokens": ["int", "function", "(", ")", "{", "return", "this", ".", "max", ";", "}"], "nl_tokens": ["gets", "the", "maximum", "number", "of", "allowed", "persistent", "connections", ".", "concode_field_sep", "int", "leased", "concode_elem_sep", "int", "max", "concode_elem_sep", "int", "pending", "concode_elem_sep", "int", "available", "concode_field_sep", "String", "toString", "concode_elem_sep", "int", "getPending", "concode_elem_sep", "int", "getAvailable", "concode_elem_sep", "int", "getLeased"]}
{"code": "boolean function ( Object arg0 ) { GroebnerSystem < C > loc0 = null ; try { loc0 = ( GroebnerSystem < C > ) arg0 ; } catch ( ClassCastException loc1 ) { return false ; } if ( loc0 == null ) { return false ; } boolean loc2 = list . equals ( loc0 . list ) ; return loc2 ; }", "nl": "is this groebner system equal to other . concode_field_sep Logger logger concode_elem_sep boolean debug concode_elem_sep List<Condition<C>> conds concode_elem_sep List<ColoredSystem<C>> list concode_elem_sep PolynomialList<GenPolynomial<C>> cgb concode_field_sep List<GenPolynomial<GenPolynomial<C>>> getCGB concode_elem_sep boolean checkInvariant concode_elem_sep int hashCode concode_elem_sep boolean isDetermined concode_elem_sep String toString concode_elem_sep List<Condition<C>> getConditions", "code_tokens": ["boolean", "function", "(", "Object", "arg0", ")", "{", "GroebnerSystem", "<", "C", ">", "loc0", "=", "null", ";", "try", "{", "loc0", "=", "(", "GroebnerSystem", "<", "C", ">", ")", "arg0", ";", "}", "catch", "(", "ClassCastException", "loc1", ")", "{", "return", "false", ";", "}", "if", "(", "loc0", "==", "null", ")", "{", "return", "false", ";", "}", "boolean", "loc2", "=", "list", ".", "equals", "(", "loc0", ".", "list", ")", ";", "return", "loc2", ";", "}"], "nl_tokens": ["is", "this", "groebner", "system", "equal", "to", "other", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "List", "<", "Condition", "<", "C", ">>", "conds", "concode_elem_sep", "List", "<", "ColoredSystem", "<", "C", ">>", "list", "concode_elem_sep", "PolynomialList", "<", "GenPolynomial", "<", "C", ">>", "cgb", "concode_field_sep", "List", "<", "GenPolynomial", "<", "GenPolynomial", "<", "C", ">>", ">", "getCGB", "concode_elem_sep", "boolean", "checkInvariant", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "isDetermined", "concode_elem_sep", "String", "toString", "concode_elem_sep", "List", "<", "Condition", "<", "C", ">>", "getConditions"]}
{"code": "void function ( String arg0 , JsSymbolMap arg1 ) { resourceSymbols . put ( arg0 , arg1 ) ; }", "nl": "inserts a symbol map into the set of available symbol maps , keyed by resource url . concode_field_sep int ERROR_SYMBOL_FETCH_FAIL concode_elem_sep IterableFastStringMap<JsSymbolMap> resourceSymbols concode_elem_sep String resourceUrl concode_elem_sep List<PendingRequest> pendingRequests concode_elem_sep Callback callback concode_elem_sep int ERROR_MANIFEST_NOT_LOADED concode_elem_sep boolean manifestLoaded concode_elem_sep SymbolServerManifest symbolServerManifest concode_elem_sep IterableFastStringMap<List<XhrCallback>> queuedSymbolMapRequests concode_elem_sep Url symbolManifestUrl concode_elem_sep Url mainResourceUrl concode_field_sep void init concode_elem_sep void attemptResymbolization concode_elem_sep void onSymbolsReady concode_elem_sep void onSymbolsFetchFailed concode_elem_sep JsSymbolMap get concode_elem_sep void serviceRequest concode_elem_sep void cancelPendingRequests concode_elem_sep void reSymbolize concode_elem_sep void requestSymbolsFor concode_elem_sep ResourceSymbolInfo lookupEntryInManifest", "code_tokens": ["void", "function", "(", "String", "arg0", ",", "JsSymbolMap", "arg1", ")", "{", "resourceSymbols", ".", "put", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["inserts", "a", "symbol", "map", "into", "the", "set", "of", "available", "symbol", "maps", ",", "keyed", "by", "resource", "url", ".", "concode_field_sep", "int", "ERROR_SYMBOL_FETCH_FAIL", "concode_elem_sep", "IterableFastStringMap", "<", "JsSymbolMap", ">", "resourceSymbols", "concode_elem_sep", "String", "resourceUrl", "concode_elem_sep", "List", "<", "PendingRequest", ">", "pendingRequests", "concode_elem_sep", "Callback", "callback", "concode_elem_sep", "int", "ERROR_MANIFEST_NOT_LOADED", "concode_elem_sep", "boolean", "manifestLoaded", "concode_elem_sep", "SymbolServerManifest", "symbolServerManifest", "concode_elem_sep", "IterableFastStringMap", "<", "List", "<", "XhrCallback", ">>", "queuedSymbolMapRequests", "concode_elem_sep", "Url", "symbolManifestUrl", "concode_elem_sep", "Url", "mainResourceUrl", "concode_field_sep", "void", "init", "concode_elem_sep", "void", "attemptResymbolization", "concode_elem_sep", "void", "onSymbolsReady", "concode_elem_sep", "void", "onSymbolsFetchFailed", "concode_elem_sep", "JsSymbolMap", "get", "concode_elem_sep", "void", "serviceRequest", "concode_elem_sep", "void", "cancelPendingRequests", "concode_elem_sep", "void", "reSymbolize", "concode_elem_sep", "void", "requestSymbolsFor", "concode_elem_sep", "ResourceSymbolInfo", "lookupEntryInManifest"]}
{"code": "void function ( ) { usage ( null ) ; }", "nl": "throw an invalid script exception describing the proper script usage . this should be used by derived classes whenever parsing indicates invalid input . concode_field_sep String description concode_elem_sep Resolver resolver concode_elem_sep String copyright concode_elem_sep Throwable invalidScriptError concode_elem_sep WidgetTester tester concode_field_sep String toXMLString concode_elem_sep String getXMLTag concode_elem_sep Widget resolve concode_elem_sep Element addAttributes concode_elem_sep void run concode_elem_sep Element toXML concode_elem_sep void setDescription concode_elem_sep String simpleClassName concode_elem_sep String getDescription concode_elem_sep String getDefaultDescription concode_elem_sep void runStep concode_elem_sep WidgetTester resolveTester concode_elem_sep void setScriptError concode_elem_sep HashMap createAttributeMap concode_elem_sep HashMap getAttributes concode_elem_sep void writeObject concode_elem_sep Element addContent concode_elem_sep void parseStepAttributes concode_elem_sep String getUsage concode_elem_sep void readObject concode_elem_sep String toEditableString concode_elem_sep Step createStep concode_elem_sep Step createStep concode_elem_sep Class resolveClass concode_elem_sep WidgetFinder getFinder concode_elem_sep Resolver getResolver", "code_tokens": ["void", "function", "(", ")", "{", "usage", "(", "null", ")", ";", "}"], "nl_tokens": ["throw", "an", "invalid", "script", "exception", "describing", "the", "proper", "script", "usage", ".", "this", "should", "be", "used", "by", "derived", "classes", "whenever", "parsing", "indicates", "invalid", "input", ".", "concode_field_sep", "String", "description", "concode_elem_sep", "Resolver", "resolver", "concode_elem_sep", "String", "copyright", "concode_elem_sep", "Throwable", "invalidScriptError", "concode_elem_sep", "WidgetTester", "tester", "concode_field_sep", "String", "toXMLString", "concode_elem_sep", "String", "getXMLTag", "concode_elem_sep", "Widget", "resolve", "concode_elem_sep", "Element", "addAttributes", "concode_elem_sep", "void", "run", "concode_elem_sep", "Element", "toXML", "concode_elem_sep", "void", "setDescription", "concode_elem_sep", "String", "simpleClassName", "concode_elem_sep", "String", "getDescription", "concode_elem_sep", "String", "getDefaultDescription", "concode_elem_sep", "void", "runStep", "concode_elem_sep", "WidgetTester", "resolveTester", "concode_elem_sep", "void", "setScriptError", "concode_elem_sep", "HashMap", "createAttributeMap", "concode_elem_sep", "HashMap", "getAttributes", "concode_elem_sep", "void", "writeObject", "concode_elem_sep", "Element", "addContent", "concode_elem_sep", "void", "parseStepAttributes", "concode_elem_sep", "String", "getUsage", "concode_elem_sep", "void", "readObject", "concode_elem_sep", "String", "toEditableString", "concode_elem_sep", "Step", "createStep", "concode_elem_sep", "Step", "createStep", "concode_elem_sep", "Class", "resolveClass", "concode_elem_sep", "WidgetFinder", "getFinder", "concode_elem_sep", "Resolver", "getResolver"]}
{"code": "void function ( final FontProvider arg0 ) { this . provider = arg0 ; }", "nl": "setter for the font provider concode_field_sep FontProvider provider concode_field_sep ListItem createListItem concode_elem_sep void setParagraphLeading concode_elem_sep List createList concode_elem_sep Image createImage concode_elem_sep FontProvider getFontProvider concode_elem_sep Chunk createChunk concode_elem_sep LineSeparator createLineSeparator concode_elem_sep Paragraph createParagraph concode_elem_sep Font getFont concode_elem_sep HyphenationEvent getHyphenation concode_elem_sep void updateElement", "code_tokens": ["void", "function", "(", "final", "FontProvider", "arg0", ")", "{", "this", ".", "provider", "=", "arg0", ";", "}"], "nl_tokens": ["setter", "for", "the", "font", "provider", "concode_field_sep", "FontProvider", "provider", "concode_field_sep", "ListItem", "createListItem", "concode_elem_sep", "void", "setParagraphLeading", "concode_elem_sep", "List", "createList", "concode_elem_sep", "Image", "createImage", "concode_elem_sep", "FontProvider", "getFontProvider", "concode_elem_sep", "Chunk", "createChunk", "concode_elem_sep", "LineSeparator", "createLineSeparator", "concode_elem_sep", "Paragraph", "createParagraph", "concode_elem_sep", "Font", "getFont", "concode_elem_sep", "HyphenationEvent", "getHyphenation", "concode_elem_sep", "void", "updateElement"]}
{"code": "BooleanComparator function ( ) { return FALSE_FIRST ; }", "nl": "returns a booleancomparator instance that sorts false values before true values . clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple booleancomparators may be used in the same virtual machine . concode_field_sep BooleanComparator TRUE_FIRST concode_elem_sep long serialVersionUID concode_elem_sep BooleanComparator FALSE_FIRST concode_elem_sep boolean trueFirst concode_field_sep BooleanComparator getTrueFirstComparator concode_elem_sep int compare concode_elem_sep int compare concode_elem_sep BooleanComparator getBooleanComparator concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep boolean sortsTrueFirst", "code_tokens": ["BooleanComparator", "function", "(", ")", "{", "return", "FALSE_FIRST", ";", "}"], "nl_tokens": ["returns", "a", "booleancomparator", "instance", "that", "sorts", "false", "values", "before", "true", "values", ".", "clients", "are", "encouraged", "to", "use", "the", "value", "returned", "from", "this", "method", "instead", "of", "constructing", "a", "new", "instance", "to", "reduce", "allocation", "and", "garbage", "collection", "overhead", "when", "multiple", "booleancomparators", "may", "be", "used", "in", "the", "same", "virtual", "machine", ".", "concode_field_sep", "BooleanComparator", "TRUE_FIRST", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "BooleanComparator", "FALSE_FIRST", "concode_elem_sep", "boolean", "trueFirst", "concode_field_sep", "BooleanComparator", "getTrueFirstComparator", "concode_elem_sep", "int", "compare", "concode_elem_sep", "int", "compare", "concode_elem_sep", "BooleanComparator", "getBooleanComparator", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "sortsTrueFirst"]}
{"code": "void function ( ) { int loc0 = rand . nextInt ( size ) ; int loc1 = rand . nextInt ( size ) ; log . debug ( \"srini_string\" + Simulator . getCurrentTime ( ) + \"srini_string\" + loc0 + \"srini_string\" + loc1 ) ; keyPopularity . add ( loc1 , keyPopularity . remove ( loc0 ) ) ; getKeyForLookup ( ) ; }", "nl": "does a popularity reorder on this document set . concode_field_sep boolean configured concode_elem_sep Distribution reorderIntvlDist concode_elem_sep boolean useRanks concode_elem_sep double zipfExp concode_elem_sep long meanReorderIntvl concode_elem_sep RandomGenerator rand concode_elem_sep String name concode_elem_sep ZipfDistribution dist concode_elem_sep int startRank concode_elem_sep Logger log concode_elem_sep List<Integer> keyPopularity concode_elem_sep int size concode_field_sep void setName concode_elem_sep String getName concode_elem_sep int getKeyForPublish concode_elem_sep void checkConfigure concode_elem_sep void setMeanReorderIntvl concode_elem_sep void setZipfExp concode_elem_sep void configure concode_elem_sep int getSize concode_elem_sep boolean containsResourcesOf concode_elem_sep void setSize concode_elem_sep Distribution getReorderDistribution concode_elem_sep int getKeyForLookup concode_elem_sep void setBeginRank", "code_tokens": ["void", "function", "(", ")", "{", "int", "loc0", "=", "rand", ".", "nextInt", "(", "size", ")", ";", "int", "loc1", "=", "rand", ".", "nextInt", "(", "size", ")", ";", "log", ".", "debug", "(", "\"srini_string\"", "+", "Simulator", ".", "getCurrentTime", "(", ")", "+", "\"srini_string\"", "+", "loc0", "+", "\"srini_string\"", "+", "loc1", ")", ";", "keyPopularity", ".", "add", "(", "loc1", ",", "keyPopularity", ".", "remove", "(", "loc0", ")", ")", ";", "getKeyForLookup", "(", ")", ";", "}"], "nl_tokens": ["does", "a", "popularity", "reorder", "on", "this", "document", "set", ".", "concode_field_sep", "boolean", "configured", "concode_elem_sep", "Distribution", "reorderIntvlDist", "concode_elem_sep", "boolean", "useRanks", "concode_elem_sep", "double", "zipfExp", "concode_elem_sep", "long", "meanReorderIntvl", "concode_elem_sep", "RandomGenerator", "rand", "concode_elem_sep", "String", "name", "concode_elem_sep", "ZipfDistribution", "dist", "concode_elem_sep", "int", "startRank", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "List", "<", "Integer", ">", "keyPopularity", "concode_elem_sep", "int", "size", "concode_field_sep", "void", "setName", "concode_elem_sep", "String", "getName", "concode_elem_sep", "int", "getKeyForPublish", "concode_elem_sep", "void", "checkConfigure", "concode_elem_sep", "void", "setMeanReorderIntvl", "concode_elem_sep", "void", "setZipfExp", "concode_elem_sep", "void", "configure", "concode_elem_sep", "int", "getSize", "concode_elem_sep", "boolean", "containsResourcesOf", "concode_elem_sep", "void", "setSize", "concode_elem_sep", "Distribution", "getReorderDistribution", "concode_elem_sep", "int", "getKeyForLookup", "concode_elem_sep", "void", "setBeginRank"]}
{"code": "DoubleListIterator function ( DoubleListIterator arg0 ) { if ( null == arg0 ) { throw new NullPointerException ( ) ; } return UnmodifiableDoubleListIterator . wrap ( arg0 ) ; }", "nl": "returns an unmodifiable version of the given non-null doublelistiterator . concode_field_sep DoubleListIterator EMPTY_DOUBLE_LIST_ITERATOR concode_elem_sep DoubleIterator EMPTY_DOUBLE_ITERATOR concode_elem_sep DoubleList EMPTY_DOUBLE_LIST concode_field_sep DoubleList unmodifiableDoubleList concode_elem_sep DoubleList getEmptyDoubleList concode_elem_sep DoubleIterator singletonDoubleIterator concode_elem_sep DoubleList singletonDoubleList concode_elem_sep DoubleIterator unmodifiableDoubleIterator concode_elem_sep DoubleIterator getEmptyDoubleIterator concode_elem_sep DoubleListIterator singletonDoubleListIterator concode_elem_sep DoubleListIterator getEmptyDoubleListIterator", "code_tokens": ["DoubleListIterator", "function", "(", "DoubleListIterator", "arg0", ")", "{", "if", "(", "null", "==", "arg0", ")", "{", "throw", "new", "NullPointerException", "(", ")", ";", "}", "return", "UnmodifiableDoubleListIterator", ".", "wrap", "(", "arg0", ")", ";", "}"], "nl_tokens": ["returns", "an", "unmodifiable", "version", "of", "the", "given", "non", "-", "null", "doublelistiterator", ".", "concode_field_sep", "DoubleListIterator", "EMPTY_DOUBLE_LIST_ITERATOR", "concode_elem_sep", "DoubleIterator", "EMPTY_DOUBLE_ITERATOR", "concode_elem_sep", "DoubleList", "EMPTY_DOUBLE_LIST", "concode_field_sep", "DoubleList", "unmodifiableDoubleList", "concode_elem_sep", "DoubleList", "getEmptyDoubleList", "concode_elem_sep", "DoubleIterator", "singletonDoubleIterator", "concode_elem_sep", "DoubleList", "singletonDoubleList", "concode_elem_sep", "DoubleIterator", "unmodifiableDoubleIterator", "concode_elem_sep", "DoubleIterator", "getEmptyDoubleIterator", "concode_elem_sep", "DoubleListIterator", "singletonDoubleListIterator", "concode_elem_sep", "DoubleListIterator", "getEmptyDoubleListIterator"]}
{"code": "int function ( V arg0 , V arg1 ) { return arg0 == null ? ( arg1 == null ? 0 : - 1 ) : ( arg1 == null ? 1 : ( ( Comparable ) arg0 ) . compareTo ( arg1 ) ) ; }", "nl": "compare two object about result if v1 > v2 , return 1 if v1 = v2 , return 0 if v1 about rule if v1 is null , v2 is null , then return 0 if v1 is null , v2 is not null , then return -1 if v1 is not null , v2 is null , then return 1 return v1 . comparable #compareto object concode_field_sep PlaceHolder placeHolder concode_field_sep String nullStrToEmpty concode_elem_sep Long[] transformLongArray concode_elem_sep long[] transformLongArray concode_elem_sep Integer[] transformIntArray concode_elem_sep int[] transformIntArray concode_elem_sep boolean isEquals", "code_tokens": ["int", "function", "(", "V", "arg0", ",", "V", "arg1", ")", "{", "return", "arg0", "==", "null", "?", "(", "arg1", "==", "null", "?", "0", ":", "-", "1", ")", ":", "(", "arg1", "==", "null", "?", "1", ":", "(", "(", "Comparable", ")", "arg0", ")", ".", "compareTo", "(", "arg1", ")", ")", ";", "}"], "nl_tokens": ["compare", "two", "object", "about", "result", "if", "v1", ">", "v2", ",", "return", "1", "if", "v1", "=", "v2", ",", "return", "0", "if", "v1", "about", "rule", "if", "v1", "is", "null", ",", "v2", "is", "null", ",", "then", "return", "0", "if", "v1", "is", "null", ",", "v2", "is", "not", "null", ",", "then", "return", "-", "1", "if", "v1", "is", "not", "null", ",", "v2", "is", "null", ",", "then", "return", "1", "return", "v1", ".", "comparable", "#compareto object concode_field_sep PlaceHolder placeHolder concode_field_sep String nullStrToEmpty concode_elem_sep Long[] transformLongArray concode_elem_sep long[] transformLongArray concode_elem_sep Integer[] transformIntArray concode_elem_sep int[] transformIntArray concode_elem_sep boolean isEquals"]}
{"code": "String function ( ) { return ( this . name ) ; }", "nl": "return the name of the command that we will look up anddelegate execution to . concode_field_sep String name concode_elem_sep String catalogName concode_elem_sep boolean optional concode_elem_sep String nameKey concode_field_sep void setName concode_elem_sep String getNameKey concode_elem_sep void setCatalogName concode_elem_sep void setNameKey concode_elem_sep String getCatalogName concode_elem_sep boolean postprocess concode_elem_sep Command getCommand concode_elem_sep boolean isOptional concode_elem_sep boolean execute concode_elem_sep void setOptional", "code_tokens": ["String", "function", "(", ")", "{", "return", "(", "this", ".", "name", ")", ";", "}"], "nl_tokens": ["return", "the", "name", "of", "the", "command", "that", "we", "will", "look", "up", "anddelegate", "execution", "to", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "String", "catalogName", "concode_elem_sep", "boolean", "optional", "concode_elem_sep", "String", "nameKey", "concode_field_sep", "void", "setName", "concode_elem_sep", "String", "getNameKey", "concode_elem_sep", "void", "setCatalogName", "concode_elem_sep", "void", "setNameKey", "concode_elem_sep", "String", "getCatalogName", "concode_elem_sep", "boolean", "postprocess", "concode_elem_sep", "Command", "getCommand", "concode_elem_sep", "boolean", "isOptional", "concode_elem_sep", "boolean", "execute", "concode_elem_sep", "void", "setOptional"]}
{"code": "void function ( String arg0 ) { this . fromKey = arg0 ; }", "nl": "set the context attribute key for the attribute . concode_field_sep String fromKey concode_field_sep boolean execute concode_elem_sep String getFromKey", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "this", ".", "fromKey", "=", "arg0", ";", "}"], "nl_tokens": ["set", "the", "context", "attribute", "key", "for", "the", "attribute", ".", "concode_field_sep", "String", "fromKey", "concode_field_sep", "boolean", "execute", "concode_elem_sep", "String", "getFromKey"]}
{"code": "String function ( String arg0 ) { char [ ] loc0 = arg0 . toCharArray ( ) ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) { char loc2 = loc0 [ loc1 ] ; if ( ! Character . isJavaIdentifierPart ( loc2 ) ) { loc0 [ loc1 ] = '_' ; } } return new String ( loc0 ) ; }", "nl": "cleans str by replacing all characters that are not valid java indentifier parts with '' _ '' . concode_field_sep int dkconfig_compile_timeout concode_elem_sep Logger debug concode_elem_sep FileCompiler fileCompiler concode_elem_sep boolean dkconfig_delete_splitters_on_exit concode_elem_sep String tempdir concode_elem_sep int guid concode_elem_sep String dkconfig_compiler concode_field_sep boolean matchPptRegex concode_elem_sep void compileFiles concode_elem_sep SpinfoFileParser parse_spinfofile concode_elem_sep void loadSplitters concode_elem_sep String createTempDir concode_elem_sep void load_splitters concode_elem_sep boolean matchPpt concode_elem_sep String getFileName concode_elem_sep String getTempDir concode_elem_sep void printAll concode_elem_sep void debugPrintln", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "char", "[", "]", "loc0", "=", "arg0", ".", "toCharArray", "(", ")", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ".", "length", ";", "loc1", "+", "+", ")", "{", "char", "loc2", "=", "loc0", "[", "loc1", "]", ";", "if", "(", "!", "Character", ".", "isJavaIdentifierPart", "(", "loc2", ")", ")", "{", "loc0", "[", "loc1", "]", "=", "'_'", ";", "}", "}", "return", "new", "String", "(", "loc0", ")", ";", "}"], "nl_tokens": ["cleans", "str", "by", "replacing", "all", "characters", "that", "are", "not", "valid", "java", "indentifier", "parts", "with", "''", "_", "''", ".", "concode_field_sep", "int", "dkconfig_compile_timeout", "concode_elem_sep", "Logger", "debug", "concode_elem_sep", "FileCompiler", "fileCompiler", "concode_elem_sep", "boolean", "dkconfig_delete_splitters_on_exit", "concode_elem_sep", "String", "tempdir", "concode_elem_sep", "int", "guid", "concode_elem_sep", "String", "dkconfig_compiler", "concode_field_sep", "boolean", "matchPptRegex", "concode_elem_sep", "void", "compileFiles", "concode_elem_sep", "SpinfoFileParser", "parse_spinfofile", "concode_elem_sep", "void", "loadSplitters", "concode_elem_sep", "String", "createTempDir", "concode_elem_sep", "void", "load_splitters", "concode_elem_sep", "boolean", "matchPpt", "concode_elem_sep", "String", "getFileName", "concode_elem_sep", "String", "getTempDir", "concode_elem_sep", "void", "printAll", "concode_elem_sep", "void", "debugPrintln"]}
{"code": "boolean function ( ) { for ( ColoredSystem < C > loc0 : list ) { if ( ! loc0 . checkInvariant ( ) ) { return false ; } } return true ; }", "nl": "check invariants . check if all colored systems are determined and all invariants are met . concode_field_sep Logger logger concode_elem_sep boolean debug concode_elem_sep List<Condition<C>> conds concode_elem_sep List<ColoredSystem<C>> list concode_elem_sep PolynomialList<GenPolynomial<C>> cgb concode_field_sep List<GenPolynomial<GenPolynomial<C>>> getCGB concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep boolean isDetermined concode_elem_sep String toString concode_elem_sep List<Condition<C>> getConditions", "code_tokens": ["boolean", "function", "(", ")", "{", "for", "(", "ColoredSystem", "<", "C", ">", "loc0", ":", "list", ")", "{", "if", "(", "!", "loc0", ".", "checkInvariant", "(", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl_tokens": ["check", "invariants", ".", "check", "if", "all", "colored", "systems", "are", "determined", "and", "all", "invariants", "are", "met", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "List", "<", "Condition", "<", "C", ">>", "conds", "concode_elem_sep", "List", "<", "ColoredSystem", "<", "C", ">>", "list", "concode_elem_sep", "PolynomialList", "<", "GenPolynomial", "<", "C", ">>", "cgb", "concode_field_sep", "List", "<", "GenPolynomial", "<", "GenPolynomial", "<", "C", ">>", ">", "getCGB", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "boolean", "isDetermined", "concode_elem_sep", "String", "toString", "concode_elem_sep", "List", "<", "Condition", "<", "C", ">>", "getConditions"]}
{"code": "byte [ ] function ( Object arg0 ) { ObjectMapper loc0 = new ObjectMapper ( ) ; loc0 . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ; return loc0 . writeValueAsBytes ( arg0 ) ; }", "nl": "transforms an object into json and returns the json as a byte array . concode_field_sep PlaceHolder placeHolder concode_field_sep placeholderType placeHolder", "code_tokens": ["byte", "[", "]", "function", "(", "Object", "arg0", ")", "{", "ObjectMapper", "loc0", "=", "new", "ObjectMapper", "(", ")", ";", "loc0", ".", "setSerializationInclusion", "(", "JsonInclude", ".", "Include", ".", "NON_NULL", ")", ";", "return", "loc0", ".", "writeValueAsBytes", "(", "arg0", ")", ";", "}"], "nl_tokens": ["transforms", "an", "object", "into", "json", "and", "returns", "the", "json", "as", "a", "byte", "array", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "placeholderType", "placeHolder"]}
{"code": "void function ( File arg0 , String arg1 ) { write ( arg0 , arg1 , false ) ; }", "nl": "writes the text to the given file , overwriting the previous file if it existed . concode_field_sep Logger LOG concode_elem_sep int BUFFER_SIZE concode_field_sep String readFully concode_elem_sep String readFully concode_elem_sep int copy concode_elem_sep int copy concode_elem_sep void copy concode_elem_sep void close", "code_tokens": ["void", "function", "(", "File", "arg0", ",", "String", "arg1", ")", "{", "write", "(", "arg0", ",", "arg1", ",", "false", ")", ";", "}"], "nl_tokens": ["writes", "the", "text", "to", "the", "given", "file", ",", "overwriting", "the", "previous", "file", "if", "it", "existed", ".", "concode_field_sep", "Logger", "LOG", "concode_elem_sep", "int", "BUFFER_SIZE", "concode_field_sep", "String", "readFully", "concode_elem_sep", "String", "readFully", "concode_elem_sep", "int", "copy", "concode_elem_sep", "int", "copy", "concode_elem_sep", "void", "copy", "concode_elem_sep", "void", "close"]}
{"code": "String function ( String arg0 ) { return arg0 . substring ( 1 , arg0 . length ( ) - 1 ) ; }", "nl": "currently the server responds with an json object wrapped in a json array . we need to strip the array . concode_field_sep String POST_VIDEO_DATA concode_elem_sep String GET_PROJECT_DATA concode_elem_sep String GET_VIDEO_DATA concode_elem_sep String host concode_elem_sep String POST_PROJECT_DATA concode_field_sep String downloadVideo concode_elem_sep VideoData downloadVideoData concode_elem_sep String uploadProjectData concode_elem_sep JSONObject uploadVideoData concode_elem_sep void uploadVideo concode_elem_sep ProjectData downloadProjectData concode_elem_sep String executeMethodWithJSONResponse", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "return", "arg0", ".", "substring", "(", "1", ",", "arg0", ".", "length", "(", ")", "-", "1", ")", ";", "}"], "nl_tokens": ["currently", "the", "server", "responds", "with", "an", "json", "object", "wrapped", "in", "a", "json", "array", ".", "we", "need", "to", "strip", "the", "array", ".", "concode_field_sep", "String", "POST_VIDEO_DATA", "concode_elem_sep", "String", "GET_PROJECT_DATA", "concode_elem_sep", "String", "GET_VIDEO_DATA", "concode_elem_sep", "String", "host", "concode_elem_sep", "String", "POST_PROJECT_DATA", "concode_field_sep", "String", "downloadVideo", "concode_elem_sep", "VideoData", "downloadVideoData", "concode_elem_sep", "String", "uploadProjectData", "concode_elem_sep", "JSONObject", "uploadVideoData", "concode_elem_sep", "void", "uploadVideo", "concode_elem_sep", "ProjectData", "downloadProjectData", "concode_elem_sep", "String", "executeMethodWithJSONResponse"]}
{"code": "void function ( int arg0 , int arg1 ) { fTagPosition = new Region ( arg0 , arg1 ) ; }", "nl": "sets the tag position if one is associated with the nls element . concode_field_sep Region fTagPosition concode_elem_sep String TAG_POSTFIX concode_elem_sep AccessorClassReference fAccessorClassReference concode_elem_sep boolean fIsEclipseNLS concode_elem_sep int TAG_PREFIX_LENGTH concode_elem_sep String TAG_PREFIX concode_elem_sep int fIndex concode_elem_sep int TAG_POSTFIX_LENGTH concode_elem_sep String fValue concode_elem_sep Region fPosition concode_field_sep String getValue concode_elem_sep Region getPosition concode_elem_sep boolean isEclipseNLS concode_elem_sep boolean hasTag concode_elem_sep void setAccessorClassReference concode_elem_sep AccessorClassReference getAccessorClassReference concode_elem_sep void setValue concode_elem_sep String createTagText concode_elem_sep String getTagText concode_elem_sep String toString concode_elem_sep Region getTagPosition", "code_tokens": ["void", "function", "(", "int", "arg0", ",", "int", "arg1", ")", "{", "fTagPosition", "=", "new", "Region", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["sets", "the", "tag", "position", "if", "one", "is", "associated", "with", "the", "nls", "element", ".", "concode_field_sep", "Region", "fTagPosition", "concode_elem_sep", "String", "TAG_POSTFIX", "concode_elem_sep", "AccessorClassReference", "fAccessorClassReference", "concode_elem_sep", "boolean", "fIsEclipseNLS", "concode_elem_sep", "int", "TAG_PREFIX_LENGTH", "concode_elem_sep", "String", "TAG_PREFIX", "concode_elem_sep", "int", "fIndex", "concode_elem_sep", "int", "TAG_POSTFIX_LENGTH", "concode_elem_sep", "String", "fValue", "concode_elem_sep", "Region", "fPosition", "concode_field_sep", "String", "getValue", "concode_elem_sep", "Region", "getPosition", "concode_elem_sep", "boolean", "isEclipseNLS", "concode_elem_sep", "boolean", "hasTag", "concode_elem_sep", "void", "setAccessorClassReference", "concode_elem_sep", "AccessorClassReference", "getAccessorClassReference", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "String", "createTagText", "concode_elem_sep", "String", "getTagText", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Region", "getTagPosition"]}
{"code": "Closure function ( ) { return iTrueClosure ; }", "nl": "gets the closure called when true . concode_field_sep Predicate iPredicate concode_elem_sep Closure iFalseClosure concode_elem_sep long serialVersionUID concode_elem_sep Closure iTrueClosure concode_field_sep Predicate getPredicate concode_elem_sep Closure getInstance concode_elem_sep void execute concode_elem_sep Closure getFalseClosure", "code_tokens": ["Closure", "function", "(", ")", "{", "return", "iTrueClosure", ";", "}"], "nl_tokens": ["gets", "the", "closure", "called", "when", "true", ".", "concode_field_sep", "Predicate", "iPredicate", "concode_elem_sep", "Closure", "iFalseClosure", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "Closure", "iTrueClosure", "concode_field_sep", "Predicate", "getPredicate", "concode_elem_sep", "Closure", "getInstance", "concode_elem_sep", "void", "execute", "concode_elem_sep", "Closure", "getFalseClosure"]}
{"code": "HttpRoute function ( ) { return ! this . connected ? null : new HttpRoute ( this . targetHost , this . localAddress , this . proxyChain , this . secure , this . tunnelled , this . layered ) ; }", "nl": "obtains the tracked route . if a route has been tracked , it is #isconnected connected . if not connected , nothing has been tracked so far . concode_field_sep boolean connected concode_elem_sep HttpHost targetHost concode_elem_sep TunnelType tunnelled concode_elem_sep InetAddress localAddress concode_elem_sep HttpHost[] proxyChain concode_elem_sep boolean secure concode_elem_sep LayerType layered concode_field_sep void connectProxy concode_elem_sep HttpHost getProxyHost concode_elem_sep boolean isConnected concode_elem_sep TunnelType getTunnelType concode_elem_sep boolean isSecure concode_elem_sep LayerType getLayerType concode_elem_sep InetAddress getLocalAddress concode_elem_sep void tunnelTarget concode_elem_sep void layerProtocol concode_elem_sep HttpHost getTargetHost concode_elem_sep void connectTarget concode_elem_sep boolean isTunnelled concode_elem_sep int hashCode concode_elem_sep int getHopCount concode_elem_sep boolean isLayered concode_elem_sep boolean equals concode_elem_sep Object clone concode_elem_sep void reset concode_elem_sep String toString concode_elem_sep void tunnelProxy concode_elem_sep HttpHost getHopTarget", "code_tokens": ["HttpRoute", "function", "(", ")", "{", "return", "!", "this", ".", "connected", "?", "null", ":", "new", "HttpRoute", "(", "this", ".", "targetHost", ",", "this", ".", "localAddress", ",", "this", ".", "proxyChain", ",", "this", ".", "secure", ",", "this", ".", "tunnelled", ",", "this", ".", "layered", ")", ";", "}"], "nl_tokens": ["obtains", "the", "tracked", "route", ".", "if", "a", "route", "has", "been", "tracked", ",", "it", "is", "#isconnected connected . if not connected , nothing has been tracked so far . concode_field_sep boolean connected concode_elem_sep HttpHost targetHost concode_elem_sep TunnelType tunnelled concode_elem_sep InetAddress localAddress concode_elem_sep HttpHost[] proxyChain concode_elem_sep boolean secure concode_elem_sep LayerType layered concode_field_sep void connectProxy concode_elem_sep HttpHost getProxyHost concode_elem_sep boolean isConnected concode_elem_sep TunnelType getTunnelType concode_elem_sep boolean isSecure concode_elem_sep LayerType getLayerType concode_elem_sep InetAddress getLocalAddress concode_elem_sep void tunnelTarget concode_elem_sep void layerProtocol concode_elem_sep HttpHost getTargetHost concode_elem_sep void connectTarget concode_elem_sep boolean isTunnelled concode_elem_sep int hashCode concode_elem_sep int getHopCount concode_elem_sep boolean isLayered concode_elem_sep boolean equals concode_elem_sep Object clone concode_elem_sep void reset concode_elem_sep String toString concode_elem_sep void tunnelProxy concode_elem_sep HttpHost getHopTarget"]}
{"code": "void function ( final int arg0 ) { if ( constantValue != null ) { constantValue . setConstantValueIndex ( arg0 ) ; } }", "nl": "set the index into the constant pool of the field 's constant value . concode_field_sep ClassInfo classInfo concode_elem_sep int name concode_elem_sep int modifiers concode_elem_sep int type concode_elem_sep Attribute[] attrs concode_elem_sep ConstantValue constantValue concode_field_sep int typeIndex concode_elem_sep int nameIndex concode_elem_sep void setNameIndex concode_elem_sep String toString concode_elem_sep void setTypeIndex concode_elem_sep void setModifiers concode_elem_sep int modifiers concode_elem_sep void write concode_elem_sep ClassInfo declaringClass concode_elem_sep int constantValue", "code_tokens": ["void", "function", "(", "final", "int", "arg0", ")", "{", "if", "(", "constantValue", "!=", "null", ")", "{", "constantValue", ".", "setConstantValueIndex", "(", "arg0", ")", ";", "}", "}"], "nl_tokens": ["set", "the", "index", "into", "the", "constant", "pool", "of", "the", "field", "'", "s", "constant", "value", ".", "concode_field_sep", "ClassInfo", "classInfo", "concode_elem_sep", "int", "name", "concode_elem_sep", "int", "modifiers", "concode_elem_sep", "int", "type", "concode_elem_sep", "Attribute", "[", "]", "attrs", "concode_elem_sep", "ConstantValue", "constantValue", "concode_field_sep", "int", "typeIndex", "concode_elem_sep", "int", "nameIndex", "concode_elem_sep", "void", "setNameIndex", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "setTypeIndex", "concode_elem_sep", "void", "setModifiers", "concode_elem_sep", "int", "modifiers", "concode_elem_sep", "void", "write", "concode_elem_sep", "ClassInfo", "declaringClass", "concode_elem_sep", "int", "constantValue"]}
{"code": "String function ( ) { return baseZNode ; }", "nl": "get base znode . concode_field_sep String ENCRYPTION_KEY_NO_ZNODE_NAME concode_elem_sep String KEY_VERSION_ZNODE_NAME concode_elem_sep String PRINCIPAL_NAME_ZNODE_NAME concode_elem_sep String baseZNode concode_elem_sep String CREATED_TIME_ZNODE_NAME concode_elem_sep String KDC_FLAGS_ZNODE_NAME concode_elem_sep String DISABLED_ZNODE_NAME concode_elem_sep String KEYS_ZNODE_NAME concode_elem_sep String IDENTITIES_ZNODE_NAME concode_elem_sep String KEY_ZNODE_NAME concode_elem_sep String EXPIRE_TIME_ZNODE_NAME concode_elem_sep String KEY_TYPE_ZNODE_NAME concode_elem_sep String LOCKED_ZNODE_NAME concode_field_sep String getEncryptionKeyTypeZNode concode_elem_sep String getDisabledZNode concode_elem_sep String getKeyTypeZNode concode_elem_sep String getEncryptionKeyNoZNode concode_elem_sep String getEncryptionKeyZNode concode_elem_sep String getLockedZNode concode_elem_sep String getCreatedTimeZNode concode_elem_sep String getExpireTimeZNode concode_elem_sep String getKeyVersionZNode concode_elem_sep String getKeysZNode concode_elem_sep String getIdentitiesZNode concode_elem_sep List<String> getIdentityNames concode_elem_sep String getPrincipalNameZnode concode_elem_sep String getIndentityZNode concode_elem_sep String getKdcFlagsZNode", "code_tokens": ["String", "function", "(", ")", "{", "return", "baseZNode", ";", "}"], "nl_tokens": ["get", "base", "znode", ".", "concode_field_sep", "String", "ENCRYPTION_KEY_NO_ZNODE_NAME", "concode_elem_sep", "String", "KEY_VERSION_ZNODE_NAME", "concode_elem_sep", "String", "PRINCIPAL_NAME_ZNODE_NAME", "concode_elem_sep", "String", "baseZNode", "concode_elem_sep", "String", "CREATED_TIME_ZNODE_NAME", "concode_elem_sep", "String", "KDC_FLAGS_ZNODE_NAME", "concode_elem_sep", "String", "DISABLED_ZNODE_NAME", "concode_elem_sep", "String", "KEYS_ZNODE_NAME", "concode_elem_sep", "String", "IDENTITIES_ZNODE_NAME", "concode_elem_sep", "String", "KEY_ZNODE_NAME", "concode_elem_sep", "String", "EXPIRE_TIME_ZNODE_NAME", "concode_elem_sep", "String", "KEY_TYPE_ZNODE_NAME", "concode_elem_sep", "String", "LOCKED_ZNODE_NAME", "concode_field_sep", "String", "getEncryptionKeyTypeZNode", "concode_elem_sep", "String", "getDisabledZNode", "concode_elem_sep", "String", "getKeyTypeZNode", "concode_elem_sep", "String", "getEncryptionKeyNoZNode", "concode_elem_sep", "String", "getEncryptionKeyZNode", "concode_elem_sep", "String", "getLockedZNode", "concode_elem_sep", "String", "getCreatedTimeZNode", "concode_elem_sep", "String", "getExpireTimeZNode", "concode_elem_sep", "String", "getKeyVersionZNode", "concode_elem_sep", "String", "getKeysZNode", "concode_elem_sep", "String", "getIdentitiesZNode", "concode_elem_sep", "List", "<", "String", ">", "getIdentityNames", "concode_elem_sep", "String", "getPrincipalNameZnode", "concode_elem_sep", "String", "getIndentityZNode", "concode_elem_sep", "String", "getKdcFlagsZNode"]}
{"code": "Region function ( ) { return fTagPosition ; }", "nl": "returns the tag position for this element . the method can return null . in this case no tag has been found for this nls element . concode_field_sep Region fTagPosition concode_elem_sep String TAG_POSTFIX concode_elem_sep AccessorClassReference fAccessorClassReference concode_elem_sep boolean fIsEclipseNLS concode_elem_sep int TAG_PREFIX_LENGTH concode_elem_sep String TAG_PREFIX concode_elem_sep int fIndex concode_elem_sep int TAG_POSTFIX_LENGTH concode_elem_sep String fValue concode_elem_sep Region fPosition concode_field_sep String getValue concode_elem_sep Region getPosition concode_elem_sep boolean isEclipseNLS concode_elem_sep boolean hasTag concode_elem_sep void setAccessorClassReference concode_elem_sep AccessorClassReference getAccessorClassReference concode_elem_sep void setValue concode_elem_sep void setTagPosition concode_elem_sep String createTagText concode_elem_sep String getTagText concode_elem_sep String toString", "code_tokens": ["Region", "function", "(", ")", "{", "return", "fTagPosition", ";", "}"], "nl_tokens": ["returns", "the", "tag", "position", "for", "this", "element", ".", "the", "method", "can", "return", "null", ".", "in", "this", "case", "no", "tag", "has", "been", "found", "for", "this", "nls", "element", ".", "concode_field_sep", "Region", "fTagPosition", "concode_elem_sep", "String", "TAG_POSTFIX", "concode_elem_sep", "AccessorClassReference", "fAccessorClassReference", "concode_elem_sep", "boolean", "fIsEclipseNLS", "concode_elem_sep", "int", "TAG_PREFIX_LENGTH", "concode_elem_sep", "String", "TAG_PREFIX", "concode_elem_sep", "int", "fIndex", "concode_elem_sep", "int", "TAG_POSTFIX_LENGTH", "concode_elem_sep", "String", "fValue", "concode_elem_sep", "Region", "fPosition", "concode_field_sep", "String", "getValue", "concode_elem_sep", "Region", "getPosition", "concode_elem_sep", "boolean", "isEclipseNLS", "concode_elem_sep", "boolean", "hasTag", "concode_elem_sep", "void", "setAccessorClassReference", "concode_elem_sep", "AccessorClassReference", "getAccessorClassReference", "concode_elem_sep", "void", "setValue", "concode_elem_sep", "void", "setTagPosition", "concode_elem_sep", "String", "createTagText", "concode_elem_sep", "String", "getTagText", "concode_elem_sep", "String", "toString"]}
{"code": "FigureReference function ( IFigure arg0 ) { return lazy ( arg0 ) ; }", "nl": "create a figure info instance . note that by default this info object is lazily populated . if you need an eagerly populated info object , use the concode_field_sep IFigure _figure concode_elem_sep FigureInfoState _state concode_elem_sep IWidgetLocator _locatorDelegate concode_elem_sep ClassReference _class concode_field_sep Object getAdapter concode_elem_sep IFigureReference getParent concode_elem_sep FigureReference eager concode_elem_sep IFigure getWidget concode_elem_sep FigureReference lazy concode_elem_sep EditPart getEditPart concode_elem_sep IFigure getFigure concode_elem_sep IWidgetLocator[] findAll concode_elem_sep boolean matches concode_elem_sep void accept concode_elem_sep IFigureReference[] getChildren concode_elem_sep FigureInfoState getState concode_elem_sep ClassReference getType concode_elem_sep IConnectionInfo[] getConnections concode_elem_sep IWidgetLocator getLocatorDelegate", "code_tokens": ["FigureReference", "function", "(", "IFigure", "arg0", ")", "{", "return", "lazy", "(", "arg0", ")", ";", "}"], "nl_tokens": ["create", "a", "figure", "info", "instance", ".", "note", "that", "by", "default", "this", "info", "object", "is", "lazily", "populated", ".", "if", "you", "need", "an", "eagerly", "populated", "info", "object", ",", "use", "the", "concode_field_sep", "IFigure", "_figure", "concode_elem_sep", "FigureInfoState", "_state", "concode_elem_sep", "IWidgetLocator", "_locatorDelegate", "concode_elem_sep", "ClassReference", "_class", "concode_field_sep", "Object", "getAdapter", "concode_elem_sep", "IFigureReference", "getParent", "concode_elem_sep", "FigureReference", "eager", "concode_elem_sep", "IFigure", "getWidget", "concode_elem_sep", "FigureReference", "lazy", "concode_elem_sep", "EditPart", "getEditPart", "concode_elem_sep", "IFigure", "getFigure", "concode_elem_sep", "IWidgetLocator", "[", "]", "findAll", "concode_elem_sep", "boolean", "matches", "concode_elem_sep", "void", "accept", "concode_elem_sep", "IFigureReference", "[", "]", "getChildren", "concode_elem_sep", "FigureInfoState", "getState", "concode_elem_sep", "ClassReference", "getType", "concode_elem_sep", "IConnectionInfo", "[", "]", "getConnections", "concode_elem_sep", "IWidgetLocator", "getLocatorDelegate"]}
{"code": "UnivPowerSeries < C > function ( int arg0 , Random arg1 ) { return random ( arg0 , 0.7f , arg1 ) ; }", "nl": "generate a random power series with d = 0.7 . concode_field_sep UnivPowerSeries<C> ZERO concode_elem_sep String DEFAULT_NAME concode_elem_sep int truncate concode_elem_sep String var concode_elem_sep int DEFAULT_TRUNCATE concode_elem_sep UnivPowerSeries<C> ONE concode_elem_sep RingFactory<C> coFac concode_elem_sep Random random concode_field_sep UnivPowerSeries<C> getTAN concode_elem_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep UnivPowerSeries<C> getSIN concode_elem_sep UnivPowerSeries<C> parse concode_elem_sep UnivPowerSeries<C> parse concode_elem_sep UnivPowerSeries<C> fromPolynomial concode_elem_sep java.math.BigInteger characteristic concode_elem_sep UnivPowerSeries<C> getEXP concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep UnivPowerSeries<C> getONE concode_elem_sep UnivPowerSeries<C> getZERO concode_elem_sep UnivPowerSeries<C> getCOS concode_elem_sep UnivPowerSeries<C> fromInteger concode_elem_sep UnivPowerSeries<C> fromInteger concode_elem_sep String toString concode_elem_sep boolean isAssociative concode_elem_sep UnivPowerSeries<C> copy concode_elem_sep UnivPowerSeries<C> fixPoint", "code_tokens": ["UnivPowerSeries", "<", "C", ">", "function", "(", "int", "arg0", ",", "Random", "arg1", ")", "{", "return", "random", "(", "arg0", ",", "0.7", "f", ",", "arg1", ")", ";", "}"], "nl_tokens": ["generate", "a", "random", "power", "series", "with", "d", "=", "0.7", ".", "concode_field_sep", "UnivPowerSeries", "<", "C", ">", "ZERO", "concode_elem_sep", "String", "DEFAULT_NAME", "concode_elem_sep", "int", "truncate", "concode_elem_sep", "String", "var", "concode_elem_sep", "int", "DEFAULT_TRUNCATE", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "ONE", "concode_elem_sep", "RingFactory", "<", "C", ">", "coFac", "concode_elem_sep", "Random", "random", "concode_field_sep", "UnivPowerSeries", "<", "C", ">", "getTAN", "concode_elem_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "getSIN", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "parse", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "parse", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "fromPolynomial", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "getEXP", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "getONE", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "getZERO", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "getCOS", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "fromInteger", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "fromInteger", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "copy", "concode_elem_sep", "UnivPowerSeries", "<", "C", ">", "fixPoint"]}
{"code": "boolean function ( int arg0 , LocalAssignment arg1 ) { PortNAssignment loc0 = new PortNAssignment ( arg0 , arg1 ) ; boolean loc1 = _references . remove ( loc0 ) ; if ( loc1 && _references . isEmpty ( ) ) { _isDone = true ; } return loc1 ; }", "nl": "release a port from the reference count , and update isdone if all is done . concode_field_sep Logger LOG concode_elem_sep LocalAssignment _assignment concode_elem_sep Future<Void> _pending concode_elem_sep boolean _isDone concode_elem_sep Set<PortNAssignment> _references concode_elem_sep Future<T> _wrapped concode_elem_sep int _port concode_field_sep boolean cancel concode_elem_sep boolean isCancelled concode_elem_sep int hashCode concode_elem_sep T get concode_elem_sep T get concode_elem_sep boolean equals concode_elem_sep Future<Void> reserve concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep boolean isDone concode_elem_sep boolean isDone", "code_tokens": ["boolean", "function", "(", "int", "arg0", ",", "LocalAssignment", "arg1", ")", "{", "PortNAssignment", "loc0", "=", "new", "PortNAssignment", "(", "arg0", ",", "arg1", ")", ";", "boolean", "loc1", "=", "_references", ".", "remove", "(", "loc0", ")", ";", "if", "(", "loc1", "&", "&", "_references", ".", "isEmpty", "(", ")", ")", "{", "_isDone", "=", "true", ";", "}", "return", "loc1", ";", "}"], "nl_tokens": ["release", "a", "port", "from", "the", "reference", "count", ",", "and", "update", "isdone", "if", "all", "is", "done", ".", "concode_field_sep", "Logger", "LOG", "concode_elem_sep", "LocalAssignment", "_assignment", "concode_elem_sep", "Future", "<", "Void", ">", "_pending", "concode_elem_sep", "boolean", "_isDone", "concode_elem_sep", "Set", "<", "PortNAssignment", ">", "_references", "concode_elem_sep", "Future", "<", "T", ">", "_wrapped", "concode_elem_sep", "int", "_port", "concode_field_sep", "boolean", "cancel", "concode_elem_sep", "boolean", "isCancelled", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "T", "get", "concode_elem_sep", "T", "get", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Future", "<", "Void", ">", "reserve", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "isDone", "concode_elem_sep", "boolean", "isDone"]}
{"code": "void function ( ) { Assert . assertTrue ( d . isStackOwner ( ) ) ; }", "nl": "verifies if div is a stack owner . should be true . concode_field_sep List<Element> currentContent concode_elem_sep Div d concode_elem_sep WorkerContextImpl workerContextImpl concode_field_sep void init concode_elem_sep void verifyNumberOfParagraphs concode_elem_sep void verifyIfPdfDiv concode_elem_sep void verifyContent", "code_tokens": ["void", "function", "(", ")", "{", "Assert", ".", "assertTrue", "(", "d", ".", "isStackOwner", "(", ")", ")", ";", "}"], "nl_tokens": ["verifies", "if", "div", "is", "a", "stack", "owner", ".", "should", "be", "true", ".", "concode_field_sep", "List", "<", "Element", ">", "currentContent", "concode_elem_sep", "Div", "d", "concode_elem_sep", "WorkerContextImpl", "workerContextImpl", "concode_field_sep", "void", "init", "concode_elem_sep", "void", "verifyNumberOfParagraphs", "concode_elem_sep", "void", "verifyIfPdfDiv", "concode_elem_sep", "void", "verifyContent"]}
{"code": "void function ( double arg0 , double arg1 ) { assert ( arg0 <= arg1 ) ; this . leftBound = arg0 ; this . rightBound = arg1 ; fireBoundsChangeEvent ( arg0 , arg1 ) ; }", "nl": "sets the bounds for this timeline . a timeline must have sensible bounds . left side must be < = right side . concode_field_sep List<TimeLineGraph> graphs concode_elem_sep boolean timerActive concode_elem_sep double rightBound concode_elem_sep boolean isDirty concode_elem_sep double leftBound concode_elem_sep double mostRecentDomainValue concode_elem_sep List<DomainObserver> domainObservers concode_elem_sep GraphCalloutModel graphCalloutModel concode_elem_sep boolean showStreaming concode_elem_sep Timer t concode_elem_sep List<WindowBoundsObserver> windowObservers concode_elem_sep boolean pinLowerBound concode_elem_sep UpdateTicker updateController concode_field_sep void addDomainObserver concode_elem_sep void onModelDataRefreshTick concode_elem_sep void fireBoundsChangeEvent concode_elem_sep double getLeftBound concode_elem_sep void restartUpdateTimer concode_elem_sep void addWindowBoundsObserver concode_elem_sep double getRightBound concode_elem_sep void refresh concode_elem_sep double getMostRecentDomainValue concode_elem_sep void addGraph concode_elem_sep void setStreaming concode_elem_sep ArrayList<TimeLineGraph> getGraphs concode_elem_sep boolean isStreaming concode_elem_sep GraphCalloutModel getGraphCalloutModel concode_elem_sep void removeWindowBoundsObserver concode_elem_sep void onWindowBoundsChange concode_elem_sep void removeDomainObserver concode_elem_sep int getGraphCount concode_elem_sep void onDomainChange concode_elem_sep void toggleFixBounds concode_elem_sep void timerDispatch", "code_tokens": ["void", "function", "(", "double", "arg0", ",", "double", "arg1", ")", "{", "assert", "(", "arg0", "<=", "arg1", ")", ";", "this", ".", "leftBound", "=", "arg0", ";", "this", ".", "rightBound", "=", "arg1", ";", "fireBoundsChangeEvent", "(", "arg0", ",", "arg1", ")", ";", "}"], "nl_tokens": ["sets", "the", "bounds", "for", "this", "timeline", ".", "a", "timeline", "must", "have", "sensible", "bounds", ".", "left", "side", "must", "be", "<", "=", "right", "side", ".", "concode_field_sep", "List", "<", "TimeLineGraph", ">", "graphs", "concode_elem_sep", "boolean", "timerActive", "concode_elem_sep", "double", "rightBound", "concode_elem_sep", "boolean", "isDirty", "concode_elem_sep", "double", "leftBound", "concode_elem_sep", "double", "mostRecentDomainValue", "concode_elem_sep", "List", "<", "DomainObserver", ">", "domainObservers", "concode_elem_sep", "GraphCalloutModel", "graphCalloutModel", "concode_elem_sep", "boolean", "showStreaming", "concode_elem_sep", "Timer", "t", "concode_elem_sep", "List", "<", "WindowBoundsObserver", ">", "windowObservers", "concode_elem_sep", "boolean", "pinLowerBound", "concode_elem_sep", "UpdateTicker", "updateController", "concode_field_sep", "void", "addDomainObserver", "concode_elem_sep", "void", "onModelDataRefreshTick", "concode_elem_sep", "void", "fireBoundsChangeEvent", "concode_elem_sep", "double", "getLeftBound", "concode_elem_sep", "void", "restartUpdateTimer", "concode_elem_sep", "void", "addWindowBoundsObserver", "concode_elem_sep", "double", "getRightBound", "concode_elem_sep", "void", "refresh", "concode_elem_sep", "double", "getMostRecentDomainValue", "concode_elem_sep", "void", "addGraph", "concode_elem_sep", "void", "setStreaming", "concode_elem_sep", "ArrayList", "<", "TimeLineGraph", ">", "getGraphs", "concode_elem_sep", "boolean", "isStreaming", "concode_elem_sep", "GraphCalloutModel", "getGraphCalloutModel", "concode_elem_sep", "void", "removeWindowBoundsObserver", "concode_elem_sep", "void", "onWindowBoundsChange", "concode_elem_sep", "void", "removeDomainObserver", "concode_elem_sep", "int", "getGraphCount", "concode_elem_sep", "void", "onDomainChange", "concode_elem_sep", "void", "toggleFixBounds", "concode_elem_sep", "void", "timerDispatch"]}
{"code": "EventSequenceCommandFactory function ( ) { return new EventSequenceCommandFactory ( getSequence ( ) ) ; }", "nl": "override to inject . concode_field_sep ISemanticEvent[] _selection concode_elem_sep IEventSequenceCommandFactory _commandFactory concode_elem_sep ISemanticEvent[] EMPTY_SELECTION concode_elem_sep List _listeners concode_elem_sep IEventSequence _sequence concode_elem_sep ActionProvider _actionProvider concode_field_sep List getListeners concode_elem_sep void select concode_elem_sep void sessionStarted concode_elem_sep IAction[] getActions concode_elem_sep void clickDelete concode_elem_sep IEventSequence remove concode_elem_sep ICommandStack getCommandStack concode_elem_sep ISemanticEvent[] getEvents concode_elem_sep boolean canUndo concode_elem_sep SequenceCommandLabelProvider createSequenceLabelProvider concode_elem_sep IEventSequence removeAll concode_elem_sep IEventSequence removeAll concode_elem_sep void undo concode_elem_sep void addListener concode_elem_sep IEventGroup group concode_elem_sep IEventSequence add concode_elem_sep IEventSequence add concode_elem_sep void sessionEnded concode_elem_sep boolean isEmpty concode_elem_sep boolean hasSelection concode_elem_sep ActionProvider getActionProvider concode_elem_sep void removeListener concode_elem_sep IEventSequenceCommandFactory getCommandFactory concode_elem_sep ActionProvider createActionProvider concode_elem_sep ISemanticEvent[] getSelection concode_elem_sep void setSelection concode_elem_sep IEventSequence addAll concode_elem_sep IEventSequence getSequence concode_elem_sep void exec concode_elem_sep void changed", "code_tokens": ["EventSequenceCommandFactory", "function", "(", ")", "{", "return", "new", "EventSequenceCommandFactory", "(", "getSequence", "(", ")", ")", ";", "}"], "nl_tokens": ["override", "to", "inject", ".", "concode_field_sep", "ISemanticEvent", "[", "]", "_selection", "concode_elem_sep", "IEventSequenceCommandFactory", "_commandFactory", "concode_elem_sep", "ISemanticEvent", "[", "]", "EMPTY_SELECTION", "concode_elem_sep", "List", "_listeners", "concode_elem_sep", "IEventSequence", "_sequence", "concode_elem_sep", "ActionProvider", "_actionProvider", "concode_field_sep", "List", "getListeners", "concode_elem_sep", "void", "select", "concode_elem_sep", "void", "sessionStarted", "concode_elem_sep", "IAction", "[", "]", "getActions", "concode_elem_sep", "void", "clickDelete", "concode_elem_sep", "IEventSequence", "remove", "concode_elem_sep", "ICommandStack", "getCommandStack", "concode_elem_sep", "ISemanticEvent", "[", "]", "getEvents", "concode_elem_sep", "boolean", "canUndo", "concode_elem_sep", "SequenceCommandLabelProvider", "createSequenceLabelProvider", "concode_elem_sep", "IEventSequence", "removeAll", "concode_elem_sep", "IEventSequence", "removeAll", "concode_elem_sep", "void", "undo", "concode_elem_sep", "void", "addListener", "concode_elem_sep", "IEventGroup", "group", "concode_elem_sep", "IEventSequence", "add", "concode_elem_sep", "IEventSequence", "add", "concode_elem_sep", "void", "sessionEnded", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "hasSelection", "concode_elem_sep", "ActionProvider", "getActionProvider", "concode_elem_sep", "void", "removeListener", "concode_elem_sep", "IEventSequenceCommandFactory", "getCommandFactory", "concode_elem_sep", "ActionProvider", "createActionProvider", "concode_elem_sep", "ISemanticEvent", "[", "]", "getSelection", "concode_elem_sep", "void", "setSelection", "concode_elem_sep", "IEventSequence", "addAll", "concode_elem_sep", "IEventSequence", "getSequence", "concode_elem_sep", "void", "exec", "concode_elem_sep", "void", "changed"]}
{"code": "void function ( Set < IResource > arg0 ) { this . resources = arg0 ; }", "nl": "sets the replicated resources of the neighbor to the given set one-hop replication concode_field_sep TokenBucket queryTokens concode_elem_sep Set<IResource> resources concode_elem_sep ISchedQueue<EnqueuedQuery> relayQueue concode_elem_sep int lastDegreeObserved concode_elem_sep TimeoutSet<Integer> queryUIDsRelayed concode_field_sep ISchedQueue<EnqueuedQuery> getRelayQueue concode_elem_sep TokenBucket getQueryTokenBucket concode_elem_sep void markQueryAsRelayed concode_elem_sep Set<IResource> getResources concode_elem_sep void setLastDegreeObserved concode_elem_sep boolean removeQueryFromCache concode_elem_sep void setRelayQueue concode_elem_sep String toString concode_elem_sep boolean hasRelayedQuery concode_elem_sep int getLastDegreeObserved", "code_tokens": ["void", "function", "(", "Set", "<", "IResource", ">", "arg0", ")", "{", "this", ".", "resources", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "replicated", "resources", "of", "the", "neighbor", "to", "the", "given", "set", "one", "-", "hop", "replication", "concode_field_sep", "TokenBucket", "queryTokens", "concode_elem_sep", "Set", "<", "IResource", ">", "resources", "concode_elem_sep", "ISchedQueue", "<", "EnqueuedQuery", ">", "relayQueue", "concode_elem_sep", "int", "lastDegreeObserved", "concode_elem_sep", "TimeoutSet", "<", "Integer", ">", "queryUIDsRelayed", "concode_field_sep", "ISchedQueue", "<", "EnqueuedQuery", ">", "getRelayQueue", "concode_elem_sep", "TokenBucket", "getQueryTokenBucket", "concode_elem_sep", "void", "markQueryAsRelayed", "concode_elem_sep", "Set", "<", "IResource", ">", "getResources", "concode_elem_sep", "void", "setLastDegreeObserved", "concode_elem_sep", "boolean", "removeQueryFromCache", "concode_elem_sep", "void", "setRelayQueue", "concode_elem_sep", "String", "toString", "concode_elem_sep", "boolean", "hasRelayedQuery", "concode_elem_sep", "int", "getLastDegreeObserved"]}
{"code": "QueryContextInformation function ( final String arg0 ) { final long loc0 = System . currentTimeMillis ( ) ; final int loc1 = DateUtility . getIndex ( System . getProperty ( \"srini_string\" ) ) ; return QueryContextInformation . newBuilder ( ) . setDefaultSchemaName ( arg0 ) . setQueryStartTime ( loc0 ) . setTimeZone ( loc1 ) . build ( ) ; }", "nl": "create querycontextinformation with given defaultschemaname . rest of the members of the querycontextinformation is derived from the current state of the process . concode_field_sep PlaceHolder placeHolder concode_field_sep String getFileNameForQueryFragment concode_elem_sep String getDrillVersion", "code_tokens": ["QueryContextInformation", "function", "(", "final", "String", "arg0", ")", "{", "final", "long", "loc0", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "final", "int", "loc1", "=", "DateUtility", ".", "getIndex", "(", "System", ".", "getProperty", "(", "\"srini_string\"", ")", ")", ";", "return", "QueryContextInformation", ".", "newBuilder", "(", ")", ".", "setDefaultSchemaName", "(", "arg0", ")", ".", "setQueryStartTime", "(", "loc0", ")", ".", "setTimeZone", "(", "loc1", ")", ".", "build", "(", ")", ";", "}"], "nl_tokens": ["create", "querycontextinformation", "with", "given", "defaultschemaname", ".", "rest", "of", "the", "members", "of", "the", "querycontextinformation", "is", "derived", "from", "the", "current", "state", "of", "the", "process", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "getFileNameForQueryFragment", "concode_elem_sep", "String", "getDrillVersion"]}
{"code": "int function ( String arg0 ) { File loc0 = new File ( arg0 ) ; if ( ! loc0 . exists ( ) || ! loc0 . isDirectory ( ) ) return 0 ; File loc1 [ ] = loc0 . listFiles ( ) ; if ( loc1 == null ) return 0 ; int loc2 = 0 ; for ( int loc3 = 0 ; loc3 < loc1 . length ; ++ loc3 ) { loc2 += insertFile ( loc1 [ loc3 ] ) ; } return loc2 ; }", "nl": "inserts all the fonts recognized by itext in the directory into the map . the encoding will be basefont.cp1252 but can be changed later . concode_field_sep HashMap<String,String> aliases concode_elem_sep String fontName concode_elem_sep byte pfb[] concode_elem_sep HashMap<String,BaseFontParameters> mapper concode_elem_sep boolean cached concode_elem_sep byte ttfAfm[] concode_elem_sep String encoding concode_elem_sep boolean embedded concode_field_sep void putName concode_elem_sep HashMap<String,String> getAliases concode_elem_sep BaseFont awtToPdf concode_elem_sep void putAlias concode_elem_sep Font pdfToAwt concode_elem_sep int insertFile concode_elem_sep HashMap<String,BaseFontParameters> getMapper concode_elem_sep BaseFontParameters getBaseFontParameters concode_elem_sep void insertNames", "code_tokens": ["int", "function", "(", "String", "arg0", ")", "{", "File", "loc0", "=", "new", "File", "(", "arg0", ")", ";", "if", "(", "!", "loc0", ".", "exists", "(", ")", "|", "|", "!", "loc0", ".", "isDirectory", "(", ")", ")", "return", "0", ";", "File", "loc1", "[", "]", "=", "loc0", ".", "listFiles", "(", ")", ";", "if", "(", "loc1", "==", "null", ")", "return", "0", ";", "int", "loc2", "=", "0", ";", "for", "(", "int", "loc3", "=", "0", ";", "loc3", "<", "loc1", ".", "length", ";", "+", "+", "loc3", ")", "{", "loc2", "+=", "insertFile", "(", "loc1", "[", "loc3", "]", ")", ";", "}", "return", "loc2", ";", "}"], "nl_tokens": ["inserts", "all", "the", "fonts", "recognized", "by", "itext", "in", "the", "directory", "into", "the", "map", ".", "the", "encoding", "will", "be", "basefont", ".", "cp1252", "but", "can", "be", "changed", "later", ".", "concode_field_sep", "HashMap", "<", "String", ",", "String", ">", "aliases", "concode_elem_sep", "String", "fontName", "concode_elem_sep", "byte", "pfb", "[", "]", "concode_elem_sep", "HashMap", "<", "String", ",", "BaseFontParameters", ">", "mapper", "concode_elem_sep", "boolean", "cached", "concode_elem_sep", "byte", "ttfAfm", "[", "]", "concode_elem_sep", "String", "encoding", "concode_elem_sep", "boolean", "embedded", "concode_field_sep", "void", "putName", "concode_elem_sep", "HashMap", "<", "String", ",", "String", ">", "getAliases", "concode_elem_sep", "BaseFont", "awtToPdf", "concode_elem_sep", "void", "putAlias", "concode_elem_sep", "Font", "pdfToAwt", "concode_elem_sep", "int", "insertFile", "concode_elem_sep", "HashMap", "<", "String", ",", "BaseFontParameters", ">", "getMapper", "concode_elem_sep", "BaseFontParameters", "getBaseFontParameters", "concode_elem_sep", "void", "insertNames"]}
{"code": "InputSource function ( ) { return inputSource ; }", "nl": "get the sax inputsource to be used for the source . concode_field_sep String FEATURE concode_elem_sep XMLReader reader concode_elem_sep InputSource inputSource concode_field_sep String getSystemId concode_elem_sep InputSource sourceToInputSource concode_elem_sep void setSystemId concode_elem_sep void setInputSource concode_elem_sep void setXMLReader concode_elem_sep XMLReader getXMLReader", "code_tokens": ["InputSource", "function", "(", ")", "{", "return", "inputSource", ";", "}"], "nl_tokens": ["get", "the", "sax", "inputsource", "to", "be", "used", "for", "the", "source", ".", "concode_field_sep", "String", "FEATURE", "concode_elem_sep", "XMLReader", "reader", "concode_elem_sep", "InputSource", "inputSource", "concode_field_sep", "String", "getSystemId", "concode_elem_sep", "InputSource", "sourceToInputSource", "concode_elem_sep", "void", "setSystemId", "concode_elem_sep", "void", "setInputSource", "concode_elem_sep", "void", "setXMLReader", "concode_elem_sep", "XMLReader", "getXMLReader"]}
{"code": "Map function ( ) { loadMaps ( ) ; return characterMap ; }", "nl": "load a map for the current locale to translate a character into a corresponding virtual keycode-based keystroke . concode_field_sep KeyStrokeMapProvider generator concode_elem_sep Map chars concode_elem_sep boolean loaded concode_elem_sep Map characterMap concode_elem_sep Map keyStrokeMap concode_elem_sep Map keycodes concode_field_sep Map generateKeyStrokeMappings concode_elem_sep void loadMaps concode_elem_sep Map getKeyStrokeMap concode_elem_sep Map getCharacterMap concode_elem_sep InputStream findMap concode_elem_sep void main concode_elem_sep KeyStroke getKeyStroke concode_elem_sep String[] getMapNames concode_elem_sep String[] getMapDescriptions concode_elem_sep String getOSType concode_elem_sep char getChar concode_elem_sep String getFilename concode_elem_sep Map generateCharacterMappings concode_elem_sep KeyStrokeMapProvider getGenerator concode_elem_sep Map loadKeyStrokeMap concode_elem_sep String[] getMapStrings", "code_tokens": ["Map", "function", "(", ")", "{", "loadMaps", "(", ")", ";", "return", "characterMap", ";", "}"], "nl_tokens": ["load", "a", "map", "for", "the", "current", "locale", "to", "translate", "a", "character", "into", "a", "corresponding", "virtual", "keycode", "-", "based", "keystroke", ".", "concode_field_sep", "KeyStrokeMapProvider", "generator", "concode_elem_sep", "Map", "chars", "concode_elem_sep", "boolean", "loaded", "concode_elem_sep", "Map", "characterMap", "concode_elem_sep", "Map", "keyStrokeMap", "concode_elem_sep", "Map", "keycodes", "concode_field_sep", "Map", "generateKeyStrokeMappings", "concode_elem_sep", "void", "loadMaps", "concode_elem_sep", "Map", "getKeyStrokeMap", "concode_elem_sep", "Map", "getCharacterMap", "concode_elem_sep", "InputStream", "findMap", "concode_elem_sep", "void", "main", "concode_elem_sep", "KeyStroke", "getKeyStroke", "concode_elem_sep", "String", "[", "]", "getMapNames", "concode_elem_sep", "String", "[", "]", "getMapDescriptions", "concode_elem_sep", "String", "getOSType", "concode_elem_sep", "char", "getChar", "concode_elem_sep", "String", "getFilename", "concode_elem_sep", "Map", "generateCharacterMappings", "concode_elem_sep", "KeyStrokeMapProvider", "getGenerator", "concode_elem_sep", "Map", "loadKeyStrokeMap", "concode_elem_sep", "String", "[", "]", "getMapStrings"]}
{"code": "void function ( final Block arg0 , final Block arg1 ) { for ( int loc0 = 0 ; loc0 < paths . size ( ) ; loc0 ++ ) { final Block [ ] loc1 = ( Block [ ] ) paths . get ( loc0 ) ; if ( loc1 [ 0 ] == arg0 ) { loc1 [ 1 ] = arg1 ; return ; } } paths . add ( new Block [ ] { arg0 , arg1 } ) ; }", "nl": "adds a path from the block before a subroutine is called to a block after the subroutine is called . if the callerblock is already associated with a returnblock , the old returnblock is replaced . concode_field_sep Block entry concode_elem_sep Block exit concode_elem_sep ArrayList paths concode_elem_sep FlowGraph graph concode_elem_sep LocalVariable returnAddress concode_field_sep void setReturnAddress concode_elem_sep int numPaths concode_elem_sep void setExit concode_elem_sep FlowGraph graph concode_elem_sep LocalVariable returnAddress concode_elem_sep void removePathsContaining concode_elem_sep void removePath concode_elem_sep Block entry concode_elem_sep Block exit concode_elem_sep void print concode_elem_sep Block pathTarget concode_elem_sep Block pathSource concode_elem_sep Collection paths concode_elem_sep String toString concode_elem_sep void removeAllPaths concode_elem_sep void setEntry", "code_tokens": ["void", "function", "(", "final", "Block", "arg0", ",", "final", "Block", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "paths", ".", "size", "(", ")", ";", "loc0", "+", "+", ")", "{", "final", "Block", "[", "]", "loc1", "=", "(", "Block", "[", "]", ")", "paths", ".", "get", "(", "loc0", ")", ";", "if", "(", "loc1", "[", "0", "]", "==", "arg0", ")", "{", "loc1", "[", "1", "]", "=", "arg1", ";", "return", ";", "}", "}", "paths", ".", "add", "(", "new", "Block", "[", "]", "{", "arg0", ",", "arg1", "}", ")", ";", "}"], "nl_tokens": ["adds", "a", "path", "from", "the", "block", "before", "a", "subroutine", "is", "called", "to", "a", "block", "after", "the", "subroutine", "is", "called", ".", "if", "the", "callerblock", "is", "already", "associated", "with", "a", "returnblock", ",", "the", "old", "returnblock", "is", "replaced", ".", "concode_field_sep", "Block", "entry", "concode_elem_sep", "Block", "exit", "concode_elem_sep", "ArrayList", "paths", "concode_elem_sep", "FlowGraph", "graph", "concode_elem_sep", "LocalVariable", "returnAddress", "concode_field_sep", "void", "setReturnAddress", "concode_elem_sep", "int", "numPaths", "concode_elem_sep", "void", "setExit", "concode_elem_sep", "FlowGraph", "graph", "concode_elem_sep", "LocalVariable", "returnAddress", "concode_elem_sep", "void", "removePathsContaining", "concode_elem_sep", "void", "removePath", "concode_elem_sep", "Block", "entry", "concode_elem_sep", "Block", "exit", "concode_elem_sep", "void", "print", "concode_elem_sep", "Block", "pathTarget", "concode_elem_sep", "Block", "pathSource", "concode_elem_sep", "Collection", "paths", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "removeAllPaths", "concode_elem_sep", "void", "setEntry"]}
{"code": "MockWebServer function ( MockDispatcher arg0 , int arg1 , int arg2 ) { return new MockPreloadedPullTarget ( arg0 , arg1 , arg2 ) . getMockWebServer ( ) ; }", "nl": "get a `` preloaded '' mock couchdb suitable to be used as a pull replication target . it 's preloaded in the sense that it is ready serve up mock documents . this ca n't be used to simulate a sync gateway , because it does not support _ bulk_get concode_field_sep String PATH_REGEX_ALL_DOCS concode_elem_sep String PATH_REGEX_SESSION_COUCHDB concode_elem_sep String PATH_REGEX_FACEBOOK_AUTH concode_elem_sep String PATH_REGEX_BULK_DOCS concode_elem_sep String PATH_REGEX_CHECKPOINT concode_elem_sep String PATH_REGEX_SESSION concode_elem_sep String PATH_REGEX_CHANGES_NORMAL concode_elem_sep String PATH_REGEX_CHANGES_LONGPOLL concode_elem_sep String PATH_REGEX_BULK_GET concode_elem_sep String PATH_REGEX_CHANGES concode_elem_sep String PATH_REGEX_REVS_DIFF concode_elem_sep String PATH_REGEX_DB concode_elem_sep int batchSize concode_elem_sep BlockingQueue<T> items concode_field_sep byte[] getUncompressedBody concode_elem_sep MockWebServer getMockWebServer concode_elem_sep boolean isGzip concode_elem_sep boolean hasMoreBatches concode_elem_sep void set404NotFoundJson concode_elem_sep List<T> nextBatch concode_elem_sep void addFake404CheckpointResponse concode_elem_sep String getUtf8Body concode_elem_sep void set200OKJson concode_elem_sep Map<String,Object> getJsonMapFromRequest concode_elem_sep List<MockDocumentGet.MockDocument> getMockDocuments concode_elem_sep void set201OKJson concode_elem_sep Map<String,Object> generateRandomJsonMap concode_elem_sep SmartMockResponse wrap concode_elem_sep boolean shutdown concode_elem_sep boolean shutdown concode_elem_sep boolean shutdown", "code_tokens": ["MockWebServer", "function", "(", "MockDispatcher", "arg0", ",", "int", "arg1", ",", "int", "arg2", ")", "{", "return", "new", "MockPreloadedPullTarget", "(", "arg0", ",", "arg1", ",", "arg2", ")", ".", "getMockWebServer", "(", ")", ";", "}"], "nl_tokens": ["get", "a", "`", "`", "preloaded", "''", "mock", "couchdb", "suitable", "to", "be", "used", "as", "a", "pull", "replication", "target", ".", "it", "'s preloaded in the sense that it is ready serve up mock documents . this ca n'", "t", "be", "used", "to", "simulate", "a", "sync", "gateway", ",", "because", "it", "does", "not", "support", "_", "bulk_get", "concode_field_sep", "String", "PATH_REGEX_ALL_DOCS", "concode_elem_sep", "String", "PATH_REGEX_SESSION_COUCHDB", "concode_elem_sep", "String", "PATH_REGEX_FACEBOOK_AUTH", "concode_elem_sep", "String", "PATH_REGEX_BULK_DOCS", "concode_elem_sep", "String", "PATH_REGEX_CHECKPOINT", "concode_elem_sep", "String", "PATH_REGEX_SESSION", "concode_elem_sep", "String", "PATH_REGEX_CHANGES_NORMAL", "concode_elem_sep", "String", "PATH_REGEX_CHANGES_LONGPOLL", "concode_elem_sep", "String", "PATH_REGEX_BULK_GET", "concode_elem_sep", "String", "PATH_REGEX_CHANGES", "concode_elem_sep", "String", "PATH_REGEX_REVS_DIFF", "concode_elem_sep", "String", "PATH_REGEX_DB", "concode_elem_sep", "int", "batchSize", "concode_elem_sep", "BlockingQueue", "<", "T", ">", "items", "concode_field_sep", "byte", "[", "]", "getUncompressedBody", "concode_elem_sep", "MockWebServer", "getMockWebServer", "concode_elem_sep", "boolean", "isGzip", "concode_elem_sep", "boolean", "hasMoreBatches", "concode_elem_sep", "void", "set404NotFoundJson", "concode_elem_sep", "List", "<", "T", ">", "nextBatch", "concode_elem_sep", "void", "addFake404CheckpointResponse", "concode_elem_sep", "String", "getUtf8Body", "concode_elem_sep", "void", "set200OKJson", "concode_elem_sep", "Map", "<", "String", ",", "Object", ">", "getJsonMapFromRequest", "concode_elem_sep", "List", "<", "MockDocumentGet", ".", "MockDocument", ">", "getMockDocuments", "concode_elem_sep", "void", "set201OKJson", "concode_elem_sep", "Map", "<", "String", ",", "Object", ">", "generateRandomJsonMap", "concode_elem_sep", "SmartMockResponse", "wrap", "concode_elem_sep", "boolean", "shutdown", "concode_elem_sep", "boolean", "shutdown", "concode_elem_sep", "boolean", "shutdown"]}
{"code": "User function ( ) { return ( this . user ) ; }", "nl": "the user owning this subscription . concode_field_sep String password concode_elem_sep String host concode_elem_sep MemoryUser user concode_elem_sep String username concode_elem_sep String type concode_elem_sep boolean autoConnect concode_field_sep void setPassword concode_elem_sep String getPassword concode_elem_sep void setUsername concode_elem_sep boolean getAutoConnect concode_elem_sep String getType concode_elem_sep String toString concode_elem_sep void setAutoConnect concode_elem_sep void setType concode_elem_sep String getHost concode_elem_sep String getUsername", "code_tokens": ["User", "function", "(", ")", "{", "return", "(", "this", ".", "user", ")", ";", "}"], "nl_tokens": ["the", "user", "owning", "this", "subscription", ".", "concode_field_sep", "String", "password", "concode_elem_sep", "String", "host", "concode_elem_sep", "MemoryUser", "user", "concode_elem_sep", "String", "username", "concode_elem_sep", "String", "type", "concode_elem_sep", "boolean", "autoConnect", "concode_field_sep", "void", "setPassword", "concode_elem_sep", "String", "getPassword", "concode_elem_sep", "void", "setUsername", "concode_elem_sep", "boolean", "getAutoConnect", "concode_elem_sep", "String", "getType", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "setAutoConnect", "concode_elem_sep", "void", "setType", "concode_elem_sep", "String", "getHost", "concode_elem_sep", "String", "getUsername"]}
{"code": "void function ( Element arg0 ) { }", "nl": "called when the javadoc ant script is generated . concode_field_sep IJavadocExportWizardPageContainer fContainer concode_elem_sep IStatus fPageStatus concode_field_sep void setVisible concode_elem_sep IJavadocExportWizardPageContainer getContainer concode_elem_sep void updateArguments concode_elem_sep IStatus getStatus concode_elem_sep void setStatus concode_elem_sep String[] getConfiguredJavadocOptions concode_elem_sep void performHelp concode_elem_sep String[] getConfiguredVMOptions concode_elem_sep IJavaElement[] getSelectedJavaElements concode_elem_sep Control createContents concode_elem_sep void dispose concode_elem_sep IRunnableContext getRunnableContext concode_elem_sep void setContainer concode_elem_sep void statusUpdated", "code_tokens": ["void", "function", "(", "Element", "arg0", ")", "{", "}"], "nl_tokens": ["called", "when", "the", "javadoc", "ant", "script", "is", "generated", ".", "concode_field_sep", "IJavadocExportWizardPageContainer", "fContainer", "concode_elem_sep", "IStatus", "fPageStatus", "concode_field_sep", "void", "setVisible", "concode_elem_sep", "IJavadocExportWizardPageContainer", "getContainer", "concode_elem_sep", "void", "updateArguments", "concode_elem_sep", "IStatus", "getStatus", "concode_elem_sep", "void", "setStatus", "concode_elem_sep", "String", "[", "]", "getConfiguredJavadocOptions", "concode_elem_sep", "void", "performHelp", "concode_elem_sep", "String", "[", "]", "getConfiguredVMOptions", "concode_elem_sep", "IJavaElement", "[", "]", "getSelectedJavaElements", "concode_elem_sep", "Control", "createContents", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "IRunnableContext", "getRunnableContext", "concode_elem_sep", "void", "setContainer", "concode_elem_sep", "void", "statusUpdated"]}
{"code": "String function ( ) { return ( this . localeKey ) ; }", "nl": "return the context attribute key under which we will store the request locale . concode_field_sep String localeKey concode_field_sep void setLocaleKey concode_elem_sep boolean execute concode_elem_sep Locale getLocale", "code_tokens": ["String", "function", "(", ")", "{", "return", "(", "this", ".", "localeKey", ")", ";", "}"], "nl_tokens": ["return", "the", "context", "attribute", "key", "under", "which", "we", "will", "store", "the", "request", "locale", ".", "concode_field_sep", "String", "localeKey", "concode_field_sep", "void", "setLocaleKey", "concode_elem_sep", "boolean", "execute", "concode_elem_sep", "Locale", "getLocale"]}
{"code": "String function ( ) { return caller ; }", "nl": "gets the value of the caller property . concode_field_sep String caller concode_elem_sep String user concode_elem_sep String uuid concode_field_sep String getUser concode_elem_sep String getUuid concode_elem_sep void setCaller concode_elem_sep void setUser concode_elem_sep void setUuid", "code_tokens": ["String", "function", "(", ")", "{", "return", "caller", ";", "}"], "nl_tokens": ["gets", "the", "value", "of", "the", "caller", "property", ".", "concode_field_sep", "String", "caller", "concode_elem_sep", "String", "user", "concode_elem_sep", "String", "uuid", "concode_field_sep", "String", "getUser", "concode_elem_sep", "String", "getUuid", "concode_elem_sep", "void", "setCaller", "concode_elem_sep", "void", "setUser", "concode_elem_sep", "void", "setUuid"]}
{"code": "long function ( Duration arg0 ) { return Durations . toMicros ( arg0 ) ; }", "nl": "convert a duration to the number of microseconds.the result will be rounded towards 0 to the nearest microseconds . e.g. , if the duration represents -1 nanosecond , it will be rounded to 0 . concode_field_sep BigInteger NANOS_PER_SECOND_BIG_INTEGER concode_elem_sep long DURATION_SECONDS_MAX concode_elem_sep long DURATION_SECONDS_MIN concode_elem_sep long TIMESTAMP_SECONDS_MAX concode_elem_sep long NANOS_PER_SECOND concode_elem_sep long TIMESTAMP_SECONDS_MIN concode_field_sep Timestamp add concode_elem_sep Duration add concode_elem_sep Duration distance concode_elem_sep Duration createDurationFromMicros concode_elem_sep Timestamp subtract concode_elem_sep Duration subtract concode_elem_sep Timestamp createTimestampFromMillis concode_elem_sep BigInteger toBigInteger concode_elem_sep BigInteger toBigInteger concode_elem_sep Duration createDurationFromNanos concode_elem_sep Timestamp createTimestampFromMicros concode_elem_sep Duration createDurationFromMillis concode_elem_sep Duration createDurationFromBigInteger concode_elem_sep Duration parseDuration concode_elem_sep long toNanos concode_elem_sep long toNanos concode_elem_sep Timestamp getEpoch concode_elem_sep Timestamp parseTimestamp concode_elem_sep String toString concode_elem_sep String toString concode_elem_sep long toMillis concode_elem_sep long toMillis concode_elem_sep Duration divide concode_elem_sep Duration divide concode_elem_sep long divide concode_elem_sep Timestamp createTimestampFromNanos concode_elem_sep Timestamp getCurrentTime concode_elem_sep Duration multiply concode_elem_sep Duration multiply concode_elem_sep Duration remainder concode_elem_sep Duration normalizedDuration", "code_tokens": ["long", "function", "(", "Duration", "arg0", ")", "{", "return", "Durations", ".", "toMicros", "(", "arg0", ")", ";", "}"], "nl_tokens": ["convert", "a", "duration", "to", "the", "number", "of", "microseconds", ".", "the", "result", "will", "be", "rounded", "towards", "0", "to", "the", "nearest", "microseconds", ".", "e", ".", "g", ".", ",", "if", "the", "duration", "represents", "-", "1", "nanosecond", ",", "it", "will", "be", "rounded", "to", "0", ".", "concode_field_sep", "BigInteger", "NANOS_PER_SECOND_BIG_INTEGER", "concode_elem_sep", "long", "DURATION_SECONDS_MAX", "concode_elem_sep", "long", "DURATION_SECONDS_MIN", "concode_elem_sep", "long", "TIMESTAMP_SECONDS_MAX", "concode_elem_sep", "long", "NANOS_PER_SECOND", "concode_elem_sep", "long", "TIMESTAMP_SECONDS_MIN", "concode_field_sep", "Timestamp", "add", "concode_elem_sep", "Duration", "add", "concode_elem_sep", "Duration", "distance", "concode_elem_sep", "Duration", "createDurationFromMicros", "concode_elem_sep", "Timestamp", "subtract", "concode_elem_sep", "Duration", "subtract", "concode_elem_sep", "Timestamp", "createTimestampFromMillis", "concode_elem_sep", "BigInteger", "toBigInteger", "concode_elem_sep", "BigInteger", "toBigInteger", "concode_elem_sep", "Duration", "createDurationFromNanos", "concode_elem_sep", "Timestamp", "createTimestampFromMicros", "concode_elem_sep", "Duration", "createDurationFromMillis", "concode_elem_sep", "Duration", "createDurationFromBigInteger", "concode_elem_sep", "Duration", "parseDuration", "concode_elem_sep", "long", "toNanos", "concode_elem_sep", "long", "toNanos", "concode_elem_sep", "Timestamp", "getEpoch", "concode_elem_sep", "Timestamp", "parseTimestamp", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "toString", "concode_elem_sep", "long", "toMillis", "concode_elem_sep", "long", "toMillis", "concode_elem_sep", "Duration", "divide", "concode_elem_sep", "Duration", "divide", "concode_elem_sep", "long", "divide", "concode_elem_sep", "Timestamp", "createTimestampFromNanos", "concode_elem_sep", "Timestamp", "getCurrentTime", "concode_elem_sep", "Duration", "multiply", "concode_elem_sep", "Duration", "multiply", "concode_elem_sep", "Duration", "remainder", "concode_elem_sep", "Duration", "normalizedDuration"]}
{"code": "void function ( Integer arg0 , int arg1 ) { for ( int loc0 = 0 ; loc0 < arg1 ; loc0 ++ ) System . out . print ( \"srini_string\" ) ; System . out . println ( \"srini_string\" + arg0 ) ; }", "nl": "helper method that prints out an integer . concode_field_sep PlaceHolder placeHolder concode_field_sep void print concode_elem_sep void print concode_elem_sep void printMap concode_elem_sep void printList concode_elem_sep void printString concode_elem_sep void printString", "code_tokens": ["void", "function", "(", "Integer", "arg0", ",", "int", "arg1", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg1", ";", "loc0", "+", "+", ")", "System", ".", "out", ".", "print", "(", "\"srini_string\"", ")", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}"], "nl_tokens": ["helper", "method", "that", "prints", "out", "an", "integer", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "print", "concode_elem_sep", "void", "print", "concode_elem_sep", "void", "printMap", "concode_elem_sep", "void", "printList", "concode_elem_sep", "void", "printString", "concode_elem_sep", "void", "printString"]}
{"code": "PerspectiveLocator function ( String arg0 ) { return new PerspectiveLocator ( PerspectiveFinder . findByNameInRegistry ( arg0 ) ) ; }", "nl": "create a new perspective locator that identifies perspectives by name . concode_field_sep IPerspectiveDescriptor descriptor concode_elem_sep long serialVersionUID concode_field_sep IPerspectiveDescriptor getDescriptor concode_elem_sep IConditionHandler isClosed concode_elem_sep PerspectiveLocator forId concode_elem_sep IConditionHandler isActive concode_elem_sep ICondition isActive concode_elem_sep String getPerspectiveId", "code_tokens": ["PerspectiveLocator", "function", "(", "String", "arg0", ")", "{", "return", "new", "PerspectiveLocator", "(", "PerspectiveFinder", ".", "findByNameInRegistry", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["create", "a", "new", "perspective", "locator", "that", "identifies", "perspectives", "by", "name", ".", "concode_field_sep", "IPerspectiveDescriptor", "descriptor", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "IPerspectiveDescriptor", "getDescriptor", "concode_elem_sep", "IConditionHandler", "isClosed", "concode_elem_sep", "PerspectiveLocator", "forId", "concode_elem_sep", "IConditionHandler", "isActive", "concode_elem_sep", "ICondition", "isActive", "concode_elem_sep", "String", "getPerspectiveId"]}
{"code": "String function ( ) { return lang ; }", "nl": "returns language targeted by this configuration concode_field_sep List<ValidatorConfiguration> validatorConfigs concode_elem_sep SymbolTable symbolTable concode_elem_sep File home concode_elem_sep boolean built concode_elem_sep String lang concode_elem_sep List<Symbol> customSymbols concode_elem_sep Optional<String> variant concode_elem_sep String lang concode_elem_sep boolean secure concode_elem_sep RedPenTokenizer tokenizer concode_elem_sep File base concode_field_sep List<ValidatorConfiguration> getValidatorConfigs concode_elem_sep RedPenTokenizer getTokenizer concode_elem_sep ConfigurationBuilder addSymbol concode_elem_sep ConfigurationBuilder secure concode_elem_sep ConfigurationBuilder setBaseDir concode_elem_sep void checkBuilt concode_elem_sep File getHome concode_elem_sep int hashCode concode_elem_sep ConfigurationBuilder builder concode_elem_sep ConfigurationBuilder builder concode_elem_sep ConfigurationBuilder setVariant concode_elem_sep ConfigurationBuilder addAvailableValidatorConfigs concode_elem_sep String getKey concode_elem_sep List<String> getDefaultConfigKeys concode_elem_sep ConfigurationBuilder addValidatorConfig concode_elem_sep String getVariant concode_elem_sep File findFile concode_elem_sep boolean secureExists concode_elem_sep boolean isSecure concode_elem_sep SymbolTable getSymbolTable concode_elem_sep void readObject concode_elem_sep void initTokenizer concode_elem_sep Configuration build concode_elem_sep boolean equals concode_elem_sep Configuration clone concode_elem_sep File getBase concode_elem_sep String toString concode_elem_sep ConfigurationBuilder setLanguage", "code_tokens": ["String", "function", "(", ")", "{", "return", "lang", ";", "}"], "nl_tokens": ["returns", "language", "targeted", "by", "this", "configuration", "concode_field_sep", "List", "<", "ValidatorConfiguration", ">", "validatorConfigs", "concode_elem_sep", "SymbolTable", "symbolTable", "concode_elem_sep", "File", "home", "concode_elem_sep", "boolean", "built", "concode_elem_sep", "String", "lang", "concode_elem_sep", "List", "<", "Symbol", ">", "customSymbols", "concode_elem_sep", "Optional", "<", "String", ">", "variant", "concode_elem_sep", "String", "lang", "concode_elem_sep", "boolean", "secure", "concode_elem_sep", "RedPenTokenizer", "tokenizer", "concode_elem_sep", "File", "base", "concode_field_sep", "List", "<", "ValidatorConfiguration", ">", "getValidatorConfigs", "concode_elem_sep", "RedPenTokenizer", "getTokenizer", "concode_elem_sep", "ConfigurationBuilder", "addSymbol", "concode_elem_sep", "ConfigurationBuilder", "secure", "concode_elem_sep", "ConfigurationBuilder", "setBaseDir", "concode_elem_sep", "void", "checkBuilt", "concode_elem_sep", "File", "getHome", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "ConfigurationBuilder", "builder", "concode_elem_sep", "ConfigurationBuilder", "builder", "concode_elem_sep", "ConfigurationBuilder", "setVariant", "concode_elem_sep", "ConfigurationBuilder", "addAvailableValidatorConfigs", "concode_elem_sep", "String", "getKey", "concode_elem_sep", "List", "<", "String", ">", "getDefaultConfigKeys", "concode_elem_sep", "ConfigurationBuilder", "addValidatorConfig", "concode_elem_sep", "String", "getVariant", "concode_elem_sep", "File", "findFile", "concode_elem_sep", "boolean", "secureExists", "concode_elem_sep", "boolean", "isSecure", "concode_elem_sep", "SymbolTable", "getSymbolTable", "concode_elem_sep", "void", "readObject", "concode_elem_sep", "void", "initTokenizer", "concode_elem_sep", "Configuration", "build", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Configuration", "clone", "concode_elem_sep", "File", "getBase", "concode_elem_sep", "String", "toString", "concode_elem_sep", "ConfigurationBuilder", "setLanguage"]}
{"code": "String function ( ) { return fcLink ; }", "nl": "gets the value of the fclink property . concode_field_sep String fcLink concode_elem_sep String localPortID concode_elem_sep String displayName concode_elem_sep String fcKey concode_elem_sep ProvidedPortID id concode_elem_sep List<PropertyDeclaration> properties concode_elem_sep String resourceType concode_field_sep String getFcKey concode_elem_sep String getDisplayName concode_elem_sep List<PropertyDeclaration> getProperties concode_elem_sep void setFcKey concode_elem_sep String getResourceType concode_elem_sep void setFcLink concode_elem_sep String getLocalPortID concode_elem_sep void setResourceType concode_elem_sep void setId concode_elem_sep ProvidedPortID getId concode_elem_sep void setLocalPortID concode_elem_sep void setDisplayName", "code_tokens": ["String", "function", "(", ")", "{", "return", "fcLink", ";", "}"], "nl_tokens": ["gets", "the", "value", "of", "the", "fclink", "property", ".", "concode_field_sep", "String", "fcLink", "concode_elem_sep", "String", "localPortID", "concode_elem_sep", "String", "displayName", "concode_elem_sep", "String", "fcKey", "concode_elem_sep", "ProvidedPortID", "id", "concode_elem_sep", "List", "<", "PropertyDeclaration", ">", "properties", "concode_elem_sep", "String", "resourceType", "concode_field_sep", "String", "getFcKey", "concode_elem_sep", "String", "getDisplayName", "concode_elem_sep", "List", "<", "PropertyDeclaration", ">", "getProperties", "concode_elem_sep", "void", "setFcKey", "concode_elem_sep", "String", "getResourceType", "concode_elem_sep", "void", "setFcLink", "concode_elem_sep", "String", "getLocalPortID", "concode_elem_sep", "void", "setResourceType", "concode_elem_sep", "void", "setId", "concode_elem_sep", "ProvidedPortID", "getId", "concode_elem_sep", "void", "setLocalPortID", "concode_elem_sep", "void", "setDisplayName"]}
{"code": "String function ( String arg0 ) { return ZKUtil . joinZNode ( getIdentitiesZNode ( ) , arg0 ) ; }", "nl": "get identity znode . concode_field_sep String ENCRYPTION_KEY_NO_ZNODE_NAME concode_elem_sep String KEY_VERSION_ZNODE_NAME concode_elem_sep String PRINCIPAL_NAME_ZNODE_NAME concode_elem_sep String baseZNode concode_elem_sep String CREATED_TIME_ZNODE_NAME concode_elem_sep String KDC_FLAGS_ZNODE_NAME concode_elem_sep String DISABLED_ZNODE_NAME concode_elem_sep String KEYS_ZNODE_NAME concode_elem_sep String IDENTITIES_ZNODE_NAME concode_elem_sep String KEY_ZNODE_NAME concode_elem_sep String EXPIRE_TIME_ZNODE_NAME concode_elem_sep String KEY_TYPE_ZNODE_NAME concode_elem_sep String LOCKED_ZNODE_NAME concode_field_sep String getEncryptionKeyTypeZNode concode_elem_sep String getBaseZNode concode_elem_sep String getDisabledZNode concode_elem_sep String getKeyTypeZNode concode_elem_sep String getEncryptionKeyNoZNode concode_elem_sep String getEncryptionKeyZNode concode_elem_sep String getLockedZNode concode_elem_sep String getCreatedTimeZNode concode_elem_sep String getExpireTimeZNode concode_elem_sep String getKeyVersionZNode concode_elem_sep String getKeysZNode concode_elem_sep String getIdentitiesZNode concode_elem_sep List<String> getIdentityNames concode_elem_sep String getPrincipalNameZnode concode_elem_sep String getKdcFlagsZNode", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "return", "ZKUtil", ".", "joinZNode", "(", "getIdentitiesZNode", "(", ")", ",", "arg0", ")", ";", "}"], "nl_tokens": ["get", "identity", "znode", ".", "concode_field_sep", "String", "ENCRYPTION_KEY_NO_ZNODE_NAME", "concode_elem_sep", "String", "KEY_VERSION_ZNODE_NAME", "concode_elem_sep", "String", "PRINCIPAL_NAME_ZNODE_NAME", "concode_elem_sep", "String", "baseZNode", "concode_elem_sep", "String", "CREATED_TIME_ZNODE_NAME", "concode_elem_sep", "String", "KDC_FLAGS_ZNODE_NAME", "concode_elem_sep", "String", "DISABLED_ZNODE_NAME", "concode_elem_sep", "String", "KEYS_ZNODE_NAME", "concode_elem_sep", "String", "IDENTITIES_ZNODE_NAME", "concode_elem_sep", "String", "KEY_ZNODE_NAME", "concode_elem_sep", "String", "EXPIRE_TIME_ZNODE_NAME", "concode_elem_sep", "String", "KEY_TYPE_ZNODE_NAME", "concode_elem_sep", "String", "LOCKED_ZNODE_NAME", "concode_field_sep", "String", "getEncryptionKeyTypeZNode", "concode_elem_sep", "String", "getBaseZNode", "concode_elem_sep", "String", "getDisabledZNode", "concode_elem_sep", "String", "getKeyTypeZNode", "concode_elem_sep", "String", "getEncryptionKeyNoZNode", "concode_elem_sep", "String", "getEncryptionKeyZNode", "concode_elem_sep", "String", "getLockedZNode", "concode_elem_sep", "String", "getCreatedTimeZNode", "concode_elem_sep", "String", "getExpireTimeZNode", "concode_elem_sep", "String", "getKeyVersionZNode", "concode_elem_sep", "String", "getKeysZNode", "concode_elem_sep", "String", "getIdentitiesZNode", "concode_elem_sep", "List", "<", "String", ">", "getIdentityNames", "concode_elem_sep", "String", "getPrincipalNameZnode", "concode_elem_sep", "String", "getKdcFlagsZNode"]}
{"code": "EditPartFactory function ( ) { return new SchemaEditPartFactory ( ) ; }", "nl": "returns the editpartfactory that the graphicalviewer will use . concode_field_sep GraphicalViewer viewer concode_elem_sep ActionRegistry actionRegistry concode_elem_sep KeyHandler sharedKeyHandler concode_elem_sep IEditorSite editorSite concode_field_sep GraphicalViewer getViewer concode_elem_sep GraphicalViewer createViewer concode_elem_sep void createGraphicalViewer", "code_tokens": ["EditPartFactory", "function", "(", ")", "{", "return", "new", "SchemaEditPartFactory", "(", ")", ";", "}"], "nl_tokens": ["returns", "the", "editpartfactory", "that", "the", "graphicalviewer", "will", "use", ".", "concode_field_sep", "GraphicalViewer", "viewer", "concode_elem_sep", "ActionRegistry", "actionRegistry", "concode_elem_sep", "KeyHandler", "sharedKeyHandler", "concode_elem_sep", "IEditorSite", "editorSite", "concode_field_sep", "GraphicalViewer", "getViewer", "concode_elem_sep", "GraphicalViewer", "createViewer", "concode_elem_sep", "void", "createGraphicalViewer"]}
{"code": "void function ( PdfDictionary arg0 ) { inspectChildDictionary ( arg0 , false ) ; }", "nl": "if the child of a structured element is a dictionary , we inspect the child ; we may also draw a tag . concode_field_sep PdfReader reader concode_elem_sep PrintWriter out concode_field_sep String xmlName concode_elem_sep void convertToXml concode_elem_sep void convertToXml concode_elem_sep String fixTagName concode_elem_sep void inspectChildArray concode_elem_sep void inspectChild concode_elem_sep void parseTag", "code_tokens": ["void", "function", "(", "PdfDictionary", "arg0", ")", "{", "inspectChildDictionary", "(", "arg0", ",", "false", ")", ";", "}"], "nl_tokens": ["if", "the", "child", "of", "a", "structured", "element", "is", "a", "dictionary", ",", "we", "inspect", "the", "child", ";", "we", "may", "also", "draw", "a", "tag", ".", "concode_field_sep", "PdfReader", "reader", "concode_elem_sep", "PrintWriter", "out", "concode_field_sep", "String", "xmlName", "concode_elem_sep", "void", "convertToXml", "concode_elem_sep", "void", "convertToXml", "concode_elem_sep", "String", "fixTagName", "concode_elem_sep", "void", "inspectChildArray", "concode_elem_sep", "void", "inspectChild", "concode_elem_sep", "void", "parseTag"]}
{"code": "void function ( String arg0 ) { frame . setTitle ( arg0 ) ; }", "nl": "method to set the title for the picture frame concode_field_sep ImageIcon imageIcon concode_elem_sep JLabel label concode_elem_sep JFrame frame concode_elem_sep DigitalPicture picture concode_field_sep void setVisible concode_elem_sep void setPicture concode_elem_sep void hide concode_elem_sep void displayImage concode_elem_sep void updateImageAndShowIt concode_elem_sep void updateImage concode_elem_sep void repaint concode_elem_sep void close concode_elem_sep void initFrame", "code_tokens": ["void", "function", "(", "String", "arg0", ")", "{", "frame", ".", "setTitle", "(", "arg0", ")", ";", "}"], "nl_tokens": ["method", "to", "set", "the", "title", "for", "the", "picture", "frame", "concode_field_sep", "ImageIcon", "imageIcon", "concode_elem_sep", "JLabel", "label", "concode_elem_sep", "JFrame", "frame", "concode_elem_sep", "DigitalPicture", "picture", "concode_field_sep", "void", "setVisible", "concode_elem_sep", "void", "setPicture", "concode_elem_sep", "void", "hide", "concode_elem_sep", "void", "displayImage", "concode_elem_sep", "void", "updateImageAndShowIt", "concode_elem_sep", "void", "updateImage", "concode_elem_sep", "void", "repaint", "concode_elem_sep", "void", "close", "concode_elem_sep", "void", "initFrame"]}
{"code": "List < Pair < String , ? extends Table >> function ( final List < String > arg0 ) { return getTablesByNames ( arg0 ) ; }", "nl": "get the collection of table tables specified in the tablenames with bulk-load if the underlying storageplugin supports . it is not guaranteed that the retrieved tables would have rowtype and statistic being fully populated . specifically , calling table #getrowtype reldatatypefactory or table #getstatistic might incur unsupportedoperationexception being thrown . concode_field_sep List<String> schemaPath concode_elem_sep String name concode_elem_sep org.slf4j.Logger logger concode_elem_sep Expression EXPRESSION concode_field_sep Iterable<String> getSubPartitions concode_elem_sep boolean contentsHaveChangedSince concode_elem_sep String getName concode_elem_sep String getFullSchemaName concode_elem_sep Collection<Function> getFunctions concode_elem_sep void dropView concode_elem_sep Set<String> getTableNames concode_elem_sep Set<String> getSubSchemaNames concode_elem_sep Expression getExpression concode_elem_sep boolean isMutable concode_elem_sep Set<String> getFunctionNames concode_elem_sep Table getTable concode_elem_sep Schema getSubSchema concode_elem_sep Schema getDefaultSchema concode_elem_sep List<Pair<String,? extends Table>> getTablesByNames concode_elem_sep CreateTableEntry createNewTable concode_elem_sep String getTypeName concode_elem_sep boolean createView concode_elem_sep void close concode_elem_sep List<String> getSchemaPath concode_elem_sep boolean showInInformationSchema concode_elem_sep void dropTable", "code_tokens": ["List", "<", "Pair", "<", "String", ",", "?", "extends", "Table", ">>", "function", "(", "final", "List", "<", "String", ">", "arg0", ")", "{", "return", "getTablesByNames", "(", "arg0", ")", ";", "}"], "nl_tokens": ["get", "the", "collection", "of", "table", "tables", "specified", "in", "the", "tablenames", "with", "bulk", "-", "load", "if", "the", "underlying", "storageplugin", "supports", ".", "it", "is", "not", "guaranteed", "that", "the", "retrieved", "tables", "would", "have", "rowtype", "and", "statistic", "being", "fully", "populated", ".", "specifically", ",", "calling", "table", "#getrowtype reldatatypefactory or table #getstatistic might incur unsupportedoperationexception being thrown . concode_field_sep List<String> schemaPath concode_elem_sep String name concode_elem_sep org.slf4j.Logger logger concode_elem_sep Expression EXPRESSION concode_field_sep Iterable<String> getSubPartitions concode_elem_sep boolean contentsHaveChangedSince concode_elem_sep String getName concode_elem_sep String getFullSchemaName concode_elem_sep Collection<Function> getFunctions concode_elem_sep void dropView concode_elem_sep Set<String> getTableNames concode_elem_sep Set<String> getSubSchemaNames concode_elem_sep Expression getExpression concode_elem_sep boolean isMutable concode_elem_sep Set<String> getFunctionNames concode_elem_sep Table getTable concode_elem_sep Schema getSubSchema concode_elem_sep Schema getDefaultSchema concode_elem_sep List<Pair<String,? extends Table>> getTablesByNames concode_elem_sep CreateTableEntry createNewTable concode_elem_sep String getTypeName concode_elem_sep boolean createView concode_elem_sep void close concode_elem_sep List<String> getSchemaPath concode_elem_sep boolean showInInformationSchema concode_elem_sep void dropTable"]}
{"code": "List < String > function ( Tag arg0 ) { List < String > loc0 = new ArrayList < String > ( ) ; Tag loc1 = arg0 . getParent ( ) ; while ( loc1 != null && ! ( loc1 . getName ( ) . equals ( HTML . Tag . BODY ) ) ) { loc0 . add ( loc1 . getName ( ) ) ; loc1 = loc1 . getParent ( ) ; } return loc0 ; }", "nl": "creates a parenttree of all parents of a given tag concode_field_sep PlaceHolder placeHolder concode_field_sep List<Tag> getParentTagTree", "code_tokens": ["List", "<", "String", ">", "function", "(", "Tag", "arg0", ")", "{", "List", "<", "String", ">", "loc0", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "Tag", "loc1", "=", "arg0", ".", "getParent", "(", ")", ";", "while", "(", "loc1", "!=", "null", "&", "&", "!", "(", "loc1", ".", "getName", "(", ")", ".", "equals", "(", "HTML", ".", "Tag", ".", "BODY", ")", ")", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "getName", "(", ")", ")", ";", "loc1", "=", "loc1", ".", "getParent", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["creates", "a", "parenttree", "of", "all", "parents", "of", "a", "given", "tag", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "List", "<", "Tag", ">", "getParentTagTree"]}
{"code": "void function ( ) { if ( ! started ) { started = true ; deltaUs = elapsedRealtimeMinus ( positionUs ) ; } }", "nl": "starts the clock . does nothing if the clock is already started . concode_field_sep long deltaUs concode_elem_sep long positionUs concode_elem_sep boolean started concode_field_sep long elapsedRealtimeMinus concode_elem_sep void stop concode_elem_sep long getPositionUs concode_elem_sep void setPositionUs", "code_tokens": ["void", "function", "(", ")", "{", "if", "(", "!", "started", ")", "{", "started", "=", "true", ";", "deltaUs", "=", "elapsedRealtimeMinus", "(", "positionUs", ")", ";", "}", "}"], "nl_tokens": ["starts", "the", "clock", ".", "does", "nothing", "if", "the", "clock", "is", "already", "started", ".", "concode_field_sep", "long", "deltaUs", "concode_elem_sep", "long", "positionUs", "concode_elem_sep", "boolean", "started", "concode_field_sep", "long", "elapsedRealtimeMinus", "concode_elem_sep", "void", "stop", "concode_elem_sep", "long", "getPositionUs", "concode_elem_sep", "void", "setPositionUs"]}
{"code": "void function ( ) { processListener . interrupt ( ) ; try { StopCluster ( true ) ; } catch ( IOException loc0 ) { System . out . println ( \"srini_string\" ) ; System . out . println ( loc0 . toString ( ) ) ; } }", "nl": "interrupts the processlistener thread and terminates the cluster . concode_field_sep ProcessListener processListener concode_elem_sep FXMLController guiController concode_elem_sep String user concode_elem_sep File fileBiBiGridJar concode_elem_sep File fileSingularityScript concode_elem_sep ProcessBuilder processBuilder concode_elem_sep File fileInput concode_elem_sep String masterIp concode_elem_sep ObservableList<String> flavorChoices concode_elem_sep PropertiesController propertiesController concode_elem_sep String clusterId concode_field_sep String getClusterId concode_elem_sep File getInputFile concode_elem_sep void setMasterIp concode_elem_sep void StopCluster concode_elem_sep PropertiesController getPropertiesController concode_elem_sep String getMasterIp concode_elem_sep void StartCluster concode_elem_sep void setClusterId concode_elem_sep void setInputFile concode_elem_sep void UnlockSettings concode_elem_sep void UnlockStopButton concode_elem_sep ObservableList<String> getFlavorChoices", "code_tokens": ["void", "function", "(", ")", "{", "processListener", ".", "interrupt", "(", ")", ";", "try", "{", "StopCluster", "(", "true", ")", ";", "}", "catch", "(", "IOException", "loc0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", ")", ";", "System", ".", "out", ".", "println", "(", "loc0", ".", "toString", "(", ")", ")", ";", "}", "}"], "nl_tokens": ["interrupts", "the", "processlistener", "thread", "and", "terminates", "the", "cluster", ".", "concode_field_sep", "ProcessListener", "processListener", "concode_elem_sep", "FXMLController", "guiController", "concode_elem_sep", "String", "user", "concode_elem_sep", "File", "fileBiBiGridJar", "concode_elem_sep", "File", "fileSingularityScript", "concode_elem_sep", "ProcessBuilder", "processBuilder", "concode_elem_sep", "File", "fileInput", "concode_elem_sep", "String", "masterIp", "concode_elem_sep", "ObservableList", "<", "String", ">", "flavorChoices", "concode_elem_sep", "PropertiesController", "propertiesController", "concode_elem_sep", "String", "clusterId", "concode_field_sep", "String", "getClusterId", "concode_elem_sep", "File", "getInputFile", "concode_elem_sep", "void", "setMasterIp", "concode_elem_sep", "void", "StopCluster", "concode_elem_sep", "PropertiesController", "getPropertiesController", "concode_elem_sep", "String", "getMasterIp", "concode_elem_sep", "void", "StartCluster", "concode_elem_sep", "void", "setClusterId", "concode_elem_sep", "void", "setInputFile", "concode_elem_sep", "void", "UnlockSettings", "concode_elem_sep", "void", "UnlockStopButton", "concode_elem_sep", "ObservableList", "<", "String", ">", "getFlavorChoices"]}
{"code": "boolean function ( ) { if ( proximitySensor != null ) { return true ; } proximitySensor = sensorManager . getDefaultSensor ( Sensor . TYPE_PROXIMITY ) ; if ( proximitySensor == null ) { return false ; } logProximitySensorInfo ( ) ; return true ; }", "nl": "get default proximity sensor if it exists . tablet devices e.g. nexus 7 does not support this type of sensor and false will be retured in such cases . concode_field_sep String TAG concode_elem_sep SensorManager sensorManager concode_elem_sep RtkUtils.NonThreadSafe nonThreadSafe concode_elem_sep Sensor proximitySensor concode_elem_sep Runnable onSensorStateListener concode_elem_sep boolean lastStateReportIsNear concode_field_sep void checkIfCalledOnValidThread concode_elem_sep void onSensorChanged concode_elem_sep void stop concode_elem_sep boolean start concode_elem_sep RtkProximitySensor create concode_elem_sep void logProximitySensorInfo concode_elem_sep boolean sensorReportsNearState concode_elem_sep void onAccuracyChanged", "code_tokens": ["boolean", "function", "(", ")", "{", "if", "(", "proximitySensor", "!=", "null", ")", "{", "return", "true", ";", "}", "proximitySensor", "=", "sensorManager", ".", "getDefaultSensor", "(", "Sensor", ".", "TYPE_PROXIMITY", ")", ";", "if", "(", "proximitySensor", "==", "null", ")", "{", "return", "false", ";", "}", "logProximitySensorInfo", "(", ")", ";", "return", "true", ";", "}"], "nl_tokens": ["get", "default", "proximity", "sensor", "if", "it", "exists", ".", "tablet", "devices", "e", ".", "g", ".", "nexus", "7", "does", "not", "support", "this", "type", "of", "sensor", "and", "false", "will", "be", "retured", "in", "such", "cases", ".", "concode_field_sep", "String", "TAG", "concode_elem_sep", "SensorManager", "sensorManager", "concode_elem_sep", "RtkUtils", ".", "NonThreadSafe", "nonThreadSafe", "concode_elem_sep", "Sensor", "proximitySensor", "concode_elem_sep", "Runnable", "onSensorStateListener", "concode_elem_sep", "boolean", "lastStateReportIsNear", "concode_field_sep", "void", "checkIfCalledOnValidThread", "concode_elem_sep", "void", "onSensorChanged", "concode_elem_sep", "void", "stop", "concode_elem_sep", "boolean", "start", "concode_elem_sep", "RtkProximitySensor", "create", "concode_elem_sep", "void", "logProximitySensorInfo", "concode_elem_sep", "boolean", "sensorReportsNearState", "concode_elem_sep", "void", "onAccuracyChanged"]}
{"code": "Db4oDatabase function ( Transaction arg0 ) { if ( i_uuid > 0 ) { Db4oDatabase loc0 = query ( arg0 , true ) ; if ( loc0 != null ) { return loc0 ; } } return query ( arg0 , false ) ; }", "nl": "find a db4odatabase with the same signature as this one concode_field_sep int STATIC_ID concode_elem_sep int i_id concode_elem_sep Db4oDatabase STATIC_IDENTITY concode_elem_sep String CREATIONTIME_FIELD concode_elem_sep ObjectContainerBase i_stream concode_elem_sep byte[] i_signature concode_elem_sep long i_uuid concode_field_sep int bind concode_elem_sep boolean isOlderThan concode_elem_sep int storeAndGetId concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep long getCreationTime concode_elem_sep byte[] getSignature concode_elem_sep int getID concode_elem_sep String toString concode_elem_sep Db4oDatabase generate", "code_tokens": ["Db4oDatabase", "function", "(", "Transaction", "arg0", ")", "{", "if", "(", "i_uuid", ">", "0", ")", "{", "Db4oDatabase", "loc0", "=", "query", "(", "arg0", ",", "true", ")", ";", "if", "(", "loc0", "!=", "null", ")", "{", "return", "loc0", ";", "}", "}", "return", "query", "(", "arg0", ",", "false", ")", ";", "}"], "nl_tokens": ["find", "a", "db4odatabase", "with", "the", "same", "signature", "as", "this", "one", "concode_field_sep", "int", "STATIC_ID", "concode_elem_sep", "int", "i_id", "concode_elem_sep", "Db4oDatabase", "STATIC_IDENTITY", "concode_elem_sep", "String", "CREATIONTIME_FIELD", "concode_elem_sep", "ObjectContainerBase", "i_stream", "concode_elem_sep", "byte", "[", "]", "i_signature", "concode_elem_sep", "long", "i_uuid", "concode_field_sep", "int", "bind", "concode_elem_sep", "boolean", "isOlderThan", "concode_elem_sep", "int", "storeAndGetId", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "long", "getCreationTime", "concode_elem_sep", "byte", "[", "]", "getSignature", "concode_elem_sep", "int", "getID", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Db4oDatabase", "generate"]}
{"code": "String function ( ) { if ( originUrl == null ) { originUrl = extractOriginImpl ( url ) ; } return originUrl ; }", "nl": "returns the protocol , domain and port of the url . the origin does not typically include a trailing slash . concode_field_sep String SCHEME_HTTPS concode_elem_sep String SCHEME_FILE concode_elem_sep String SCHEME_HTTP concode_elem_sep String originUrl concode_elem_sep String applicationUrl concode_elem_sep String lastPathComponent concode_elem_sep String url concode_field_sep String getApplicationUrlImpl concode_elem_sep String getLastPathComponent concode_elem_sep String getUrl concode_elem_sep String getScheme concode_elem_sep String convertToRelativeUrl concode_elem_sep String getResourceBase concode_elem_sep String getPath concode_elem_sep String getApplicationUrl concode_elem_sep String extractOriginImpl concode_elem_sep String getUrlWithoutHash concode_elem_sep String getUrlWithoutHash", "code_tokens": ["String", "function", "(", ")", "{", "if", "(", "originUrl", "==", "null", ")", "{", "originUrl", "=", "extractOriginImpl", "(", "url", ")", ";", "}", "return", "originUrl", ";", "}"], "nl_tokens": ["returns", "the", "protocol", ",", "domain", "and", "port", "of", "the", "url", ".", "the", "origin", "does", "not", "typically", "include", "a", "trailing", "slash", ".", "concode_field_sep", "String", "SCHEME_HTTPS", "concode_elem_sep", "String", "SCHEME_FILE", "concode_elem_sep", "String", "SCHEME_HTTP", "concode_elem_sep", "String", "originUrl", "concode_elem_sep", "String", "applicationUrl", "concode_elem_sep", "String", "lastPathComponent", "concode_elem_sep", "String", "url", "concode_field_sep", "String", "getApplicationUrlImpl", "concode_elem_sep", "String", "getLastPathComponent", "concode_elem_sep", "String", "getUrl", "concode_elem_sep", "String", "getScheme", "concode_elem_sep", "String", "convertToRelativeUrl", "concode_elem_sep", "String", "getResourceBase", "concode_elem_sep", "String", "getPath", "concode_elem_sep", "String", "getApplicationUrl", "concode_elem_sep", "String", "extractOriginImpl", "concode_elem_sep", "String", "getUrlWithoutHash", "concode_elem_sep", "String", "getUrlWithoutHash"]}
{"code": "List < Integer > function ( String arg0 ) { List < Integer > loc0 = new ArrayList < Integer > ( ) ; try { Scanner loc1 = new Scanner ( new File ( arg0 ) ) ; while ( loc1 . hasNextInt ( ) ) { loc0 . add ( loc1 . nextInt ( ) ) ; } } catch ( Exception loc1 ) { feedback += \"srini_string\" ; } return loc0 ; }", "nl": "read a correct answer from a file . concode_field_sep String feedback concode_elem_sep int correct concode_elem_sep int TESTS concode_field_sep String printOutput concode_elem_sep void runSpecialTest concode_elem_sep String appendFeedback concode_elem_sep void main concode_elem_sep void run concode_elem_sep String printList concode_elem_sep void judge concode_elem_sep void runTest", "code_tokens": ["List", "<", "Integer", ">", "function", "(", "String", "arg0", ")", "{", "List", "<", "Integer", ">", "loc0", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "try", "{", "Scanner", "loc1", "=", "new", "Scanner", "(", "new", "File", "(", "arg0", ")", ")", ";", "while", "(", "loc1", ".", "hasNextInt", "(", ")", ")", "{", "loc0", ".", "add", "(", "loc1", ".", "nextInt", "(", ")", ")", ";", "}", "}", "catch", "(", "Exception", "loc1", ")", "{", "feedback", "+=", "\"srini_string\"", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["read", "a", "correct", "answer", "from", "a", "file", ".", "concode_field_sep", "String", "feedback", "concode_elem_sep", "int", "correct", "concode_elem_sep", "int", "TESTS", "concode_field_sep", "String", "printOutput", "concode_elem_sep", "void", "runSpecialTest", "concode_elem_sep", "String", "appendFeedback", "concode_elem_sep", "void", "main", "concode_elem_sep", "void", "run", "concode_elem_sep", "String", "printList", "concode_elem_sep", "void", "judge", "concode_elem_sep", "void", "runTest"]}
{"code": "void function ( ) { if ( fFilesSaved && ResourcesPlugin . getWorkspace ( ) . getDescription ( ) . isAutoBuilding ( ) ) { new GlobalBuildAction ( JavaPlugin . getActiveWorkbenchWindow ( ) , IncrementalProjectBuilder . INCREMENTAL_BUILD ) . run ( ) ; } }", "nl": "triggers an incremental build if this save helper did save files before . concode_field_sep boolean fFilesSaved concode_elem_sep int SAVE_ALL concode_elem_sep int SAVE_REFACTORING concode_elem_sep int fSaveMode concode_elem_sep int SAVE_NOTHING concode_elem_sep int SAVE_ALL_ALWAYS_ASK concode_field_sep boolean didSaveFiles concode_elem_sep ILabelProvider createDialogLabelProvider concode_elem_sep boolean saveEditors concode_elem_sep boolean askSaveAllDirtyEditors", "code_tokens": ["void", "function", "(", ")", "{", "if", "(", "fFilesSaved", "&", "&", "ResourcesPlugin", ".", "getWorkspace", "(", ")", ".", "getDescription", "(", ")", ".", "isAutoBuilding", "(", ")", ")", "{", "new", "GlobalBuildAction", "(", "JavaPlugin", ".", "getActiveWorkbenchWindow", "(", ")", ",", "IncrementalProjectBuilder", ".", "INCREMENTAL_BUILD", ")", ".", "run", "(", ")", ";", "}", "}"], "nl_tokens": ["triggers", "an", "incremental", "build", "if", "this", "save", "helper", "did", "save", "files", "before", ".", "concode_field_sep", "boolean", "fFilesSaved", "concode_elem_sep", "int", "SAVE_ALL", "concode_elem_sep", "int", "SAVE_REFACTORING", "concode_elem_sep", "int", "fSaveMode", "concode_elem_sep", "int", "SAVE_NOTHING", "concode_elem_sep", "int", "SAVE_ALL_ALWAYS_ASK", "concode_field_sep", "boolean", "didSaveFiles", "concode_elem_sep", "ILabelProvider", "createDialogLabelProvider", "concode_elem_sep", "boolean", "saveEditors", "concode_elem_sep", "boolean", "askSaveAllDirtyEditors"]}
{"code": "String function ( String arg0 ) { if ( TextUtils . isEmpty ( arg0 ) ) { return arg0 ; } arg0 = DATE_CLEANUP_PATTERN_WRONG_TIMEZONE . matcher ( arg0 ) . replaceFirst ( \"srini_string\" ) ; return arg0 ; }", "nl": "try to make a date mime rfc 2822/5322 - compliant . it fixes : - `` thu , 10 dec 09 15:08:08 gmt-0700 '' to `` thu , 10 dec 09 15:08:08 -0700 '' 4 digit zone value ca n't be preceded by `` gmt '' we got a report saying ebay sends a date in this format concode_field_sep int WARN concode_elem_sep Boolean sDebugLoggingEnabledForTests concode_elem_sep Pattern DATE_CLEANUP_PATTERN_WRONG_TIMEZONE concode_elem_sep int VERBOSE concode_elem_sep int MAX_ENABLED_LOG_LEVEL concode_elem_sep int ERROR concode_elem_sep int DEBUG concode_elem_sep int INFO concode_elem_sep String TAG concode_field_sep boolean isLoggable concode_elem_sep int d concode_elem_sep int d concode_elem_sep int e concode_elem_sep int e concode_elem_sep int v concode_elem_sep int v concode_elem_sep int w concode_elem_sep int w concode_elem_sep int wtf concode_elem_sep int wtf concode_elem_sep String byteToHex concode_elem_sep StringBuilder byteToHex concode_elem_sep int i concode_elem_sep int i concode_elem_sep boolean buildPreventsDebugLogging concode_elem_sep boolean isDebugLoggingEnabled concode_elem_sep void setDebugLoggingEnabledForTests", "code_tokens": ["String", "function", "(", "String", "arg0", ")", "{", "if", "(", "TextUtils", ".", "isEmpty", "(", "arg0", ")", ")", "{", "return", "arg0", ";", "}", "arg0", "=", "DATE_CLEANUP_PATTERN_WRONG_TIMEZONE", ".", "matcher", "(", "arg0", ")", ".", "replaceFirst", "(", "\"srini_string\"", ")", ";", "return", "arg0", ";", "}"], "nl_tokens": ["try", "to", "make", "a", "date", "mime", "rfc", "2822", "/", "5322", "-", "compliant", ".", "it", "fixes", ":", "-", "`", "`", "thu", ",", "10", "dec", "0", "9", "15", ":", "0", "8", ":", "0", "8", "gmt", "-", "0", "700", "''", "to", "`", "`", "thu", ",", "10", "dec", "0", "9", "15", ":", "0", "8", ":", "0", "8", "-", "0", "700", "''", "4", "digit", "zone", "value", "ca", "n", "'t be preceded by `` gmt '", "'", "we", "got", "a", "report", "saying", "ebay", "sends", "a", "date", "in", "this", "format", "concode_field_sep", "int", "WARN", "concode_elem_sep", "Boolean", "sDebugLoggingEnabledForTests", "concode_elem_sep", "Pattern", "DATE_CLEANUP_PATTERN_WRONG_TIMEZONE", "concode_elem_sep", "int", "VERBOSE", "concode_elem_sep", "int", "MAX_ENABLED_LOG_LEVEL", "concode_elem_sep", "int", "ERROR", "concode_elem_sep", "int", "DEBUG", "concode_elem_sep", "int", "INFO", "concode_elem_sep", "String", "TAG", "concode_field_sep", "boolean", "isLoggable", "concode_elem_sep", "int", "d", "concode_elem_sep", "int", "d", "concode_elem_sep", "int", "e", "concode_elem_sep", "int", "e", "concode_elem_sep", "int", "v", "concode_elem_sep", "int", "v", "concode_elem_sep", "int", "w", "concode_elem_sep", "int", "w", "concode_elem_sep", "int", "wtf", "concode_elem_sep", "int", "wtf", "concode_elem_sep", "String", "byteToHex", "concode_elem_sep", "StringBuilder", "byteToHex", "concode_elem_sep", "int", "i", "concode_elem_sep", "int", "i", "concode_elem_sep", "boolean", "buildPreventsDebugLogging", "concode_elem_sep", "boolean", "isDebugLoggingEnabled", "concode_elem_sep", "void", "setDebugLoggingEnabledForTests"]}
{"code": "void function ( ResourceEntity arg0 ) { List < SoftlinkRelationEntity > loc0 = getSoftlinksForCpi ( arg0 ) ; arg0 . clearSoftlinkRelations ( ) ; for ( SoftlinkRelationEntity loc1 : loc0 ) { entityManager . remove ( loc1 ) ; } }", "nl": "removes the softlinkrelation of a cpi resource . concode_field_sep EntityManager entityManager concode_elem_sep Logger log concode_elem_sep long serialVersionUID concode_elem_sep ResourceDependencyResolverService dependencyResolverService concode_field_sep void setSoftlinkRelation concode_elem_sep List<ResourceEntity> getConsumingResources concode_elem_sep SoftlinkRelationEntity getSoftLinkRelationByCpiAndSoftlinkRef concode_elem_sep List<SoftlinkRelationEntity> getSoftlinksForCpi concode_elem_sep ResourceEntity getSoftlinkResolvableSlaveResource", "code_tokens": ["void", "function", "(", "ResourceEntity", "arg0", ")", "{", "List", "<", "SoftlinkRelationEntity", ">", "loc0", "=", "getSoftlinksForCpi", "(", "arg0", ")", ";", "arg0", ".", "clearSoftlinkRelations", "(", ")", ";", "for", "(", "SoftlinkRelationEntity", "loc1", ":", "loc0", ")", "{", "entityManager", ".", "remove", "(", "loc1", ")", ";", "}", "}"], "nl_tokens": ["removes", "the", "softlinkrelation", "of", "a", "cpi", "resource", ".", "concode_field_sep", "EntityManager", "entityManager", "concode_elem_sep", "Logger", "log", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "ResourceDependencyResolverService", "dependencyResolverService", "concode_field_sep", "void", "setSoftlinkRelation", "concode_elem_sep", "List", "<", "ResourceEntity", ">", "getConsumingResources", "concode_elem_sep", "SoftlinkRelationEntity", "getSoftLinkRelationByCpiAndSoftlinkRef", "concode_elem_sep", "List", "<", "SoftlinkRelationEntity", ">", "getSoftlinksForCpi", "concode_elem_sep", "ResourceEntity", "getSoftlinkResolvableSlaveResource"]}
{"code": "Branch function ( String arg0 , String arg1 , int arg2 , int arg3 , boolean arg4 ) { Branch loc0 = new Branch ( arg0 , arg1 , arg2 , arg3 , arg4 ) ; Branch loc1 = savedBranchInfos . get ( loc0 ) ; if ( loc1 == null ) { savedBranchInfos . put ( loc0 , loc0 ) ; loc1 = loc0 ; } return loc1 ; }", "nl": "creates a new branch object . concode_field_sep int branchNumber concode_elem_sep Map<Branch,Branch> savedBranchInfos concode_elem_sep String methodName concode_elem_sep String className concode_elem_sep int lineNumber concode_elem_sep long serialVersionUID concode_elem_sep boolean branch concode_field_sep int getLineNumber concode_elem_sep void writeToFile concode_elem_sep String getMethodName concode_elem_sep Set<Branch> readFromFile concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Branch getOppositeBranch concode_elem_sep List<Pair<String,String>> readKeyValuePairs concode_elem_sep String toString concode_elem_sep String getClassName concode_elem_sep Branch parse", "code_tokens": ["Branch", "function", "(", "String", "arg0", ",", "String", "arg1", ",", "int", "arg2", ",", "int", "arg3", ",", "boolean", "arg4", ")", "{", "Branch", "loc0", "=", "new", "Branch", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ",", "arg4", ")", ";", "Branch", "loc1", "=", "savedBranchInfos", ".", "get", "(", "loc0", ")", ";", "if", "(", "loc1", "==", "null", ")", "{", "savedBranchInfos", ".", "put", "(", "loc0", ",", "loc0", ")", ";", "loc1", "=", "loc0", ";", "}", "return", "loc1", ";", "}"], "nl_tokens": ["creates", "a", "new", "branch", "object", ".", "concode_field_sep", "int", "branchNumber", "concode_elem_sep", "Map", "<", "Branch", ",", "Branch", ">", "savedBranchInfos", "concode_elem_sep", "String", "methodName", "concode_elem_sep", "String", "className", "concode_elem_sep", "int", "lineNumber", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "boolean", "branch", "concode_field_sep", "int", "getLineNumber", "concode_elem_sep", "void", "writeToFile", "concode_elem_sep", "String", "getMethodName", "concode_elem_sep", "Set", "<", "Branch", ">", "readFromFile", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Branch", "getOppositeBranch", "concode_elem_sep", "List", "<", "Pair", "<", "String", ",", "String", ">>", "readKeyValuePairs", "concode_elem_sep", "String", "toString", "concode_elem_sep", "String", "getClassName", "concode_elem_sep", "Branch", "parse"]}
{"code": "String [ ] function ( QueryCondition [ ] arg0 ) { String [ ] loc0 = new String [ arg0 . length ] ; for ( int loc1 = 0 ; loc1 < loc0 . length ; loc1 ++ ) loc0 [ loc1 ] = arg0 [ loc1 ] . getColumnName ( ) + \"srini_string\" + arg0 [ loc1 ] . getOperator ( ) . toString ( ) + \"srini_string\" ; return loc0 ; }", "nl": "construye la clausula where de un statement a partir de las condiciones especificadas . concode_field_sep DataSource ds concode_field_sep Object[] serializeObjectForIncremental concode_elem_sep String[] getColumnNames concode_elem_sep String getIncrementalColumnName concode_elem_sep String getTableName concode_elem_sep void update concode_elem_sep void insert concode_elem_sep Object[] serializeKey concode_elem_sep QueryCondition[] getConditionsFromKey concode_elem_sep String[] getKeyColumnNames concode_elem_sep List<T> findAll concode_elem_sep void delete concode_elem_sep T buildObject concode_elem_sep T findById concode_elem_sep Object[] serializeObject concode_elem_sep boolean truncateTable concode_elem_sep List<T> findByConditions concode_elem_sep K getKeyFromObject", "code_tokens": ["String", "[", "]", "function", "(", "QueryCondition", "[", "]", "arg0", ")", "{", "String", "[", "]", "loc0", "=", "new", "String", "[", "arg0", ".", "length", "]", ";", "for", "(", "int", "loc1", "=", "0", ";", "loc1", "<", "loc0", ".", "length", ";", "loc1", "+", "+", ")", "loc0", "[", "loc1", "]", "=", "arg0", "[", "loc1", "]", ".", "getColumnName", "(", ")", "+", "\"srini_string\"", "+", "arg0", "[", "loc1", "]", ".", "getOperator", "(", ")", ".", "toString", "(", ")", "+", "\"srini_string\"", ";", "return", "loc0", ";", "}"], "nl_tokens": ["construye", "la", "clausula", "where", "de", "un", "statement", "a", "partir", "de", "las", "condiciones", "especificadas", ".", "concode_field_sep", "DataSource", "ds", "concode_field_sep", "Object", "[", "]", "serializeObjectForIncremental", "concode_elem_sep", "String", "[", "]", "getColumnNames", "concode_elem_sep", "String", "getIncrementalColumnName", "concode_elem_sep", "String", "getTableName", "concode_elem_sep", "void", "update", "concode_elem_sep", "void", "insert", "concode_elem_sep", "Object", "[", "]", "serializeKey", "concode_elem_sep", "QueryCondition", "[", "]", "getConditionsFromKey", "concode_elem_sep", "String", "[", "]", "getKeyColumnNames", "concode_elem_sep", "List", "<", "T", ">", "findAll", "concode_elem_sep", "void", "delete", "concode_elem_sep", "T", "buildObject", "concode_elem_sep", "T", "findById", "concode_elem_sep", "Object", "[", "]", "serializeObject", "concode_elem_sep", "boolean", "truncateTable", "concode_elem_sep", "List", "<", "T", ">", "findByConditions", "concode_elem_sep", "K", "getKeyFromObject"]}
{"code": "boolean function ( String arg0 ) { final String loc0 = arg0 . toLowerCase ( Locale . ROOT ) ; return userFunctions . containsKey ( loc0 ) || dialect . getFunctions ( ) . containsKey ( loc0 ) ; }", "nl": "does this registry contain the named function concode_field_sep Dialect dialect concode_elem_sep Map<String,SQLFunction> userFunctions concode_field_sep SQLFunction findSQLFunction", "code_tokens": ["boolean", "function", "(", "String", "arg0", ")", "{", "final", "String", "loc0", "=", "arg0", ".", "toLowerCase", "(", "Locale", ".", "ROOT", ")", ";", "return", "userFunctions", ".", "containsKey", "(", "loc0", ")", "|", "|", "dialect", ".", "getFunctions", "(", ")", ".", "containsKey", "(", "loc0", ")", ";", "}"], "nl_tokens": ["does", "this", "registry", "contain", "the", "named", "function", "concode_field_sep", "Dialect", "dialect", "concode_elem_sep", "Map", "<", "String", ",", "SQLFunction", ">", "userFunctions", "concode_field_sep", "SQLFunction", "findSQLFunction"]}
{"code": "void function ( ) { assertEquals ( 127 , WebColors . getRGBColor ( RGB_MISSING_COLOR_VALUES ) . getRed ( ) ) ; }", "nl": "test method for com.itextpdf.text.html.webcolors #getrgbcolor java.lang.string . concode_field_sep String RGB_PERCENT concode_elem_sep String RGB_OUT_OF_RANGE concode_elem_sep String RGB_MISSING_COLOR_VALUES concode_field_sep String dumpColor concode_elem_sep void testGetRGBColorInPercentBlue concode_elem_sep void testGetRGBColorValueOutOfRange concode_elem_sep void testGetRGBColorChannelsMissingBlue concode_elem_sep void moreColorTest concode_elem_sep void testGetRGBColorInPercentRed concode_elem_sep void testGetRGBColorInPercentAlpha concode_elem_sep void testGetRGBColorInPercentGreen concode_elem_sep void goodColorTests concode_elem_sep void testGetRGBColorChannelsMissingGreen concode_elem_sep void badColorTests concode_elem_sep void testGetRGBColorNegativeValue", "code_tokens": ["void", "function", "(", ")", "{", "assertEquals", "(", "127", ",", "WebColors", ".", "getRGBColor", "(", "RGB_MISSING_COLOR_VALUES", ")", ".", "getRed", "(", ")", ")", ";", "}"], "nl_tokens": ["test", "method", "for", "com", ".", "itextpdf", ".", "text", ".", "html", ".", "webcolors", "#getrgbcolor java.lang.string . concode_field_sep String RGB_PERCENT concode_elem_sep String RGB_OUT_OF_RANGE concode_elem_sep String RGB_MISSING_COLOR_VALUES concode_field_sep String dumpColor concode_elem_sep void testGetRGBColorInPercentBlue concode_elem_sep void testGetRGBColorValueOutOfRange concode_elem_sep void testGetRGBColorChannelsMissingBlue concode_elem_sep void moreColorTest concode_elem_sep void testGetRGBColorInPercentRed concode_elem_sep void testGetRGBColorInPercentAlpha concode_elem_sep void testGetRGBColorInPercentGreen concode_elem_sep void goodColorTests concode_elem_sep void testGetRGBColorChannelsMissingGreen concode_elem_sep void badColorTests concode_elem_sep void testGetRGBColorNegativeValue"]}
{"code": "CodingErrorAction function ( final HttpParams arg0 ) { Args . notNull ( arg0 , \"srini_string\" ) ; final Object loc0 = arg0 . getParameter ( CoreProtocolPNames . HTTP_MALFORMED_INPUT_ACTION ) ; if ( loc0 == null ) { return CodingErrorAction . REPORT ; } return ( CodingErrorAction ) loc0 ; }", "nl": "obtains value of the coreprotocolpnames #http_malformed_input_action parameter . concode_field_sep PlaceHolder placeHolder concode_field_sep ProtocolVersion getVersion concode_elem_sep CodingErrorAction getUnmappableInputAction concode_elem_sep void setUnmappableInputAction concode_elem_sep void setVersion concode_elem_sep void setUserAgent concode_elem_sep String getHttpElementCharset concode_elem_sep boolean useExpectContinue concode_elem_sep void setHttpElementCharset concode_elem_sep void setMalformedInputAction concode_elem_sep String getUserAgent concode_elem_sep String getContentCharset concode_elem_sep void setUseExpectContinue concode_elem_sep void setContentCharset", "code_tokens": ["CodingErrorAction", "function", "(", "final", "HttpParams", "arg0", ")", "{", "Args", ".", "notNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "final", "Object", "loc0", "=", "arg0", ".", "getParameter", "(", "CoreProtocolPNames", ".", "HTTP_MALFORMED_INPUT_ACTION", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "return", "CodingErrorAction", ".", "REPORT", ";", "}", "return", "(", "CodingErrorAction", ")", "loc0", ";", "}"], "nl_tokens": ["obtains", "value", "of", "the", "coreprotocolpnames", "#http_malformed_input_action parameter . concode_field_sep PlaceHolder placeHolder concode_field_sep ProtocolVersion getVersion concode_elem_sep CodingErrorAction getUnmappableInputAction concode_elem_sep void setUnmappableInputAction concode_elem_sep void setVersion concode_elem_sep void setUserAgent concode_elem_sep String getHttpElementCharset concode_elem_sep boolean useExpectContinue concode_elem_sep void setHttpElementCharset concode_elem_sep void setMalformedInputAction concode_elem_sep String getUserAgent concode_elem_sep String getContentCharset concode_elem_sep void setUseExpectContinue concode_elem_sep void setContentCharset"]}
{"code": "List < ByteBuffer > function ( ) { return this . requestPayload ; }", "nl": "returns the serialized payload of the request in this rpc . will only be generated from a requestor and will not include handshake or meta-data . if the request payload has not been set yet , returns null . concode_field_sep Map<String,ByteBuffer> requestCallMeta concode_elem_sep Map<String,ByteBuffer> responseCallMeta concode_elem_sep Object response concode_elem_sep List<ByteBuffer> requestPayload concode_elem_sep List<ByteBuffer> responsePayload concode_elem_sep HandshakeRequest handshakeRequest concode_elem_sep HandshakeResponse handshakeResponse concode_elem_sep Exception error concode_elem_sep Message message concode_field_sep void setResponseCallMeta concode_elem_sep void setRequestHandshakeMeta concode_elem_sep Map<String,ByteBuffer> requestHandshakeMeta concode_elem_sep void setRequestPayload concode_elem_sep void setResponsePayload concode_elem_sep Message getMessage concode_elem_sep void setResponse concode_elem_sep void setResponseHandshakeMeta concode_elem_sep void setRequestCallMeta concode_elem_sep Exception error concode_elem_sep void setMessage concode_elem_sep void setHandshakeRequest concode_elem_sep Map<String,ByteBuffer> responseHandshakeMeta concode_elem_sep Map<String,ByteBuffer> requestCallMeta concode_elem_sep boolean isError concode_elem_sep Map<String,ByteBuffer> responseCallMeta concode_elem_sep HandshakeRequest getHandshakeRequest concode_elem_sep Object response concode_elem_sep void setError concode_elem_sep void setHandshakeResponse concode_elem_sep HandshakeResponse getHandshakeResponse concode_elem_sep List<ByteBuffer> getResponsePayload", "code_tokens": ["List", "<", "ByteBuffer", ">", "function", "(", ")", "{", "return", "this", ".", "requestPayload", ";", "}"], "nl_tokens": ["returns", "the", "serialized", "payload", "of", "the", "request", "in", "this", "rpc", ".", "will", "only", "be", "generated", "from", "a", "requestor", "and", "will", "not", "include", "handshake", "or", "meta", "-", "data", ".", "if", "the", "request", "payload", "has", "not", "been", "set", "yet", ",", "returns", "null", ".", "concode_field_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "requestCallMeta", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseCallMeta", "concode_elem_sep", "Object", "response", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "requestPayload", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "responsePayload", "concode_elem_sep", "HandshakeRequest", "handshakeRequest", "concode_elem_sep", "HandshakeResponse", "handshakeResponse", "concode_elem_sep", "Exception", "error", "concode_elem_sep", "Message", "message", "concode_field_sep", "void", "setResponseCallMeta", "concode_elem_sep", "void", "setRequestHandshakeMeta", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "requestHandshakeMeta", "concode_elem_sep", "void", "setRequestPayload", "concode_elem_sep", "void", "setResponsePayload", "concode_elem_sep", "Message", "getMessage", "concode_elem_sep", "void", "setResponse", "concode_elem_sep", "void", "setResponseHandshakeMeta", "concode_elem_sep", "void", "setRequestCallMeta", "concode_elem_sep", "Exception", "error", "concode_elem_sep", "void", "setMessage", "concode_elem_sep", "void", "setHandshakeRequest", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseHandshakeMeta", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "requestCallMeta", "concode_elem_sep", "boolean", "isError", "concode_elem_sep", "Map", "<", "String", ",", "ByteBuffer", ">", "responseCallMeta", "concode_elem_sep", "HandshakeRequest", "getHandshakeRequest", "concode_elem_sep", "Object", "response", "concode_elem_sep", "void", "setError", "concode_elem_sep", "void", "setHandshakeResponse", "concode_elem_sep", "HandshakeResponse", "getHandshakeResponse", "concode_elem_sep", "List", "<", "ByteBuffer", ">", "getResponsePayload"]}
{"code": "Iterator function ( ) { return iterator ; }", "nl": "gets the iterator this iterator is using . concode_field_sep Iterator iterator concode_elem_sep Transformer transformer concode_field_sep Object next concode_elem_sep Object transform concode_elem_sep Transformer getTransformer concode_elem_sep boolean hasNext concode_elem_sep void setTransformer concode_elem_sep void remove concode_elem_sep void setIterator", "code_tokens": ["Iterator", "function", "(", ")", "{", "return", "iterator", ";", "}"], "nl_tokens": ["gets", "the", "iterator", "this", "iterator", "is", "using", ".", "concode_field_sep", "Iterator", "iterator", "concode_elem_sep", "Transformer", "transformer", "concode_field_sep", "Object", "next", "concode_elem_sep", "Object", "transform", "concode_elem_sep", "Transformer", "getTransformer", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "setTransformer", "concode_elem_sep", "void", "remove", "concode_elem_sep", "void", "setIterator"]}
{"code": "void function ( Object arg0 , Throwable arg1 ) { if ( is12 ) { getLogger ( ) . log ( FQCN , ( Priority ) Level . ERROR , arg0 , arg1 ) ; } else { getLogger ( ) . log ( FQCN , Level . ERROR , arg0 , arg1 ) ; } }", "nl": "log an error to the log4j logger with error priority . concode_field_sep String name concode_elem_sep boolean is12 concode_elem_sep Logger logger concode_elem_sep String FQCN concode_field_sep void warn concode_elem_sep void warn concode_elem_sep void trace concode_elem_sep void trace concode_elem_sep void debug concode_elem_sep void debug concode_elem_sep boolean isInfoEnabled concode_elem_sep boolean isErrorEnabled concode_elem_sep Logger getLogger concode_elem_sep boolean isTraceEnabled concode_elem_sep boolean isWarnEnabled concode_elem_sep boolean isDebugEnabled concode_elem_sep boolean isFatalEnabled concode_elem_sep void fatal concode_elem_sep void fatal concode_elem_sep void info concode_elem_sep void info", "code_tokens": ["void", "function", "(", "Object", "arg0", ",", "Throwable", "arg1", ")", "{", "if", "(", "is12", ")", "{", "getLogger", "(", ")", ".", "log", "(", "FQCN", ",", "(", "Priority", ")", "Level", ".", "ERROR", ",", "arg0", ",", "arg1", ")", ";", "}", "else", "{", "getLogger", "(", ")", ".", "log", "(", "FQCN", ",", "Level", ".", "ERROR", ",", "arg0", ",", "arg1", ")", ";", "}", "}"], "nl_tokens": ["log", "an", "error", "to", "the", "log4j", "logger", "with", "error", "priority", ".", "concode_field_sep", "String", "name", "concode_elem_sep", "boolean", "is12", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "String", "FQCN", "concode_field_sep", "void", "warn", "concode_elem_sep", "void", "warn", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "trace", "concode_elem_sep", "void", "debug", "concode_elem_sep", "void", "debug", "concode_elem_sep", "boolean", "isInfoEnabled", "concode_elem_sep", "boolean", "isErrorEnabled", "concode_elem_sep", "Logger", "getLogger", "concode_elem_sep", "boolean", "isTraceEnabled", "concode_elem_sep", "boolean", "isWarnEnabled", "concode_elem_sep", "boolean", "isDebugEnabled", "concode_elem_sep", "boolean", "isFatalEnabled", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "fatal", "concode_elem_sep", "void", "info", "concode_elem_sep", "void", "info"]}
{"code": "File function ( ) { return outputDir ; }", "nl": "get the directory into which commited class files should be written . concode_field_sep File outputDir concode_elem_sep LinkedList cache concode_elem_sep ClassSource _classSource concode_elem_sep String classpath concode_elem_sep Map openZipFiles concode_elem_sep boolean DEBUG concode_elem_sep boolean USE_SYSTEM_CLASSES concode_elem_sep int CACHE_LIMIT concode_elem_sep boolean verbose concode_field_sep void setOutputDir concode_elem_sep ClassInfo loadClassFromStream concode_elem_sep void appendClassPath concode_elem_sep ClassInfo loadClassFromFile concode_elem_sep void setVerbose concode_elem_sep ClassInfo[] loadClassesFromZipFile concode_elem_sep void done concode_elem_sep void prependClassPath concode_elem_sep OutputStream outputStreamFor concode_elem_sep OutputStream outputStreamFor concode_elem_sep void setClassPath concode_elem_sep String getClassPath concode_elem_sep void addToCache concode_elem_sep ClassInfo newClass concode_elem_sep ClassInfo loadClassFromRessource concode_elem_sep ClassInfo loadClass concode_elem_sep void writeEntry", "code_tokens": ["File", "function", "(", ")", "{", "return", "outputDir", ";", "}"], "nl_tokens": ["get", "the", "directory", "into", "which", "commited", "class", "files", "should", "be", "written", ".", "concode_field_sep", "File", "outputDir", "concode_elem_sep", "LinkedList", "cache", "concode_elem_sep", "ClassSource", "_classSource", "concode_elem_sep", "String", "classpath", "concode_elem_sep", "Map", "openZipFiles", "concode_elem_sep", "boolean", "DEBUG", "concode_elem_sep", "boolean", "USE_SYSTEM_CLASSES", "concode_elem_sep", "int", "CACHE_LIMIT", "concode_elem_sep", "boolean", "verbose", "concode_field_sep", "void", "setOutputDir", "concode_elem_sep", "ClassInfo", "loadClassFromStream", "concode_elem_sep", "void", "appendClassPath", "concode_elem_sep", "ClassInfo", "loadClassFromFile", "concode_elem_sep", "void", "setVerbose", "concode_elem_sep", "ClassInfo", "[", "]", "loadClassesFromZipFile", "concode_elem_sep", "void", "done", "concode_elem_sep", "void", "prependClassPath", "concode_elem_sep", "OutputStream", "outputStreamFor", "concode_elem_sep", "OutputStream", "outputStreamFor", "concode_elem_sep", "void", "setClassPath", "concode_elem_sep", "String", "getClassPath", "concode_elem_sep", "void", "addToCache", "concode_elem_sep", "ClassInfo", "newClass", "concode_elem_sep", "ClassInfo", "loadClassFromRessource", "concode_elem_sep", "ClassInfo", "loadClass", "concode_elem_sep", "void", "writeEntry"]}
{"code": "Collection < IDocumentSet > function ( ) { return Collections . unmodifiableCollection ( resources . values ( ) ) ; }", "nl": "returns all document sets that were declared in the xml config file . concode_field_sep Map<String,IDocumentSet> resources concode_elem_sep Map<IDocumentSet,Boolean> resourcesOfSetPublished concode_elem_sep int resourceOffset concode_elem_sep DocumentSpace inst concode_elem_sep MultiSet<Integer> publishedRanks concode_field_sep void setUseRanks concode_elem_sep void setResourceSet concode_elem_sep IDocumentSet getResourceSet concode_elem_sep void activateMyPublishedKeys concode_elem_sep int getKeyForLookup concode_elem_sep DocumentSpace getInstance concode_elem_sep Set<Integer> getSomeKeysForPublish concode_elem_sep void deactivateMyPublishedKeys concode_elem_sep void recalculateIfResourcesOfSetPublished", "code_tokens": ["Collection", "<", "IDocumentSet", ">", "function", "(", ")", "{", "return", "Collections", ".", "unmodifiableCollection", "(", "resources", ".", "values", "(", ")", ")", ";", "}"], "nl_tokens": ["returns", "all", "document", "sets", "that", "were", "declared", "in", "the", "xml", "config", "file", ".", "concode_field_sep", "Map", "<", "String", ",", "IDocumentSet", ">", "resources", "concode_elem_sep", "Map", "<", "IDocumentSet", ",", "Boolean", ">", "resourcesOfSetPublished", "concode_elem_sep", "int", "resourceOffset", "concode_elem_sep", "DocumentSpace", "inst", "concode_elem_sep", "MultiSet", "<", "Integer", ">", "publishedRanks", "concode_field_sep", "void", "setUseRanks", "concode_elem_sep", "void", "setResourceSet", "concode_elem_sep", "IDocumentSet", "getResourceSet", "concode_elem_sep", "void", "activateMyPublishedKeys", "concode_elem_sep", "int", "getKeyForLookup", "concode_elem_sep", "DocumentSpace", "getInstance", "concode_elem_sep", "Set", "<", "Integer", ">", "getSomeKeysForPublish", "concode_elem_sep", "void", "deactivateMyPublishedKeys", "concode_elem_sep", "void", "recalculateIfResourcesOfSetPublished"]}
{"code": "Predicate function ( ) { return iPredicate ; }", "nl": "gets the predicate in use . concode_field_sep boolean iDoLoop concode_elem_sep Predicate iPredicate concode_elem_sep Closure iClosure concode_elem_sep long serialVersionUID concode_field_sep Closure getClosure concode_elem_sep boolean isDoLoop concode_elem_sep Closure getInstance concode_elem_sep void execute", "code_tokens": ["Predicate", "function", "(", ")", "{", "return", "iPredicate", ";", "}"], "nl_tokens": ["gets", "the", "predicate", "in", "use", ".", "concode_field_sep", "boolean", "iDoLoop", "concode_elem_sep", "Predicate", "iPredicate", "concode_elem_sep", "Closure", "iClosure", "concode_elem_sep", "long", "serialVersionUID", "concode_field_sep", "Closure", "getClosure", "concode_elem_sep", "boolean", "isDoLoop", "concode_elem_sep", "Closure", "getInstance", "concode_elem_sep", "void", "execute"]}
{"code": "Object [ ] function ( Object [ ] arg0 ) { return extractList ( ) . toArray ( arg0 ) ; }", "nl": "returns an array of all of this bag 's elements . concode_field_sep Object _current concode_elem_sep int _total concode_elem_sep DefaultMapBag _parent concode_elem_sep Map _map concode_elem_sep int _mods concode_elem_sep Iterator _support concode_field_sep boolean add concode_elem_sep boolean add concode_elem_sep Object next concode_elem_sep boolean containsAll concode_elem_sep boolean containsAll concode_elem_sep void clear concode_elem_sep boolean isEmpty concode_elem_sep boolean hasNext concode_elem_sep void remove concode_elem_sep boolean remove concode_elem_sep boolean remove concode_elem_sep Map getMap concode_elem_sep int modCount concode_elem_sep boolean contains concode_elem_sep Iterator iterator concode_elem_sep boolean removeAll concode_elem_sep int size concode_elem_sep boolean addAll concode_elem_sep int hashCode concode_elem_sep int calcTotalSize concode_elem_sep boolean equals concode_elem_sep Set uniqueSet concode_elem_sep void setMap concode_elem_sep String toString concode_elem_sep int getCount concode_elem_sep List extractList concode_elem_sep boolean retainAll concode_elem_sep boolean retainAll", "code_tokens": ["Object", "[", "]", "function", "(", "Object", "[", "]", "arg0", ")", "{", "return", "extractList", "(", ")", ".", "toArray", "(", "arg0", ")", ";", "}"], "nl_tokens": ["returns", "an", "array", "of", "all", "of", "this", "bag", "'", "s", "elements", ".", "concode_field_sep", "Object", "_current", "concode_elem_sep", "int", "_total", "concode_elem_sep", "DefaultMapBag", "_parent", "concode_elem_sep", "Map", "_map", "concode_elem_sep", "int", "_mods", "concode_elem_sep", "Iterator", "_support", "concode_field_sep", "boolean", "add", "concode_elem_sep", "boolean", "add", "concode_elem_sep", "Object", "next", "concode_elem_sep", "boolean", "containsAll", "concode_elem_sep", "boolean", "containsAll", "concode_elem_sep", "void", "clear", "concode_elem_sep", "boolean", "isEmpty", "concode_elem_sep", "boolean", "hasNext", "concode_elem_sep", "void", "remove", "concode_elem_sep", "boolean", "remove", "concode_elem_sep", "boolean", "remove", "concode_elem_sep", "Map", "getMap", "concode_elem_sep", "int", "modCount", "concode_elem_sep", "boolean", "contains", "concode_elem_sep", "Iterator", "iterator", "concode_elem_sep", "boolean", "removeAll", "concode_elem_sep", "int", "size", "concode_elem_sep", "boolean", "addAll", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "int", "calcTotalSize", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Set", "uniqueSet", "concode_elem_sep", "void", "setMap", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "getCount", "concode_elem_sep", "List", "extractList", "concode_elem_sep", "boolean", "retainAll", "concode_elem_sep", "boolean", "retainAll"]}
{"code": "boolean function ( Object arg0 ) { if ( ! ( arg0 instanceof BigDecimal ) ) { return false ; } BigDecimal loc0 = ( BigDecimal ) arg0 ; return val . equals ( loc0 . val ) ; }", "nl": "comparison with any other object . concode_field_sep java.math.BigDecimal val concode_elem_sep int DEFAULT_PRECISION concode_elem_sep BigDecimal ZERO concode_elem_sep MathContext DEFAULT_CONTEXT concode_elem_sep MathContext context concode_elem_sep BigDecimal ONE concode_elem_sep Random random concode_field_sep boolean isField concode_elem_sep boolean isCommutative concode_elem_sep BigDecimal gcd concode_elem_sep BigDecimal sum concode_elem_sep int compareTo concode_elem_sep java.math.BigInteger characteristic concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep BigDecimal random concode_elem_sep int hashCode concode_elem_sep BigDecimal divide concode_elem_sep BigDecimal copy concode_elem_sep BigDecimal multiply concode_elem_sep int signum concode_elem_sep boolean isONE concode_elem_sep BigDecimal inverse concode_elem_sep BigDecimal valueOf concode_elem_sep BigDecimal valueOf concode_elem_sep boolean isUnit concode_elem_sep BigDecimal subtract concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal parse concode_elem_sep BigDecimal[] egcd concode_elem_sep BigDecimal abs concode_elem_sep BigDecimal[] divideAndRemainder concode_elem_sep BigDecimal negate concode_elem_sep BigDecimal clone concode_elem_sep BigDecimal getONE concode_elem_sep BigDecimal getZERO concode_elem_sep BigDecimal fromInteger concode_elem_sep BigDecimal fromInteger concode_elem_sep boolean isZERO concode_elem_sep boolean isAssociative concode_elem_sep String toString concode_elem_sep BigDecimal remainder", "code_tokens": ["boolean", "function", "(", "Object", "arg0", ")", "{", "if", "(", "!", "(", "arg0", "instanceof", "BigDecimal", ")", ")", "{", "return", "false", ";", "}", "BigDecimal", "loc0", "=", "(", "BigDecimal", ")", "arg0", ";", "return", "val", ".", "equals", "(", "loc0", ".", "val", ")", ";", "}"], "nl_tokens": ["comparison", "with", "any", "other", "object", ".", "concode_field_sep", "java", ".", "math", ".", "BigDecimal", "val", "concode_elem_sep", "int", "DEFAULT_PRECISION", "concode_elem_sep", "BigDecimal", "ZERO", "concode_elem_sep", "MathContext", "DEFAULT_CONTEXT", "concode_elem_sep", "MathContext", "context", "concode_elem_sep", "BigDecimal", "ONE", "concode_elem_sep", "Random", "random", "concode_field_sep", "boolean", "isField", "concode_elem_sep", "boolean", "isCommutative", "concode_elem_sep", "BigDecimal", "gcd", "concode_elem_sep", "BigDecimal", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "java", ".", "math", ".", "BigInteger", "characteristic", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "BigDecimal", "random", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "BigDecimal", "divide", "concode_elem_sep", "BigDecimal", "copy", "concode_elem_sep", "BigDecimal", "multiply", "concode_elem_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "BigDecimal", "inverse", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "BigDecimal", "valueOf", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "BigDecimal", "subtract", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "parse", "concode_elem_sep", "BigDecimal", "[", "]", "egcd", "concode_elem_sep", "BigDecimal", "abs", "concode_elem_sep", "BigDecimal", "[", "]", "divideAndRemainder", "concode_elem_sep", "BigDecimal", "negate", "concode_elem_sep", "BigDecimal", "clone", "concode_elem_sep", "BigDecimal", "getONE", "concode_elem_sep", "BigDecimal", "getZERO", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "BigDecimal", "fromInteger", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "boolean", "isAssociative", "concode_elem_sep", "String", "toString", "concode_elem_sep", "BigDecimal", "remainder"]}
{"code": "void function ( Throwable arg0 , Description arg1 ) { }", "nl": "invoked when a test fails concode_field_sep PlaceHolder placeHolder concode_field_sep void finishedQuietly concode_elem_sep Statement apply concode_elem_sep void startingQuietly concode_elem_sep void finished concode_elem_sep void succeededQuietly concode_elem_sep void starting concode_elem_sep void failedQuietly concode_elem_sep void skippedQuietly concode_elem_sep void succeeded concode_elem_sep void skipped", "code_tokens": ["void", "function", "(", "Throwable", "arg0", ",", "Description", "arg1", ")", "{", "}"], "nl_tokens": ["invoked", "when", "a", "test", "fails", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "finishedQuietly", "concode_elem_sep", "Statement", "apply", "concode_elem_sep", "void", "startingQuietly", "concode_elem_sep", "void", "finished", "concode_elem_sep", "void", "succeededQuietly", "concode_elem_sep", "void", "starting", "concode_elem_sep", "void", "failedQuietly", "concode_elem_sep", "void", "skippedQuietly", "concode_elem_sep", "void", "succeeded", "concode_elem_sep", "void", "skipped"]}
{"code": "void function ( ) { Tag loc0 = new Tag ( \"srini_string\" ) ; Tag loc1 = new Tag ( \"srini_string\" ) ; loc0 . addChild ( loc1 ) ; Assert . assertEquals ( loc0 , loc1 . getParent ( ) ) ; }", "nl": "validates that the tags parent is set when adding it as a child concode_field_sep PlaceHolder placeHolder concode_field_sep void validateChildrenNotNull concode_elem_sep void compareFalse concode_elem_sep void compareFalseTagAndNS concode_elem_sep void validateAttributesNotNull concode_elem_sep void validateCssNotNull concode_elem_sep void compareTrueNS concode_elem_sep void validateChildNotSetOnSetParent concode_elem_sep void compareTrue concode_elem_sep void compareFalseNS", "code_tokens": ["void", "function", "(", ")", "{", "Tag", "loc0", "=", "new", "Tag", "(", "\"srini_string\"", ")", ";", "Tag", "loc1", "=", "new", "Tag", "(", "\"srini_string\"", ")", ";", "loc0", ".", "addChild", "(", "loc1", ")", ";", "Assert", ".", "assertEquals", "(", "loc0", ",", "loc1", ".", "getParent", "(", ")", ")", ";", "}"], "nl_tokens": ["validates", "that", "the", "tags", "parent", "is", "set", "when", "adding", "it", "as", "a", "child", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "validateChildrenNotNull", "concode_elem_sep", "void", "compareFalse", "concode_elem_sep", "void", "compareFalseTagAndNS", "concode_elem_sep", "void", "validateAttributesNotNull", "concode_elem_sep", "void", "validateCssNotNull", "concode_elem_sep", "void", "compareTrueNS", "concode_elem_sep", "void", "validateChildNotSetOnSetParent", "concode_elem_sep", "void", "compareTrue", "concode_elem_sep", "void", "compareFalseNS"]}
{"code": "void function ( final NativeJSObject arg0 ) { final ContentResolver loc0 = context . getContentResolver ( ) ; final ContentValues loc1 = getContentValues ( arg0 ) ; ThreadUtils . postToBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { readingListAccessor . updateReadingListItem ( loc0 , loc1 ) ; } } ) ; }", "nl": "updates a reading list item with new meta data . concode_field_sep String LOGTAG concode_elem_sep ContentObserver contentObserver concode_elem_sep Context context concode_elem_sep OnReadingListEventListener onReadingListEventListener concode_elem_sep boolean fetchInBackground concode_elem_sep ReadingListAccessor readingListAccessor concode_elem_sep BrowserDB db concode_field_sep void handleReadingListStatusRequest concode_elem_sep void onAddedToReadingList concode_elem_sep void handleEvent concode_elem_sep void onRemovedFromReadingList concode_elem_sep void handleMessage concode_elem_sep void handleRemoveFromList concode_elem_sep void handleReaderModeFaviconRequest concode_elem_sep void uninit concode_elem_sep void disableBackgroundFetches concode_elem_sep void fetchContent concode_elem_sep void onAlreadyInReadingList concode_elem_sep ContentValues getContentValues concode_elem_sep void handleAddToList", "code_tokens": ["void", "function", "(", "final", "NativeJSObject", "arg0", ")", "{", "final", "ContentResolver", "loc0", "=", "context", ".", "getContentResolver", "(", ")", ";", "final", "ContentValues", "loc1", "=", "getContentValues", "(", "arg0", ")", ";", "ThreadUtils", ".", "postToBackgroundThread", "(", "new", "Runnable", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "readingListAccessor", ".", "updateReadingListItem", "(", "loc0", ",", "loc1", ")", ";", "}", "}", ")", ";", "}"], "nl_tokens": ["updates", "a", "reading", "list", "item", "with", "new", "meta", "data", ".", "concode_field_sep", "String", "LOGTAG", "concode_elem_sep", "ContentObserver", "contentObserver", "concode_elem_sep", "Context", "context", "concode_elem_sep", "OnReadingListEventListener", "onReadingListEventListener", "concode_elem_sep", "boolean", "fetchInBackground", "concode_elem_sep", "ReadingListAccessor", "readingListAccessor", "concode_elem_sep", "BrowserDB", "db", "concode_field_sep", "void", "handleReadingListStatusRequest", "concode_elem_sep", "void", "onAddedToReadingList", "concode_elem_sep", "void", "handleEvent", "concode_elem_sep", "void", "onRemovedFromReadingList", "concode_elem_sep", "void", "handleMessage", "concode_elem_sep", "void", "handleRemoveFromList", "concode_elem_sep", "void", "handleReaderModeFaviconRequest", "concode_elem_sep", "void", "uninit", "concode_elem_sep", "void", "disableBackgroundFetches", "concode_elem_sep", "void", "fetchContent", "concode_elem_sep", "void", "onAlreadyInReadingList", "concode_elem_sep", "ContentValues", "getContentValues", "concode_elem_sep", "void", "handleAddToList"]}
{"code": "Quotient < C > function ( ) { return new Quotient < C > ( ring , num . abs ( ) , den , true ) ; }", "nl": "quotient absolute value . concode_field_sep Logger logger concode_elem_sep QuotientRing<C> ring concode_elem_sep boolean debug concode_elem_sep GenPolynomial<C> num concode_elem_sep GenPolynomial<C> den concode_field_sep int signum concode_elem_sep boolean isONE concode_elem_sep Quotient<C> inverse concode_elem_sep boolean isUnit concode_elem_sep Quotient<C> subtract concode_elem_sep Quotient<C> gcd concode_elem_sep Quotient<C> sum concode_elem_sep int compareTo concode_elem_sep Quotient<C>[] egcd concode_elem_sep Quotient<C> monic concode_elem_sep int hashCode concode_elem_sep Quotient<C> negate concode_elem_sep boolean equals concode_elem_sep Quotient<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep Quotient<C> divide concode_elem_sep Quotient<C> multiply concode_elem_sep Quotient<C> multiply concode_elem_sep Quotient<C> remainder", "code_tokens": ["Quotient", "<", "C", ">", "function", "(", ")", "{", "return", "new", "Quotient", "<", "C", ">", "(", "ring", ",", "num", ".", "abs", "(", ")", ",", "den", ",", "true", ")", ";", "}"], "nl_tokens": ["quotient", "absolute", "value", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "QuotientRing", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "GenPolynomial", "<", "C", ">", "num", "concode_elem_sep", "GenPolynomial", "<", "C", ">", "den", "concode_field_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "Quotient", "<", "C", ">", "inverse", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "Quotient", "<", "C", ">", "subtract", "concode_elem_sep", "Quotient", "<", "C", ">", "gcd", "concode_elem_sep", "Quotient", "<", "C", ">", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Quotient", "<", "C", ">", "[", "]", "egcd", "concode_elem_sep", "Quotient", "<", "C", ">", "monic", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Quotient", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Quotient", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Quotient", "<", "C", ">", "divide", "concode_elem_sep", "Quotient", "<", "C", ">", "multiply", "concode_elem_sep", "Quotient", "<", "C", ">", "multiply", "concode_elem_sep", "Quotient", "<", "C", ">", "remainder"]}
{"code": "void function ( ) { if ( ! isActive ( ) ) return ; progressIntervals ( Simulator . getCurrentTime ( ) ) ; }", "nl": "has to be called before any event is being processed to check if the next interval has begun . concode_field_sep long end concode_elem_sep String outputFile concode_elem_sep FileAction fileAction concode_elem_sep List<Metric> metrics concode_elem_sep long intervalCounter concode_elem_sep ResultsWriter writer concode_elem_sep Metric time concode_elem_sep long interval concode_elem_sep Logger logger concode_elem_sep long start concode_field_sep void declareMetrics concode_elem_sep List<String> getMeasurementsFor concode_elem_sep void setAction concode_elem_sep void start concode_elem_sep void addMetric concode_elem_sep boolean isActive concode_elem_sep void setOutputFile concode_elem_sep List<String> getAllMetricsNames concode_elem_sep long timeFromIntervalCount concode_elem_sep void stop concode_elem_sep void setInterval concode_elem_sep void setStart concode_elem_sep void setEnd concode_elem_sep void progressIntervals", "code_tokens": ["void", "function", "(", ")", "{", "if", "(", "!", "isActive", "(", ")", ")", "return", ";", "progressIntervals", "(", "Simulator", ".", "getCurrentTime", "(", ")", ")", ";", "}"], "nl_tokens": ["has", "to", "be", "called", "before", "any", "event", "is", "being", "processed", "to", "check", "if", "the", "next", "interval", "has", "begun", ".", "concode_field_sep", "long", "end", "concode_elem_sep", "String", "outputFile", "concode_elem_sep", "FileAction", "fileAction", "concode_elem_sep", "List", "<", "Metric", ">", "metrics", "concode_elem_sep", "long", "intervalCounter", "concode_elem_sep", "ResultsWriter", "writer", "concode_elem_sep", "Metric", "time", "concode_elem_sep", "long", "interval", "concode_elem_sep", "Logger", "logger", "concode_elem_sep", "long", "start", "concode_field_sep", "void", "declareMetrics", "concode_elem_sep", "List", "<", "String", ">", "getMeasurementsFor", "concode_elem_sep", "void", "setAction", "concode_elem_sep", "void", "start", "concode_elem_sep", "void", "addMetric", "concode_elem_sep", "boolean", "isActive", "concode_elem_sep", "void", "setOutputFile", "concode_elem_sep", "List", "<", "String", ">", "getAllMetricsNames", "concode_elem_sep", "long", "timeFromIntervalCount", "concode_elem_sep", "void", "stop", "concode_elem_sep", "void", "setInterval", "concode_elem_sep", "void", "setStart", "concode_elem_sep", "void", "setEnd", "concode_elem_sep", "void", "progressIntervals"]}
{"code": "String function ( Plugin arg0 ) { return arg0 . getBundle ( ) . getSymbolicName ( ) ; }", "nl": "return the unique identifier of the given plug-in . concode_field_sep PlaceHolder placeHolder concode_field_sep PluginVersionIdentifier getVersion concode_elem_sep PluginVersionIdentifier getVersion concode_elem_sep URL getUrl concode_elem_sep URL getUrl concode_elem_sep String getName concode_elem_sep URL getInstallUrl concode_elem_sep URL getInstallUrl concode_elem_sep String getVersionString concode_elem_sep String getVersionString", "code_tokens": ["String", "function", "(", "Plugin", "arg0", ")", "{", "return", "arg0", ".", "getBundle", "(", ")", ".", "getSymbolicName", "(", ")", ";", "}"], "nl_tokens": ["return", "the", "unique", "identifier", "of", "the", "given", "plug", "-", "in", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "PluginVersionIdentifier", "getVersion", "concode_elem_sep", "PluginVersionIdentifier", "getVersion", "concode_elem_sep", "URL", "getUrl", "concode_elem_sep", "URL", "getUrl", "concode_elem_sep", "String", "getName", "concode_elem_sep", "URL", "getInstallUrl", "concode_elem_sep", "URL", "getInstallUrl", "concode_elem_sep", "String", "getVersionString", "concode_elem_sep", "String", "getVersionString"]}
{"code": "BigInteger function ( ) { return bigInt ; }", "nl": "returns the id biginteger concode_field_sep BigInteger bigInt concode_elem_sep TypesConfig config concode_field_sep KademliaOverlayKey toKey concode_elem_sep void checkBounds concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep BigInteger getUniqueValue concode_elem_sep String toBinary concode_elem_sep String toBinary concode_elem_sep String toString concode_elem_sep int compareTo concode_elem_sep byte[] getBytes", "code_tokens": ["BigInteger", "function", "(", ")", "{", "return", "bigInt", ";", "}"], "nl_tokens": ["returns", "the", "id", "biginteger", "concode_field_sep", "BigInteger", "bigInt", "concode_elem_sep", "TypesConfig", "config", "concode_field_sep", "KademliaOverlayKey", "toKey", "concode_elem_sep", "void", "checkBounds", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "BigInteger", "getUniqueValue", "concode_elem_sep", "String", "toBinary", "concode_elem_sep", "String", "toBinary", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "byte", "[", "]", "getBytes"]}
{"code": "Timeout function ( long arg0 ) { Assert . assertTrue ( arg0 > 0 ) ; synchronized ( fMutex ) { switch ( fState ) { case STOPPED : startThread ( ) ; setNextTimeout ( arg0 ) ; break ; case IDLE : unhold ( ) ; setNextTimeout ( arg0 ) ; break ; default : break ; } return fCurrentTimeoutState ; } }", "nl": "starts the timeout thread if it is not currently running . nothing happens if a thread is already running . concode_field_sep Thread fCurrentThread concode_elem_sep Timeout fCurrentTimeoutState concode_elem_sep int IDLE concode_elem_sep Display fDisplay concode_elem_sep Object fMutex concode_elem_sep boolean fTimeoutState concode_elem_sep long fNextTimeout concode_elem_sep boolean fKeepRunningOnTimeout concode_elem_sep int fState concode_elem_sep int RUNNING concode_elem_sep int STOPPED concode_field_sep Timeout restart concode_elem_sep void hold concode_elem_sep boolean tryTransition concode_elem_sep void setNextTimeout concode_elem_sep void stop concode_elem_sep boolean isState concode_elem_sep boolean hasTimedOut concode_elem_sep String name concode_elem_sep void checkedTransition concode_elem_sep void startThread concode_elem_sep void assertStates concode_elem_sep void setTimedOut concode_elem_sep void unhold", "code_tokens": ["Timeout", "function", "(", "long", "arg0", ")", "{", "Assert", ".", "assertTrue", "(", "arg0", ">", "0", ")", ";", "synchronized", "(", "fMutex", ")", "{", "switch", "(", "fState", ")", "{", "case", "STOPPED", ":", "startThread", "(", ")", ";", "setNextTimeout", "(", "arg0", ")", ";", "break", ";", "case", "IDLE", ":", "unhold", "(", ")", ";", "setNextTimeout", "(", "arg0", ")", ";", "break", ";", "default", ":", "break", ";", "}", "return", "fCurrentTimeoutState", ";", "}", "}"], "nl_tokens": ["starts", "the", "timeout", "thread", "if", "it", "is", "not", "currently", "running", ".", "nothing", "happens", "if", "a", "thread", "is", "already", "running", ".", "concode_field_sep", "Thread", "fCurrentThread", "concode_elem_sep", "Timeout", "fCurrentTimeoutState", "concode_elem_sep", "int", "IDLE", "concode_elem_sep", "Display", "fDisplay", "concode_elem_sep", "Object", "fMutex", "concode_elem_sep", "boolean", "fTimeoutState", "concode_elem_sep", "long", "fNextTimeout", "concode_elem_sep", "boolean", "fKeepRunningOnTimeout", "concode_elem_sep", "int", "fState", "concode_elem_sep", "int", "RUNNING", "concode_elem_sep", "int", "STOPPED", "concode_field_sep", "Timeout", "restart", "concode_elem_sep", "void", "hold", "concode_elem_sep", "boolean", "tryTransition", "concode_elem_sep", "void", "setNextTimeout", "concode_elem_sep", "void", "stop", "concode_elem_sep", "boolean", "isState", "concode_elem_sep", "boolean", "hasTimedOut", "concode_elem_sep", "String", "name", "concode_elem_sep", "void", "checkedTransition", "concode_elem_sep", "void", "startThread", "concode_elem_sep", "void", "assertStates", "concode_elem_sep", "void", "setTimedOut", "concode_elem_sep", "void", "unhold"]}
{"code": "void function ( ) { assertTrue ( \"srini_string\" + \"srini_string\" , readFirstLineOfFile ( INCORRECT_ROLE_AND_STOP_SERVER ) . contains ( DESTROY_METHOD_NOT_PASS ) ) ; }", "nl": "check whether servlet which uses runas with different role than in needed for secured ejb invocation can not correctly invoked that ejb method in httpservlet.destroy method during stopping server . concode_field_sep String DEPLOYMENT concode_elem_sep String incorrectRoleResult concode_elem_sep File CORRECT_ROLE_AND_UNDEPLOY concode_elem_sep String correctRoleResult concode_elem_sep File WORK_DIR concode_elem_sep ManagementClient managementClient concode_elem_sep Deployer deployer concode_elem_sep File INCORRECT_ROLE_AND_STOP_SERVER concode_elem_sep File INCORRECT_ROLE_AND_UNDEPLOY concode_elem_sep File CORRECT_ROLE_AND_STOP_SERVER concode_field_sep void checkDoGetMethodWithCorrectRole concode_elem_sep void runDestroyMethodInUndeploying concode_elem_sep void checkDoGetMethodWithIncorrectRole concode_elem_sep void checkDestroyInUndeployingMethodWithIncorrectRole concode_elem_sep String readFirstLineOfFile concode_elem_sep void checkDestroyMethodInStopServerWithCorrectRole concode_elem_sep void checkInitMethodWithIncorrectRole concode_elem_sep void checkInitMethodWithCorrectRole concode_elem_sep void checkDestroyInUndeployingMethodWithCorrectRole concode_elem_sep void runServletWithCorrectRole concode_elem_sep void finish concode_elem_sep void initialize concode_elem_sep void runServletWithIncorrectRole concode_elem_sep void runDestroyMethodInStopServer concode_elem_sep WebArchive deployment", "code_tokens": ["void", "function", "(", ")", "{", "assertTrue", "(", "\"srini_string\"", "+", "\"srini_string\"", ",", "readFirstLineOfFile", "(", "INCORRECT_ROLE_AND_STOP_SERVER", ")", ".", "contains", "(", "DESTROY_METHOD_NOT_PASS", ")", ")", ";", "}"], "nl_tokens": ["check", "whether", "servlet", "which", "uses", "runas", "with", "different", "role", "than", "in", "needed", "for", "secured", "ejb", "invocation", "can", "not", "correctly", "invoked", "that", "ejb", "method", "in", "httpservlet", ".", "destroy", "method", "during", "stopping", "server", ".", "concode_field_sep", "String", "DEPLOYMENT", "concode_elem_sep", "String", "incorrectRoleResult", "concode_elem_sep", "File", "CORRECT_ROLE_AND_UNDEPLOY", "concode_elem_sep", "String", "correctRoleResult", "concode_elem_sep", "File", "WORK_DIR", "concode_elem_sep", "ManagementClient", "managementClient", "concode_elem_sep", "Deployer", "deployer", "concode_elem_sep", "File", "INCORRECT_ROLE_AND_STOP_SERVER", "concode_elem_sep", "File", "INCORRECT_ROLE_AND_UNDEPLOY", "concode_elem_sep", "File", "CORRECT_ROLE_AND_STOP_SERVER", "concode_field_sep", "void", "checkDoGetMethodWithCorrectRole", "concode_elem_sep", "void", "runDestroyMethodInUndeploying", "concode_elem_sep", "void", "checkDoGetMethodWithIncorrectRole", "concode_elem_sep", "void", "checkDestroyInUndeployingMethodWithIncorrectRole", "concode_elem_sep", "String", "readFirstLineOfFile", "concode_elem_sep", "void", "checkDestroyMethodInStopServerWithCorrectRole", "concode_elem_sep", "void", "checkInitMethodWithIncorrectRole", "concode_elem_sep", "void", "checkInitMethodWithCorrectRole", "concode_elem_sep", "void", "checkDestroyInUndeployingMethodWithCorrectRole", "concode_elem_sep", "void", "runServletWithCorrectRole", "concode_elem_sep", "void", "finish", "concode_elem_sep", "void", "initialize", "concode_elem_sep", "void", "runServletWithIncorrectRole", "concode_elem_sep", "void", "runDestroyMethodInStopServer", "concode_elem_sep", "WebArchive", "deployment"]}
{"code": "boolean function ( ReflectClass arg0 ) { Iterator4 loc0 = _collectionPredicates . iterator ( ) ; while ( loc0 . moveNext ( ) ) { if ( ( ( ReflectClassPredicate ) loc0 . current ( ) ) . match ( arg0 ) ) { return true ; } } return _delegate . isCollection ( arg0 . getDelegate ( ) ) ; }", "nl": "determines if a candidate reflectclass is a collection concode_field_sep GenericArrayReflector _array concode_elem_sep Collection4 _collectionPredicates concode_elem_sep Hashtable4 _classByClass concode_elem_sep ObjectContainerBase _stream concode_elem_sep KnownClassesRepository _repository concode_elem_sep Transaction _trans concode_elem_sep Reflector _delegate concode_field_sep void setTransaction concode_elem_sep void registerCollection concode_elem_sep void registerCollection concode_elem_sep ReflectClass forName concode_elem_sep ReflectClass[] knownClasses concode_elem_sep void configuration concode_elem_sep GenericClass ensureDelegate concode_elem_sep GenericClass genericClass concode_elem_sep Reflector getDelegate concode_elem_sep ReflectClassPredicate classPredicate concode_elem_sep void registerPrimitiveClass concode_elem_sep boolean hasTransaction concode_elem_sep ReflectArray array concode_elem_sep Object deepClone concode_elem_sep ReflectClass forClass concode_elem_sep ReflectClass forGenericObject concode_elem_sep ObjectContainerBase getStream concode_elem_sep ReflectClass forObject concode_elem_sep void setParent concode_elem_sep T withLock concode_elem_sep void register", "code_tokens": ["boolean", "function", "(", "ReflectClass", "arg0", ")", "{", "Iterator4", "loc0", "=", "_collectionPredicates", ".", "iterator", "(", ")", ";", "while", "(", "loc0", ".", "moveNext", "(", ")", ")", "{", "if", "(", "(", "(", "ReflectClassPredicate", ")", "loc0", ".", "current", "(", ")", ")", ".", "match", "(", "arg0", ")", ")", "{", "return", "true", ";", "}", "}", "return", "_delegate", ".", "isCollection", "(", "arg0", ".", "getDelegate", "(", ")", ")", ";", "}"], "nl_tokens": ["determines", "if", "a", "candidate", "reflectclass", "is", "a", "collection", "concode_field_sep", "GenericArrayReflector", "_array", "concode_elem_sep", "Collection4", "_collectionPredicates", "concode_elem_sep", "Hashtable4", "_classByClass", "concode_elem_sep", "ObjectContainerBase", "_stream", "concode_elem_sep", "KnownClassesRepository", "_repository", "concode_elem_sep", "Transaction", "_trans", "concode_elem_sep", "Reflector", "_delegate", "concode_field_sep", "void", "setTransaction", "concode_elem_sep", "void", "registerCollection", "concode_elem_sep", "void", "registerCollection", "concode_elem_sep", "ReflectClass", "forName", "concode_elem_sep", "ReflectClass", "[", "]", "knownClasses", "concode_elem_sep", "void", "configuration", "concode_elem_sep", "GenericClass", "ensureDelegate", "concode_elem_sep", "GenericClass", "genericClass", "concode_elem_sep", "Reflector", "getDelegate", "concode_elem_sep", "ReflectClassPredicate", "classPredicate", "concode_elem_sep", "void", "registerPrimitiveClass", "concode_elem_sep", "boolean", "hasTransaction", "concode_elem_sep", "ReflectArray", "array", "concode_elem_sep", "Object", "deepClone", "concode_elem_sep", "ReflectClass", "forClass", "concode_elem_sep", "ReflectClass", "forGenericObject", "concode_elem_sep", "ObjectContainerBase", "getStream", "concode_elem_sep", "ReflectClass", "forObject", "concode_elem_sep", "void", "setParent", "concode_elem_sep", "T", "withLock", "concode_elem_sep", "void", "register"]}
{"code": "Image function ( String arg0 , int arg1 , int arg2 , int arg3 , int arg4 , Color arg5 ) { return getCachedTeXFormulaImage ( new CachedTeXFormula ( arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) ) ; }", "nl": "get a cached formula concode_field_sep Image image concode_elem_sep ConcurrentMap<CachedTeXFormula,SoftReference<CachedImage>> cache concode_elem_sep String f concode_elem_sep int inset concode_elem_sep Color fgcolor concode_elem_sep AffineTransform identity concode_elem_sep int width concode_elem_sep int type concode_elem_sep ReferenceQueue queue concode_elem_sep int depth concode_elem_sep int size concode_elem_sep int style concode_elem_sep CachedTeXFormula cachedTf concode_elem_sep int max concode_elem_sep int height concode_field_sep void removeCachedTeXFormula concode_elem_sep void removeCachedTeXFormula concode_elem_sep void removeCachedTeXFormula concode_elem_sep int[] getCachedTeXFormulaDimensions concode_elem_sep int[] getCachedTeXFormulaDimensions concode_elem_sep int[] getCachedTeXFormulaDimensions concode_elem_sep Object paintCachedTeXFormula concode_elem_sep Object paintCachedTeXFormula concode_elem_sep Object paintCachedTeXFormula concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep void setDimensions concode_elem_sep void clearCache concode_elem_sep SoftReference<CachedImage> makeImage concode_elem_sep void setMaxCachedObjects concode_elem_sep Object getCachedTeXFormula concode_elem_sep Object getCachedTeXFormula", "code_tokens": ["Image", "function", "(", "String", "arg0", ",", "int", "arg1", ",", "int", "arg2", ",", "int", "arg3", ",", "int", "arg4", ",", "Color", "arg5", ")", "{", "return", "getCachedTeXFormulaImage", "(", "new", "CachedTeXFormula", "(", "arg0", ",", "arg1", ",", "arg2", ",", "arg3", ",", "arg4", ",", "arg5", ")", ")", ";", "}"], "nl_tokens": ["get", "a", "cached", "formula", "concode_field_sep", "Image", "image", "concode_elem_sep", "ConcurrentMap", "<", "CachedTeXFormula", ",", "SoftReference", "<", "CachedImage", ">>", "cache", "concode_elem_sep", "String", "f", "concode_elem_sep", "int", "inset", "concode_elem_sep", "Color", "fgcolor", "concode_elem_sep", "AffineTransform", "identity", "concode_elem_sep", "int", "width", "concode_elem_sep", "int", "type", "concode_elem_sep", "ReferenceQueue", "queue", "concode_elem_sep", "int", "depth", "concode_elem_sep", "int", "size", "concode_elem_sep", "int", "style", "concode_elem_sep", "CachedTeXFormula", "cachedTf", "concode_elem_sep", "int", "max", "concode_elem_sep", "int", "height", "concode_field_sep", "void", "removeCachedTeXFormula", "concode_elem_sep", "void", "removeCachedTeXFormula", "concode_elem_sep", "void", "removeCachedTeXFormula", "concode_elem_sep", "int", "[", "]", "getCachedTeXFormulaDimensions", "concode_elem_sep", "int", "[", "]", "getCachedTeXFormulaDimensions", "concode_elem_sep", "int", "[", "]", "getCachedTeXFormulaDimensions", "concode_elem_sep", "Object", "paintCachedTeXFormula", "concode_elem_sep", "Object", "paintCachedTeXFormula", "concode_elem_sep", "Object", "paintCachedTeXFormula", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "void", "setDimensions", "concode_elem_sep", "void", "clearCache", "concode_elem_sep", "SoftReference", "<", "CachedImage", ">", "makeImage", "concode_elem_sep", "void", "setMaxCachedObjects", "concode_elem_sep", "Object", "getCachedTeXFormula", "concode_elem_sep", "Object", "getCachedTeXFormula"]}
{"code": "byte [ ] function ( PrivateKey arg0 , X509Certificate arg1 , AuthPack arg2 ) { byte [ ] loc0 = KrbCodec . encode ( arg2 ) ; byte [ ] loc1 ; try { loc1 = PkiUtil . getSignedData ( arg0 , arg1 , loc0 , ID_PKINIT_AUTHDATA ) ; } catch ( PkiException loc2 ) { throw new KrbException ( \"srini_string\" , loc2 ) ; } return loc1 ; }", "nl": "uses a private key to sign data in a cms signeddata structure and returns the encoded cms signeddata as bytes . ` signedauthpack ' contains a cms type contentinfo encoded according to rfc3852 . the contenttype field of the type contentinfo is id-signeddata 1.2.840.113549.1.7.2 , and the content field is a signeddata . the econtenttype field for the type signeddata is id-pkinit-authdata 1.3.6.1.5.2.3.1 , and the econtent field contains the der encoding of the type authpack . concode_field_sep String ID_PKINIT_AUTHDATA concode_field_sep byte[] getSignedKdcDhKeyInfo concode_elem_sep byte[] getSignedReplyKeyPack", "code_tokens": ["byte", "[", "]", "function", "(", "PrivateKey", "arg0", ",", "X509Certificate", "arg1", ",", "AuthPack", "arg2", ")", "{", "byte", "[", "]", "loc0", "=", "KrbCodec", ".", "encode", "(", "arg2", ")", ";", "byte", "[", "]", "loc1", ";", "try", "{", "loc1", "=", "PkiUtil", ".", "getSignedData", "(", "arg0", ",", "arg1", ",", "loc0", ",", "ID_PKINIT_AUTHDATA", ")", ";", "}", "catch", "(", "PkiException", "loc2", ")", "{", "throw", "new", "KrbException", "(", "\"srini_string\"", ",", "loc2", ")", ";", "}", "return", "loc1", ";", "}"], "nl_tokens": ["uses", "a", "private", "key", "to", "sign", "data", "in", "a", "cms", "signeddata", "structure", "and", "returns", "the", "encoded", "cms", "signeddata", "as", "bytes", ".", "`", "signedauthpack", "'", "contains", "a", "cms", "type", "contentinfo", "encoded", "according", "to", "rfc3852", ".", "the", "contenttype", "field", "of", "the", "type", "contentinfo", "is", "id", "-", "signeddata", "1.2", ".840", ".113549", ".1", ".7", ".2", ",", "and", "the", "content", "field", "is", "a", "signeddata", ".", "the", "econtenttype", "field", "for", "the", "type", "signeddata", "is", "id", "-", "pkinit", "-", "authdata", "1.3", ".6", ".1", ".5", ".2", ".3", ".1", ",", "and", "the", "econtent", "field", "contains", "the", "der", "encoding", "of", "the", "type", "authpack", ".", "concode_field_sep", "String", "ID_PKINIT_AUTHDATA", "concode_field_sep", "byte", "[", "]", "getSignedKdcDhKeyInfo", "concode_elem_sep", "byte", "[", "]", "getSignedReplyKeyPack"]}
{"code": "ResourceEditPropertyBuilder function ( String arg0 ) { this . propertyComment = convert ( arg0 ) ; return this ; }", "nl": "comment on propertydescriptor concode_field_sep boolean isTesting concode_elem_sep String typeName concode_elem_sep Clob propertyValue concode_elem_sep Clob exampleValue concode_elem_sep boolean isEncrypted concode_elem_sep String propContName concode_elem_sep Integer descriptorId concode_elem_sep String typeContName concode_elem_sep Integer typeId concode_elem_sep Clob defaultValue concode_elem_sep String resourceName concode_elem_sep String fcExternalKey concode_elem_sep String technicalKey concode_elem_sep String mik concode_elem_sep Integer propContextId concode_elem_sep String origin concode_elem_sep Integer cardinalityProperty concode_elem_sep Integer propertyValueTypeId concode_elem_sep String displayName concode_elem_sep String fcOwner concode_elem_sep Integer propertyId concode_elem_sep Integer masterTypeId concode_elem_sep boolean isNullable concode_elem_sep String fcExternalLink concode_elem_sep String validationRegex concode_elem_sep String loadedFor concode_elem_sep boolean isOptional concode_elem_sep String validationLogic concode_elem_sep String descriptorOrigin concode_elem_sep Integer typeContextId concode_elem_sep Clob propertyComment concode_field_sep ResourceEditPropertyBuilder withDisplayAndTechKeyName concode_elem_sep ResourceEditPropertyBuilder withOrigin concode_elem_sep ResourceEditPropertyBuilder withValidationRegex concode_elem_sep ResourceEditPropertyBuilder withIsEncrypted concode_elem_sep ResourceEditPropertyBuilder withDescriptorOrigin concode_elem_sep Clob convert concode_elem_sep ResourceEditPropertyBuilder withTechnicalKey concode_elem_sep ResourceEditPropertyBuilder withMasterResTypeName concode_elem_sep ResourceEditPropertyBuilder withLoadedFor concode_elem_sep ResourceEditPropertyBuilder withDisplayName concode_elem_sep ResourceEditPropertyBuilder withValue concode_elem_sep ResourceEditPropertyBuilder withFcExternalLink concode_elem_sep ResourceEditPropertyBuilder withDefaultValue concode_elem_sep ResourceEditPropertyBuilder withDescriptorId concode_elem_sep ResourceEditPropertyBuilder withTypeId concode_elem_sep ResourceEditPropertyBuilder withDescriptor concode_elem_sep ResourceEditPropertyBuilder withCardinality concode_elem_sep ResourceEditPropertyBuilder withPropTypeContName concode_elem_sep ResourceEditPropertyBuilder withValidationLogic concode_elem_sep ResourceEditPropertyBuilder withPropertyContextTypeId concode_elem_sep ResourceEditPropertyBuilder withPropertyId concode_elem_sep ResourceEditPropertyBuilder withPropContName concode_elem_sep ResourceEditPropertyBuilder withFcOwner concode_elem_sep ResourceEditPropertyBuilder withMasterResTypeId concode_elem_sep ResourceEditPropertyBuilder withFcExternalKey concode_elem_sep ResourceEditProperty build concode_elem_sep ResourceEditPropertyBuilder withIsTesting concode_elem_sep ResourceEditPropertyBuilder withExampleValue concode_elem_sep ResourceEditPropertyBuilder withResourceName concode_elem_sep ResourceEditPropertyBuilder withPropContextId concode_elem_sep ResourceEditPropertyBuilder withIsNullable", "code_tokens": ["ResourceEditPropertyBuilder", "function", "(", "String", "arg0", ")", "{", "this", ".", "propertyComment", "=", "convert", "(", "arg0", ")", ";", "return", "this", ";", "}"], "nl_tokens": ["comment", "on", "propertydescriptor", "concode_field_sep", "boolean", "isTesting", "concode_elem_sep", "String", "typeName", "concode_elem_sep", "Clob", "propertyValue", "concode_elem_sep", "Clob", "exampleValue", "concode_elem_sep", "boolean", "isEncrypted", "concode_elem_sep", "String", "propContName", "concode_elem_sep", "Integer", "descriptorId", "concode_elem_sep", "String", "typeContName", "concode_elem_sep", "Integer", "typeId", "concode_elem_sep", "Clob", "defaultValue", "concode_elem_sep", "String", "resourceName", "concode_elem_sep", "String", "fcExternalKey", "concode_elem_sep", "String", "technicalKey", "concode_elem_sep", "String", "mik", "concode_elem_sep", "Integer", "propContextId", "concode_elem_sep", "String", "origin", "concode_elem_sep", "Integer", "cardinalityProperty", "concode_elem_sep", "Integer", "propertyValueTypeId", "concode_elem_sep", "String", "displayName", "concode_elem_sep", "String", "fcOwner", "concode_elem_sep", "Integer", "propertyId", "concode_elem_sep", "Integer", "masterTypeId", "concode_elem_sep", "boolean", "isNullable", "concode_elem_sep", "String", "fcExternalLink", "concode_elem_sep", "String", "validationRegex", "concode_elem_sep", "String", "loadedFor", "concode_elem_sep", "boolean", "isOptional", "concode_elem_sep", "String", "validationLogic", "concode_elem_sep", "String", "descriptorOrigin", "concode_elem_sep", "Integer", "typeContextId", "concode_elem_sep", "Clob", "propertyComment", "concode_field_sep", "ResourceEditPropertyBuilder", "withDisplayAndTechKeyName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withOrigin", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValidationRegex", "concode_elem_sep", "ResourceEditPropertyBuilder", "withIsEncrypted", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptorOrigin", "concode_elem_sep", "Clob", "convert", "concode_elem_sep", "ResourceEditPropertyBuilder", "withTechnicalKey", "concode_elem_sep", "ResourceEditPropertyBuilder", "withMasterResTypeName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withLoadedFor", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDisplayName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcExternalLink", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDefaultValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptorId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withDescriptor", "concode_elem_sep", "ResourceEditPropertyBuilder", "withCardinality", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropTypeContName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withValidationLogic", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropertyContextTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropertyId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropContName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcOwner", "concode_elem_sep", "ResourceEditPropertyBuilder", "withMasterResTypeId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withFcExternalKey", "concode_elem_sep", "ResourceEditProperty", "build", "concode_elem_sep", "ResourceEditPropertyBuilder", "withIsTesting", "concode_elem_sep", "ResourceEditPropertyBuilder", "withExampleValue", "concode_elem_sep", "ResourceEditPropertyBuilder", "withResourceName", "concode_elem_sep", "ResourceEditPropertyBuilder", "withPropContextId", "concode_elem_sep", "ResourceEditPropertyBuilder", "withIsNullable"]}
{"code": "File function ( Class arg0 ) { try { return new File ( resolveRootUrl ( arg0 ) . toURI ( ) ) ; } catch ( URISyntaxException loc0 ) { throw new RuntimeException ( \"srini_string\" , loc0 ) ; } }", "nl": "essentially the same as #resolverooturl class , but here we convert the root url to a file directory reference . in fact we delegate to #resolverooturl class and simply convert itsreturn into a file reference . concode_field_sep PlaceHolder placeHolder concode_field_sep URL resolveRootUrl concode_elem_sep File resolveClassFile", "code_tokens": ["File", "function", "(", "Class", "arg0", ")", "{", "try", "{", "return", "new", "File", "(", "resolveRootUrl", "(", "arg0", ")", ".", "toURI", "(", ")", ")", ";", "}", "catch", "(", "URISyntaxException", "loc0", ")", "{", "throw", "new", "RuntimeException", "(", "\"srini_string\"", ",", "loc0", ")", ";", "}", "}"], "nl_tokens": ["essentially", "the", "same", "as", "#resolverooturl class , but here we convert the root url to a file directory reference . in fact we delegate to #resolverooturl class and simply convert itsreturn into a file reference . concode_field_sep PlaceHolder placeHolder concode_field_sep URL resolveRootUrl concode_elem_sep File resolveClassFile"]}
{"code": "void function ( final LabelProviderChangedEvent arg0 ) { for ( final ILabelProviderListener loc0 : fListeners ) { SafeRunner . run ( new SafeRunnable ( ) { @ Override public void run ( ) { loc0 . labelProviderChanged ( arg0 ) ; } } ) ; } }", "nl": "fires a label provider changed event to all registered listeners only listeners registered at the time this method is called are notified . concode_field_sep ArrayList<ILabelDecorator> fLabelDecorators concode_elem_sep JavaElementImageProvider fImageLabelProvider concode_elem_sep ListenerList<ILabelProviderListener> fListeners concode_elem_sep StorageLabelProvider fStorageLabelProvider concode_elem_sep int fImageFlags concode_elem_sep long fTextFlags concode_field_sep ILabelDecorator[] getDecorators concode_elem_sep StyledString getStyledText concode_elem_sep void addLabelDecorator concode_elem_sep String getText concode_elem_sep String decorateText concode_elem_sep void removeListener concode_elem_sep void setImageFlags concode_elem_sep Color getForeground concode_elem_sep Image decorateImage concode_elem_sep long getTextFlags concode_elem_sep long evaluateTextFlags concode_elem_sep void dispose concode_elem_sep void setTextFlags concode_elem_sep Image getImage concode_elem_sep boolean isLabelProperty concode_elem_sep Color getBackground concode_elem_sep int evaluateImageFlags concode_elem_sep int getImageFlags concode_elem_sep void addListener", "code_tokens": ["void", "function", "(", "final", "LabelProviderChangedEvent", "arg0", ")", "{", "for", "(", "final", "ILabelProviderListener", "loc0", ":", "fListeners", ")", "{", "SafeRunner", ".", "run", "(", "new", "SafeRunnable", "(", ")", "{", "@", "Override", "public", "void", "run", "(", ")", "{", "loc0", ".", "labelProviderChanged", "(", "arg0", ")", ";", "}", "}", ")", ";", "}", "}"], "nl_tokens": ["fires", "a", "label", "provider", "changed", "event", "to", "all", "registered", "listeners", "only", "listeners", "registered", "at", "the", "time", "this", "method", "is", "called", "are", "notified", ".", "concode_field_sep", "ArrayList", "<", "ILabelDecorator", ">", "fLabelDecorators", "concode_elem_sep", "JavaElementImageProvider", "fImageLabelProvider", "concode_elem_sep", "ListenerList", "<", "ILabelProviderListener", ">", "fListeners", "concode_elem_sep", "StorageLabelProvider", "fStorageLabelProvider", "concode_elem_sep", "int", "fImageFlags", "concode_elem_sep", "long", "fTextFlags", "concode_field_sep", "ILabelDecorator", "[", "]", "getDecorators", "concode_elem_sep", "StyledString", "getStyledText", "concode_elem_sep", "void", "addLabelDecorator", "concode_elem_sep", "String", "getText", "concode_elem_sep", "String", "decorateText", "concode_elem_sep", "void", "removeListener", "concode_elem_sep", "void", "setImageFlags", "concode_elem_sep", "Color", "getForeground", "concode_elem_sep", "Image", "decorateImage", "concode_elem_sep", "long", "getTextFlags", "concode_elem_sep", "long", "evaluateTextFlags", "concode_elem_sep", "void", "dispose", "concode_elem_sep", "void", "setTextFlags", "concode_elem_sep", "Image", "getImage", "concode_elem_sep", "boolean", "isLabelProperty", "concode_elem_sep", "Color", "getBackground", "concode_elem_sep", "int", "evaluateImageFlags", "concode_elem_sep", "int", "getImageFlags", "concode_elem_sep", "void", "addListener"]}
{"code": "void function ( long arg0 , @ NonNull T arg1 ) { lock . lock ( ) ; try { map . put ( arg0 , new WeakReference < T > ( arg1 ) ) ; } finally { lock . unlock ( ) ; } }", "nl": "put entity in cache with cache lock . concode_field_sep ReentrantLock lock concode_elem_sep LongSparseArray<Reference<T>> map concode_field_sep void unlock concode_elem_sep T get concode_elem_sep void clear concode_elem_sep void lock concode_elem_sep void putNoLock concode_elem_sep T getNoLock concode_elem_sep void remove concode_elem_sep void remove", "code_tokens": ["void", "function", "(", "long", "arg0", ",", "@", "NonNull", "T", "arg1", ")", "{", "lock", ".", "lock", "(", ")", ";", "try", "{", "map", ".", "put", "(", "arg0", ",", "new", "WeakReference", "<", "T", ">", "(", "arg1", ")", ")", ";", "}", "finally", "{", "lock", ".", "unlock", "(", ")", ";", "}", "}"], "nl_tokens": ["put", "entity", "in", "cache", "with", "cache", "lock", ".", "concode_field_sep", "ReentrantLock", "lock", "concode_elem_sep", "LongSparseArray", "<", "Reference", "<", "T", ">>", "map", "concode_field_sep", "void", "unlock", "concode_elem_sep", "T", "get", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "lock", "concode_elem_sep", "void", "putNoLock", "concode_elem_sep", "T", "getNoLock", "concode_elem_sep", "void", "remove", "concode_elem_sep", "void", "remove"]}
{"code": "Asn1Type function ( byte [ ] arg0 ) { return decode ( ByteBuffer . wrap ( arg0 ) ) ; }", "nl": "blindly decode content and return the result asn1 object . concode_field_sep PlaceHolder placeHolder concode_field_sep void encode concode_elem_sep byte[] encode concode_elem_sep void decodeAndDump concode_elem_sep void decodeAndDump concode_elem_sep void decodeAndDump concode_elem_sep Asn1ParseResult parse concode_elem_sep Asn1ParseResult parse concode_elem_sep void dump concode_elem_sep void parseAndDump concode_elem_sep void parseAndDump concode_elem_sep void parseAndDump", "code_tokens": ["Asn1Type", "function", "(", "byte", "[", "]", "arg0", ")", "{", "return", "decode", "(", "ByteBuffer", ".", "wrap", "(", "arg0", ")", ")", ";", "}"], "nl_tokens": ["blindly", "decode", "content", "and", "return", "the", "result", "asn1", "object", ".", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "encode", "concode_elem_sep", "byte", "[", "]", "encode", "concode_elem_sep", "void", "decodeAndDump", "concode_elem_sep", "void", "decodeAndDump", "concode_elem_sep", "void", "decodeAndDump", "concode_elem_sep", "Asn1ParseResult", "parse", "concode_elem_sep", "Asn1ParseResult", "parse", "concode_elem_sep", "void", "dump", "concode_elem_sep", "void", "parseAndDump", "concode_elem_sep", "void", "parseAndDump", "concode_elem_sep", "void", "parseAndDump"]}
{"code": "FloatList function ( float arg0 ) { FloatList loc0 = new ArrayFloatList ( 1 ) ; loc0 . add ( arg0 ) ; return UnmodifiableFloatList . wrap ( loc0 ) ; }", "nl": "returns an unmodifiable floatlist containing only the specified element . concode_field_sep FloatIterator EMPTY_FLOAT_ITERATOR concode_elem_sep FloatListIterator EMPTY_FLOAT_LIST_ITERATOR concode_elem_sep FloatList EMPTY_FLOAT_LIST concode_field_sep FloatListIterator getEmptyFloatListIterator concode_elem_sep FloatList getEmptyFloatList concode_elem_sep FloatIterator singletonFloatIterator concode_elem_sep FloatListIterator unmodifiableFloatListIterator concode_elem_sep FloatIterator getEmptyFloatIterator concode_elem_sep FloatListIterator singletonFloatListIterator concode_elem_sep FloatList unmodifiableFloatList concode_elem_sep FloatIterator unmodifiableFloatIterator", "code_tokens": ["FloatList", "function", "(", "float", "arg0", ")", "{", "FloatList", "loc0", "=", "new", "ArrayFloatList", "(", "1", ")", ";", "loc0", ".", "add", "(", "arg0", ")", ";", "return", "UnmodifiableFloatList", ".", "wrap", "(", "loc0", ")", ";", "}"], "nl_tokens": ["returns", "an", "unmodifiable", "floatlist", "containing", "only", "the", "specified", "element", ".", "concode_field_sep", "FloatIterator", "EMPTY_FLOAT_ITERATOR", "concode_elem_sep", "FloatListIterator", "EMPTY_FLOAT_LIST_ITERATOR", "concode_elem_sep", "FloatList", "EMPTY_FLOAT_LIST", "concode_field_sep", "FloatListIterator", "getEmptyFloatListIterator", "concode_elem_sep", "FloatList", "getEmptyFloatList", "concode_elem_sep", "FloatIterator", "singletonFloatIterator", "concode_elem_sep", "FloatListIterator", "unmodifiableFloatListIterator", "concode_elem_sep", "FloatIterator", "getEmptyFloatIterator", "concode_elem_sep", "FloatListIterator", "singletonFloatListIterator", "concode_elem_sep", "FloatList", "unmodifiableFloatList", "concode_elem_sep", "FloatIterator", "unmodifiableFloatIterator"]}
{"code": "BigInteger function ( byte [ ] arg0 , byte [ ] arg1 , byte [ ] arg2 , BigInteger arg3 , BigInteger arg4 ) { BigInteger loc0 = srpVerifierLowercaseX ( arg0 , arg1 , arg2 ) ; BigInteger loc1 = arg3 . modPow ( loc0 , arg4 ) ; return loc1 ; }", "nl": "calculate the srp verifier v value . concode_field_sep int HASH_LENGTH_HEX concode_elem_sep int CRYPTO_KEY_LENGTH_BYTES concode_elem_sep int SALT_LENGTH_HEX concode_elem_sep int NUMBER_OF_QUICK_STRETCH_ROUNDS concode_elem_sep String KW_VERSION_STRING concode_elem_sep boolean LOG_PERSONAL_INFORMATION concode_elem_sep int CRYPTO_KEY_LENGTH_HEX concode_elem_sep String LOG_TAG concode_elem_sep int SALT_LENGTH_BYTES concode_elem_sep int HASH_LENGTH_BYTES concode_field_sep byte[] unwrapkB concode_elem_sep String defaultClientName concode_elem_sep String getAudienceForURL concode_elem_sep String hexModN concode_elem_sep KeyBundle generateSyncKeyBundle concode_elem_sep byte[] generateQuickStretchedPW concode_elem_sep byte[] generateAuthPW concode_elem_sep String computeClientState concode_elem_sep byte[] KW concode_elem_sep void pii concode_elem_sep BigInteger srpVerifierLowercaseX concode_elem_sep String bytes concode_elem_sep byte[] generateUnwrapBKey concode_elem_sep byte[] KWE", "code_tokens": ["BigInteger", "function", "(", "byte", "[", "]", "arg0", ",", "byte", "[", "]", "arg1", ",", "byte", "[", "]", "arg2", ",", "BigInteger", "arg3", ",", "BigInteger", "arg4", ")", "{", "BigInteger", "loc0", "=", "srpVerifierLowercaseX", "(", "arg0", ",", "arg1", ",", "arg2", ")", ";", "BigInteger", "loc1", "=", "arg3", ".", "modPow", "(", "loc0", ",", "arg4", ")", ";", "return", "loc1", ";", "}"], "nl_tokens": ["calculate", "the", "srp", "verifier", "v", "value", ".", "concode_field_sep", "int", "HASH_LENGTH_HEX", "concode_elem_sep", "int", "CRYPTO_KEY_LENGTH_BYTES", "concode_elem_sep", "int", "SALT_LENGTH_HEX", "concode_elem_sep", "int", "NUMBER_OF_QUICK_STRETCH_ROUNDS", "concode_elem_sep", "String", "KW_VERSION_STRING", "concode_elem_sep", "boolean", "LOG_PERSONAL_INFORMATION", "concode_elem_sep", "int", "CRYPTO_KEY_LENGTH_HEX", "concode_elem_sep", "String", "LOG_TAG", "concode_elem_sep", "int", "SALT_LENGTH_BYTES", "concode_elem_sep", "int", "HASH_LENGTH_BYTES", "concode_field_sep", "byte", "[", "]", "unwrapkB", "concode_elem_sep", "String", "defaultClientName", "concode_elem_sep", "String", "getAudienceForURL", "concode_elem_sep", "String", "hexModN", "concode_elem_sep", "KeyBundle", "generateSyncKeyBundle", "concode_elem_sep", "byte", "[", "]", "generateQuickStretchedPW", "concode_elem_sep", "byte", "[", "]", "generateAuthPW", "concode_elem_sep", "String", "computeClientState", "concode_elem_sep", "byte", "[", "]", "KW", "concode_elem_sep", "void", "pii", "concode_elem_sep", "BigInteger", "srpVerifierLowercaseX", "concode_elem_sep", "String", "bytes", "concode_elem_sep", "byte", "[", "]", "generateUnwrapBKey", "concode_elem_sep", "byte", "[", "]", "KWE"]}
{"code": "boolean function ( ) { return false ; }", "nl": "override and return true for database updates that produce changed class metadata concode_field_sep String _db4oVersion concode_elem_sep byte _db4oHeaderVersion concode_field_sep String fileName concode_elem_sep String fileName concode_elem_sep String getTempPath concode_elem_sep void runDefrag concode_elem_sep void checkDatabaseFile concode_elem_sep void update concode_elem_sep int db4oMajorVersion concode_elem_sep void checkUpdatedDatabaseFile concode_elem_sep void investigateFileHeaderVersion concode_elem_sep boolean isApplicableForDb4oVersion concode_elem_sep void withDatabase concode_elem_sep void deconfigure concode_elem_sep void setUp concode_elem_sep String fileNamePrefix concode_elem_sep void assertObjectDeletion concode_elem_sep void assertObjectsAreReadable concode_elem_sep String databasePath concode_elem_sep void configureForStore concode_elem_sep void test concode_elem_sep void test concode_elem_sep void deconfigureForStore concode_elem_sep void configure concode_elem_sep void store concode_elem_sep void deconfigureForTest concode_elem_sep void tearDown concode_elem_sep void configureForTest concode_elem_sep void storeObject concode_elem_sep void createDatabase concode_elem_sep void createDatabase concode_elem_sep void assertObjectsAreUpdated concode_elem_sep void updateDatabaseFile concode_elem_sep String oldVersionFileName concode_elem_sep void createDatabaseFor concode_elem_sep byte db4oHeaderVersion concode_elem_sep int db4oMinorVersion concode_elem_sep String[] versionNames concode_elem_sep void runDeletionTests", "code_tokens": ["boolean", "function", "(", ")", "{", "return", "false", ";", "}"], "nl_tokens": ["override", "and", "return", "true", "for", "database", "updates", "that", "produce", "changed", "class", "metadata", "concode_field_sep", "String", "_db4oVersion", "concode_elem_sep", "byte", "_db4oHeaderVersion", "concode_field_sep", "String", "fileName", "concode_elem_sep", "String", "fileName", "concode_elem_sep", "String", "getTempPath", "concode_elem_sep", "void", "runDefrag", "concode_elem_sep", "void", "checkDatabaseFile", "concode_elem_sep", "void", "update", "concode_elem_sep", "int", "db4oMajorVersion", "concode_elem_sep", "void", "checkUpdatedDatabaseFile", "concode_elem_sep", "void", "investigateFileHeaderVersion", "concode_elem_sep", "boolean", "isApplicableForDb4oVersion", "concode_elem_sep", "void", "withDatabase", "concode_elem_sep", "void", "deconfigure", "concode_elem_sep", "void", "setUp", "concode_elem_sep", "String", "fileNamePrefix", "concode_elem_sep", "void", "assertObjectDeletion", "concode_elem_sep", "void", "assertObjectsAreReadable", "concode_elem_sep", "String", "databasePath", "concode_elem_sep", "void", "configureForStore", "concode_elem_sep", "void", "test", "concode_elem_sep", "void", "test", "concode_elem_sep", "void", "deconfigureForStore", "concode_elem_sep", "void", "configure", "concode_elem_sep", "void", "store", "concode_elem_sep", "void", "deconfigureForTest", "concode_elem_sep", "void", "tearDown", "concode_elem_sep", "void", "configureForTest", "concode_elem_sep", "void", "storeObject", "concode_elem_sep", "void", "createDatabase", "concode_elem_sep", "void", "createDatabase", "concode_elem_sep", "void", "assertObjectsAreUpdated", "concode_elem_sep", "void", "updateDatabaseFile", "concode_elem_sep", "String", "oldVersionFileName", "concode_elem_sep", "void", "createDatabaseFor", "concode_elem_sep", "byte", "db4oHeaderVersion", "concode_elem_sep", "int", "db4oMinorVersion", "concode_elem_sep", "String", "[", "]", "versionNames", "concode_elem_sep", "void", "runDeletionTests"]}
{"code": "IJavaSearchScope function ( IJavaElement arg0 ) { return RefactoringScopeFactory . create ( arg0 , true , true ) ; }", "nl": "creates a new search scope with all compilation units possibly referencing javaelement , considering the visibility of the element , references only from source concode_field_sep PlaceHolder placeHolder concode_field_sep void addRelatedReferencing concode_elem_sep IPackageFragmentRoot[] getAllScopeElements concode_elem_sep IJavaSearchScope createRelatedProjectsScope concode_elem_sep void addRelatedReferenced concode_elem_sep IJavaSearchScope createReferencedScope concode_elem_sep IJavaSearchScope createReferencedScope concode_elem_sep IClasspathEntry getReferencingClassPathEntry concode_elem_sep IJavaProject[] getRelatedProjects concode_elem_sep Collection<IJavaProject> getReferencingProjects concode_elem_sep void addReferencingProjects concode_elem_sep int getVisibility", "code_tokens": ["IJavaSearchScope", "function", "(", "IJavaElement", "arg0", ")", "{", "return", "RefactoringScopeFactory", ".", "create", "(", "arg0", ",", "true", ",", "true", ")", ";", "}"], "nl_tokens": ["creates", "a", "new", "search", "scope", "with", "all", "compilation", "units", "possibly", "referencing", "javaelement", ",", "considering", "the", "visibility", "of", "the", "element", ",", "references", "only", "from", "source", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "void", "addRelatedReferencing", "concode_elem_sep", "IPackageFragmentRoot", "[", "]", "getAllScopeElements", "concode_elem_sep", "IJavaSearchScope", "createRelatedProjectsScope", "concode_elem_sep", "void", "addRelatedReferenced", "concode_elem_sep", "IJavaSearchScope", "createReferencedScope", "concode_elem_sep", "IJavaSearchScope", "createReferencedScope", "concode_elem_sep", "IClasspathEntry", "getReferencingClassPathEntry", "concode_elem_sep", "IJavaProject", "[", "]", "getRelatedProjects", "concode_elem_sep", "Collection", "<", "IJavaProject", ">", "getReferencingProjects", "concode_elem_sep", "void", "addReferencingProjects", "concode_elem_sep", "int", "getVisibility"]}
{"code": "void function ( DiscoverClasses arg0 ) { this . discovery = arg0 ; }", "nl": "sets the fully configured discoverclasses instance to be used to lookup services concode_field_sep ClassLoader classLoader concode_elem_sep DiscoverClasses discovery concode_elem_sep boolean useContextClassLoader concode_elem_sep Log log concode_field_sep boolean getUseContextClassLoader concode_elem_sep DiscoverClasses getDiscoverClasses concode_elem_sep TagLibrary loadClass concode_elem_sep ClassLoader getClassLoader concode_elem_sep TagLibrary newInstance concode_elem_sep TagLibrary resolveTagLibrary concode_elem_sep void setClassLoader concode_elem_sep void setUseContextClassLoader", "code_tokens": ["void", "function", "(", "DiscoverClasses", "arg0", ")", "{", "this", ".", "discovery", "=", "arg0", ";", "}"], "nl_tokens": ["sets", "the", "fully", "configured", "discoverclasses", "instance", "to", "be", "used", "to", "lookup", "services", "concode_field_sep", "ClassLoader", "classLoader", "concode_elem_sep", "DiscoverClasses", "discovery", "concode_elem_sep", "boolean", "useContextClassLoader", "concode_elem_sep", "Log", "log", "concode_field_sep", "boolean", "getUseContextClassLoader", "concode_elem_sep", "DiscoverClasses", "getDiscoverClasses", "concode_elem_sep", "TagLibrary", "loadClass", "concode_elem_sep", "ClassLoader", "getClassLoader", "concode_elem_sep", "TagLibrary", "newInstance", "concode_elem_sep", "TagLibrary", "resolveTagLibrary", "concode_elem_sep", "void", "setClassLoader", "concode_elem_sep", "void", "setUseContextClassLoader"]}
{"code": "String function ( ) { String loc0 = null ; if ( isCustomType ( ) ) { loc0 = this . validationLogic == null ? DEFAULTVALIDATIONEXPRESSION : this . validationLogic ; } else { loc0 = this . validationLogic == null ? getPropertyTypeValidationRegex ( ) : this . validationLogic ; } return loc0 ; }", "nl": "the validation logic can either be defined in the property validation logic or as a regex of the property type . this method distincts between those different possibility and returns the actual validation pattern . concode_field_sep PropertyTypeEntity propertyTypeEntity concode_elem_sep String fcExternalKey concode_elem_sep String DEFAULTVALIDATIONEXPRESSION concode_elem_sep String propertyComment concode_elem_sep Integer cardinalityProperty concode_elem_sep boolean nullable concode_elem_sep String validationLogic concode_elem_sep String defaultValue concode_elem_sep String displayName concode_elem_sep boolean testing concode_elem_sep boolean optional concode_elem_sep ForeignableOwner fcOwner concode_elem_sep long serialVersionUID concode_elem_sep String exampleValue concode_elem_sep Comparator<PropertyDescriptorEntity> CARDINALITY_AND_NAME_COMPARATOR concode_elem_sep String propertyName concode_elem_sep String machineInterpretationKey concode_elem_sep boolean encrypt concode_elem_sep long v concode_elem_sep List<PropertyTagEntity> propertyTags concode_elem_sep String fcExternalLink concode_elem_sep Comparator<PropertyDescriptorEntity> NAME_SORTING_COMPARATOR concode_elem_sep Integer id concode_elem_sep Set<PropertyEntity> properties concode_field_sep void setDefaultValue concode_elem_sep int compare concode_elem_sep int compare concode_elem_sep String getExternalKey concode_elem_sep boolean hasTagWithName concode_elem_sep String getExternalLink concode_elem_sep ForeignableOwner getOwner concode_elem_sep Set<String> getPropertyTagsNameSet concode_elem_sep void setExampleValue concode_elem_sep void setOwner concode_elem_sep void setExternalKey concode_elem_sep String getPropertyTypeValidationRegex concode_elem_sep int foreignableFieldHashCode concode_elem_sep void addPropertyTag concode_elem_sep PropertyDescriptorEntity getCopy concode_elem_sep String getForeignableObjectName concode_elem_sep String removeLineBreaks concode_elem_sep Set<PropertyEntity> getProperties concode_elem_sep String getPropertyDescriptorDisplayName concode_elem_sep void addProperty concode_elem_sep List<PropertyTagEntity> getPropertyTags concode_elem_sep boolean isCustomType concode_elem_sep void setPropertyName concode_elem_sep void removePropertyTag concode_elem_sep String toString concode_elem_sep void setExternalLink concode_elem_sep void removeProperty", "code_tokens": ["String", "function", "(", ")", "{", "String", "loc0", "=", "null", ";", "if", "(", "isCustomType", "(", ")", ")", "{", "loc0", "=", "this", ".", "validationLogic", "==", "null", "?", "DEFAULTVALIDATIONEXPRESSION", ":", "this", ".", "validationLogic", ";", "}", "else", "{", "loc0", "=", "this", ".", "validationLogic", "==", "null", "?", "getPropertyTypeValidationRegex", "(", ")", ":", "this", ".", "validationLogic", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["the", "validation", "logic", "can", "either", "be", "defined", "in", "the", "property", "validation", "logic", "or", "as", "a", "regex", "of", "the", "property", "type", ".", "this", "method", "distincts", "between", "those", "different", "possibility", "and", "returns", "the", "actual", "validation", "pattern", ".", "concode_field_sep", "PropertyTypeEntity", "propertyTypeEntity", "concode_elem_sep", "String", "fcExternalKey", "concode_elem_sep", "String", "DEFAULTVALIDATIONEXPRESSION", "concode_elem_sep", "String", "propertyComment", "concode_elem_sep", "Integer", "cardinalityProperty", "concode_elem_sep", "boolean", "nullable", "concode_elem_sep", "String", "validationLogic", "concode_elem_sep", "String", "defaultValue", "concode_elem_sep", "String", "displayName", "concode_elem_sep", "boolean", "testing", "concode_elem_sep", "boolean", "optional", "concode_elem_sep", "ForeignableOwner", "fcOwner", "concode_elem_sep", "long", "serialVersionUID", "concode_elem_sep", "String", "exampleValue", "concode_elem_sep", "Comparator", "<", "PropertyDescriptorEntity", ">", "CARDINALITY_AND_NAME_COMPARATOR", "concode_elem_sep", "String", "propertyName", "concode_elem_sep", "String", "machineInterpretationKey", "concode_elem_sep", "boolean", "encrypt", "concode_elem_sep", "long", "v", "concode_elem_sep", "List", "<", "PropertyTagEntity", ">", "propertyTags", "concode_elem_sep", "String", "fcExternalLink", "concode_elem_sep", "Comparator", "<", "PropertyDescriptorEntity", ">", "NAME_SORTING_COMPARATOR", "concode_elem_sep", "Integer", "id", "concode_elem_sep", "Set", "<", "PropertyEntity", ">", "properties", "concode_field_sep", "void", "setDefaultValue", "concode_elem_sep", "int", "compare", "concode_elem_sep", "int", "compare", "concode_elem_sep", "String", "getExternalKey", "concode_elem_sep", "boolean", "hasTagWithName", "concode_elem_sep", "String", "getExternalLink", "concode_elem_sep", "ForeignableOwner", "getOwner", "concode_elem_sep", "Set", "<", "String", ">", "getPropertyTagsNameSet", "concode_elem_sep", "void", "setExampleValue", "concode_elem_sep", "void", "setOwner", "concode_elem_sep", "void", "setExternalKey", "concode_elem_sep", "String", "getPropertyTypeValidationRegex", "concode_elem_sep", "int", "foreignableFieldHashCode", "concode_elem_sep", "void", "addPropertyTag", "concode_elem_sep", "PropertyDescriptorEntity", "getCopy", "concode_elem_sep", "String", "getForeignableObjectName", "concode_elem_sep", "String", "removeLineBreaks", "concode_elem_sep", "Set", "<", "PropertyEntity", ">", "getProperties", "concode_elem_sep", "String", "getPropertyDescriptorDisplayName", "concode_elem_sep", "void", "addProperty", "concode_elem_sep", "List", "<", "PropertyTagEntity", ">", "getPropertyTags", "concode_elem_sep", "boolean", "isCustomType", "concode_elem_sep", "void", "setPropertyName", "concode_elem_sep", "void", "removePropertyTag", "concode_elem_sep", "String", "toString", "concode_elem_sep", "void", "setExternalLink", "concode_elem_sep", "void", "removeProperty"]}
{"code": "String function ( double arg0 , int arg1 ) { return formatToFixedDecimalPoint ( arg0 , arg1 ) + UNIT_MILLISECONDS ; }", "nl": "formats time as milliseconds with units . concode_field_sep String UNIT_MILLISECONDS concode_elem_sep String UNIT_SECONDS concode_field_sep String format concode_elem_sep String format concode_elem_sep String format concode_elem_sep String formatToFixedDecimalPoint concode_elem_sep String formatSeconds concode_elem_sep String formatSeconds", "code_tokens": ["String", "function", "(", "double", "arg0", ",", "int", "arg1", ")", "{", "return", "formatToFixedDecimalPoint", "(", "arg0", ",", "arg1", ")", "+", "UNIT_MILLISECONDS", ";", "}"], "nl_tokens": ["formats", "time", "as", "milliseconds", "with", "units", ".", "concode_field_sep", "String", "UNIT_MILLISECONDS", "concode_elem_sep", "String", "UNIT_SECONDS", "concode_field_sep", "String", "format", "concode_elem_sep", "String", "format", "concode_elem_sep", "String", "format", "concode_elem_sep", "String", "formatToFixedDecimalPoint", "concode_elem_sep", "String", "formatSeconds", "concode_elem_sep", "String", "formatSeconds"]}
{"code": "void function ( final Collection < ? extends K > arg0 ) { for ( final K loc0 : arg0 ) { put ( loc0 , null ) ; } }", "nl": "puts the given collection of keys into this map according to the contract of #put object , object . the values will be set to null . the keys are added in the order of the collection 's iterator . concode_field_sep SortedMap<K,V> kSmallest concode_elem_sep int maxSize concode_field_sep boolean containsKey concode_elem_sep Collection<V> values concode_elem_sep void clear concode_elem_sep boolean isInRange concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep V remove concode_elem_sep boolean containsValue concode_elem_sep K getMinKey concode_elem_sep K getMaxKey concode_elem_sep int size concode_elem_sep K firstKey concode_elem_sep V get concode_elem_sep void setAllValues concode_elem_sep K lastKey concode_elem_sep String toString concode_elem_sep Set<K> keySet", "code_tokens": ["void", "function", "(", "final", "Collection", "<", "?", "extends", "K", ">", "arg0", ")", "{", "for", "(", "final", "K", "loc0", ":", "arg0", ")", "{", "put", "(", "loc0", ",", "null", ")", ";", "}", "}"], "nl_tokens": ["puts", "the", "given", "collection", "of", "keys", "into", "this", "map", "according", "to", "the", "contract", "of", "#put object , object . the values will be set to null . the keys are added in the order of the collection 's iterator . concode_field_sep SortedMap<K,V> kSmallest concode_elem_sep int maxSize concode_field_sep boolean containsKey concode_elem_sep Collection<V> values concode_elem_sep void clear concode_elem_sep boolean isInRange concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep boolean put concode_elem_sep V remove concode_elem_sep boolean containsValue concode_elem_sep K getMinKey concode_elem_sep K getMaxKey concode_elem_sep int size concode_elem_sep K firstKey concode_elem_sep V get concode_elem_sep void setAllValues concode_elem_sep K lastKey concode_elem_sep String toString concode_elem_sep Set<K> keySet"]}
{"code": "boolean function ( double [ ] arg0 ) { for ( int loc0 = 0 ; loc0 < arg0 . length ; loc0 ++ ) { if ( arg0 [ loc0 ] <= 0 ) { return false ; } } return true ; }", "nl": "returns true iff all entries of the input array are > 0 . returns true if the array is non-null , but empty concode_field_sep DistributionFactory distributionFactory concode_field_sep double chiSquare concode_elem_sep double chiSquare concode_elem_sep void checkArray concode_elem_sep DistributionFactory getDistributionFactory concode_elem_sep boolean isNonNegative concode_elem_sep boolean isNonNegative concode_elem_sep boolean isRectangular concode_elem_sep double chiSquareTest concode_elem_sep boolean chiSquareTest concode_elem_sep double chiSquareTest concode_elem_sep boolean chiSquareTest", "code_tokens": ["boolean", "function", "(", "double", "[", "]", "arg0", ")", "{", "for", "(", "int", "loc0", "=", "0", ";", "loc0", "<", "arg0", ".", "length", ";", "loc0", "+", "+", ")", "{", "if", "(", "arg0", "[", "loc0", "]", "<=", "0", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "nl_tokens": ["returns", "true", "iff", "all", "entries", "of", "the", "input", "array", "are", ">", "0", ".", "returns", "true", "if", "the", "array", "is", "non", "-", "null", ",", "but", "empty", "concode_field_sep", "DistributionFactory", "distributionFactory", "concode_field_sep", "double", "chiSquare", "concode_elem_sep", "double", "chiSquare", "concode_elem_sep", "void", "checkArray", "concode_elem_sep", "DistributionFactory", "getDistributionFactory", "concode_elem_sep", "boolean", "isNonNegative", "concode_elem_sep", "boolean", "isNonNegative", "concode_elem_sep", "boolean", "isRectangular", "concode_elem_sep", "double", "chiSquareTest", "concode_elem_sep", "boolean", "chiSquareTest", "concode_elem_sep", "double", "chiSquareTest", "concode_elem_sep", "boolean", "chiSquareTest"]}
{"code": "void function ( String [ ] arg0 ) { System . out . println ( \"srini_string\" + getSpecification ( ) ) ; System . out . println ( \"srini_string\" + getImplementation ( ) ) ; }", "nl": "a simple main method that prints the version and exits concode_field_sep PlaceHolder placeHolder concode_field_sep String getSpecification concode_elem_sep String getImplementation", "code_tokens": ["void", "function", "(", "String", "[", "]", "arg0", ")", "{", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "getSpecification", "(", ")", ")", ";", "System", ".", "out", ".", "println", "(", "\"srini_string\"", "+", "getImplementation", "(", ")", ")", ";", "}"], "nl_tokens": ["a", "simple", "main", "method", "that", "prints", "the", "version", "and", "exits", "concode_field_sep", "PlaceHolder", "placeHolder", "concode_field_sep", "String", "getSpecification", "concode_elem_sep", "String", "getImplementation"]}
{"code": "boolean function ( Block arg0 ) { if ( arg0 . y + Block . HEIGHT > y ) { if ( arg0 . x < x && arg0 . x + Block . WIDTH + 3 > x ) { arg0 . y = y - Block . HEIGHT ; return true ; } else if ( arg0 . x > x && x + 150 > arg0 . x ) { arg0 . y = y - Block . HEIGHT ; return true ; } } return false ; }", "nl": "checks if the obstacle that is down intersects with the block . concode_field_sep int obstacleSize concode_elem_sep int RESET_POSITION concode_elem_sep int gameWidth concode_elem_sep int obstacleHeigth concode_elem_sep int gameHeight concode_elem_sep boolean isUp concode_elem_sep int x concode_elem_sep int y concode_elem_sep int resetPosition concode_elem_sep int MOVE concode_field_sep void move concode_elem_sep boolean colideDownX concode_elem_sep boolean crashOnObstacle concode_elem_sep void resetObstaclePosition concode_elem_sep boolean colideUpX concode_elem_sep void draw concode_elem_sep boolean colideUp", "code_tokens": ["boolean", "function", "(", "Block", "arg0", ")", "{", "if", "(", "arg0", ".", "y", "+", "Block", ".", "HEIGHT", ">", "y", ")", "{", "if", "(", "arg0", ".", "x", "<", "x", "&", "&", "arg0", ".", "x", "+", "Block", ".", "WIDTH", "+", "3", ">", "x", ")", "{", "arg0", ".", "y", "=", "y", "-", "Block", ".", "HEIGHT", ";", "return", "true", ";", "}", "else", "if", "(", "arg0", ".", "x", ">", "x", "&", "&", "x", "+", "150", ">", "arg0", ".", "x", ")", "{", "arg0", ".", "y", "=", "y", "-", "Block", ".", "HEIGHT", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "nl_tokens": ["checks", "if", "the", "obstacle", "that", "is", "down", "intersects", "with", "the", "block", ".", "concode_field_sep", "int", "obstacleSize", "concode_elem_sep", "int", "RESET_POSITION", "concode_elem_sep", "int", "gameWidth", "concode_elem_sep", "int", "obstacleHeigth", "concode_elem_sep", "int", "gameHeight", "concode_elem_sep", "boolean", "isUp", "concode_elem_sep", "int", "x", "concode_elem_sep", "int", "y", "concode_elem_sep", "int", "resetPosition", "concode_elem_sep", "int", "MOVE", "concode_field_sep", "void", "move", "concode_elem_sep", "boolean", "colideDownX", "concode_elem_sep", "boolean", "crashOnObstacle", "concode_elem_sep", "void", "resetObstaclePosition", "concode_elem_sep", "boolean", "colideUpX", "concode_elem_sep", "void", "draw", "concode_elem_sep", "boolean", "colideUp"]}
{"code": "void function ( TestResult arg0 ) { for ( Enumeration loc0 = tests ( ) ; loc0 . hasMoreElements ( ) ; ) { if ( arg0 . shouldStop ( ) ) break ; Test loc1 = ( Test ) loc0 . nextElement ( ) ; runTest ( loc1 , arg0 ) ; } }", "nl": "runs the tests and collects their result in a testresult . concode_field_sep String fName concode_elem_sep Vector fTests concode_field_sep void setName concode_elem_sep int testCount concode_elem_sep void addTestSuite concode_elem_sep String getName concode_elem_sep void addTestMethod concode_elem_sep boolean isTestMethod concode_elem_sep Test createTest concode_elem_sep Test testAt concode_elem_sep Enumeration tests concode_elem_sep String exceptionToString concode_elem_sep Constructor getTestConstructor concode_elem_sep Test warning concode_elem_sep void addTest concode_elem_sep String toString concode_elem_sep int countTestCases concode_elem_sep boolean isPublicTestMethod concode_elem_sep void runTest", "code_tokens": ["void", "function", "(", "TestResult", "arg0", ")", "{", "for", "(", "Enumeration", "loc0", "=", "tests", "(", ")", ";", "loc0", ".", "hasMoreElements", "(", ")", ";", ")", "{", "if", "(", "arg0", ".", "shouldStop", "(", ")", ")", "break", ";", "Test", "loc1", "=", "(", "Test", ")", "loc0", ".", "nextElement", "(", ")", ";", "runTest", "(", "loc1", ",", "arg0", ")", ";", "}", "}"], "nl_tokens": ["runs", "the", "tests", "and", "collects", "their", "result", "in", "a", "testresult", ".", "concode_field_sep", "String", "fName", "concode_elem_sep", "Vector", "fTests", "concode_field_sep", "void", "setName", "concode_elem_sep", "int", "testCount", "concode_elem_sep", "void", "addTestSuite", "concode_elem_sep", "String", "getName", "concode_elem_sep", "void", "addTestMethod", "concode_elem_sep", "boolean", "isTestMethod", "concode_elem_sep", "Test", "createTest", "concode_elem_sep", "Test", "testAt", "concode_elem_sep", "Enumeration", "tests", "concode_elem_sep", "String", "exceptionToString", "concode_elem_sep", "Constructor", "getTestConstructor", "concode_elem_sep", "Test", "warning", "concode_elem_sep", "void", "addTest", "concode_elem_sep", "String", "toString", "concode_elem_sep", "int", "countTestCases", "concode_elem_sep", "boolean", "isPublicTestMethod", "concode_elem_sep", "void", "runTest"]}
{"code": "void function ( Map arg0 ) { Log . debug ( \"srini_string\" + getClass ( ) ) ; description = ( String ) arg0 . get ( TAG_DESC ) ; }", "nl": "only exposed so that script may invoke it on load from disk . concode_field_sep String description concode_elem_sep Resolver resolver concode_elem_sep Throwable invalidScriptError concode_field_sep String toXMLString concode_elem_sep Map getAttributes concode_elem_sep String getXMLTag concode_elem_sep void writeObject concode_elem_sep void usage concode_elem_sep void usage concode_elem_sep Element addAttributes concode_elem_sep void run concode_elem_sep Element toXML concode_elem_sep void setDescription concode_elem_sep String simpleClassName concode_elem_sep Element addContent concode_elem_sep String getDescription concode_elem_sep String getUsage concode_elem_sep void readObject concode_elem_sep String getDefaultDescription concode_elem_sep String toEditableString concode_elem_sep Step createStep concode_elem_sep Step createStep concode_elem_sep void runStep concode_elem_sep ComponentTester resolveTester concode_elem_sep Class resolveClass concode_elem_sep void setScriptError concode_elem_sep String toString concode_elem_sep Resolver getResolver concode_elem_sep Map createAttributeMap", "code_tokens": ["void", "function", "(", "Map", "arg0", ")", "{", "Log", ".", "debug", "(", "\"srini_string\"", "+", "getClass", "(", ")", ")", ";", "description", "=", "(", "String", ")", "arg0", ".", "get", "(", "TAG_DESC", ")", ";", "}"], "nl_tokens": ["only", "exposed", "so", "that", "script", "may", "invoke", "it", "on", "load", "from", "disk", ".", "concode_field_sep", "String", "description", "concode_elem_sep", "Resolver", "resolver", "concode_elem_sep", "Throwable", "invalidScriptError", "concode_field_sep", "String", "toXMLString", "concode_elem_sep", "Map", "getAttributes", "concode_elem_sep", "String", "getXMLTag", "concode_elem_sep", "void", "writeObject", "concode_elem_sep", "void", "usage", "concode_elem_sep", "void", "usage", "concode_elem_sep", "Element", "addAttributes", "concode_elem_sep", "void", "run", "concode_elem_sep", "Element", "toXML", "concode_elem_sep", "void", "setDescription", "concode_elem_sep", "String", "simpleClassName", "concode_elem_sep", "Element", "addContent", "concode_elem_sep", "String", "getDescription", "concode_elem_sep", "String", "getUsage", "concode_elem_sep", "void", "readObject", "concode_elem_sep", "String", "getDefaultDescription", "concode_elem_sep", "String", "toEditableString", "concode_elem_sep", "Step", "createStep", "concode_elem_sep", "Step", "createStep", "concode_elem_sep", "void", "runStep", "concode_elem_sep", "ComponentTester", "resolveTester", "concode_elem_sep", "Class", "resolveClass", "concode_elem_sep", "void", "setScriptError", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Resolver", "getResolver", "concode_elem_sep", "Map", "createAttributeMap"]}
{"code": "ClassLoader function ( ) { ClassLoader loc0 = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loc0 == null ) { loc0 = CatalogFactory . class . getClassLoader ( ) ; } return loc0 ; }", "nl": "return the relevant classloader to use as a map key for this request . if there is a thread context class loader , return that ; otherwise , return the class loader that loaded this class . concode_field_sep Log log concode_elem_sep String DELIMITER concode_elem_sep Map factories concode_field_sep void addCatalog concode_elem_sep Command getCommand concode_elem_sep void clear concode_elem_sep void setCatalog concode_elem_sep Iterator getNames concode_elem_sep CatalogFactory getInstance concode_elem_sep Catalog getCatalog concode_elem_sep Catalog getCatalog", "code_tokens": ["ClassLoader", "function", "(", ")", "{", "ClassLoader", "loc0", "=", "Thread", ".", "currentThread", "(", ")", ".", "getContextClassLoader", "(", ")", ";", "if", "(", "loc0", "==", "null", ")", "{", "loc0", "=", "CatalogFactory", ".", "class", ".", "getClassLoader", "(", ")", ";", "}", "return", "loc0", ";", "}"], "nl_tokens": ["return", "the", "relevant", "classloader", "to", "use", "as", "a", "map", "key", "for", "this", "request", ".", "if", "there", "is", "a", "thread", "context", "class", "loader", ",", "return", "that", ";", "otherwise", ",", "return", "the", "class", "loader", "that", "loaded", "this", "class", ".", "concode_field_sep", "Log", "log", "concode_elem_sep", "String", "DELIMITER", "concode_elem_sep", "Map", "factories", "concode_field_sep", "void", "addCatalog", "concode_elem_sep", "Command", "getCommand", "concode_elem_sep", "void", "clear", "concode_elem_sep", "void", "setCatalog", "concode_elem_sep", "Iterator", "getNames", "concode_elem_sep", "CatalogFactory", "getInstance", "concode_elem_sep", "Catalog", "getCatalog", "concode_elem_sep", "Catalog", "getCatalog"]}
{"code": "void function ( File arg0 ) { if ( arg0 . isDirectory ( ) ) { for ( File loc0 : arg0 . listFiles ( ) ) { dumbDeleteRecrusive ( loc0 ) ; } } if ( ! arg0 . delete ( ) && arg0 . exists ( ) ) { throw new IOException ( \"srini_string\" + arg0 ) ; } }", "nl": "delete a directory and its contents . warning : java apis do not let us distinguish directories from symbolic links to directories . consequently , if the directory contains symbolic links to directories , we will attempt to delete the contents of pointed-to directories . concode_field_sep byte[] cachedBuffer concode_field_sep void reliablyCopyExecutable concode_elem_sep void deleteOrThrow concode_elem_sep FileLocker lockLibsDirectory concode_elem_sep void freeCopyBuffer concode_elem_sep File createLibsDirectory concode_elem_sep File getLibsDirectory concode_elem_sep int findAbiScore concode_elem_sep String[] getSupportedAbis concode_elem_sep String[] getSupportedAbis concode_elem_sep void fallocateIfSupported concode_elem_sep void fallocate", "code_tokens": ["void", "function", "(", "File", "arg0", ")", "{", "if", "(", "arg0", ".", "isDirectory", "(", ")", ")", "{", "for", "(", "File", "loc0", ":", "arg0", ".", "listFiles", "(", ")", ")", "{", "dumbDeleteRecrusive", "(", "loc0", ")", ";", "}", "}", "if", "(", "!", "arg0", ".", "delete", "(", ")", "&", "&", "arg0", ".", "exists", "(", ")", ")", "{", "throw", "new", "IOException", "(", "\"srini_string\"", "+", "arg0", ")", ";", "}", "}"], "nl_tokens": ["delete", "a", "directory", "and", "its", "contents", ".", "warning", ":", "java", "apis", "do", "not", "let", "us", "distinguish", "directories", "from", "symbolic", "links", "to", "directories", ".", "consequently", ",", "if", "the", "directory", "contains", "symbolic", "links", "to", "directories", ",", "we", "will", "attempt", "to", "delete", "the", "contents", "of", "pointed", "-", "to", "directories", ".", "concode_field_sep", "byte", "[", "]", "cachedBuffer", "concode_field_sep", "void", "reliablyCopyExecutable", "concode_elem_sep", "void", "deleteOrThrow", "concode_elem_sep", "FileLocker", "lockLibsDirectory", "concode_elem_sep", "void", "freeCopyBuffer", "concode_elem_sep", "File", "createLibsDirectory", "concode_elem_sep", "File", "getLibsDirectory", "concode_elem_sep", "int", "findAbiScore", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "String", "[", "]", "getSupportedAbis", "concode_elem_sep", "void", "fallocateIfSupported", "concode_elem_sep", "void", "fallocate"]}
{"code": "int [ ] function ( ) { return this . aVueltas ; }", "nl": "obtener las vueltas calculadas , para saber el valor de cada posicion del array podemos usar la variable : public static final int billetes_monedas concode_field_sep float precio concode_elem_sep int BILLETE_MINIMO concode_elem_sep int[] aVueltas concode_elem_sep float pago concode_elem_sep float[] BILLETES_MONEDAS concode_field_sep void calcular concode_elem_sep void imprimirVueltas concode_elem_sep float getPago concode_elem_sep float getPago", "code_tokens": ["int", "[", "]", "function", "(", ")", "{", "return", "this", ".", "aVueltas", ";", "}"], "nl_tokens": ["obtener", "las", "vueltas", "calculadas", ",", "para", "saber", "el", "valor", "de", "cada", "posicion", "del", "array", "podemos", "usar", "la", "variable", ":", "public", "static", "final", "int", "billetes_monedas", "concode_field_sep", "float", "precio", "concode_elem_sep", "int", "BILLETE_MINIMO", "concode_elem_sep", "int", "[", "]", "aVueltas", "concode_elem_sep", "float", "pago", "concode_elem_sep", "float", "[", "]", "BILLETES_MONEDAS", "concode_field_sep", "void", "calcular", "concode_elem_sep", "void", "imprimirVueltas", "concode_elem_sep", "float", "getPago", "concode_elem_sep", "float", "getPago"]}
{"code": "VectorXZ function ( ) { return ( startNode . getPos ( ) . add ( endNode . getPos ( ) ) ) . mult ( 0.5 ) ; }", "nl": "returns the center of the line concode_field_sep VectorXZ rightNormal concode_elem_sep MapNode startNode concode_elem_sep VectorXZ direction concode_elem_sep MapNode endNode concode_field_sep MapNode getOtherNode concode_elem_sep VectorXZ getRightNormal concode_elem_sep VectorXZ getDirection concode_elem_sep LineSegmentXZ getLineSegment concode_elem_sep boolean isConnectedTo concode_elem_sep boolean isConnectedTo concode_elem_sep MapNode getEndNode concode_elem_sep List<MapNode> getStartEndNodes concode_elem_sep boolean sharesBothNodes concode_elem_sep MapNode getStartNode", "code_tokens": ["VectorXZ", "function", "(", ")", "{", "return", "(", "startNode", ".", "getPos", "(", ")", ".", "add", "(", "endNode", ".", "getPos", "(", ")", ")", ")", ".", "mult", "(", "0.5", ")", ";", "}"], "nl_tokens": ["returns", "the", "center", "of", "the", "line", "concode_field_sep", "VectorXZ", "rightNormal", "concode_elem_sep", "MapNode", "startNode", "concode_elem_sep", "VectorXZ", "direction", "concode_elem_sep", "MapNode", "endNode", "concode_field_sep", "MapNode", "getOtherNode", "concode_elem_sep", "VectorXZ", "getRightNormal", "concode_elem_sep", "VectorXZ", "getDirection", "concode_elem_sep", "LineSegmentXZ", "getLineSegment", "concode_elem_sep", "boolean", "isConnectedTo", "concode_elem_sep", "boolean", "isConnectedTo", "concode_elem_sep", "MapNode", "getEndNode", "concode_elem_sep", "List", "<", "MapNode", ">", "getStartEndNodes", "concode_elem_sep", "boolean", "sharesBothNodes", "concode_elem_sep", "MapNode", "getStartNode"]}
{"code": "void function ( ITestIdentifier arg0 ) { if ( arg0 == null ) endTestCase ( ) ; else { logTestStart ( arg0 ) ; setRunningTest ( arg0 ) ; } }", "nl": "notify the testmonitor that a new test is starting . passing null signals that a test has ended or that none is running . concode_field_sep ITestIdentifier _runningTest concode_elem_sep TestMonitor _monitor concode_field_sep void endTestCase concode_elem_sep String getCurrentTestCaseID concode_elem_sep ITestIdentifier getRunningTest concode_elem_sep void logTestStart concode_elem_sep String getId concode_elem_sep void beginTestCase concode_elem_sep TestMonitor getInstance concode_elem_sep NoRunningTestId noTest concode_elem_sep void setRunningTest concode_elem_sep boolean isTestRunning", "code_tokens": ["void", "function", "(", "ITestIdentifier", "arg0", ")", "{", "if", "(", "arg0", "==", "null", ")", "endTestCase", "(", ")", ";", "else", "{", "logTestStart", "(", "arg0", ")", ";", "setRunningTest", "(", "arg0", ")", ";", "}", "}"], "nl_tokens": ["notify", "the", "testmonitor", "that", "a", "new", "test", "is", "starting", ".", "passing", "null", "signals", "that", "a", "test", "has", "ended", "or", "that", "none", "is", "running", ".", "concode_field_sep", "ITestIdentifier", "_runningTest", "concode_elem_sep", "TestMonitor", "_monitor", "concode_field_sep", "void", "endTestCase", "concode_elem_sep", "String", "getCurrentTestCaseID", "concode_elem_sep", "ITestIdentifier", "getRunningTest", "concode_elem_sep", "void", "logTestStart", "concode_elem_sep", "String", "getId", "concode_elem_sep", "void", "beginTestCase", "concode_elem_sep", "TestMonitor", "getInstance", "concode_elem_sep", "NoRunningTestId", "noTest", "concode_elem_sep", "void", "setRunningTest", "concode_elem_sep", "boolean", "isTestRunning"]}
{"code": "void function ( byte arg0 ) { ensureCapacity ( length + 1 ) ; buffer [ length ++ ] = arg0 ; }", "nl": "appends a byte to the buffer . concode_field_sep String encoding concode_elem_sep int length concode_elem_sep byte[] buffer concode_field_sep InputStream getByteStream concode_elem_sep String getEncoding concode_elem_sep byte byteAt concode_elem_sep int length concode_elem_sep void ensureCapacity concode_elem_sep int charAt", "code_tokens": ["void", "function", "(", "byte", "arg0", ")", "{", "ensureCapacity", "(", "length", "+", "1", ")", ";", "buffer", "[", "length", "+", "+", "]", "=", "arg0", ";", "}"], "nl_tokens": ["appends", "a", "byte", "to", "the", "buffer", ".", "concode_field_sep", "String", "encoding", "concode_elem_sep", "int", "length", "concode_elem_sep", "byte", "[", "]", "buffer", "concode_field_sep", "InputStream", "getByteStream", "concode_elem_sep", "String", "getEncoding", "concode_elem_sep", "byte", "byteAt", "concode_elem_sep", "int", "length", "concode_elem_sep", "void", "ensureCapacity", "concode_elem_sep", "int", "charAt"]}
{"code": "int function ( ) { return frames_ . size ( ) > 0 && ( ( ANIMFrame ) frames_ . get ( frames_ . size ( ) - 1 ) ) . getInterleave ( ) == 1 ? 1 : 2 ; }", "nl": "returns the interleave of frames in this movie track . this is 2 for double buffered animations , and 1 one for animations without double buffering . concode_field_sep int xPosition concode_elem_sep boolean isPlayWrapupFrames concode_elem_sep int CMP_VERTICAL concode_elem_sep int yPosition concode_elem_sep int MODE_INDEXED_COLORS concode_elem_sep int MSK_HAS_MASK concode_elem_sep int MSK_HAS_TRANSPARENT_COLOR concode_elem_sep int pageHeight concode_elem_sep int pageWidth concode_elem_sep Vector frames_ concode_elem_sep int transparentColor concode_elem_sep Hashtable properties concode_elem_sep int height concode_elem_sep long totalDuration concode_elem_sep int MODE_HAM8 concode_elem_sep int masking concode_elem_sep int MODE_HAM6 concode_elem_sep int MSK_NONE concode_elem_sep int MSK_LASSO concode_elem_sep int MODE_EHB concode_elem_sep boolean isSwapSpeakers concode_elem_sep int nbPlanes concode_elem_sep int nbPalettes concode_elem_sep int MODE_DIRECT_COLORS concode_elem_sep int xAspect concode_elem_sep Vector audioClips_ concode_elem_sep PropertyChangeSupport listeners concode_elem_sep int screenMode concode_elem_sep int jiffies concode_elem_sep int CMP_BYTE_RUN_1 concode_elem_sep int yAspect concode_elem_sep int CMP_NONE concode_elem_sep int width concode_elem_sep ArrayList<ColorCycle> colorCycles concode_elem_sep int compression concode_field_sep int getNbPlanes concode_elem_sep int getCompression concode_elem_sep void setYPosition concode_elem_sep List<ColorCycle> getColorCycles concode_elem_sep int getColorCyclesCount concode_elem_sep int getFrameCount concode_elem_sep AudioClip getAudioClip concode_elem_sep void setTransparentColor concode_elem_sep int getNbPalettes concode_elem_sep int getXAspect concode_elem_sep void setPageHeight concode_elem_sep int getTransparentColor concode_elem_sep int getJiffies concode_elem_sep int getMasking concode_elem_sep void firePropertyChange concode_elem_sep void removePropertyChangeListener concode_elem_sep void setHeight concode_elem_sep void setXAspect concode_elem_sep void setScreenMode concode_elem_sep void setCompression concode_elem_sep void setSwapSpeakers concode_elem_sep void setProperty concode_elem_sep void addFrame concode_elem_sep int getAudioClipCount concode_elem_sep void setXPosition concode_elem_sep int getYPosition concode_elem_sep boolean isPlayWrapupFrames concode_elem_sep ANIMFrame getFrame concode_elem_sep int getWidth concode_elem_sep boolean isSwapSpeakers concode_elem_sep void addColorCycle concode_elem_sep void setPageWidth concode_elem_sep int getPageHeight concode_elem_sep long getFrameDuration concode_elem_sep int getHeight concode_elem_sep void addAudioClip concode_elem_sep int getDeltaOperation concode_elem_sep void addPropertyChangeListener concode_elem_sep Object getProperty concode_elem_sep int getXPosition concode_elem_sep void setMasking concode_elem_sep int getPageWidth concode_elem_sep int getYAspect concode_elem_sep void setYAspect concode_elem_sep void setWidth concode_elem_sep void setNbPlanes concode_elem_sep void setPlayWrapupFrames concode_elem_sep long getTotalDuration concode_elem_sep int getScreenMode concode_elem_sep void setJiffies", "code_tokens": ["int", "function", "(", ")", "{", "return", "frames_", ".", "size", "(", ")", ">", "0", "&", "&", "(", "(", "ANIMFrame", ")", "frames_", ".", "get", "(", "frames_", ".", "size", "(", ")", "-", "1", ")", ")", ".", "getInterleave", "(", ")", "==", "1", "?", "1", ":", "2", ";", "}"], "nl_tokens": ["returns", "the", "interleave", "of", "frames", "in", "this", "movie", "track", ".", "this", "is", "2", "for", "double", "buffered", "animations", ",", "and", "1", "one", "for", "animations", "without", "double", "buffering", ".", "concode_field_sep", "int", "xPosition", "concode_elem_sep", "boolean", "isPlayWrapupFrames", "concode_elem_sep", "int", "CMP_VERTICAL", "concode_elem_sep", "int", "yPosition", "concode_elem_sep", "int", "MODE_INDEXED_COLORS", "concode_elem_sep", "int", "MSK_HAS_MASK", "concode_elem_sep", "int", "MSK_HAS_TRANSPARENT_COLOR", "concode_elem_sep", "int", "pageHeight", "concode_elem_sep", "int", "pageWidth", "concode_elem_sep", "Vector", "frames_", "concode_elem_sep", "int", "transparentColor", "concode_elem_sep", "Hashtable", "properties", "concode_elem_sep", "int", "height", "concode_elem_sep", "long", "totalDuration", "concode_elem_sep", "int", "MODE_HAM8", "concode_elem_sep", "int", "masking", "concode_elem_sep", "int", "MODE_HAM6", "concode_elem_sep", "int", "MSK_NONE", "concode_elem_sep", "int", "MSK_LASSO", "concode_elem_sep", "int", "MODE_EHB", "concode_elem_sep", "boolean", "isSwapSpeakers", "concode_elem_sep", "int", "nbPlanes", "concode_elem_sep", "int", "nbPalettes", "concode_elem_sep", "int", "MODE_DIRECT_COLORS", "concode_elem_sep", "int", "xAspect", "concode_elem_sep", "Vector", "audioClips_", "concode_elem_sep", "PropertyChangeSupport", "listeners", "concode_elem_sep", "int", "screenMode", "concode_elem_sep", "int", "jiffies", "concode_elem_sep", "int", "CMP_BYTE_RUN_1", "concode_elem_sep", "int", "yAspect", "concode_elem_sep", "int", "CMP_NONE", "concode_elem_sep", "int", "width", "concode_elem_sep", "ArrayList", "<", "ColorCycle", ">", "colorCycles", "concode_elem_sep", "int", "compression", "concode_field_sep", "int", "getNbPlanes", "concode_elem_sep", "int", "getCompression", "concode_elem_sep", "void", "setYPosition", "concode_elem_sep", "List", "<", "ColorCycle", ">", "getColorCycles", "concode_elem_sep", "int", "getColorCyclesCount", "concode_elem_sep", "int", "getFrameCount", "concode_elem_sep", "AudioClip", "getAudioClip", "concode_elem_sep", "void", "setTransparentColor", "concode_elem_sep", "int", "getNbPalettes", "concode_elem_sep", "int", "getXAspect", "concode_elem_sep", "void", "setPageHeight", "concode_elem_sep", "int", "getTransparentColor", "concode_elem_sep", "int", "getJiffies", "concode_elem_sep", "int", "getMasking", "concode_elem_sep", "void", "firePropertyChange", "concode_elem_sep", "void", "removePropertyChangeListener", "concode_elem_sep", "void", "setHeight", "concode_elem_sep", "void", "setXAspect", "concode_elem_sep", "void", "setScreenMode", "concode_elem_sep", "void", "setCompression", "concode_elem_sep", "void", "setSwapSpeakers", "concode_elem_sep", "void", "setProperty", "concode_elem_sep", "void", "addFrame", "concode_elem_sep", "int", "getAudioClipCount", "concode_elem_sep", "void", "setXPosition", "concode_elem_sep", "int", "getYPosition", "concode_elem_sep", "boolean", "isPlayWrapupFrames", "concode_elem_sep", "ANIMFrame", "getFrame", "concode_elem_sep", "int", "getWidth", "concode_elem_sep", "boolean", "isSwapSpeakers", "concode_elem_sep", "void", "addColorCycle", "concode_elem_sep", "void", "setPageWidth", "concode_elem_sep", "int", "getPageHeight", "concode_elem_sep", "long", "getFrameDuration", "concode_elem_sep", "int", "getHeight", "concode_elem_sep", "void", "addAudioClip", "concode_elem_sep", "int", "getDeltaOperation", "concode_elem_sep", "void", "addPropertyChangeListener", "concode_elem_sep", "Object", "getProperty", "concode_elem_sep", "int", "getXPosition", "concode_elem_sep", "void", "setMasking", "concode_elem_sep", "int", "getPageWidth", "concode_elem_sep", "int", "getYAspect", "concode_elem_sep", "void", "setYAspect", "concode_elem_sep", "void", "setWidth", "concode_elem_sep", "void", "setNbPlanes", "concode_elem_sep", "void", "setPlayWrapupFrames", "concode_elem_sep", "long", "getTotalDuration", "concode_elem_sep", "int", "getScreenMode", "concode_elem_sep", "void", "setJiffies"]}
{"code": "List < AmwFunctionEntity > function ( ResourceTypeEntity arg0 ) { Objects . requireNonNull ( arg0 , \"srini_string\" ) ; ResourceTypeEntity loc0 = resourceTypeRepository . loadWithFunctionsAndMiksForId ( arg0 . getId ( ) ) ; return new ArrayList < > ( loc0 . getFunctions ( ) ) ; }", "nl": "get all functions which are defined on the given resourcetype concode_field_sep Permissions permissionBoundary concode_elem_sep EntityManager entityManager concode_elem_sep ResourceTypeRepository resourceTypeRepository concode_elem_sep FreemarkerSyntaxValidator freemarkerValidator concode_elem_sep ResourceRepository resourceRepository concode_elem_sep FunctionRepository functionRepository concode_elem_sep FunctionService functionService concode_field_sep void deleteFunction concode_elem_sep AmwFunctionEntity getFunctionByIdAndRevision concode_elem_sep AmwFunctionEntity getFunctionById concode_elem_sep List<AmwFunctionEntity> getAllOverwritableSupertypeFunctions concode_elem_sep List<AmwFunctionEntity> getAllOverwritableSupertypeFunctions concode_elem_sep List<RevisionInformation> getFunctionRevisions concode_elem_sep AmwFunctionEntity overwriteResourceFunction concode_elem_sep AmwFunctionEntity overwriteResourceTypeFunction concode_elem_sep AmwFunctionEntity createNewResourceFunction concode_elem_sep void saveFunction concode_elem_sep AmwFunctionEntity createNewResourceTypeFunction", "code_tokens": ["List", "<", "AmwFunctionEntity", ">", "function", "(", "ResourceTypeEntity", "arg0", ")", "{", "Objects", ".", "requireNonNull", "(", "arg0", ",", "\"srini_string\"", ")", ";", "ResourceTypeEntity", "loc0", "=", "resourceTypeRepository", ".", "loadWithFunctionsAndMiksForId", "(", "arg0", ".", "getId", "(", ")", ")", ";", "return", "new", "ArrayList", "<", ">", "(", "loc0", ".", "getFunctions", "(", ")", ")", ";", "}"], "nl_tokens": ["get", "all", "functions", "which", "are", "defined", "on", "the", "given", "resourcetype", "concode_field_sep", "Permissions", "permissionBoundary", "concode_elem_sep", "EntityManager", "entityManager", "concode_elem_sep", "ResourceTypeRepository", "resourceTypeRepository", "concode_elem_sep", "FreemarkerSyntaxValidator", "freemarkerValidator", "concode_elem_sep", "ResourceRepository", "resourceRepository", "concode_elem_sep", "FunctionRepository", "functionRepository", "concode_elem_sep", "FunctionService", "functionService", "concode_field_sep", "void", "deleteFunction", "concode_elem_sep", "AmwFunctionEntity", "getFunctionByIdAndRevision", "concode_elem_sep", "AmwFunctionEntity", "getFunctionById", "concode_elem_sep", "List", "<", "AmwFunctionEntity", ">", "getAllOverwritableSupertypeFunctions", "concode_elem_sep", "List", "<", "AmwFunctionEntity", ">", "getAllOverwritableSupertypeFunctions", "concode_elem_sep", "List", "<", "RevisionInformation", ">", "getFunctionRevisions", "concode_elem_sep", "AmwFunctionEntity", "overwriteResourceFunction", "concode_elem_sep", "AmwFunctionEntity", "overwriteResourceTypeFunction", "concode_elem_sep", "AmwFunctionEntity", "createNewResourceFunction", "concode_elem_sep", "void", "saveFunction", "concode_elem_sep", "AmwFunctionEntity", "createNewResourceTypeFunction"]}
{"code": "Quotient < C > function ( Quotient < C > arg0 ) { if ( arg0 == null || arg0 . isZERO ( ) ) { return this ; } C loc0 = num . multiply ( arg0 . den ) ; loc0 = loc0 . subtract ( den . multiply ( arg0 . num ) ) ; C loc1 = den . multiply ( arg0 . den ) ; return new Quotient < C > ( ring , loc0 , loc1 , false ) ; }", "nl": "quotient subtraction . concode_field_sep Logger logger concode_elem_sep QuotientRing<C> ring concode_elem_sep boolean debug concode_elem_sep C num concode_elem_sep C den concode_field_sep int signum concode_elem_sep boolean isONE concode_elem_sep Quotient<C> inverse concode_elem_sep boolean isUnit concode_elem_sep Quotient<C> gcd concode_elem_sep Quotient<C> sum concode_elem_sep int compareTo concode_elem_sep Quotient<C>[] egcd concode_elem_sep Quotient<C> monic concode_elem_sep Quotient<C> abs concode_elem_sep int hashCode concode_elem_sep Quotient<C> negate concode_elem_sep boolean equals concode_elem_sep Quotient<C> clone concode_elem_sep boolean isZERO concode_elem_sep String toString concode_elem_sep Quotient<C> divide concode_elem_sep Quotient<C> multiply concode_elem_sep Quotient<C> remainder", "code_tokens": ["Quotient", "<", "C", ">", "function", "(", "Quotient", "<", "C", ">", "arg0", ")", "{", "if", "(", "arg0", "==", "null", "|", "|", "arg0", ".", "isZERO", "(", ")", ")", "{", "return", "this", ";", "}", "C", "loc0", "=", "num", ".", "multiply", "(", "arg0", ".", "den", ")", ";", "loc0", "=", "loc0", ".", "subtract", "(", "den", ".", "multiply", "(", "arg0", ".", "num", ")", ")", ";", "C", "loc1", "=", "den", ".", "multiply", "(", "arg0", ".", "den", ")", ";", "return", "new", "Quotient", "<", "C", ">", "(", "ring", ",", "loc0", ",", "loc1", ",", "false", ")", ";", "}"], "nl_tokens": ["quotient", "subtraction", ".", "concode_field_sep", "Logger", "logger", "concode_elem_sep", "QuotientRing", "<", "C", ">", "ring", "concode_elem_sep", "boolean", "debug", "concode_elem_sep", "C", "num", "concode_elem_sep", "C", "den", "concode_field_sep", "int", "signum", "concode_elem_sep", "boolean", "isONE", "concode_elem_sep", "Quotient", "<", "C", ">", "inverse", "concode_elem_sep", "boolean", "isUnit", "concode_elem_sep", "Quotient", "<", "C", ">", "gcd", "concode_elem_sep", "Quotient", "<", "C", ">", "sum", "concode_elem_sep", "int", "compareTo", "concode_elem_sep", "Quotient", "<", "C", ">", "[", "]", "egcd", "concode_elem_sep", "Quotient", "<", "C", ">", "monic", "concode_elem_sep", "Quotient", "<", "C", ">", "abs", "concode_elem_sep", "int", "hashCode", "concode_elem_sep", "Quotient", "<", "C", ">", "negate", "concode_elem_sep", "boolean", "equals", "concode_elem_sep", "Quotient", "<", "C", ">", "clone", "concode_elem_sep", "boolean", "isZERO", "concode_elem_sep", "String", "toString", "concode_elem_sep", "Quotient", "<", "C", ">", "divide", "concode_elem_sep", "Quotient", "<", "C", ">", "multiply", "concode_elem_sep", "Quotient", "<", "C", ">", "remainder"]}
{"code": "SettableFuture < T > function ( final Statement arg0 , final T arg1 ) { return execAsync ( arg0 , arg1 , handler ) ; }", "nl": "asynchronously executes the specified batch statement . inputs will be passed to the #handler once query succeed or failed . concode_field_sep AsyncResultHandler<T> handler concode_elem_sep AtomicInteger pending concode_elem_sep ExecutorService executorService concode_elem_sep Session session concode_elem_sep Logger LOG concode_field_sep int getPendingTasksSize concode_elem_sep ExecutorService newSingleThreadExecutor concode_elem_sep void shutdown", "code_tokens": ["SettableFuture", "<", "T", ">", "function", "(", "final", "Statement", "arg0", ",", "final", "T", "arg1", ")", "{", "return", "execAsync", "(", "arg0", ",", "arg1", ",", "handler", ")", ";", "}"], "nl_tokens": ["asynchronously", "executes", "the", "specified", "batch", "statement", ".", "inputs", "will", "be", "passed", "to", "the", "#handler once query succeed or failed . concode_field_sep AsyncResultHandler<T> handler concode_elem_sep AtomicInteger pending concode_elem_sep ExecutorService executorService concode_elem_sep Session session concode_elem_sep Logger LOG concode_field_sep int getPendingTasksSize concode_elem_sep ExecutorService newSingleThreadExecutor concode_elem_sep void shutdown"]}
{"code": "String function ( ) { return result . toString ( ) ; }", "nl": "returns the result so far . concode_field_sep Vector lastEnd concode_elem_sep StringBuffer result concode_elem_sep Vector lastStart concode_field_sep void renderImage concode_elem_sep void appendTextChunk concode_elem_sep void beginTextBlock concode_elem_sep void endTextBlock concode_elem_sep void renderText", "code_tokens": ["String", "function", "(", ")", "{", "return", "result", ".", "toString", "(", ")", ";", "}"], "nl_tokens": ["returns", "the", "result", "so", "far", ".", "concode_field_sep", "Vector", "lastEnd", "concode_elem_sep", "StringBuffer", "result", "concode_elem_sep", "Vector", "lastStart", "concode_field_sep", "void", "renderImage", "concode_elem_sep", "void", "appendTextChunk", "concode_elem_sep", "void", "beginTextBlock", "concode_elem_sep", "void", "endTextBlock", "concode_elem_sep", "void", "renderText"]}
