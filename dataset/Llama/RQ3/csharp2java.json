{"question": "private long UniformRandom(double low, double high)\n    {\n        Debug.Assert(high >= low);\n\n        var mag = high - low;\n        return (long)(_randomGenerator.NextDouble() * mag + low);\n    }", "answer": "private long uniformRandom(double low, double high) {\n    checkArgument(high >= low);\n    double mag = high - low;\n    return (long) (random.nextDouble() * mag + low);\n  }"}
{"question": "public override long GetItemId (int position)\n\t\t{\n\t\t\treturn position;\n\t\t}", "answer": "@Override\n    public long getItemId(int position) {\n            return position;\n        }"}
{"question": "private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.Length;\n    while (i < l) {\n      int count = packed[i++];\n      int value = packed[i++];\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }", "answer": "private static int zzUnpackAction(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"}
{"question": "private static int zzUnpackRowMap(String packed, int offset, int [] result) {\n    int i = 0;  /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.Length;\n    while (i < l) {\n      int high = packed[i++] << 16;\n      result[j++] = high | packed[i++];\n    }\n    return j;\n  }", "answer": "private static int zzUnpackRowMap(String packed, int offset, int [] result) {\n    int i = 0;  /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int high = packed.charAt(i++) << 16;\n      result[j++] = high | packed.charAt(i++);\n    }\n    return j;\n  }"}
{"question": "private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.Length;\n    while (i < l) {\n      int count = packed[i++];\n      int value = packed[i++];\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }", "answer": "private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"}
{"question": "private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.Length;\n    while (i < l) {\n      int count = packed[i++];\n      int value = packed[i++];\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }", "answer": "private static int zzUnpackAttribute(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }"}
{"question": "private static char[] zzUnpackCMap(String packed) {\n    char [] map = new char[0x10000];\n    int i = 0;  /* index in packed string  */\n    int j = 0;  /* index in unpacked array */\n    while (i < 2222) {\n      int  count = packed[i++];\n      char value = packed[i++];\n      do map[j++] = value; while (--count > 0);\n    }\n    return map;\n  }", "answer": "private static char [] zzUnpackCMap(String packed) {\n    char [] map = new char[0x10000];\n    int i = 0;  /* index in packed string  */\n    int j = 0;  /* index in unpacked array */\n    while (i < 2222) {\n      int  count = packed.charAt(i++);\n      char value = packed.charAt(i++);\n      do map[j++] = value; while (--count > 0);\n    }\n    return map;\n  }"}
{"question": "private void zzScanError(int errorCode) {\n    String message;\n    try {\n      message = ZZ_ERROR_MSG[errorCode];\n    }\n    catch (IndexOutOfRangeException e) {\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n    }\n\n    throw new Exception(message);\n  }", "answer": "private void zzScanError(int errorCode) {\n    String message;\n    try {\n      message = ZZ_ERROR_MSG[errorCode];\n    }\n    catch (ArrayIndexOutOfBoundsException e) {\n      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n    }\n\n    throw new Error(message);\n  }"}
{"question": "public void yypushback(int number)  {\n    if ( number > yyLength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= number;\n  }", "answer": "public void yypushback(int number)  {\n    if ( number > yylength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= number;\n  }"}
{"question": "private static int [] zzUnpackAction() {\n    int [] result = new int[63];\n    int offset = 0;\n    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);\n    return result;\n  }", "answer": "private static int [] zzUnpackAction() {\n    int [] result = new int[30];\n    int offset = 0;\n    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);\n    return result;\n  }"}
{"question": "private static int [] zzUnpackTrans() {\n    int [] result = new int[450];\n    int offset = 0;\n    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);\n    return result;\n  }", "answer": "private static int [] zzUnpackTrans() {\n    int [] result = new int[450];\n    int offset = 0;\n    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);\n    return result;\n  }"}
{"question": "private static int [] zzUnpackAttribute() {\n    int [] result = new int[28];\n    int offset = 0;\n    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);\n    return result;\n  }", "answer": "private static int [] zzUnpackAttribute() {\n    int [] result = new int[30];\n    int offset = 0;\n    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);\n    return result;\n  }"}
{"question": "private static int [] zzUnpackRowMap() {\n    int [] result = new int[30];\n    int offset = 0;\n    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);\n    return result;\n  }", "answer": "private static int [] zzUnpackRowMap() {\n    int [] result = new int[30];\n    int offset = 0;\n    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);\n    return result;\n  }"}
{"question": "public override void Dispose()\n        {\n            Clear();\n        }", "answer": "@Override\n    public void dispose() {\n        clear();\n    }"}
{"question": "public static byte[] getBytesUnchecked(String string, String charsetName) {\n        if (string == null) {\n            return null;\n        }\n        try {\n            return string.getBytes(charsetName);\n        } catch (UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }", "answer": "public static byte[] getBytesUnchecked(final String string, final String charsetName) {\n        if (string == null) {\n            return null;\n        }\n        try {\n            return string.getBytes(charsetName);\n        } catch (final UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }"}
{"question": "[Test]\n        public void GetJobWithParams()\n        {\n            String queue = GetQueueName();\n            q.AddJob(queue, \"message\", 10);\n            q.AddJob(queue, \"message\", 10);\n            List<Job> jobs = q.GetJob(100, 2, new List<string> { queue });\n            jobs.Count.Should().Be(2);\n        }", "answer": "@Test\n\tpublic void getJobWithParams() {\n\t\tString queue = getQueueName();\n\t\tq.addJob(queue, \"message\", 10);\n\t\tq.addJob(queue, \"message\", 10);\n\t\tList<Job> jobs = q.getJob(100, 2, queue);\n\t\tassertEquals(jobs.size(), 2);\n\t}"}
{"question": "private void Connect()\n        {\n            while (_c == null)\n            {\n                if (_uris.Count == 0)\n                {\n                    throw new DisqueConnectionException(\"Could not connect to any of the provided nodes\");\n                }\n                int index = _random.Next(_uris.Count);\n\n                try\n                {\n                    Uri uri = _uris[index];\n                    _c = new RedisClient(uri.Host, uri.Port);\n                }\n                catch (Exception e)\n                {\n                    _uris.RemoveAt(index);\n                }\n            }\n        }", "answer": "@Override\n\tpublic void connect() {\n\t\twhile (!this.isConnected()) {\n\t\t\tif (uris.size() == 0) {\n\t\t\t\tthrow new JedisConnectionException(\"Could not connect to any of the provided nodes\");\n\t\t\t}\n\t\t\tint index = randomGenerator.nextInt(uris.size());\n\n\t\t\ttry {\n\t\t\t\tURI uri = uris.get(index);\n\t\t\t\tsetHost(uri.getHost());\n\t\t\t\tsetPort(uri.getPort());\n\t\t\t\tsuper.connect();\n\t\t\t} catch (JedisConnectionException e) {\n\t\t\t\turis.remove(index);\n\t\t\t}\n\t\t}\n\t}"}
{"question": "[Test]\n        public void Working()\n        {\n            String queue = GetQueueName();\n            String jobId = q.AddJob(queue, \"testJob\", 10);\n            long secs = q.Working(jobId);\n            secs.Should().NotBe(null);\n            secs.Should().NotBe(0L);\n        }", "answer": "@Test\n\tpublic void working() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 10);\n\t\tLong secs = q.working(jobId);\n\t\tassertNotNull(secs);\n\t\tAssert.assertNotEquals(0L, secs.longValue());\n\t}"}
{"question": "[Test]\n        public void Ping()\n        {\n            string pong = q.Ping();\n            pong.Should().NotBeNullOrEmpty();\n        }", "answer": "@Test\n\tpublic void ping() {\n\t\tString pong = q.ping();\n\t\tassertNotNull(pong);\n\t}"}
{"question": "private static void Encode(byte[] output, int outputOffset, uint[] input, int inputOffset, int count)\n\t\t{\n\t\t\tint i, j;\n\t\t\tint end = outputOffset + count;\n\t\t\tfor (i = inputOffset, j = outputOffset; j < end; i++, j += 4)\n\t\t\t{\n\t\t\t\toutput[j] = (byte)(input[i] & 0xff);\n\t\t\t\toutput[j + 1] = (byte)((input[i] >> 8) & 0xff);\n\t\t\t\toutput[j + 2] = (byte)((input[i] >> 16) & 0xff);\n\t\t\t\toutput[j + 3] = (byte)((input[i] >> 24) & 0xff);\n\t\t\t}\n\t\t}", "answer": "private void encode(byte[] output, long[] input, int len) {\n\t\tint i;\n\t\tint j;\n\n\t\tfor (i = 0, j = 0; j < len; i++, j += 4) {\n\t\t\toutput[j] = (byte) (input[i] & 0xffL);\n\t\t\toutput[j + 1] = (byte) ((input[i] >>> 8) & 0xffL);\n\t\t\toutput[j + 2] = (byte) ((input[i] >>> 16) & 0xffL);\n\t\t\toutput[j + 3] = (byte) ((input[i] >>> 24) & 0xffL);\n\t\t}\n\t}"}
{"question": "public double ReadDouble() {\n            return Double.longBitsToDouble(ReadLong());\n        }", "answer": "public double readDouble()\n    {\n        return Double.longBitsToDouble(readLong());\n    }"}
{"question": "public override Holder OnCreateViewHolder(ViewGroup parent, int viewType)\n\t\t{\n\t\t\tswitch (viewType)\n\t\t\t{\n\t\t\t\tcase TYPE_PLACEHOLDER:\n\t\t\t\t\tView view = LayoutInflater.From(parent.Context).Inflate(Resource.Layout.material_view_pager_placeholder, parent, false);\n\t\t\t\t\treturn new Holder(view);\n\t\t\t\tdefault:\n\t\t\t\t\treturn base.OnCreateViewHolder(parent, viewType);\n\t\t\t}\n\t\t}", "answer": "@Override\n        public Holder onCreateViewHolder(ViewGroup parent, int viewType) {\n            if (viewType == TYPE_PLACEHOLDER) {\n                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.material_view_pager_placeholder, parent, false);\n                return new Holder(view);\n            } else\n                return super.onCreateViewHolder(parent, viewType);\n        }"}
{"question": "public static Builder newBuilder() {\n        return new Builder();\n    }", "answer": "public static Builder newBuilder() { return Builder.create(); }"}
{"question": "public String getDisplayName() {\n\t\treturn displayName;\n\t}", "answer": "public java.lang.String getDisplayName() {\n        return displayName;\n    }"}
{"question": "public void setDisplayName(String displayName) {\n\t\tthis.displayName = displayName;\n\t}", "answer": "public void setDisplayName(java.lang.String displayName) {\n        this.displayName = displayName;\n    }"}
{"question": "public long getId() {\n        return id;\n    }", "answer": "public java.lang.Long getId() {\n        return id;\n    }"}
{"question": "public void setId(long id) {\n        this.id = id;\n    }", "answer": "public void setId(java.lang.Long id) {\n        this.id = id;\n    }"}
{"question": "public String getDescription() {\n\t\treturn description;\n\t}", "answer": "public java.lang.String getDescription() {\n        return description;\n    }"}
{"question": "public void setDescription(String description) {\n\t\tthis.description = description;\n\t}", "answer": "public void setDescription(java.lang.String description) {\n        this.description = description;\n    }"}
{"question": "public void setUrl(String url) {\n        this.url = url;\n    }", "answer": "public void setUrl(java.lang.String url) {\n        this.url = url;\n    }"}
{"question": "public override bool IsFinished ()\n\t\t{\n\t\t\treturn mScroller.IsFinished;\n\t\t}", "answer": "@Override\n\tpublic boolean isFinished() {\n        return mScroller.isFinished();\n    }"}
{"question": "public static double Cos(double angle)\n        {\n            return Math.Cos(angle);\n        }", "answer": "public final static double cos(final double angle)\n\t{\n\t\treturn Math.cos(angle);\n\t}"}
{"question": "public static double Sin(double angle)\n        {\n            return Math.Sin(angle);\n        }", "answer": "public final static double sin(final double angle)\n\t{\n\t\treturn Math.sin(angle);\n\t}"}
{"question": "public override BitMatrix encode(String contents, BarcodeFormat format, int width, int height)\n      {\n         return encode(contents, format, width, height, null);\n      }", "answer": "@Override\n  public BitMatrix encode(String contents, BarcodeFormat format, int width, int height)\n      throws WriterException {\n\n    return encode(contents, format, width, height, null);\n  }"}
{"question": "private bool r_R2() {\n            if (!(I_p2 <= cursor)) {\n                return false;\n            }\n            return true;\n        }", "answer": "private boolean r_R2() {\n            if (!(I_p2 <= cursor))\n            {\n                return false;\n            }\n            return true;\n        }"}
{"question": "public void ClearAdaptiveData() {\n            previousMap.Clear();\n        }", "answer": "public void clearAdaptiveData() {\n    previousMap.clear();\n  }"}
{"question": "public IEnumerator<String> iterator() {\n     return set.iterator();\n    }", "answer": "public Iterator<String> iterator() {\n         return set.iterator();\n       }"}
{"question": "public override void Fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)\n\t\t{\n\t\t\tmScroller.Fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);\n\t\t}", "answer": "@Override\n    public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,\n                      int overX, int overY) {\n        mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);\n    }"}
{"question": "public static Test suite()\n    {\n        return new TestSuite(typeof(TestCase));\n    }", "answer": "public static Test suite()\n    {\n        return new TestSuite(TestCase.class);\n    }"}
{"question": "public override void remove() {\n            throw new NotSupportedOperationException();\n        }", "answer": "@Override public void remove() {throw new UnsupportedOperationException();}"}
{"question": "public override bool cancel(boole mayInterruptIfRunning) {\n            return false;\n        }", "answer": "@Override public boolean cancel(boolean mayInterruptIfRunning) {\n    return false;\n  }"}
{"question": "public static int numberOfLeadingZeros(long lng) {\n            lng |= lng >> 1;\n            lng |= lng >> 2;\n            lng |= lng >> 4;\n            lng |= lng >> 8;\n            lng |= lng >> 16;\n            lng |= lng >> 32;\n            return bitCount(~lng);\n        }", "answer": "public static int numberOfLeadingZeros(long lng) {\n        lng |= lng >> 1;\n        lng |= lng >> 2;\n        lng |= lng >> 4;\n        lng |= lng >> 8;\n        lng |= lng >> 16;\n        lng |= lng >> 32;\n        return bitCount(~lng);\n    }"}
{"question": "public void reset(CharSequence buffer, int start, int end,int initialState){\n    zzBuffer = buffer;\n    zzBufferArray = null;\n    zzCurrentPos = zzMarkedPos = zzStartRead = start;\n    zzPushbackPos = 0;\n    zzAtEOF  = false;\n    zzAtBOL = true;\n    zzEndRead = end;\n    yybegin(initialState);\n  }", "answer": "public void reset(CharSequence buffer, int start, int end,int initialState){\n    zzBuffer = buffer;\n    zzBufferArray = null;\n    zzCurrentPos = zzMarkedPos = zzStartRead = start;\n    zzPushbackPos = 0;\n    zzAtEOF  = false;\n    zzAtBOL = true;\n    zzEndRead = end;\n    yybegin(initialState);\n  }"}
{"question": "public override bool isOpen() {\n        return true;\n    }", "answer": "@Override\n    public boolean isOpen()\n    {\n        return true;\n    }"}
{"question": "private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {\n        return new IllegalStateException(charsetName + \": \" + e);\n    }", "answer": "private static IllegalStateException newIllegalStateException(final String charsetName,\n                                                                  final UnsupportedEncodingException e) {\n        return new IllegalStateException(charsetName + \": \" + e);\n    }"}
{"question": "public static String newString(byte[] bytes, String charsetName) {\n        if (bytes == null) {\n            return null;\n        }\n        try {\n            return new String(bytes, charsetName);\n        } catch (UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }", "answer": "public static String newString(final byte[] bytes, final String charsetName) {\n        if (bytes == null) {\n            return null;\n        }\n        try {\n            return new String(bytes, charsetName);\n        } catch (final UnsupportedEncodingException e) {\n            throw StringUtils.newIllegalStateException(charsetName, e);\n        }\n    }"}
{"question": "public static void cancelNotification(Context context) {\n        NotificationManager mNotificationManager = (NotificationManager) context\n            .getSystemService(Context.NOTIFICATION_SERVICE);\n        mNotificationManager.cancel((String) getAppName(context),\n            NOTIFICATION_ID);\n    }", "answer": "public static void cancelNotification(Context context) {\n        NotificationManager mNotificationManager = (NotificationManager) context.getSystemService(\n                Context.NOTIFICATION_SERVICE);\n        mNotificationManager.cancel((String) getAppName(context), NOTIFICATION_ID);\n    }"}
{"question": "public override void didReceiveMemoryWarning() {\n        base.didReceiveMemoryWarning();\n        // Dispose of any resources that can be recreated.\n    }", "answer": "@Override\n    public void didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning();\n        // Dispose of any resources that can be recreated.\n    }"}
{"question": "public override bool ComputeScrollOffset ()\n\t\t{\n\t\t\treturn mScroller.ComputeScrollOffset();\n\t\t}", "answer": "@Override\n    public boolean computeScrollOffset() {\n        return mScroller.computeScrollOffset();\n    }"}
{"question": "public override byte[] ToByteArray()\n\t\t{\n\t\t\treturn ToByteArray(false);\n\t\t}", "answer": "@Override\n    public final byte[] toByteArray() {\n      return toByteArray(false);\n    }"}
{"question": "public String yytext() {\n    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );\n  }", "answer": "public final String yytext() {\n    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );\n  }"}
{"question": "public /*readonly */void yyclose()  {\n    zzAtEOF = true;            /* indicate end of file */\n    zzEndRead = zzStartRead;  /* invalidate buffer    */\n\n    if (zzReader != null)\n      zzReader.Close();\n  }", "answer": "public final void yyclose() throws java.io.IOException {\n    zzAtEOF = true;            /* indicate end of file */\n    zzEndRead = zzStartRead;  /* invalidate buffer    */\n\n    if (zzReader != null)\n      zzReader.close();\n  }"}
{"question": "public override bool IsChildSelectable (int groupPosition, int childPosition)\n            {\n                return true;\n            }", "answer": "@Override\n    public boolean isChildSelectable(int groupPosition, int childPosition) {\n        return true;\n    }"}
{"question": "public bool Contains(Point p)\n            {\n                return Contains(p.X, p.Y);\n            }", "answer": "public boolean contains(Point p) {\n\t\treturn contains(p.x, p.y);\n\t}"}
{"question": "public static float tan(float angle)\n        {\n            return (float) Math.Tan(angle);\n        }", "answer": "public static float tan(float angle) {\n\t\treturn (float) java.lang.Math.tan(angle);\n\t}"}
{"question": "public static void Error(string message)\n        {\n            Console.Error.WriteLine(\"Error: \" + message);\n        }", "answer": "public static void error(String message){\n        System.err.println(\"Error: \"+message);\n    }"}
{"question": "bool ICollection<T>.Contains(T item)\n        {\n            return this.Contains(item, null);\n        }", "answer": "public boolean contains(T item) {\n\t\treturn this.contains(item, null);\n\t}"}
{"question": "[Test]\n        public void AckJob()\n        {\n            string jobId = q.AddJob(GetQueueName(), \"message\", 10);\n            long count = q.Ackjob(jobId);\n\n            count.Should().Be(1);\n      }", "answer": "@Test\n\tpublic void ackJob() {\n\t\tString jobId = q.addJob(getQueueName(), \"message\", 10);\n\t\tLong count = q.ackjob(jobId);\n\t\tassertEquals(count.longValue(), 1);\n\t}"}
{"question": "[Test]\n        public void FastAck()\n        {\n            string jobId = q.AddJob(\"fastack\", \"message\", 10);\n            long count = q.Fastack(jobId);\n\n            count.Should().Be(1);\n        }", "answer": "@Test\n\tpublic void fastAck() {\n\t\tString jobId = q.addJob(\"fastack\", \"message\", 10);\n\t\tLong count = q.fastack(jobId);\n\t\tassertEquals(count.longValue(), 1);\n\t}"}
{"question": "[Test]\n        public void Qlen()\n        {\n            string queue = GetQueueName();\n            long qlen = q.Qlen(queue);\n            qlen.Should().Be(0);\n        }", "answer": "@Test\n\tpublic void qlen() {\n\t\tString queue = getQueueName();\n\t\tLong qlen = q.qlen(queue);\n\t\tassertEquals(qlen.longValue(), 0);\n\t}"}
{"question": "[Test]\n        public void QpeekInverse()\n        {\n            String queue = GetQueueName();\n            List<Job> jobs = q.Qpeek(queue, -2);\n            jobs.Count.Should().Be(0);\n        }", "answer": "@Test\n\tpublic void qpeekInverse() {\n\t\tString queue = getQueueName();\n\t\tList<Job> jobs = q.qpeek(queue, -2);\n\t\tassertEquals(jobs.size(), 0);\n\t}"}
{"question": "[Test]\n        public void Qpeek()\n        {\n            // We're testing also the response parsing here\n            string queue = GetQueueName();\n\n            q.AddJob(queue, \"testJob\", 10);\n            q.AddJob(queue, \"testJob2\", 10);\n\n            List<Job> jobs = q.Qpeek(queue, 2);\n\n            Job job = jobs.First();\n            Job job2 = jobs.Last();\n\n            job.Body.Should().Be(\"testWork\");\n            job2.Body.Should().Be(\"testWork2\");\n        }", "answer": "@Test\n\tpublic void qpeek() {\n\t\t// We're testing also the response parsing here\n\t\tString queue = getQueueName();\n\t\tq.addJob(queue, \"testWork\", 10);\n\t\tq.addJob(queue, \"testWork2\", 10);\n\t\tList<Job> jobs = q.qpeek(queue, 2);\n\t\tJob job = jobs.get(0);\n\t\tassertEquals(job.getStringBody(), \"testWork\");\n\t\tjob = jobs.get(1);\n\t\tassertEquals(job.getStringBody(), \"testWork2\");\n\t}"}
{"question": "[Test]\n        public void Enqueue()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"testJob\", 10);\n            long count = q.Enqueue(jobId);\n            count.Should().Be(0);\n        }", "answer": "@Test\n\tpublic void enqueue() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 10);\n\t\tLong count = q.enqueue(jobId);\n\t\tassertEquals(count.longValue(), 0);\n\t}"}
{"question": "[Test]\n        public void Dequeue()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"testJob\", 10);\n            long count = q.Dequeue(jobId);\n            count.Should().Be(1);\n        }", "answer": "@Test\n\tpublic void dequeue() throws InterruptedException {\n\t\tString queue = fetchQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 10);\n\t\tLong count = q.dequeue(jobId);\n\t\tassertEquals(count.longValue(), 1);\n\t}"}
{"question": "[Test]\n        public void DelJob()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"testJob\", 10);\n            long count = q.DelJob(jobId);\n            count.Should().Be(1);\n        }", "answer": "@Test\n\tpublic void delJob() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 10);\n\t\tLong count = q.delJob(jobId);\n\t\tassertEquals(count.longValue(), 1);\n\t}"}
{"question": "[Test]\n        public void Show()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"testJob\", 10);\n            JobInfo info = q.Show(jobId);\n            info.Should().NotBeNull();\n        }", "answer": "@Test\n\tpublic void show() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 10);\n\t\tJobInfo jobInfo = q.show(jobId);\n\t\tassertNotNull(jobInfo);\n\t}"}
{"question": "public override void ForceFinished (bool finished)\n\t\t{\n\t\t\tmScroller.ForceFinished(finished);\n\t\t}", "answer": "@Override\n    public void forceFinished(boolean finished) {\n        mScroller.forceFinished(finished);\n    }"}
{"question": "public String SelectHeaderAccept(String[] accepts)\n        {\n            if (accepts.Length == 0)\n                return null;\n            if (accepts.Contains(\"application/json\", StringComparer.OrdinalIgnoreCase))\n                return \"application/json\";\n            return String.Join(\",\", accepts);\n        }", "answer": "public String selectHeaderAccept(String[] accepts) {\n    if (accepts.length == 0) return null;\n    if (StringUtil.containsIgnoreCase(accepts, \"application/json\")) return \"application/json\";\n    return StringUtil.join(accepts, \",\");\n  }"}
{"question": "public void AddDefaultHeader(string key, string value)\n        {\n            defaultHeaderMap.Add(key, value);\n        }", "answer": "public ApiClient addDefaultHeader(String key, String value) {\n    defaultHeaderMap.put(key, value);\n    return this;\n  }"}
{"question": "public void UpdateAdaptiveData(string[] tokens, string[] outcomes) {\n            for (var i = 0; i < tokens.Length; i++)\n                previousMap[tokens[i]] = outcomes[i];\n            \n        }", "answer": "public void updateAdaptiveData(String[] tokens, String[] outcomes) {\n\n    for (int i = 0; i < tokens.length; i++) {\n      previousMap.put(tokens[i], outcomes[i]);\n    }\n  }"}
{"question": "public override void writeExternal(ObjectOutput out)  {\n        out.writeObject(primitive);\n  out.writeUTF(string);\n    }", "answer": "@Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n      out.writeLong(primitive);\n      out.writeUTF(string);\n    }"}
{"question": "public override bool IsEmpty()\n\t\t{\n\t\t\treturn _queue.IsEmpty();\n\t\t}", "answer": "@Override\n\t\tpublic boolean isEmpty() {\n\t\t\treturn queue.isEmpty();\n\t\t}"}
{"question": "[Test]\n        public void SingleLevel() {\n            ByNameAndText_SingleLevel(new MultiLevelByNameAndTextSelector(1).CanBeCompared,\n                                           doc);\n        }", "answer": "@Test\n    public void singleLevel() {\n        byNameAndText_SingleLevel(new MultiLevelByNameAndTextSelector(1), doc);\n    }"}
{"question": "[Test]\n        public void EmptyTexts() {\n            XmlElement control = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child = doc.CreateElement(ElementSelectorsTest.BAR);\n            control.AppendChild(doc.CreateTextNode(string.Empty));\n            control.AppendChild(child);\n            child.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement test = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child2 = doc.CreateElement(ElementSelectorsTest.BAR);\n            test.AppendChild(child2);\n            child2.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n\n            Assert.IsFalse(new MultiLevelByNameAndTextSelector(2)\n                           .CanBeCompared(control, test));\n            Assert.IsTrue(new MultiLevelByNameAndTextSelector(2, true)\n                          .CanBeCompared(control, test));\n        }", "answer": "@Test\n    public void emptyTexts() {\n        Element control = doc.createElement(FOO);\n        Element child = doc.createElement(BAR);\n        control.appendChild(doc.createTextNode(\"\"));\n        control.appendChild(child);\n        child.appendChild(doc.createTextNode(BAR));\n        Element test = doc.createElement(FOO);\n        Element child2 = doc.createElement(BAR);\n        test.appendChild(child2);\n        child2.appendChild(doc.createTextNode(BAR));\n\n        ElementSelector s = new MultiLevelByNameAndTextSelector(2);\n        assertFalse(new MultiLevelByNameAndTextSelector(2)\n                    .canBeCompared(control, test));\n        assertTrue(new MultiLevelByNameAndTextSelector(2, true)\n                   .canBeCompared(control, test));\n    }"}
{"question": "[Test]\n        public void ByNameAndTextRec() {\n            XmlElement control = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child = doc.CreateElement(ElementSelectorsTest.BAR);\n            control.AppendChild(child);\n            child.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement equal = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child2 = doc.CreateElement(ElementSelectorsTest.BAR);\n            equal.AppendChild(child2);\n            child2.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement equalC = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child3 = doc.CreateElement(ElementSelectorsTest.BAR);\n            equalC.AppendChild(child3);\n            child3.AppendChild(doc.CreateCDataSection(ElementSelectorsTest.BAR));\n            XmlElement noText = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement differentLevel = doc.CreateElement(ElementSelectorsTest.FOO);\n            differentLevel.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement differentElement = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child4 = doc.CreateElement(ElementSelectorsTest.FOO);\n            differentElement.AppendChild(child4);\n            child4.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement differentText = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement child5 = doc.CreateElement(ElementSelectorsTest.BAR);\n            differentText.AppendChild(child5);\n            child5.AppendChild(doc.CreateTextNode(ElementSelectorsTest.FOO));\n\n            ElementSelector s = new MultiLevelByNameAndTextSelector(2).CanBeCompared;\n            Assert.IsTrue(s(control, equal));\n            Assert.IsTrue(s(control, equalC));\n            Assert.IsFalse(s(control, noText));\n            Assert.IsFalse(s(control, differentLevel));\n            Assert.IsFalse(s(control, differentElement));\n            Assert.IsFalse(s(control, differentText));\n        }", "answer": "@Test\n    public void byNameAndTextRec() {\n        Element control = doc.createElement(FOO);\n        Element child = doc.createElement(BAR);\n        control.appendChild(child);\n        child.appendChild(doc.createTextNode(BAR));\n        Element equal = doc.createElement(FOO);\n        Element child2 = doc.createElement(BAR);\n        equal.appendChild(child2);\n        child2.appendChild(doc.createTextNode(BAR));\n        Element equalC = doc.createElement(FOO);\n        Element child3 = doc.createElement(BAR);\n        equalC.appendChild(child3);\n        child3.appendChild(doc.createCDATASection(BAR));\n        Element noText = doc.createElement(FOO);\n        Element differentLevel = doc.createElement(FOO);\n        differentLevel.appendChild(doc.createTextNode(BAR));\n        Element differentElement = doc.createElement(FOO);\n        Element child4 = doc.createElement(FOO);\n        differentElement.appendChild(child4);\n        child4.appendChild(doc.createTextNode(BAR));\n        Element differentText = doc.createElement(FOO);\n        Element child5 = doc.createElement(BAR);\n        differentText.appendChild(child5);\n        child5.appendChild(doc.createTextNode(FOO));\n\n        ElementSelector s = new MultiLevelByNameAndTextSelector(2);\n        assertTrue(s.canBeCompared(control, equal));\n        assertTrue(s.canBeCompared(control, equalC));\n        assertFalse(s.canBeCompared(control, noText));\n        assertFalse(s.canBeCompared(control, differentLevel));\n        assertFalse(s.canBeCompared(control, differentElement));\n        assertFalse(s.canBeCompared(control, differentText));\n    }"}
{"question": "private bool zzRefill() {\n\n   /* first: make room (if you can) */\n   if (zzStartRead > 0) {\n    Array.Copy(zzBuffer, zzStartRead,\n            zzBuffer, 0,\n            zzEndRead-zzStartRead);\n\n    /* translate stored positions */\n    zzEndRead-= zzStartRead;\n    zzCurrentPos-= zzStartRead;\n    zzMarkedPos-= zzStartRead;\n    zzStartRead = 0;\n   }\n\n   /* is the buffer big enough? */\n   if (zzCurrentPos >= zzBuffer.Length) {\n    /* if not: blow it up */\n    char[] newBuffer = new char[zzCurrentPos*2];\n    Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);\n    zzBuffer = newBuffer;\n   }\n\n   /* readonlyly: fill the buffer with new input */\n   int numRead = zzReader.Read(zzBuffer, zzEndRead,\n                       zzBuffer.Length-zzEndRead);\n\n   if (numRead < 0) {\n    return true;\n   }\n   else {\n    zzEndRead+= numRead;\n    return false;\n   }\n }", "answer": "private boolean zzRefill() throws java.io.IOException {\n\n   /* first: make room (if you can) */\n   if (zzStartRead > 0) {\n    System.arraycopy(zzBuffer, zzStartRead,\n            zzBuffer, 0,\n            zzEndRead-zzStartRead);\n\n    /* translate stored positions */\n    zzEndRead-= zzStartRead;\n    zzCurrentPos-= zzStartRead;\n    zzMarkedPos-= zzStartRead;\n    zzPushbackPos-= zzStartRead;\n    zzStartRead = 0;\n   }\n\n   /* is the buffer big enough? */\n   if (zzCurrentPos >= zzBuffer.length) {\n    /* if not: blow it up */\n    char newBuffer[] = new char[zzCurrentPos*2];\n    System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n    zzBuffer = newBuffer;\n   }\n\n   /* finally: fill the buffer with new input */\n   int numRead = zzReader.read(zzBuffer, zzEndRead,\n                       zzBuffer.length-zzEndRead);\n\n   if (numRead < 0) {\n    return true;\n   }\n   else {\n    zzEndRead+= numRead;\n    return false;\n   }\n  }"}
{"question": "public /*readonly*/ void yybegin(int newState) {\n    zzLexicalState = newState;\n  }", "answer": "public final void yybegin(int newState) {\n    zzLexicalState = newState;\n  }"}
{"question": "protected override void OnMeasure(int widthMeasureSpec, int heightMeasureSpec)\n        {\n            base.OnMeasure(widthMeasureSpec, heightMeasureSpec);\n\n            SetMeasuredDimension(mButtonSize, mButtonSize);\n        }", "answer": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    setMeasuredDimension(mButtonSize, mButtonSize);\n  }"}
{"question": "public static void Fail()\n        {\n            throw new InvalidOperationException();\n        }", "answer": "public static void fail() {\n    throw new IllegalStateException();\n  }"}
{"question": "[Test]\n        public void AddJob()\n        {\n            string jobId = q.AddJob(GetQueueName(), \"message\", 10);\n            jobId.Should().NotBeNullOrEmpty();\n        }", "answer": "@Test\n\tpublic void addJob() {\n\t\tString jobId = q.addJob(getQueueName(), \"message\", 10);\n\t\tassertNotNull(jobId);\n\t}"}
{"question": "[Test]\n        public void QpeekEmpty()\n        {\n            List<Job> jobs = q.Qpeek(GetQueueName(), 2);\n            jobs.Count.Should().Be(0);\n        }", "answer": "@Test\n\tpublic void qpeekEmpty() {\n\t\tList<Job> jobs = q.qpeek(getQueueName(), 2);\n\t\tassertEquals(jobs.size(), 0);\n\t}"}
{"question": "[Test]\n        [Ignore(\"pending (not yet implemented)\")]\n        public void Qstat()\n        {\n        }", "answer": "@Test\n\t@Ignore(value = \"pending (not yet implemented)\")\n\tpublic void qstat() {\n\t}"}
{"question": "public string Serialize(object obj)\n        {\n            try\n            {\n                return obj != null ? JsonConvert.SerializeObject(obj) : null;\n            }\n            catch (Exception e)\n            {\n                throw new ApiException(500, e.Message);\n            }\n        }", "answer": "public String serialize(Object obj) throws ApiException {\n    try {\n      if (obj != null)\n        return JsonUtil.getJsonMapper().writeValueAsString(obj);\n      else\n        return null;\n    }\n    catch (Exception e) {\n      throw new ApiException(500, e.getMessage());\n    }\n  }"}
{"question": "public void CreateFeatures(List<string> features, string[] tokens, int index, string[] preds) {\n            if (index > 0) \n                features.Add(\"w,pd=\" + previousMap[tokens[index]] + \",\" + previousMap[tokens[index]]);\n            \n        }", "answer": "public void createFeatures(List<String> features, String[] tokens, int index, String[] preds) {\n    features.add(\"w,pd=\" + tokens[index] + \",\" + previousMap.get(tokens[index]));\n  }"}
{"question": "protected override void OnMeasure(int widthMeasureSpec, int heightMeasureSpec)\n        {\n            base.OnMeasure(widthMeasureSpec, heightMeasureSpec);\n\n       }", "answer": "@Override\n        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n            super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        }"}
{"question": "public override bool OnCreateOptionsMenu(IMenu menu)\n        {\n            this.MenuInflater.Inflate(Resource.Menu.main_menu, menu);\n            return true;\n        }", "answer": "@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n        return true;\n    }"}
{"question": "public override void OnStop()\n        {\n            base.OnStop();\n        mPresenter.Stop();\n            }", "answer": "@Override\n    public void onStop() {\n        super.onStop();\n        mPresenter.stop();\n    }"}
{"question": "public override void OnRequestPermissionsResult(int requestCode, string[] permissions, int[] grantResults)\n        {\n            PermissionUtil.Instance.OnRequestPermissionResult(requestCode, permissions, grantResults);\n        Finish();\n}", "answer": "@Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        PermissionUtil.getInstance().onRequestPermissionResult(requestCode, permissions, grantResults);\n        finish();\n    }"}
{"question": "protected override void OnDraw(Canvas canvas)\n\t\t{\n\t\t\tbase.OnDraw(canvas);\n\t\t\tcanvas.DrawBitmap(CanvasBitmap, 0, 0, CanvasPaint);\n\t\t\tcanvas.DrawPath(DrawPath, DrawPaint);\n\t\t}", "answer": "@Override\n    protected void onDraw(Canvas canvas) {\n\n        super.onDraw(canvas);\n        canvas.drawBitmap(mScratchBitmap, 0, 0, mBitmapPaint);\n        canvas.drawPath(mErasePath, mErasePaint);\n\n    }"}
{"question": "public static int numberOfTrailingZeros(int i) {\n            return bitCount((i & -i) - 1);\n        }", "answer": "public static int numberOfTrailingZeros(int i) {\n        return bitCount((i & -i) - 1);\n    }"}
{"question": "public override long longValue ()\n  {\n    return (long) value;\n  }", "answer": "@Override\n    public long longValue() {\n        return value;\n    }"}
{"question": "public override boolean isPrimitive() {\n      return true;\n   }", "answer": "@Override\n    public boolean isPrimitive()\n    {\n        return primitive;\n    }"}
{"question": "public /*readonly*/ int yystate() {\n    return zzLexicalState;\n  }", "answer": "public final int yystate() {\n    return zzLexicalState;\n  }"}
{"question": "public /*readonly*/ int yyLength() {\n    return zzMarkedPos-zzStartRead;\n  }", "answer": "public final int yylength() {\n    return zzMarkedPos-zzStartRead;\n  }"}
{"question": "public override void OnBackPressed()\n        {\n            if (fileBrowserFragment.onBackPressed())\n                base.OnBackPressed();\n        }", "answer": "@Override\n    public void onBackPressed() {\n        if (fileBrowserFragment.onBackPressed()) super.onBackPressed();\n    }"}
{"question": "public bool IsSetValue()\n        {\n            return this._value != null;\n        }", "answer": "public boolean isSetValue() {\n\t\treturn value != null;\n\t}"}
{"question": "public override boolean isCancelled() {\n            return false;\n        }", "answer": "@Override\n\tpublic boolean isCancelled() {\n\t\treturn false;\n\t}"}
{"question": "public override int hashCode()\n    {\n        return this.getClass().hashCode();\n    }", "answer": "@Override\n    public int hashCode() {\n        return this.getClass().hashCode();\n    }"}
{"question": "public bool isSuccess() {\n        return success;\n    }", "answer": "public boolean isSuccess() {\n        return success;\n    }"}
{"question": "public bool isTcpNoDelay() {\n        return tcpNoDelay;\n    }", "answer": "public boolean isTcpNoDelay()\n    {\n        return tcpNoDelay;\n    }"}
