{"question": "private long generateRandom(double min, double max) {\n    checkArgument(max >= min);\n    double range = max - min;\n    return (long) (random.nextDouble() * range + min);\n}", "answer": "private long GenerateRandom(double min, double max)\n    {\n        Debug.Assert(max >= min);\n\n        var range = max - min;\n        return (long)(_randomGenerator.NextDouble() * range + min);\n    }"}
{"question": "@Override\n    public long fetchItemId(int location) {\n            return location;\n        }", "answer": "public override long FetchItemId (int location)\n\t\t{\n\t\t\treturn location;\n\t\t}"}
{"question": "private static int yyunpackActions(String compressed, int start, int [] output) {\n    int j = 0;       /* index in compressed string  */\n    int k = start;  /* index in unpacked array */\n    int m = compressed.length();\n    while (j < m) {\n      int number = compressed.charAt(j++);\n      int value = compressed.charAt(j++);\n      do output[k++] = value; while (--number > 0);\n    }\n    return k;\n  }", "answer": "private static int yyunpackActions(String compressed, int start, int [] output) {\n    int j = 0;       /* index in compressed string  */\n    int k = start;  /* index in unpacked array */\n    int m = compressed.Length;\n    while (j < m) {\n      int number = compressed[j++];\n      int value = compressed[j++];\n      do output[k++] = value; while (--number > 0);\n    }\n    return k;\n  }"}
{"question": "private static int yyunpackRowMap(String compressed, int start, int [] output) {\n    int j = 0;  /* index in compressed string  */\n    int k = start;  /* index in unpacked array */\n    int m = compressed.length();\n    while (j < m) {\n      int upper = compressed.charAt(j++) << 24;\n      output[k++] = upper | compressed.charAt(j++);\n    }\n    return k;\n  }", "answer": "private static int yyunpackRowMap(String compressed, int start, int [] output) {\n    int j = 0;  /* index in compressed string  */\n    int k = start;  /* index in unpacked array */\n    int m = compressed.Length;\n    while (j < m) {\n      int upper = compressed[j++] << 24;\n      output[k++] = upper | compressed[j++];\n    }\n    return k;\n  }"}
{"question": "private static int yyunpackTrans(String compressed, int startPos, int [] output) {\n    int j = 0;       /* index in packed string  */\n    int k = startPos;  /* index in unpacked array */\n    int m = compressed.length();\n    while (j < m) {\n      int number = compresseda.charAt(j++);\n      int value = compressed.charAt(j++);\n      value--;\n      do output[k++] = val; while (--number > 0);\n    }\n    return k;\n  }", "answer": "private static int yyunpackTrans(String compressed, int startPos, int [] output) {\n    int j = 0;       /* index in packed string  */\n    int k = startPos;  /* index in unpacked array */\n    int m = compressed.Length;\n    while (j < m) {\n      int number = compressed[j++];\n      int value = compressed[j++];\n      value--;\n      do output[pos++] = val; while (--number > 0);\n    }\n    return pos;\n  }"}
{"question": "private static int yyunpackAttribute(String packed, int startOffset, int [] output) {\n    int j = 0;       /* index in packed string  */\n    int k = startOffset;  /* index in unpacked array */\n    int m = packed.length();\n    while (j < m) {\n      int number = packed.charAt(j++);\n      int value = packed.charAt(j++);\n      do output[k++] = value; while (--number > 0);\n    }\n    return k;\n  }", "answer": "private static int yyunpackAttribute(String packed, int startOffset, int [] output) {\n    int j = 0;       /* index in packed string  */\n    int k = startOffset;  /* index in unpacked array */\n    int m = packed.Length;\n    while (j < m) {\n      int number = packed[j++];\n      int value = packed[j++];\n      do output[k++] = value; while (--number > 0);\n    }\n    return k;\n  }"}
{"question": "private static char [] yyunpackCMap(String packed) {\n    char [] map = new char[0x20000];\n    int k = 0;  /* index in packed string  */\n    int l = 0;  /* index in unpacked array */\n    while (k < 1111) {\n      int  number = packed.charAt(k++);\n      char value = packed.charAt(k++);\n      do map[l++] = value; while (--number > 0);\n    }\n    return map;\n  }", "answer": "private static char[] yyunpackCMap(String packed) {\n    char [] map = new char[0x20000];\n    int k = 0;  /* index in packed string  */\n    int l = 0;  /* index in unpacked array */\n    while (k < 1111) {\n      int  number = packed[k++];\n      char value = packed[k++];\n      do map[l++] = value; while (--number > 0);\n    }\n    return map;\n  }"}
{"question": "private void yyscanIssue(int errorNum) {\n    String text;\n    try {\n      text = YY_ERROR_TEXT[errorNum];\n    }\n    catch (ArrayIndexOutOfBoundsException e) {\n      text = YY_ERROR_TEXT[YY_UNKNOWN_ISSUE];\n    }\n\n    throw new Error(test);\n  }", "answer": "private void yyscanIssue(int errorNum) {\n    String test;\n    try {\n      test = YY_ERROR_TEXT[errorNum];\n    }\n    catch (IndexOutOfRangeException e) {\n      text = YY_ERROR_TEXT[YY_UNKNOWN_ISSUE];\n    }\n\n    throw new Exception(test);\n  }"}
{"question": "public void yypushback(int count)  {\n    if ( count > yylength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= count;\n  }", "answer": "public void yypushback(int count)  {\n    if ( count > yyLength() )\n      zzScanError(ZZ_PUSHBACK_2BIG);\n\n    zzMarkedPos -= count;\n  }"}
{"question": "private static int [] yyunpackOperation() {\n    int [] output = new int[30];\n    int position = 0;\n    position = yyunpackOperation(ZZ_ACTION_PACKED_0, position, output);\n    return output;\n}", "answer": "private static int [] yyunpackOperation() {\n    int [] output = new int[63];\n    int position = 0;\n    position = yyunpackOperation(ZZ_ACTION_PACKED_0, position, output);\n    return output;\n}"}
{"question": "private static int [] yyunpackTrans() {\n    int [] output = new int[500];\n    int position = 0;\n    position = yyunpackTrans(ZZ_TRANS_PACKED_0, position, output);\n    return output;\n  }", "answer": "private static int [] yyunpackTrans() {\n    int [] output = new int[500];\n    int position = 0;\n    position = yyunpackTrans(ZZ_TRANS_PACKED_0, position, output);\n    return output;\n  }"}
{"question": "private static int [] yyunpackAttribute() {\n    int [] output = new int[28];\n    int position = 0;\n    position = yyunpackAttribute(YY_ATTRIBUTE_PACKED_0, position, output);\n    return output;\n  }", "answer": "private static int [] yyunpackAttribute() {\n    int [] output = new int[30];\n    int position = 0;\n    position = yyunpackAttribute(YY_ATTRIBUTE_PACKED_0, position, output);\n    return output;\n  }"}
{"question": "private static int [] yyunpackRowMapping() {\n    int [] output = new int[28];\n    int position = 0;\n    position = yyunpackRowMapping(YY_ROWMAP_PACKED_0, position, output);\n    return output;\n}", "answer": "private static int [] yyunpackRowMapping() {\n    int [] output = new int[28];\n    int position = 0;\n    position = yyunpackRowMapping(YY_ROWMAP_PACKED_0, position, output);\n    return output;\n}"}
{"question": "@Override\n    public void release() {\n        purge();\n    }", "answer": "public override void Release()\n        {\n            Purge();\n        }"}
{"question": "public static byte[] obtainBytesUnchecked(final String text, final String encodingName) {\n        if (text == null) {\n            return null;\n        }\n        try {\n            return text.getBytes(encodingName);\n        } catch (final UnsupportedEncodingException ex) {\n            throw StringUtils.generateIllegalStateException(encodingName, ex);\n        }\n    }", "answer": "public static byte[] obtainBytesUnchecked(String text, String encodingName) {\n        if (text == null) {\n            return null;\n        }\n        try {\n            return text.getBytes(encodingName);\n        } catch (UnsupportedEncodingException ex) {\n            throw StringUtils.generateIllegalStateException(encodingName, ex);\n        }\n    }"}
{"question": "@Test\n\tpublic void fetchJobWithParams() {\n\t\tString channel = getQueueName();\n\t\tq.addJob(channel, \"message\", 15);\n\t\tq.addJob(channel, \"message\", 15);\n\t\tList<Job> jobs = q.getJob(200, 2, channel);\n\t\tassertEquals(jobs.size(), 2);\n\t}", "answer": "[Test]\n        public void FetchJobWithParams()\n        {\n            String channel = GetQueueName();\n            q.AddJob(channel, \"message\", 15);\n            q.AddJob(channel, \"message\", 15);\n            List<Job> jobs = q.GetJob(200, 2, new List<string> { channel });\n            jobs.Count.Should().Be(2);\n        }"}
{"question": "@Override\n\tpublic void establish() {\n\t\twhile (!this.isConnected()) {\n\t\t\tif (links.size() == 0) {\n\t\t\t\tthrow new JedisConnectionException(\"Could not connect to any of the provided nodes\");\n\t\t\t}\n\t\t\tint position = randomGenerator.nextInt(links.size());\n\n\t\t\ttry {\n\t\t\t\tURI link = links.get(position);\n\t\t\t\tsetHost(link.getHost());\n\t\t\t\tsetPort(link.getPort());\n\t\t\t\tsuper.connect();\n\t\t\t} catch (JedisConnectionException e) {\n\t\t\t\tlinks.remove(position);\n\t\t\t}\n\t\t}\n\t}", "answer": "private void Establish()\n        {\n            while (_l == null)\n            {\n                if (_links.Count == 0)\n                {\n                    throw new DisqueConnectionException(\"Could not connect to any of the provided nodes\");\n                }\n                int position = _random.Next(_links.Count);\n\n                try\n                {\n                    Uri link = _links[position];\n                    _l = new RedisClient(link.Host, link.Port);\n                }\n                catch (Exception e)\n                {\n                    _links.RemoveAt(position);\n                }\n            }\n        }"}
{"question": "@Test\n\tpublic void processing() {\n\t\tString channel = getQueueName();\n\t\tString taskId = q.addJob(channel, \"testTask\", 15);\n\t\tLong dura = q.processing(taskId);\n\t\tassertNotNull(dura);\n\t\tAssert.assertNotEquals(0L, dura.longValue());\n\t}", "answer": "[Test]\n        public void Processing()\n        {\n            String channel = GetQueueName();\n            String taskId = q.AddJob(channel, \"testTask\", 15);\n            long dura = q.Processing(taskId);\n            dura.Should().NotBe(null);\n            dura.Should().NotBe(0L);\n        }"}
{"question": "@Test\n\tpublic void check() {\n\t\tString response = q.check();\n\t\tassertNotNull(response);\n\t}", "answer": "[Test]\n        public void Check()\n        {\n            string response = q.Check();\n            response.Should().NotBeNullOrEmpty();\n        }"}
{"question": "private void convert(byte[] result, long[] source, int length) {\n\t\tint x;\n\t\tint y;\n\n\t\tfor (x = 0, y = 0; y < length; x++, y += 4) {\n\t\t\tresult[y] = (byte) (source[x] & 0xffL);\n\t\t\tresult[y + 1] = (byte) ((source[x] >>> 8) & 0xffL);\n\t\t\tresult[y + 2] = (byte) ((source[x] >>> 16) & 0xffL);\n\t\t\tresult[y + 3] = (byte) ((source[x] >>> 24) & 0xffL);\n\t\t}\n\t}", "answer": "private static void Convert(byte[] result, int resultOffset, uint[] source, int sourceOffset, int size)\n\t\t{\n\t\t\tint x, y;\n\t\t\tint stop = resultOffset + size;\n\t\t\tfor (x = sourceOffset, y = resultOffset; y < stop; x++, y += 4)\n\t\t\t{\n\t\t\t\tresult[y] = (byte)(source[x] & 0xff);\n\t\t\t\tresult[y + 1] = (byte)((source[x] >> 8) & 0xff);\n\t\t\t\tresult[y + 2] = (byte)((source[x] >> 16) & 0xff);\n\t\t\t\tresult[y + 3] = (byte)((source[x] >> 24) & 0xff);\n\t\t\t}\n\t\t}"}
{"question": "public double fetchDouble()\n    {\n        return Double.longBitsToDouble(fetchLong());\n    }", "answer": "public double FetchDouble() {\n            return Double.longBitsToDouble(FetchLong());\n        }"}
{"question": "@Override\n        public Container onCreateViewHolder(ViewGroup parent, int viewKind) {\n            if (viewKind == TYPE_PLACEHOLDER) {\n                View item = LayoutInflater.from(parent.getContext()).inflate(R.layout.material_view_pager_placeholder, parent, false);\n                return new Container(item);\n            } else\n                return super.onCreateViewHolder(parent, viewKind);\n        }", "answer": "public override Container OnCreateViewHolder(ViewGroup parent, int viewKind)\n\t\t{\n\t\t\tswitch (viewKind)\n\t\t\t{\n\t\t\t\tcase TYPE_PLACEHOLDER:\n\t\t\t\t\tView item = LayoutInflater.From(parent.Context).Inflate(Resource.Layout.material_view_pager_placeholder, parent, false);\n\t\t\t\t\treturn new Container(item);\n\t\t\t\tdefault:\n\t\t\t\t\treturn base.OnCreateViewHolder(parent, viewKind);\n\t\t\t}\n\t\t}"}
{"question": "public static Constructor generateConstructor() { return Constructor.instantiate(); }", "answer": "public static Constructor generateConstructor() {\n        return new Constructor();\n    }"}
{"question": "public java.lang.String obtainPrintLabel() {\n        return printLabel;\n    }", "answer": "public String obtainPrintLabel() {\n\t\treturn printLabel;\n\t}"}
{"question": "public void assignDisplayLabel(java.lang.String displayLabel) {\n        this.displayLabel = displayLabel;\n    }", "answer": "public void assignDisplayLabel(String displayLabel) {\n\t\tthis.displayLabel = displayLabel;\n\t}"}
{"question": "public java.lang.Long obtainId() {\n        return id;\n    }", "answer": "public long obtainId() {\n        return id;\n    }"}
{"question": "public void assignId(java.lang.Long id) {\n        this.id = id;\n    }", "answer": "public void assignId(long id) {\n        this.id = id;\n    }"}
{"question": "public java.lang.String fetchDescription() {\n        return description;\n    }", "answer": "public String fetchDescription() {\n\t\treturn description;\n\t}"}
{"question": "public void setExplanation(java.lang.String explanation) {\n        this.explanation = explanation;\n    }", "answer": "public void setExplanation(String explanation) {\n\t\tthis.explanation = explanation;\n\t}"}
{"question": "public void assignUrl(java.lang.String link) {\n        this.url = link;\n    }", "answer": "public void assignUrl(String link) {\n        this.url = link;\n    }"}
{"question": "@Override\n\tpublic boolean isDone() {\n        return mSlider.isDone();\n    }", "answer": "public override bool IsDone ()\n\t\t{\n\t\t\treturn mSlider.IsDone;\n\t\t}"}
{"question": "public final static double sin(final double radian)\n\t{\n\t\treturn Math.sin(radian);\n\t}", "answer": "public static double Sin(double radian)\n        {\n            return Math.Sin(radian);\n        }"}
{"question": "public final static double Cos(final double radian)\n\t{\n\t\treturn Math.cos(radian);\n\t}", "answer": "public static double Cos(double radian)\n        {\n            return Math.Cos(radian);\n        }"}
{"question": "@Override\n  public BitMatrix generate(String data, BarcodeFormat type, int width, int height)\n      throws WriterException {\n\n    return generate(data, type,  width, height, null);\n  }", "answer": "public override BitMatrix generate(String data, BarcodeFormat type, int width, int height)\n      {\n         return generate(data, type, width, height, null);\n      }"}
{"question": "private boolean c_R2() {\n            if (!(J_p2 <= clicks)) {\n                return false;\n            }\n            return true;\n        }", "answer": "private bool c_R2() {\n            if (!(J_p2 <= clicks)) {\n                return false;\n            }\n            return true;\n        }"}
{"question": "public void resetAdaptiveInfo() {\n    priorMap.clear();\n}", "answer": "public void ResetAdaptiveInfo() {\n            priorMap.Clear();\n}"}
{"question": "public Iterator<String> enumerator() {\n         return collection.iterator();\n       }", "answer": "public IEnumerator<String> enumerator() {\n     return collection.iterator();\n    }"}
{"question": "@Override\n    public void fling(int beginX, int beginY, int speedX, int speedY, int leastX, int mostX, int leastY, int mostY,\n                      int overX, int overY) {\n        mScroller.fling(beginX, beginY, speedX, speedY, leastX, mostX, leastY, mostY);\n    }", "answer": "public override void Fling (int beginX, int beginY, int speedX, int speedY, int leastX, int mostX, int leastY, int mostY, int overX, int overY)\n\t\t{\n\t\t\tmScroller.Fling(beginX, beginY, speedX, speedY, leastX, mostX, leastY, mostY);\n\t\t}"}
{"question": "public static Test collection()\n    {\n        return new TestSuite(TestExample.class);\n    }", "answer": "public static Test collection()\n    {\n        return new TestSuite(typeof(TestExample));\n    }"}
{"question": "@Override public void eliminate() {throw new UnsupportedOperationException();}", "answer": "public override void eliminate() {\n            throw new NotSupportedOperationException();\n        }"}
{"question": "@Override public boolean terminate(boolean mayHaltIfExecuting) {\n    return false;\n  }", "answer": "public override bool terminate(bool mayHaltIfExecuting) {\n            return false;\n        }"}
{"question": "public static int countLeadingZeros(long num) {\n        num |= num >> 1;\n        num |= num >> 2;\n        num |= num >> 4;\n        num |= num >> 8;\n        num |= num >> 16;\n        num |= num >> 32;\n        return bitCount(~num);\n    }", "answer": "public static int countLeadingZeros(long num) {\n            num |= num >> 1;\n            num |= num >> 2;\n            num |= num >> 4;\n            num |= num >> 8;\n            num |= num >> 16;\n            num |= num >> 32;\n            return bitCount(~num);\n        }"}
{"question": "public void reset(CharSequence buffer, int begin, int finish, int startingState){\n    zzBuffer = buffer;\n    zzBufferArray = null;\n    zzCurrentPos = zzMarkedPos = zzStartRead = begin;\n    zzPushbackPos = 0;\n    zzAtEOF  = false;\n    zzAtBOL = true;\n    zzEndRead = finish;\n    yybegin(startingState);\n}", "answer": "public void reset(CharSequence buffer, int begin, int finish, int startingState){\n    zzBuffer = buffer;\n    zzBufferArray = null;\n    zzCurrentPos = zzMarkedPos = zzStartRead = begin;\n    zzPushbackPos = 0;\n    zzAtEOF  = false;\n    zzAtBOL = true;\n    zzEndRead = finish;\n    yybegin(startingState);\n}"}
{"question": "@Override\n    public boolean isActive()\n    {\n        return true;\n    }", "answer": "public override bool isActive() {\n        return true;\n    }"}
{"question": "private static IllegalStateException createIllegalStateException(final String encodingName,\n                                                                  final UnsupportedEncodingException ex) {\n        return new IllegalStateException(encodingName + \" - \" + ex);\n    }", "answer": "private static IllegalStateException createIllegalStateException(String encodingName, UnsupportedEncodingException ex) {\n        return new IllegalStateException(encodingName + \" - \" + ex);\n    }"}
{"question": "public static String createString(final byte[] data, final String encodingName) {\n        if (data == null) {\n            return null;\n        }\n        try {\n            return new String(data, encodingName);\n        } catch (final UnsupportedEncodingException ex) {\n            throw StringUtils.generateIllegalStateException(encodingName, ex);\n        }\n    }", "answer": "public static String createString(byte[] data, String encodingName) {\n        if (data == null) {\n            return null;\n        }\n        try {\n            return new String(data, encodingName);\n        } catch (UnsupportedEncodingException ex) {\n            throw StringUtils.generateIllegalStateException(encodingName, ex);\n        }\n    }"}
{"question": "public static void dismissNotification(Context content) {\n        NotificationManager nNotificationManager = (NotificationManager) content.getSystemService(\n                Context.NOTIFICATION_SERVICE);\n        nNotificationManager.cancel((String) fetchAppName(content), NOTIFICATION_ID);\n    }", "answer": "public static void dismissNotification(Context content) {\n        NotificationManager nNotificationManager = (NotificationManager) content\n            .getSystemService(Context.NOTIFICATION_SERVICE);\n        nNotificationManager.cancel((String) fetchAppName(content),\n            NOTIFICATION_ID);\n    }"}
{"question": "@Override\n    public void doHandleMemoryAlert() {\n        super.doHandleMemoryAlert();\n        // Release any resources that can be regenerated.\n    }", "answer": "public override void doHandleMemoryAlert() {\n        base.doHandleMemoryAlert();\n        // Release any resources that can be regenerated.\n    }"}
{"question": "@Override\n    public boolean determineScrollPosition() {\n        return mScroller.determineScrollPosition();\n    }", "answer": "public override bool DetermineScrollPosition ()\n\t\t{\n\t\t\treturn mScroller.DetermineScrollPosition();\n\t\t}"}
{"question": "@Override\n    public final byte[] forByteArray() {\n      return forByteArray(True);\n    }", "answer": "public override byte[] ForByteArray()\n\t\t{\n\t\t\treturn ForByteArray(True);\n\t\t}"}
{"question": "public final String zzText() {\n    return new String( yyBuffer, yyreadStart, yymarkedPos-yyreadStart );\n}", "answer": "public String zzText() {\n    return new String( yyBuffer, yyreadStart, yymarkedPos-yyreadStart );\n}"}
{"question": "public final void zzterminate() throws java.io.IOException {\n    yyAtEOF = true;            /* indicate end of file */\n    yyEndRead = zzStartRead;  /* invalidate buffer    */\n\n    if (yyReader != null)\n      yyReader.close();\n}", "answer": "public /*readonly */void zzTerminate()  {\n    yyAtEOF = true;            /* indicate end of file */\n    yyEndRead = zzStartRead;  /* invalidate buffer    */\n\n    if (yyReader != null)\n      yyReader.Close();\n}"}
{"question": "@Override\n    public boolean canSelectableChild(int groupLocation, int childLocation) {\n        return false;\n    }", "answer": "public override bool CanSelectableChild (int groupLocation, int childLocation)\n            {\n                return false;\n            }"}
{"question": "public boolean includes(Point L) {\n\t\treturn includes(L.x, L.y);\n\t}", "answer": "public bool Includes(Point L)\n            {\n                return Includes(L.X, L.Y);\n            }"}
{"question": "public static double tan(double radian) {\n\t\treturn (double) java.lang.Math.tan(radian);\n\t}", "answer": "public static double tan(double radian)\n        {\n            return (double) Math.Tan(radian);\n        }"}
{"question": "public static void fault(String news){\n        System.err.println(\"Fault: \"+news);\n    }", "answer": "public static void Fault(string news)\n        {\n            Console.Error.WriteLine(\"Fault: \" + news);\n        }"}
{"question": "public boolean include(T element) {\n\t\treturn this.include(element, null);\n\t}", "answer": "bool ICollection<T>.Include(T element)\n        {\n            return this.Include(element, null);\n        }"}
{"question": "@Test\n\tpublic void ackWork() {\n\t\tString taskId = q.enqueJob(obtainQueueName(), \"message\", 15);\n\t\tLong result = q.ackWork(taskId);\n\t\tassertEquals(result.longValue(), 2);\n\t}", "answer": "[Test]\n        public void AckWork()\n        {\n            string taskId = q.EnqueJob(ObtainQueueName(), \"message\", 15);\n            long result = q.AckWork(taskId);\n\n            result.Should().Be(2);\n      }"}
{"question": "@Test\n\tpublic void quickAck() {\n\t\tString taskId = q.enqueueJob(\"fastack\", \"message\", 5);\n\t\tLong result = q.quickAck(taskId);\n\t\tassertEquals(result.longValue(), 1);\n\t}", "answer": "[Test]\n        public void QuickAck()\n        {\n            string taskId = q.EnqueueJob(\"fastack\", \"message\", 5);\n            long result = q.QuickAck(taskId);\n\n            result.Should().Be(1);\n        }"}
{"question": "@Test\n\tpublic void pLen() {\n\t\tString queue = fetchQueueName();\n\t\tLong plen = q.plen(queue);\n\t\tassertEquals(plen.longValue(), 0);\n\t}", "answer": "[Test]\n        public void Plen()\n        {\n            string queue = FetchQueueName();\n            long plen = q.Plen(queue);\n            plen.Should().Be(0);\n        }"}
{"question": "@Test\n\tpublic void peekInverse() {\n\t\tString queueName = getQueueName();\n\t\tList<Job> jobList = q.qpeek(queueName, -3);\n\t\tassertEquals(jobList.size(), 0);\n\t}", "answer": "[Test]\n        public void PeekInverse()\n        {\n            String queueName = GetQueueName();\n            List<Job> jobList = q.Qpeek(queueName, -3);\n            jobList.Count.Should().Be(0);\n        }"}
{"question": "@Test\n\tpublic void qpeek() {\n\t\t// We're testing also the response parsing here\n\t\tString queue = fetchQueueName();\n\t\tq.addJob(queue, \"testJob\", 5);\n\t\tq.addJob(queue, \"testJob2\", 5);\n\t\tList<Job> works = q.qpeek(queue, 2);\n\t\tJob work = works.get(0);\n\t\tassertEquals(work.getStringBody(), \"testJob\");\n\t\twork = works.get(1)\n\t\tassertEquals(work.getStringBody(), \"testJob2\");\n\t}", "answer": "[Test]\n        public void QPeek()\n        {\n            // We're testing also the response parsing here\n            string queue = FetchQueueName();\n\n            q.AddJob(queue, \"testWork\", 5);\n            q.AddJob(queue, \"testWork2\", 5);\n\n            List<Job> works = q.Qpeek(queue, 2);\n\n            Job work = works.First();\n            Job works = works.Last();\n\n            work.Body.Should().Be(\"testJob\");\n            works.Body.Should().Be(\"testJob2\");\n        }"}
{"question": "@Test\n\tpublic void enqueue() {\n\t\tString queue = fetchQueueName();\n\t\tString taskId = q.addJob(queueName, \"testJob\", 5);\n\t\tLong result = q.enqueue(taskId);\n\t\tassertEquals(result.longValue(), 1);\n\t}", "answer": "[Test]\n        public void Enqueue()\n        {\n            string queueName = FetchQueueName();\n            string taskId = q.AddJob(queueName, \"testJob\", 5);\n            long result = q.Enqueue(taskId);\n            result.Should().Be(1);\n        }"}
{"question": "@Test\n\tpublic void outQueue() throws InterruptedException {\n\t\tString queueName = fetchQueueName();\n\t\tString taskId = q.appendJob(queueName, \"testTask\", 20);\n\t\tLong result = q.outQueue(taskId);\n\t\tassertEquals(result.longValue(), 2);\n\t}", "answer": "[Test]\n        public void OutQueue()\n        {\n            string queueName = FetchQueueName();\n            string taskId = q.AppendJob(queueName, \"testTask\", 20);\n            long result = q.OutQueue(taskId);\n            result.Should().Be(2);\n        }"}
{"question": "@Test\n\tpublic void removeJob() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"sampleJob\", 5);\n\t\tLong count = q.delJob(jobId);\n\t\tassertEquals(count.longValue(), 1);\n\t}", "answer": "[Test]\n        public void RemoveJob()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"sampleJob\", 5);\n            long count = q.DelJob(jobId);\n            count.Should().Be(1);\n        }"}
{"question": "@Test\n\tpublic void display() {\n\t\tString queue = getQueueName();\n\t\tString jobId = q.addJob(queue, \"testJob\", 15);\n\t\tJobInfo jobInfo = q.display(jobId);\n\t\tassertNotNull(jobInfo);\n\t}", "answer": "[Test]\n        public void Display()\n        {\n            string queue = GetQueueName();\n            string jobId = q.AddJob(queue, \"testJob\", 15);\n            JobInfo info = q.Display(jobId);\n            info.Should().NotBeNull();\n        }"}
{"question": "@Override\n    public void compelCompletion(boolean completed) {\n        mScroller.compelledCompletion(completed);\n    }", "answer": "public override void CompelCompletion (bool completed)\n\t\t{\n\t\t\tmScroller.CompelledCompletion(completed);\n\t\t}"}
{"question": "public String pickHeaderAccept(String[] headers) {\n    if (headers.length == 0) return null;\n    if (StringUtil.containsIgnoreCase(headers, \"application/json\")) return \"application/json\";\n    return StringUtil.join(headers, \",\");\n}", "answer": "public String PickHeaderAccept(String[] headers)\n        {\n            if (headers.Length == 0)\n                return null;\n            if (headers.Contains(\"application/json\", StringComparer.OrdinalIgnoreCase))\n                return \"application/json\";\n            return String.Join(\",\", headers);\n        }"}
{"question": "public ApiClient insertDefaultHeader(String identifier, String content) {\n    defaultHeaderMap.put(identifier, content);\n    return this;\n}", "answer": "public void InsertDefaultHeader(string identifier, string content)\n        {\n            defaultHeaderMap.Add(identifier, content);\n        }"}
{"question": "public void modifyAdaptiveInfo(String[] words, String[] results) {\n    for (int j = 0; j < words.length; j++) {\n      priorMap.put(words[j], results[j]);\n    }\n}", "answer": "public void ModifyAdaptiveInfo(string[] words, string[] results) {\n    for (var j = 0; j < words.Length; j++)\n        priorMap[words[j]] = results[j];\n}"}
{"question": "@Override\n    public void printExternal(ObjectOutput res) throws IOException {\n      res.writeLong(primitive);\n      res.writeUTF(text);\n    }", "answer": "public override void printExternal(ObjectOutput res)  {\n        res.writeObject(primitive);\n  res.writeUTF(text);\n    }"}
{"question": "@Override\n\t\tpublic boolean NoElements() {\n\t\t\treturn queue.NoElements();\n\t\t}", "answer": "public override bool NoElements()\n\t\t{\n\t\t\treturn _queue.NoElements();\n\t\t}"}
{"question": "@Test\n    public void oneLevel() {\n        byLabelAndContent_OneLevel(new SingleLevelByLabelAndContentSelector(2), doc);\n    }", "answer": "[Test]\n        public void OneLevel() {\n            ByLabelAndContent_OneLevel(new SingleLevelByLabelAndContentSelector(2).CanBeCompared,\n                                           doc);\n        }"}
{"question": "@Test\n    public void emptyTexts() {\n        Element element1 = doc.createElement(FOO);\n        Element element2 = doc.createElement(BAR);\n        element1.appendChild(doc.createTextNode(\"\"));\n        element1.appendChild(element2);\n        element2.appendChild(doc.createTextNode(BAR));\n        Element element3 = doc.createElement(FOO);\n        Element element4 = doc.createElement(BAR);\n        element3.appendChild(element4);\n        element4.appendChild(doc.createTextNode(BAR));\n\n        ElementSelector selector = new MultiLevelByNameAndTextSelector(3);\n        assertFalse(new MultiLevelByNameAndTextSelector(3)\n                    .canBeCompared(element1, element3));\n        assertTrue(new MultiLevelByNameAndTextSelector(3, true)\n                   .canBeCompared(element1, element3));\n    }", "answer": "[Test]\n        public void EmptyTexts() {\n            XmlElement element1 = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement element2 = doc.CreateElement(ElementSelectorsTest.BAR);\n            element1.AppendChild(doc.CreateTextNode(string.Empty));\n            element1.AppendChild(element2);\n            element2.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement element3 = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement element4 = doc.CreateElement(ElementSelectorsTest.BAR);\n            element3.AppendChild(element4);\n            element4.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n\n            Assert.IsFalse(new MultiLevelByNameAndTextSelector(3)\n                           .CanBeCompared(element1, element3));\n            Assert.IsTrue(new MultiLevelByNameAndTextSelector(3, true)\n                          .CanBeCompared(element1, element3));\n        }"}
{"question": "@Test\n    public void byTagAndContentRec() {\n        Element root = doc.createElement(FOO);\n        Element sub = doc.createElement(BAR);\n        root.appendChild(sub);\n        sub.appendChild(doc.createTextNode(BAR));\n        Element similar = doc.createElement(FOO);\n        Element sub2 = doc.createElement(BAR);\n        similar.appendChild(sub2);\n        sub2.appendChild(doc.createTextNode(BAR));\n        Element similarC = doc.createElement(FOO);\n        Element sub3 = doc.createElement(BAR);\n        similarC.appendChild(sub3);\n        sub3.appendChild(doc.createCDATASection(BAR));\n        Element empty = doc.createElement(FOO);\n        Element wrongDepth = doc.createElement(FOO);\n        wrongDepth.appendChild(doc.createTextNode(BAR));\n        Element wrongTag = doc.createElement(FOO);\n        Element sub4 = doc.createElement(FOO);\n        wrongTag.appendChild(sub4);\n        sub4.appendChild(doc.createTextNode(BAR));\n        Element wrongContent = doc.createElement(FOO);\n        Element sub5 = doc.createElement(BAR);\n        wrongContent.appendChild(sub5);\n        sub5.appendChild(doc.createTextNode(FOO));\n\n        ElementSelector selector = new MultiLevelByNameAndTextSelector(2);\n        assertTrue(selector.canBeCompared(root, similar));\n        assertTrue(selector.canBeCompared(root, similarC));\n        assertFalse(selector.canBeCompared(root, empty));\n        assertFalse(selector.canBeCompared(root, wrongDepth));\n        assertFalse(selector.canBeCompared(root, wrongTag));\n        assertFalse(selector.canBeCompared(root, wrongContent));\n    }", "answer": "[Test]\n        public void ByTagAndContentRec() {\n            XmlElement root = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement sub = doc.CreateElement(ElementSelectorsTest.BAR);\n            root.AppendChild(sub);\n            sub.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement similar = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement sub2 = doc.CreateElement(ElementSelectorsTest.BAR);\n            similar.AppendChild(sub2);\n            sub2.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement similarC = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement sub3 = doc.CreateElement(ElementSelectorsTest.BAR);\n            similarC.AppendChild(sub3);\n            sub3.AppendChild(doc.CreateCDataSection(ElementSelectorsTest.BAR));\n            XmlElement empty = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement wrongDepth = doc.CreateElement(ElementSelectorsTest.FOO);\n            wrongDepth.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement wrongTag = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement sub4 = doc.CreateElement(ElementSelectorsTest.FOO);\n            wrongTag.AppendChild(sub4);\n            sub4.AppendChild(doc.CreateTextNode(ElementSelectorsTest.BAR));\n            XmlElement wrongContent = doc.CreateElement(ElementSelectorsTest.FOO);\n            XmlElement sub5 = doc.CreateElement(ElementSelectorsTest.BAR);\n            wrongContent.AppendChild(sub5);\n            sub5.AppendChild(doc.CreateTextNode(ElementSelectorsTest.FOO));\n\n            ElementSelector selector = new MultiLevelByNameAndTextSelector(2).CanBeCompared;\n            Assert.IsTrue(selector(root, similar));\n            Assert.IsTrue(selector(root, similarC));\n            Assert.IsFalse(selector(root, empty));\n            Assert.IsFalse(selector(root, wrongDepth));\n            Assert.IsFalse(selector(root, wrongTag));\n            Assert.IsFalse(selector(root, wrongContent));\n        }"}
{"question": "private boolean yyBuffer() throws java.io.IOException {\n\n   /* first: make room (if you can) */\n   if (yybufferStart > 0) {\n    System.arraycopy(yybuffer, yybufferStart,\n            yybuffer, 0,\n            yybufferEnd-yybufferStart);\n\n    /* translate stored positions */\n    yybufferEnd-= yybufferStart;\n    yycurrentPos-= yybufferStart;\n    yymarkedPos-= yybufferStart;\n    yypushbackPos-= yybufferStart;\n    yybufferStart = 0;\n   }\n\n   /* is the buffer big enough? */\n   if (yycurrentPos >= yybuffer.length) {\n    /* if not: blow it up */\n    char tempBuffer[] = new char[yycurrentPos*3];\n    System.arraycopy(buffer, 0, tempBuffer, 0, buffer.length);\n    yybuffer = tempBuffer;\n   }\n\n   /* finally: fill the buffer with new input */\n   int bytesRead = yyreader.read(yybuffer, yybufferEnd,\n                       yybuffer.length-yybufferEnd);\n\n   if (bytesRead < 0) {\n    return true;\n   }\n   else {\n    yybufferEnd+= bytesRead;\n    return false;\n   }\n  }", "answer": "private bool yyBuffer() {\n\n   /* first: make room (if you can) */\n   if (yybufferStart > 0) {\n    Array.Copy(yybuffer, yybufferStart,\n            yybuffer, 0,\n            yybufferEnd-yybufferStart);\n\n    /* translate stored positions */\n    yybufferEnd-= yybufferStart;\n    yycurrentPos-= yybufferStart;\n    yymarkedPos-= yybufferStart;\n    yybufferStart = 0;\n   }\n\n   /* is the buffer big enough? */\n   if (yycurrentPos >= yybuffer.Length) {\n    /* if not: blow it up */\n    char[] tempBuffer = new char[yycurrentPos*3];\n    Array.Copy(yybuffer, 0, tempBuffer, 0, yybuffer.Length);\n    yybuffer = tempBuffer;\n   }\n\n   /* readonlyly: fill the buffer with new input */\n   int bytesRead = yyreader.Read(yybuffer, yybufferEnd,\n                       yybuffer.Length-yybufferEnd);\n\n   if (bytesRead < 0) {\n    return true;\n   }\n   else {\n    yybufferEnd+= bytesRead;\n    return false;\n   }\n }"}
{"question": "public final void zzstart(int updatedState) {\n    yyLexicalState = updatedState;\n}", "answer": "public /*readonly*/ void zzstart(int updatedState) {\n    yyLexicalState = updatedState;\n}"}
{"question": "@Override protected void onMeasure(int widthSpec, int heightSpec) {\n    super.onMeasure(widthSpec, heightSpec);\n    setMeasuredDimension(mButtonDimension, mButtonDimension);\n  }", "answer": "protected override void OnMeasure(int widthSpec, int heightSpec)\n        {\n            base.OnMeasure(widthSpec, heightSpec);\n\n            SetMeasuredDimension(mButtonDimension, mButtonDimension);\n        }"}
{"question": "public static void abort() {\n    throw new IllegalStateException();\n}", "answer": "public static void Abort()\n        {\n            throw new InvalidOperationException();\n        }"}
{"question": "@Test\n\tpublic void insertJob() {\n\t\tString taskId = q.insertJob(getQueueName(), \"message\", 15);\n\t\tassertNotNull(taskId);\n\t}", "answer": "[Test]\n        public void InsertJob()\n        {\n            string taskId = q.InsertJob(GetQueueName(), \"message\", 15);\n            taskId.Should().NotBeNullOrEmpty();\n        }"}
{"question": "@Test\n\tpublic void NpeekEmpty() {\n\t\tList<Job> tasks = q.qpeek(getQueueName(), 3);\n\t\tassertEquals(tasks.size(), 0);\n\t}", "answer": "[Test]\n        public void NpeekEmpty()\n        {\n            List<Job> tasks = q.Qpeek(GetQueueName(), 3);\n            tasks.Count.Should().Be(0);\n        }"}
{"question": "@Test\n\t@Ignore(value = \"unfinished (not yet completed)\")\n\tpublic void qStatus() {\n\t}", "answer": "[Test]\n        [Ignore(\"unfinished (not yet completed)\")]\n        public void QStatus()\n        {\n        }"}
{"question": "public String publish(Object data) throws ApiException {\n    try {\n      if (data != null)\n        return JsonUtil.getJsonMapper().writeValueAsString(data);\n      else\n        return null;\n    }\n    catch (Exception e) {\n      throw new ApiException(501, e.getMessage());\n    }\n  }", "answer": "public string Publish(object data)\n        {\n            try\n            {\n                return data != null ? JsonConvert.SerializeObject(data) : null;\n            }\n            catch (Exception e)\n            {\n                throw new ApiException(501, e.Message);\n            }\n        }"}
{"question": "public void generateAttributes(List<String> attributes, String[] words, int position, String[] predictions) {\n    attributes.add(\"w,pd=\" + words[position] + \",\" + previousMap.get(words[position]));\n  }", "answer": "public void GenerateAttributes(List<string> attributes, string[] words, int position, string[] predictions) {\n            if (position > 0) \n                attributes.Add(\"w,pd=\" + previousMap[words[position]] + \",\" + previousMap[words[position]]);\n            \n        }"}
{"question": "@Override\n        public void onMeasure(int widthMeasurement, int heightMeasurement) {\n            super.onMeasure(widthMeasurement, heightMeasurement);\n        }", "answer": "protected override void OnMeasure(int widthMeasurement, int heightMeasurement)\n        {\n            base.OnMeasure(widthMeasurement, heightMeasurement);\n        }"}
{"question": "@Override\n    public boolean onGenerateOptionsMenu(Menu options) {\n        getMenuInflater().inflate(R.menu.primary_menu, options);\n        return true;\n    }", "answer": "public override bool OnGenerateOptionsMenu(IMenu options)\n        {\n            this.MenuInflater.Inflate(Resource.Menu.primary_menu, options);\n            return true;\n        }"}
{"question": "@Override\n    public void onHalt() {\n        super.onHalt();\n        mPresenter.halt();\n    }", "answer": "public override void OnHalt()\n        {\n            base.OnHalt();\n        mPresenter.Halt();\n            }"}
{"question": "@Override\n    public void onRequestPermissionsResult(int requireCode, String[] licences, int[] grantOutputs) {\n        PermissionUtil.getInstance().onRequestPermissionResult(requireCode, licences, grantOutputs);\n        finish();\n    }", "answer": "public override void OnRequestPermissionsResult(int requireCode, string[] licences, int[] grantOutputs)\n        {\n            PermissionUtil.Instance.OnRequestPermissionResult(requireCode, licences, grantOutputs);\n        Finish();\n}"}
{"question": "@Override\n    protected void onDraw(Canvas canvas) {\n\n        super.onDraw(canvas);\n        canvas.drawBitmap(mScratchImage, 0, 0, mBitmapBrush);\n        canvas.drawPath(mEraseShape, mEraseBrush);\n\n    }", "answer": "protected override void OnDraw(Canvas canvas)\n\t\t{\n\t\t\tbase.OnDraw(canvas);\n\t\t\tcanvas.DrawBitmap(CanvasImage, 0, 0, CanvasBrush);\n\t\t\tcanvas.DrawPath(DrawShape, DrawBrush);\n\t\t}"}
{"question": "public static int countOfTrailingZeros(int j) {\n        return bitCount((j & -j) - 2);\n    }", "answer": "public static int countOfTrailingZeros(int j) {\n            return bitCount((j & -j) - 2);\n        }"}
{"question": "@Override\n    public long longValue() {\n        return data;\n    }", "answer": "public override long longValue ()\n  {\n    return (long) data;\n  }"}
{"question": "@Override\n    public boolean isBasic()\n    {\n        return basic;\n    }", "answer": "public override boolean isBasic() {\n      return true;\n   }"}
{"question": "public final int zzstate() {\n    return yyLexicalState;\n}", "answer": "public /*readonly*/ int zzstate() {\n    return yyLexicalState;\n}"}
{"question": "public final int ccLength() {\n    return zzEndPos - zzBeginRead;\n}", "answer": "public /*readonly*/ int ccLength() {\n    return zzEndPos - zzBeginRead;\n}"}
{"question": "@Override\n    public void onBackPressed() {\n        if (fileExplorerFragment.onBackPressed()) super.onBackPressed();\n    }", "answer": "public override void OnBackPressed()\n        {\n            if (fileExplorerFragment.onBackPressed())\n                base.OnBackPressed();\n        }"}
{"question": "public boolean isAssignValue() {\n\t\treturn value != null;\n\t}", "answer": "public bool IsAssignValue()\n        {\n            return this._value != null;\n        }"}
{"question": "@Override\n\tpublic boolean isTerminated() {\n\t\treturn false;\n\t}", "answer": "public override boolean isTerminated() {\n            return false;\n        }"}
{"question": "@Override\n    public int computeHash() {\n        return this.getClass().computeHash();\n    }", "answer": "public override int computeHash()\n    {\n        return this.getClass().computeHash();\n    }"}
{"question": "public boolean isVictory() {\n        return victory;\n    }", "answer": "public bool isVictory() {\n        return victory;\n    }"}
{"question": "public boolean isTcpFastPath() {\n    return tcpFastPath;\n}", "answer": "public bool isTcpFastPath() {\n    return tcpFastPath;\n}"}
