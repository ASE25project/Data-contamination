{"question": "@Override\n          protected TokenStreamComponents createComponents(String fieldName) {\n            Tokenizer tokenizer = new KeywordTokenizer();\n            return new TokenStreamComponents(tokenizer, tokenizer );\n          }", "answer": "This function creates and returns a simple token stream component using a keyword tokenizer that treats the entire input as a single token."}
{"question": "public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    synchronized( this ) {\n      initFieldMap = true;\n    }\n  }", "answer": "This Java function updates a flag (`initFieldMap`) to `true` in a synchronized block when a new search index searcher is provided."}
{"question": "@Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    // do nothing - needed so we don't execute the query here.\n  }", "answer": "This function overrides the `process` method to intentionally do nothing, preventing query execution at this stage."}
{"question": "private ModifierDefinition findModifier( char[] queryToken ) {\n    for (ModifierDefinition modifier : verbModifierList ) {\n      if (modifier.modifierPhrase.startsWith( new String( queryToken ) )) {\n        return modifier;\n      }\n    }\n    return null;\n  }", "answer": "This function searches through a list of `ModifierDefinition` objects and returns the first one whose `modifierPhrase` starts with the given `queryToken` string, or `null` if none is found."}
{"question": "private boolean matchesModifier( String[] modTokens, ArrayList<char[]> queryTokens, int start ) {\n    int i = 0;\n    while ( (start + i) < queryTokens.size( ) && i < modTokens.length ) {\n      String token = new String( queryTokens.get( start + i ) );\n      if (!token.toLowerCase( ).equals( modTokens[i].toLowerCase( ))) return false;\n      if (++i == modTokens.length) return true;\n    }\n    return false;\n  }", "answer": "This function checks if a sequence of tokens in `queryTokens` starting at position `start` matches all tokens in `modTokens` (case-insensitive), returning `true` if they match and `false` otherwise."}
{"question": "private ArrayList<String> findEntityList( HashMap<String,ArrayList<String>> fieldMap, String entityField ) {\n    for (String fieldList : fieldMap.keySet() ) {\n      if (fieldList.contains( entityField )) {\n        return fieldMap.get( fieldList );\n      }\n    }\n    return null;\n  }", "answer": "This function searches a HashMap for the first key containing a specified string and returns its associated ArrayList, or null if not found."}
{"question": "@Override\n    public MediaType contentType() {\n        return responseBody.contentType();\n    }", "answer": "This function returns the content type of the response body by delegating to the `contentType()` method of the `responseBody` object."}
{"question": "@Override\n    public BufferedSource source() {\n        if (bufferedSource == null) {\n            bufferedSource = Okio.buffer(source(responseBody.source()));\n        }\n        return bufferedSource;\n    }", "answer": "This function lazily initializes and returns a buffered source from the response body's source if it hasn't been created yet."}
{"question": "public DataSet slice(int startInc, int endExc) {\n\t\tint[] labs = (null == labels) ? null : VecUtils.slice(labels, startInc, endExc);\n\t\t\n\t\treturn new DataSet(\n\t\t\tMatUtils.slice(data.getDataRef(), startInc, endExc),\n\t\t\tlabs,\n\t\t\tgetHeaders()\n\t\t);\n\t}", "answer": "This function returns a new `DataSet` containing a sliced portion of the original data and labels (if present) from the inclusive start index to the exclusive end index, while preserving the headers."}
{"question": "public void toFlatFile(boolean header, final File file) throws IOException {\n\t\ttoFlatFile(header, file, ',');\n\t}", "answer": "This function writes data to a flat file with an optional header, using a comma as the default delimiter, and throws an IOException if an error occurs."}
{"question": "@Override\n    protected void onPostExecute(String[] result) {\n        if (result != null) {\n            forecastFragment.mForecastAdapter.clear();\n\n            forecastFragment.mForecastAdapter.addAll(result);\n        }\n    }", "answer": "This function updates a list adapter in `forecastFragment` with new data from `result` if it's not null, first clearing the existing items."}
{"question": "private static void rotateToLandscape(ActivityTestRule<? extends Activity> activityTestRule) {\n        activityTestRule.getActivity()\n                .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n    }", "answer": "This function rotates the activity's screen orientation to landscape mode using the provided `ActivityTestRule`."}
{"question": "public int hashCode () {\n        return  (component1 == null ? 0 : component1.hashCode()) + (component2 == null ? 1 : component2.hashCode());\n    }", "answer": "This function generates a hash code by combining the hash values of `component1` (defaulting to 0 if null) and `component2` (defaulting to 1 if null)."}
{"question": "@Test\n    public void testQueryByName() throws Exception {\n        final TitanGraph graph = getGraph();\n        \n        Iterator<Vertex> results = graph.traversal().V().has(\"name\", \"jupiter\");\n        assertTrue(\"Query should return a result\", results.hasNext());\n        Vertex jupiter = results.next();\n        assertNotNull(\"Query result should be non null\", jupiter);\n    }", "answer": "This Java test function queries a Titan graph database for a vertex with the name \"jupiter\" and verifies that the result exists and is not null."}
{"question": "public void onResume() {\n        super.onResume();\n        mListener.onListResume(this);\n        paused = false;\n    }", "answer": "This function calls the parent class's `onResume()`, notifies a listener that the list has resumed, and sets the `paused` flag to `false`."}
{"question": "void showLoadIndicatorTop(boolean show) {\n        loadIndicatorTop.setVisibility(show ? View.VISIBLE : View.GONE);\n    }", "answer": "This function sets the visibility of a top load indicator to `VISIBLE` if the boolean parameter is true, or `GONE` if false."}
{"question": "@Override\n    protected boolean canInstrument(ClassInfo classInfo) {\n        return classInfo.hasAnno(NOOP_TYPE) || classInfo.hasMethodAnnoAnywhere(NOOP_TYPE);\n    }", "answer": "This function checks whether a class can be instrumented by verifying if the class or any of its methods are annotated with `NOOP_TYPE`."}
{"question": "static void printResult( int n, int res, int chk )\n    {\n        System.out.println( chk+\"\\nPfannkuchen(\"+n+\") = \"+res );\n    }", "answer": "This Java function prints a formatted message showing the input `chk`, followed by the result `res` of the `Pfannkuchen` function for input `n`."}
{"question": "public static void tearDownAfterClass() throws Exception {\n    TvShowModuleManager.getInstance().shutDown();\n    MovieModuleManager.getInstance().shutDown();\n    TmmModuleManager.getInstance().shutDown();\n  }", "answer": "This function shuts down the instances of `TvShowModuleManager`, `MovieModuleManager`, and `TmmModuleManager` for cleanup after class execution."}
{"question": "public static boolean isNotNull(Collection<?> collection) {\n\t\tif (collection != null && collection.size() > 0) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "answer": "This function checks if a given collection is not null and not empty, returning `true` if both conditions are met, otherwise `false`."}
{"question": "public static Map<String,BmobChatUser> list2map(List<BmobChatUser> users){\n\t\tMap<String,BmobChatUser> friends = new HashMap<String, BmobChatUser>();\n\t\tfor(BmobChatUser user : users){\n\t\t\tfriends.put(user.getUsername(), user);\n\t\t}\n\t\treturn friends;\n\t}", "answer": "This function converts a list of `BmobChatUser` objects into a map where each entry's key is the username and the value is the corresponding `BmobChatUser` object."}
{"question": "@Override\n    public void onLoadFailed(HttpResponse response, String url) {\n    super.onLoadFailed(response, url);\n    //请求失败时回调\n    WeLog.d(\"===========> onLoadFailed()\");\n    }", "answer": "This function logs a debug message when an HTTP request fails, after calling the parent class's failure handler."}
{"question": "@Test\n  public void printTestCase() {\n    UTUtils.stdout().println(TupleUtils.toString(TestCaseUtils.toTestCase(this)));\n  }", "answer": "This test function prints the current test case details to standard output by converting the test object to a test case string representation."}
{"question": "@Override public boolean shouldRetry(ConnectionState connectionState) {\n    return connectionState.retryCount <= 1;\n  }", "answer": "This function returns `true` if the connection state's retry count is 1 or less, indicating whether a retry should be attempted."}
{"question": "public LambdaSet<java.util.Map.Entry<K, V>> entrySet() {\n\t    return new LambdaSet<java.util.Map.Entry<K, V>>(innerMap.entrySet());\n    }", "answer": "This function returns a `LambdaSet` of map entries from the `innerMap`'s entry set."}
{"question": "public function channelDisconnect(event:ChannelEvent):void {\n            con.removeEventListener(ChannelEvent.DISCONNECT, handler);    \n            //manager.currentTest.abortAllAsyncFunctions();\n            //assert that the consumer is no longer subscribed or connected\n            Assert.assertTrue(\"Consumer shouldn't be subscribed\", con.subscribed != true);\n            Assert.assertTrue(\"Consumer shouldn't be connected\", con.connected != true);\n        }", "answer": "This Java function disconnects a channel, removes its disconnect event listener, and verifies that the consumer is neither subscribed nor connected."}
{"question": "private boolean readBoolean() throws IOException\n    {\n        String theBoolean = readString();\n        return Boolean.valueOf( theBoolean );\n    }", "answer": "This function reads a string from an input source and converts it into a boolean value, returning `true` if the string is \"true\" (case-insensitive) or `false` otherwise."}
{"question": "@Override\n  public void emitCurrentWindow(BasicOutputCollector collector) {\n    dumpCache();\n    Map<String, Set<Integer>> urlToVisitors = window.reduceThenAdvanceWindow();\n    for (String url : urlToVisitors.keySet()) {\n      collector.emit(new Values(url, urlToVisitors.get(url).size()));\n    }\n  }", "answer": "This function emits the count of unique visitors per URL for the current window by reducing and advancing the window data, then clearing the cache."}
{"question": "private void dumpCache() {\n    for (String url : cached.keySet()) {\n      window.add(url, cached.get(url));\n    }\n    cached.clear();\n  }", "answer": "This function transfers all entries from a cache map to a window object and then clears the cache."}
{"question": "@Override public void draw(Canvas canvas) {\n        if ((color >>> 24) != 0) {\n            paint.setColor(color);\n            canvas.drawRect(getBounds(), paint);\n        }\n    }", "answer": "This function draws a colored rectangle on the provided canvas if the color is not transparent."}
{"question": "private String buildCommonFullKey(final String scope, String key) {\n        return I18nKeyValueUniverse.COMMON.getPropertyKey() + \".\" + scope + \".\" + handleKey(key);\n    }", "answer": "This function constructs a full internationalization key by concatenating a common prefix, a scope, and a processed key, separated by dots."}
{"question": "@Override\n        public int compare( final AtomicLong o1, final AtomicLong o2 ) {\n            final long val1 = o1.longValue();\n            final long val2 = o2.longValue();\n            return val1 < val2 ? -1 : ( val1 == val2 ? 0 : 1);\n        }", "answer": "This function compares two `AtomicLong` objects and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second value, respectively."}
{"question": "private void incrementOrPut( final LRUCache<String, AtomicLong> cache, final String requestURI ) {\n        final AtomicLong count = cache.get( requestURI );\n        if ( count != null ) {\n            count.incrementAndGet();\n        }\n        else {\n            cache.put( requestURI, new AtomicLong( 1 ) );\n        }\n    }", "answer": "This function increments the count for a given URI in an LRU cache if it exists, or adds it with an initial count of 1 if it doesn't."}
{"question": "@Override\n  public <R> Property<R> property(String propertyName) {\n    return metaBean().<R>metaProperty(propertyName).createProperty(this);\n  }", "answer": "This function retrieves a property by name from a metaBean and creates a corresponding `Property` instance for the current object."}
{"question": "public TwoGearsLayout enableCutLayout(boolean enable) {\n        super.enableCutLayout(enable);\n        return this;\n    }", "answer": "This function enables or disables the cut layout feature based on the input boolean and returns the current `TwoGearsLayout` instance for method chaining."}
{"question": "public TwoGearsLayout blurBackground(boolean enable) {\n        super.blurBackground(enable);\n        return this;\n    }", "answer": "This function enables or disables background blurring by calling the parent class's `blurBackground` method and returns the current `TwoGearsLayout` instance for method chaining."}
{"question": "private SequenceInputStream generateSequenceInputStream(String znodes, boolean regressionZnodes)\n            throws KeeperException, InterruptedException {\n        List<InputStream> seqenceInputStreamCollector = new ArrayList<InputStream>();\n        for (String znode : znodes.split(\",\")) {\n            getDataInputStream(znode, seqenceInputStreamCollector, regressionZnodes);\n        }\n        return new SequenceInputStream(Collections.enumeration(seqenceInputStreamCollector));\n    }", "answer": "This function generates a `SequenceInputStream` by combining data from multiple ZooKeeper nodes (specified in a comma-separated string) into a sequence of input streams."}
{"question": "@Test(groups = { \"standalone\", \"default_provider\" })\n\tpublic void testNonAsciiContentLength() throws Exception {\n\t\tsetUpServer();\n\t\texecute(\"test\");\n\t\texecute(\"\\u4E00\"); // Unicode CJK ideograph for one\n\t}", "answer": "This Java test function verifies the handling of non-ASCII content length by setting up a server and executing test cases with both ASCII and Unicode CJK characters."}
{"question": "@Override\n    public void writeMarshallable(@NotNull WireOut wireOut) {\n        wireOut.write(() -> \"valueType\").typeLiteral(valueType);\n    }", "answer": "This Java function writes a `valueType` field as a type literal to the provided `WireOut` output stream using Chronicle Wire's marshalling."}
{"question": "protected RefineHTTPClient[] refineClients(String hosts) throws URISyntaxException {\n        String[] list = hosts.split(\",\");\n        RefineHTTPClient[] clients = new RefineHTTPClient[list.length];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = new RefineHTTPClient(new URI(\"http://\" + list[i]));\n        }\n        return clients;\n    }", "answer": "This function splits a comma-separated string of hostnames, creates an array of `RefineHTTPClient` instances for each host, and returns the array."}
{"question": "@Override\n        public void onWeiboException(WeiboException e) {\n            Toast.makeText(LoginActivity.this, \n                    \"Auth exception : \" + e.getMessage(), Toast.LENGTH_LONG).show();\n            ProgressDialogUtils.dismiss();\n        }", "answer": "This function displays a long toast message with a Weibo authentication exception error and dismisses a progress dialog."}
{"question": "@Override\n        public Map<Integer, Long> call() throws Exception {\n            \n            LOGGER.info(\"Sum on {}\", instance.getCluster().getLocalMember());\n            return impl.miniCube == null ? null : impl.miniCube.count(indName, groupDimName, filterDims);\n        }", "answer": "This function logs a sum operation for a cluster member and returns either `null` or the result of counting dimensions in a mini-cube based on the provided parameters."}
{"question": "@Test\n\tpublic void testMap(){\n\t\tMap<String,?> map = AsMappable.asMappable(new MyEntity(10,\"hello\")).toMap();\n\t\tSystem.out.println(map);\n\t\tassertThat(map.get(\"num\"),equalTo(10));\n\t\tassertThat(map.get(\"str\"),equalTo(\"hello\"));\n\t}", "answer": "This test function verifies that converting a `MyEntity` object with values (10, \"hello\") into a map correctly preserves its properties by checking that the map contains the expected key-value pairs."}
{"question": "@Override\n    protected void printEffectDetails() {\n        effectDetails.append(String.format(\"Video effect = %s\\n\", getVideoEffectName(effectIndex)));\n    }", "answer": "This function appends a formatted string with the current video effect's name to the `effectDetails` variable."}
{"question": "@Override\n        public void call(Object... args) {\n            Socket.this.onHeartbeat(args.length > 0 ? (Long)args[0]: 0);\n        }", "answer": "This function forwards the first argument as a `Long` (or 0 if no arguments exist) to the `onHeartbeat` method of the enclosing `Socket` class."}
{"question": "private void onError(Exception err) {\n        logger.fine(String.format(\"socket error %s\", err));\n        Socket.priorWebsocketSuccess = false;\n        this.emit(EVENT_ERROR, err);\n        this.onClose(\"transport error\", err);\n    }", "answer": "This function logs a socket error, marks prior WebSocket success as false, emits an error event, and triggers a close event with the error details."}
{"question": "List<String > filterUpgrades(List<String> upgrades) {\n        List<String> filteredUpgrades = new ArrayList<String>();\n        for (String upgrade : upgrades) {\n            if (this.transports.contains(upgrade)) {\n                filteredUpgrades.add(upgrade);\n            }\n        }\n        return filteredUpgrades;\n    }", "answer": "This function filters and returns a list of upgrades that are present in the `transports` collection."}
{"question": "@Override\n    public boolean isAuthorized(final WebContext context, final List<CommonProfile> profiles) throws HttpAction {\n        context.setResponseHeader(\"X-Content-Type-Options\", \"nosniff\");\n        return true;\n    }", "answer": "This function authorizes all requests by returning `true` and sets the `X-Content-Type-Options` header to \"nosniff\" in the response."}
{"question": "@Override public Contact obtain(String md5) {\n    for (Contact c : contacts) {\n      if (c.getMd5().equals(md5)) return c;\n    }\n    return null;\n  }", "answer": "This function searches a list of contacts for one with a matching MD5 hash and returns it, or null if not found."}
{"question": "@Override public Observable<List<String>> call() {\n        // Mock up loading delay.\n        SystemClock.sleep(500);\n        return Observable.just(data);\n      }", "answer": "This Java function mocks a loading delay of 500 milliseconds and returns an Observable emitting a predefined list of strings."}
{"question": "@Override\n  public final TokenStream tokenStream(final String fieldName,\n      final Reader reader) {\n    return createComponents(fieldName, reader).getTokenStream();\n  }", "answer": "This function creates and returns a token stream for the given field name and reader by delegating to the `createComponents` method and extracting its token stream."}
{"question": "@Override\n\tprotected void postSubmit() throws Exception {\n\t\tcompareResultsByLinesInMemory(Joiner.on('\\n').join(RESULTS), resultPath);\n\t}", "answer": "This function compares the expected results (joined by newlines) with the actual results from a file at `resultPath` after submission."}
{"question": "private void startThreadNotification() {\n\t\tsynchronized (mLock) {\n\t\t\tif (mRefreshThread != null && mRefreshThread.isAlive() && !mRefreshThread.isEnded()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmRefreshThread = new RefreshThread();\n\t\t\tmRefreshThread.start();\n\t\t}\n\t}", "answer": "This function checks if a refresh thread is already running, and if not, creates and starts a new `RefreshThread` instance within a synchronized block to ensure thread safety."}
{"question": "public ResultSet executeQuery() throws SQLException {\n        try {\n            Command select = fromTokens();\n            return mayflyConnection.query(select);\n        } catch (MayflyException e) {\n            throw e.asSqlException();\n        }\n    }", "answer": "This function executes a database query by converting tokens into a `Command` object and returns the resulting `ResultSet`, converting any `MayflyException` into an `SQLException` if an error occurs."}
{"question": "@Test\n  public void should_throw_error_if_actual_is_null() {\n    assertions = new ConcreteComparableAssert(null);\n    thrown.expect(AssertionError.class);\n    assertions.isGreaterThan(other);\n  }", "answer": "This test verifies that an `AssertionError` is thrown when the `isGreaterThan` method is called on a null `actual` value."}
{"question": "private void error(Element e, String msg, Object... args) {\n        messager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args), e);\n    }", "answer": "This private function logs an error message with formatted arguments for a given element using a messager."}
{"question": "View next(RecyclerView.Recycler recycler) {\n            if (mScrapList != null) {\n                return nextFromLimitedList();\n            }\n            final View view = recycler.getViewForPosition(mCurrentPosition);\n            mCurrentPosition += mItemDirection;\n            return view;\n        }", "answer": "This function retrieves the next view from a scrap list if available, otherwise it gets a new view for the current position from the recycler and increments the position."}
{"question": "@Override\n    protected Collection<Class<? extends Plugin>> nodePlugins() {\n      return Arrays.<Class<? extends Plugin>> asList(ClusteringPlugin.class);\n    }", "answer": "This function returns a collection containing only the `ClusteringPlugin` class as the node plugin."}
{"question": "@Override\n    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n      return nodePlugins();\n    }", "answer": "This function overrides `transportClientPlugins()` to return the same collection of plugin classes as `nodePlugins()`."}
{"question": "@Override\n    public boolean isTarget(Object itemObject) {\n        return itemObject instanceof String;\n    }", "answer": "This function checks if the given object is an instance of `String` and returns `true` if it is, otherwise `false`."}
{"question": "@Override\n    public SpinnerItem createAssemblyItem(ViewGroup parent) {\n        return new SpinnerItem(android.R.layout.simple_list_item_1, parent);\n    }", "answer": "This function overrides `createAssemblyItem` to return a new `SpinnerItem` configured with a default Android layout (`simple_list_item_1`) and the provided parent `ViewGroup`."}
{"question": "public void addArc(GraphNode<E> node, int distance, int terrain) {\n\t\tarcList.add(new Arc<E>(node, distance, terrain));\n\t}", "answer": "This function adds a new `Arc` with the specified `distance` and `terrain` to the `arcList` of a `GraphNode`."}
{"question": "RegistrationApiResponse readJsonStream(InputStream stream) throws IOException {\n            JsonReader reader;\n            reader = new JsonReader(new InputStreamReader(stream, \"UTF-8\"));\n            try {\n                return readMessage(reader);\n            } finally {\n                reader.close();\n            }\n        }", "answer": "This function reads a JSON stream in UTF-8 encoding, converts it into a `RegistrationApiResponse` object using a `JsonReader`, and ensures the reader is properly closed afterward."}
{"question": "@Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        mWidth = h > w ? w : h;\n        mHeight = h > w ? h : w;\n        mRect = new RectF(0, 0, mWidth, mWidth);\n    }", "answer": "This function updates the dimensions and bounding rectangle of a view when its size changes, setting the width and height to the smaller and larger values respectively and creating a square RectF based on the smaller dimension."}
{"question": "public static synchronized void reload() {\n    map = new HashMap<Class<?>, Object>();\n    customProperties = loadFile(CUSTOM_TUNING_FILE_NAME);\n    defaultProperties = loadFile(DEFAULT_TUNING_FILE_NAME);\n  }", "answer": "This synchronized static function reloads configurations by initializing a new HashMap and loading custom and default properties from specified files."}
{"question": "public void addCourses(List<Course> courses) {\n\t\tif (courses != null) {\n\t\t\tSQLiteDatabase courseDatabase = getWritableDatabase();\n\t\t\tfor (Course course : courses) {\n\t\t\t\taddCourse(courseDatabase, course);\n\t\t\t}\n\t\t\tcourseDatabase.close();\n\t\t}\n\t}", "answer": "This function adds a list of non-null courses to an SQLite database by iterating through each course and closing the database afterward."}
{"question": "public List<Long> checkConflict(@NonNull Course course) {\n\t\tSQLiteDatabase courseDatabase = getReadableDatabase();\n\t\tList<Long> retList = checkConflict(courseDatabase, course);\n\t\tcourseDatabase.close();\n\t\treturn retList;\n\t}", "answer": "This Java function checks for scheduling conflicts with a given course by querying a readable SQLite database and returns a list of conflicting course IDs."}
{"question": "public Date parseDate(String str) {\n    try {\n      return dateFormat.parse(str);\n    } catch (java.text.ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }", "answer": "This function parses a string into a `Date` object using a predefined date format, throwing a `RuntimeException` if parsing fails."}
{"question": "public String escapeString(String str) {\n    try {\n      return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n    } catch (UnsupportedEncodingException e) {\n      return str;\n    }\n  }", "answer": "This function URL-encodes a given string using UTF-8 encoding and replaces all plus signs with \"%20\", returning the original string if encoding fails."}
{"question": "private void updateParamsForAuth(String[] authNames, List<Pair> queryParams, Map<String, String> headerParams) {\n    for (String authName : authNames) {\n      Authentication auth = authentications.get(authName);\n      if (auth == null) throw new RuntimeException(\"Authentication undefined: \" + authName);\n      auth.applyToParams(queryParams, headerParams);\n    }\n  }", "answer": "This function updates query and header parameters by applying authentication settings for each specified authentication type, throwing an exception if any authentication is undefined."}
{"question": "@Test\n\tpublic void noChanges() throws Exception {\n\t\tList<Todo> original = buildTodoList();\n\t\tList<Todo> modified = buildTodoList();\n\n\t\tPatch diff = Diff.diff(original, modified);\n\t\tassertEquals(0, diff.size());\n\t}", "answer": "This test verifies that no differences are detected between two identical todo lists by asserting the resulting patch is empty."}
{"question": "@Override\n\tprotected void onPreExecute() {\n\t\tdialog = ProgressDialog.show(context, \"\", context.getString(R.string.msg_personal_loading));\n\t\tdialog.setCancelable(true);\n\t}", "answer": "This function displays a cancelable progress dialog with a loading message before starting an asynchronous task."}
{"question": "public static LongBuffer allocate(int capacity) {\n        if (capacity < 0) {\n            throw new IllegalArgumentException();\n        }\n        return BufferFactory.newLongBuffer(capacity);\n    }", "answer": "This Java function allocates a new `LongBuffer` with the specified capacity, throwing an `IllegalArgumentException` if the capacity is negative."}
{"question": "@Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        Iterable<String> i = (Iterable) invocation.getArguments()[0];\n        for (String key : i) {\n          removed.add(key);\n        }\n        return null;\n      }", "answer": "This function processes an `Iterable<String>` argument, adds all its elements to a `removed` collection, and returns `null`."}
{"question": "private String toKey(String string) throws InvalidCommandNameException\n\t{\n\t\tif (string == null || string.length() < 4)\n\t\t\tthrow new InvalidCommandNameException(\"Error: bad syntax\");\n\n\t\treturn string.substring(0, 4).toUpperCase(Locale.ENGLISH);\n\t}", "answer": "This function converts the first four characters of a non-null input string (with at least four characters) to uppercase English letters, throwing an exception if the input is invalid."}
{"question": "public void free() {\n            mStackSize--;\n            if (mStackSize < 0) {\n                throw new ArrayIndexOutOfBoundsException(mStackSize);\n            }\n        }", "answer": "This function decrements `mStackSize` and throws an `ArrayIndexOutOfBoundsException` if the value becomes negative."}
{"question": "public long testInline() {\n\t\tlong l = System.nanoTime();\n\t\tf();\n\t\treturn System.nanoTime() - l;\n\t}", "answer": "This function measures and returns the execution time of method `f()` in nanoseconds."}
{"question": "private static boolean isNumber(String source) {\n        try {\n            Double.parseDouble(source);\n        } catch (NumberFormatException nfe) {\n            return false;\n        }\n        return true;\n    }", "answer": "This function checks if a given string can be parsed as a double and returns true if it can, false otherwise."}
{"question": "public int readLen() throws IOException {\n        final String line = in.readLine();\n        return line == null ? 0 : Integer.parseInt(line);\n    }", "answer": "This function reads a line from an input stream and returns its integer value, or 0 if the line is null."}
{"question": "public void writeLen(int len) throws IOException {\n        out.write(\"\" + len);\n        out.newLine();\n        out.flush();\n    }", "answer": "This Java function writes an integer `len` as a string to an output stream, followed by a newline, and flushes the stream to ensure the data is sent immediately."}
{"question": "@Override\n    public Class<? extends IborFixingDepositTemplate> beanType() {\n      return IborFixingDepositTemplate.class;\n    }", "answer": "This function returns the `IborFixingDepositTemplate` class type, indicating the bean type for the template."}
{"question": "@Override\n    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {\n      metaProperty(propertyName);\n      if (quiet) {\n        return;\n      }\n      throw new UnsupportedOperationException(\"Property cannot be written: \" + propertyName);\n    }", "answer": "This function checks if a property can be written on a bean, silently returning if in quiet mode or throwing an `UnsupportedOperationException` otherwise."}
{"question": "@Test\npublic void areaIsAlwaysPositive() {\n      qt()\n      .forAll(anyCylinder())\n      .assuming(cylinder -> cylinder.height > 0 && cylinder.radius > 0)\n      .check(cylinder -> cylinder.area().compareTo(BigDecimal.ZERO) > 1000); \n    }", "answer": "This JUnit test verifies that the area of any cylinder with positive height and radius is always greater than 1000."}
{"question": "@Override\n    protected void attachEntity(Attribute entity) {\n        super.attachEntity(entity);\n        entity.__setDaoSession(daoSession);\n    }", "answer": "This function attaches an `Attribute` entity to the current session by calling the parent class's `attachEntity` method and then setting the entity's DAO session to the current `daoSession`."}
{"question": "@Override\n    public void readEntity(Cursor cursor, Attribute entity, int offset) {\n        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));\n        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));\n        entity.setValueLocal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));\n        entity.setAttributableId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));\n        entity.setAttributableType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));\n        entity.setAttributeTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));\n     }", "answer": "This function reads data from a database cursor and populates an `Attribute` entity object by setting its fields (id, value, valueLocal, attributableId, attributableType, and attributeTypeId) based on the cursor's column values starting from the given offset."}
{"question": "@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        AllocationCommands.writeTo(commands, out);\n        out.writeBoolean(dryRun);\n    }", "answer": "This Java function writes the parent class data, a list of allocation commands, and a dry-run flag to a specified output stream."}
{"question": "@Override\n    public int hashCode() {\n        return super.hashCode() ^ Objects.hashCode(value);\n    }", "answer": "This function overrides `hashCode()` to return the XOR of the parent class's hash code and the hash code of the `value` field."}
{"question": "@Override\n    public CommentedConfigurationNode createEmptyNode(ConfigurationOptions options) {\n        options = options.setAcceptedTypes(ImmutableSet.of(Map.class, List.class, Double.class, Float.class,\n                Long.class, Integer.class, Boolean.class, String.class, byte[].class));\n        return SimpleCommentedConfigurationNode.root(options);\n    }", "answer": "This function creates and returns an empty `CommentedConfigurationNode` with root options that accept specific data types, including collections, primitives, strings, and byte arrays."}
{"question": "@Override\n    public void preloadBitmap(@NonNull CacheUrlKey key) {\n        final BitmapLoader loader = new BitmapLoader(mLoaderConfig, key, AccessPolicy.PRE_FETCH,\n                null);\n        BitmapCacheBase.submitInExecutor(loader);\n    }", "answer": "This function preloads a bitmap by creating a `BitmapLoader` with a prefetch policy and submitting it to an executor for asynchronous loading."}
{"question": "void flagStartAsync(String operation) {\n        if (mAsyncInProgress) throw new IllegalStateException(\"Can't start async operation (\" +\n                operation + \") because another async operation(\" + mAsyncOperation + \") is in progress.\");\n        mAsyncOperation = operation;\n        mAsyncInProgress = true;\n        Logger.d(\"Starting async operation: \", operation);\n    }", "answer": "This function sets an asynchronous operation as in progress, throwing an exception if another operation is already ongoing, and logs the start of the new operation."}
{"question": "public void onLoadingDrawableSet(Drawable imageDrawable) {\n\t\tif (null != imageDrawable) {\n\t\t\tmRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);\n\t\t\tmRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);\n\t\t}\n\t}", "answer": "This function sets the rotation pivot points to the center of the provided `imageDrawable` if it is not null."}
{"question": "public static PhoneType valueOf(\n          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {\n        if (desc.getType() != getDescriptor()) {\n          throw new java.lang.IllegalArgumentException(\n            \"EnumValueDescriptor is not for this type.\");\n        }\n        return VALUES[desc.getIndex()];\n      }", "answer": "This function converts a protobuf EnumValueDescriptor into the corresponding PhoneType enum value by verifying the descriptor type matches and returning the enum value at the descriptor's index."}
{"question": "private void enableFields(Component[] components, boolean b)\n    {\n        for (Component component : components)\n        {\n            component.setEnabled(b) ;\n        }\n    }", "answer": "This function enables or disables all components in the given array based on the boolean parameter `b`."}
{"question": "@Override\n    protected boolean areContentsTheSame(GroupToggle item1, GroupToggle item2) {\n        Group group1 = item1.getGroup();\n        Group group2 = item2.getGroup();\n        return (group1.id().equals(group2.id())\n            && group1.label().equals(group2.label()));\n    }", "answer": "This function checks if two `GroupToggle` objects have the same group ID and label, returning `true` if they match and `false` otherwise."}
{"question": "@Override\n  public boolean enterPageSelector(CssPageSelectorNode node) {\n    buffer.append(node.getType().toString());\n    for (CssValueNode param : node.getParameters()) {\n      buffer.append(' ');\n      buffer.append(param.getValue());\n    }\n    return true;\n  }", "answer": "This function appends a CSS page selector's type and its parameters to a buffer, separated by spaces, and always returns `true`."}
{"question": "private function handleFault(event:FaultEvent):void\n        {   \n            log(\"FaultEvent: op=\" + event.token.op + \" detail=\" + event.fault.faultDetail + \" string=\" + event.fault.faultString);\n            Assert.fail(\"there shouldn't be any fault \" + event.fault.toString());\n            Assert.hasPendingTest = false;    \n        }", "answer": "This function logs and asserts a failure when a fault event occurs, including operation details and fault information, then marks the test as complete."}
{"question": "@Override\n    protected MessageApi.SendMessageResult doInBackground(Object... args) {\n\n        final MessageApi.SendMessageResult messageResult =\n                Wearable.MessageApi.sendMessage(googleApiClient, id, path, payload).await();\n\n        return messageResult;\n    }", "answer": "This Java function asynchronously sends a message using the Wearable API and returns the result of the send operation."}
{"question": "@Override\n    public void virtualize(final OVXSwitch sw,\n            final List<OFAction> approvedActions, final OVXMatch match)\n            throws ActionVirtualizationDenied {\n        approvedActions.add(this);\n    }", "answer": "This function adds the current action to the `approvedActions` list during the virtualization process of an OVXSwitch."}
{"question": "@Override\n    public void writeObject(BufferOutput<?> buffer, Serializer serializer) {\n      buffer.writeLong(primitive);\n      serializer.writeObject(object, buffer);\n      buffer.writeUTF8(string);\n    }", "answer": "This Java function serializes an object by writing a `long` primitive, a serializable object, and a UTF-8 encoded string to a buffer."}
{"question": "public boolean implies(final ProtectionDomain domain, final Permission permission) {\n        final CodeSource codeSource = domain.getCodeSource();\n        return codeSource != null && codeSource.equals(ourCodeSource) || policy.implies(domain, permission);\n    }", "answer": "This function checks if a given `ProtectionDomain` implies a specified `Permission` by verifying either that its `CodeSource` matches a predefined one (`ourCodeSource`) or that the security `policy` grants the permission."}
