{"question": "protected override TokenStreamComponents CreateComponents(string fieldName)\n{\n    Tokenizer tokenizer = new KeywordTokenizer();\n    return new TokenStreamComponents(tokenizer, tokenizer);\n}", "answer": "@Override\n          protected TokenStreamComponents createComponents(String fieldName) {\n            Tokenizer tokenizer = new KeywordTokenizer();\n            return new TokenStreamComponents(tokenizer, tokenizer );\n          }"}
{"question": "public void NewSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher)\n{\n    lock (this)\n    {\n        initFieldMap = true;\n    }\n}", "answer": "public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    synchronized( this ) {\n      initFieldMap = true;\n    }\n  }"}
{"question": "public override void Process(ResponseBuilder rb)\n{\n    // do nothing - needed so we don't execute the query here.\n}", "answer": "@Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    // do nothing - needed so we don't execute the query here.\n  }"}
{"question": "private ModifierDefinition FindModifier(char[] queryToken)\n{\n    foreach (ModifierDefinition modifier in verbModifierList)\n    {\n        if (modifier.modifierPhrase.StartsWith(new string(queryToken)))\n        {\n            return modifier;\n        }\n    }\n    return null;\n}", "answer": "private ModifierDefinition findModifier( char[] queryToken ) {\n    for (ModifierDefinition modifier : verbModifierList ) {\n      if (modifier.modifierPhrase.startsWith( new String( queryToken ) )) {\n        return modifier;\n      }\n    }\n    return null;\n  }"}
{"question": "private bool MatchesModifier(string[] modTokens, List<char[]> queryTokens, int start)\n{\n    int i = 0;\n    while ((start + i) < queryTokens.Count && i < modTokens.Length)\n    {\n        string token = new string(queryTokens[start + i]);\n        if (!token.ToLower().Equals(modTokens[i].ToLower())) return false;\n        if (++i == modTokens.Length) return true;\n    }\n    return false;\n}", "answer": "private boolean matchesModifier( String[] modTokens, ArrayList<char[]> queryTokens, int start ) {\n    int i = 0;\n    while ( (start + i) < queryTokens.size( ) && i < modTokens.length ) {\n      String token = new String( queryTokens.get( start + i ) );\n      if (!token.toLowerCase( ).equals( modTokens[i].toLowerCase( ))) return false;\n      if (++i == modTokens.length) return true;\n    }\n    return false;\n  }"}
{"question": "private List<string> FindEntityList(Dictionary<string, List<string>> fieldMap, string entityField)\n{\n    foreach (var fieldList in fieldMap.Keys)\n    {\n        if (fieldList.Contains(entityField))\n        {\n            return fieldMap[fieldList];\n        }\n    }\n    return null;\n}", "answer": "private ArrayList<String> findEntityList( HashMap<String,ArrayList<String>> fieldMap, String entityField ) {\n    for (String fieldList : fieldMap.keySet() ) {\n      if (fieldList.contains( entityField )) {\n        return fieldMap.get( fieldList );\n      }\n    }\n    return null;\n  }"}
{"question": "public override MediaType ContentType()\n{\n    return responseBody.ContentType();\n}", "answer": "@Override\n    public MediaType contentType() {\n        return responseBody.contentType();\n    }"}
{"question": "public override BufferedSource Source()\n{\n    if (bufferedSource == null)\n    {\n        bufferedSource = Okio.Buffer(Source(responseBody.Source()));\n    }\n    return bufferedSource;\n}", "answer": "@Override\n    public BufferedSource source() {\n        if (bufferedSource == null) {\n            bufferedSource = Okio.buffer(source(responseBody.source()));\n        }\n        return bufferedSource;\n    }"}
{"question": "public DataSet Slice(int startInc, int endExc)\n{\n    int[] labs = (null == labels) ? null : VecUtils.Slice(labels, startInc, endExc);\n    \n    return new DataSet(\n        MatUtils.Slice(data.GetDataRef(), startInc, endExc),\n        labs,\n        GetHeaders()\n    );\n}", "answer": "public DataSet slice(int startInc, int endExc) {\n\t\tint[] labs = (null == labels) ? null : VecUtils.slice(labels, startInc, endExc);\n\t\t\n\t\treturn new DataSet(\n\t\t\tMatUtils.slice(data.getDataRef(), startInc, endExc),\n\t\t\tlabs,\n\t\t\tgetHeaders()\n\t\t);\n\t}"}
{"question": "public void ToFlatFile(bool header, FileInfo file)\n{\n    ToFlatFile(header, file, ',');\n}", "answer": "public void toFlatFile(boolean header, final File file) throws IOException {\n\t\ttoFlatFile(header, file, ',');\n\t}"}
{"question": "protected override void OnPostExecute(string[] result)\n{\n    if (result != null)\n    {\n        forecastFragment.mForecastAdapter.Clear();\n        forecastFragment.mForecastAdapter.AddAll(result);\n    }\n}", "answer": "@Override\n    protected void onPostExecute(String[] result) {\n        if (result != null) {\n            forecastFragment.mForecastAdapter.clear();\n\n            forecastFragment.mForecastAdapter.addAll(result);\n        }\n    }"}
{"question": "private static void RotateToLandscape(ActivityTestRule<Activity> activityTestRule)\n{\n    activityTestRule.Activity.RequestedOrientation = ScreenOrientation.Landscape;\n}", "answer": "private static void rotateToLandscape(ActivityTestRule<? extends Activity> activityTestRule) {\n        activityTestRule.getActivity()\n                .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n    }"}
{"question": "public int GetHashCode() {\n    return (component1 == null ? 0 : component1.GetHashCode()) + (component2 == null ? 1 : component2.GetHashCode());\n}", "answer": "public int hashCode () {\n        return  (component1 == null ? 0 : component1.hashCode()) + (component2 == null ? 1 : component2.hashCode());\n    }"}
{"question": "[Test]\npublic void TestQueryByName()\n{\n    var graph = GetGraph();\n    \n    var results = graph.Traversal().V().Has(\"name\", \"jupiter\");\n    Assert.IsTrue(results.MoveNext(), \"Query should return a result\");\n    var jupiter = results.Current;\n    Assert.IsNotNull(jupiter, \"Query result should be non null\");\n}", "answer": "@Test\n    public void testQueryByName() throws Exception {\n        final TitanGraph graph = getGraph();\n        \n        Iterator<Vertex> results = graph.traversal().V().has(\"name\", \"jupiter\");\n        assertTrue(\"Query should return a result\", results.hasNext());\n        Vertex jupiter = results.next();\n        assertNotNull(\"Query result should be non null\", jupiter);\n    }"}
{"question": "public void OnResume()\n{\n    base.OnResume();\n    mListener.OnListResume(this);\n    paused = false;\n}", "answer": "public void onResume() {\n        super.onResume();\n        mListener.onListResume(this);\n        paused = false;\n    }"}
{"question": "void ShowLoadIndicatorTop(bool show)\n{\n    loadIndicatorTop.Visibility = show ? View.Visible : View.Gone;\n}", "answer": "void showLoadIndicatorTop(boolean show) {\n        loadIndicatorTop.setVisibility(show ? View.VISIBLE : View.GONE);\n    }"}
{"question": "protected override bool CanInstrument(ClassInfo classInfo)\n{\n    return classInfo.HasAnno(NOOP_TYPE) || classInfo.HasMethodAnnoAnywhere(NOOP_TYPE);\n}", "answer": "@Override\n    protected boolean canInstrument(ClassInfo classInfo) {\n        return classInfo.hasAnno(NOOP_TYPE) || classInfo.hasMethodAnnoAnywhere(NOOP_TYPE);\n    }"}
{"question": "static void PrintResult(int n, int res, int chk)\n{\n    Console.WriteLine(chk + \"\\nPfannkuchen(\" + n + \") = \" + res);\n}", "answer": "static void printResult( int n, int res, int chk )\n    {\n        System.out.println( chk+\"\\nPfannkuchen(\"+n+\") = \"+res );\n    }"}
{"question": "public static void TearDownAfterClass()\n{\n    TvShowModuleManager.GetInstance().ShutDown();\n    MovieModuleManager.GetInstance().ShutDown();\n    TmmModuleManager.GetInstance().ShutDown();\n}", "answer": "public static void tearDownAfterClass() throws Exception {\n    TvShowModuleManager.getInstance().shutDown();\n    MovieModuleManager.getInstance().shutDown();\n    TmmModuleManager.getInstance().shutDown();\n  }"}
{"question": "public static bool IsNotNull<T>(ICollection<T> collection)\n{\n    if (collection != null && collection.Count > 0)\n    {\n        return true;\n    }\n    return false;\n}", "answer": "public static boolean isNotNull(Collection<?> collection) {\n\t\tif (collection != null && collection.size() > 0) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"}
{"question": "public static Dictionary<string, BmobChatUser> List2Map(List<BmobChatUser> users)\n{\n    Dictionary<string, BmobChatUser> friends = new Dictionary<string, BmobChatUser>();\n    foreach (BmobChatUser user in users)\n    {\n        friends.Add(user.GetUsername(), user);\n    }\n    return friends;\n}", "answer": "public static Map<String,BmobChatUser> list2map(List<BmobChatUser> users){\n\t\tMap<String,BmobChatUser> friends = new HashMap<String, BmobChatUser>();\n\t\tfor(BmobChatUser user : users){\n\t\t\tfriends.put(user.getUsername(), user);\n\t\t}\n\t\treturn friends;\n\t}"}
{"question": "public override void OnLoadFailed(HttpResponse response, string url)\n{\n    base.OnLoadFailed(response, url);\n    //请求失败时回调\n    WeLog.D(\"===========> OnLoadFailed()\");\n}", "answer": "@Override\n    public void onLoadFailed(HttpResponse response, String url) {\n    super.onLoadFailed(response, url);\n    //请求失败时回调\n    WeLog.d(\"===========> onLoadFailed()\");\n    }"}
{"question": "[Test]\npublic void PrintTestCase()\n{\n    Console.WriteLine(UTUtils.Stdout().ToString(TupleUtils.ToString(TestCaseUtils.ToTestCase(this))));\n}", "answer": "@Test\n  public void printTestCase() {\n    UTUtils.stdout().println(TupleUtils.toString(TestCaseUtils.toTestCase(this)));\n  }"}
{"question": "public override bool ShouldRetry(ConnectionState connectionState)\n{\n    return connectionState.retryCount <= 1;\n}", "answer": "@Override public boolean shouldRetry(ConnectionState connectionState) {\n    return connectionState.retryCount <= 1;\n  }"}
{"question": "public LambdaSet<KeyValuePair<K, V>> EntrySet() {\n    return new LambdaSet<KeyValuePair<K, V>>(innerMap);\n}", "answer": "public LambdaSet<java.util.Map.Entry<K, V>> entrySet() {\n\t    return new LambdaSet<java.util.Map.Entry<K, V>>(innerMap.entrySet());\n    }"}
{"question": "public void ChannelDisconnect(ChannelEvent event) {\n    con.RemoveEventListener(ChannelEvent.DISCONNECT, handler);    \n    //manager.currentTest.AbortAllAsyncFunctions();\n    //assert that the consumer is no longer subscribed or connected\n    Assert.IsTrue(\"Consumer shouldn't be subscribed\", !con.subscribed);\n    Assert.IsTrue(\"Consumer shouldn't be connected\", !con.connected);\n}", "answer": "public function channelDisconnect(event:ChannelEvent):void {\n            con.removeEventListener(ChannelEvent.DISCONNECT, handler);    \n            //manager.currentTest.abortAllAsyncFunctions();\n            //assert that the consumer is no longer subscribed or connected\n            Assert.assertTrue(\"Consumer shouldn't be subscribed\", con.subscribed != true);\n            Assert.assertTrue(\"Consumer shouldn't be connected\", con.connected != true);\n        }"}
{"question": "private bool ReadBoolean()\n{\n    string theBoolean = ReadString();\n    return bool.Parse(theBoolean);\n}", "answer": "private boolean readBoolean() throws IOException\n    {\n        String theBoolean = readString();\n        return Boolean.valueOf( theBoolean );\n    }"}
{"question": "public override void EmitCurrentWindow(BasicOutputCollector collector)\n{\n    DumpCache();\n    Dictionary<string, HashSet<int>> urlToVisitors = window.ReduceThenAdvanceWindow();\n    foreach (string url in urlToVisitors.Keys)\n    {\n        collector.Emit(new Values(url, urlToVisitors[url].Count));\n    }\n}", "answer": "@Override\n  public void emitCurrentWindow(BasicOutputCollector collector) {\n    dumpCache();\n    Map<String, Set<Integer>> urlToVisitors = window.reduceThenAdvanceWindow();\n    for (String url : urlToVisitors.keySet()) {\n      collector.emit(new Values(url, urlToVisitors.get(url).size()));\n    }\n  }"}
{"question": "private void DumpCache()\n{\n    foreach (var url in cached.Keys)\n    {\n        window.Add(url, cached[url]);\n    }\n    cached.Clear();\n}", "answer": "private void dumpCache() {\n    for (String url : cached.keySet()) {\n      window.add(url, cached.get(url));\n    }\n    cached.clear();\n  }"}
{"question": "public override void Draw(Canvas canvas)\n{\n    if ((color >> 24) != 0)\n    {\n        paint.Color = color;\n        canvas.DrawRect(GetBounds(), paint);\n    }\n}", "answer": "@Override public void draw(Canvas canvas) {\n        if ((color >>> 24) != 0) {\n            paint.setColor(color);\n            canvas.drawRect(getBounds(), paint);\n        }\n    }"}
{"question": "private string BuildCommonFullKey(string scope, string key)\n{\n    return I18nKeyValueUniverse.COMMON.GetPropertyKey() + \".\" + scope + \".\" + HandleKey(key);\n}", "answer": "private String buildCommonFullKey(final String scope, String key) {\n        return I18nKeyValueUniverse.COMMON.getPropertyKey() + \".\" + scope + \".\" + handleKey(key);\n    }"}
{"question": "public int Compare(AtomicLong o1, AtomicLong o2)\n{\n    long val1 = o1.LongValue();\n    long val2 = o2.LongValue();\n    return val1 < val2 ? -1 : (val1 == val2 ? 0 : 1);\n}", "answer": "@Override\n        public int compare( final AtomicLong o1, final AtomicLong o2 ) {\n            final long val1 = o1.longValue();\n            final long val2 = o2.longValue();\n            return val1 < val2 ? -1 : ( val1 == val2 ? 0 : 1);\n        }"}
{"question": "private void IncrementOrPut(LRUCache<string, AtomicLong> cache, string requestURI)\n{\n    AtomicLong count = cache.Get(requestURI);\n    if (count != null)\n    {\n        count.IncrementAndGet();\n    }\n    else\n    {\n        cache.Put(requestURI, new AtomicLong(1));\n    }\n}", "answer": "private void incrementOrPut( final LRUCache<String, AtomicLong> cache, final String requestURI ) {\n        final AtomicLong count = cache.get( requestURI );\n        if ( count != null ) {\n            count.incrementAndGet();\n        }\n        else {\n            cache.put( requestURI, new AtomicLong( 1 ) );\n        }\n    }"}
{"question": "public override Property<R> Property<R>(string propertyName)\n{\n    return MetaBean().MetaProperty<R>(propertyName).CreateProperty(this);\n}", "answer": "@Override\n  public <R> Property<R> property(String propertyName) {\n    return metaBean().<R>metaProperty(propertyName).createProperty(this);\n  }"}
{"question": "public TwoGearsLayout EnableCutLayout(bool enable)\n{\n    base.EnableCutLayout(enable);\n    return this;\n}", "answer": "public TwoGearsLayout enableCutLayout(boolean enable) {\n        super.enableCutLayout(enable);\n        return this;\n    }"}
{"question": "public TwoGearsLayout BlurBackground(bool enable)\n{\n    base.BlurBackground(enable);\n    return this;\n}", "answer": "public TwoGearsLayout blurBackground(boolean enable) {\n        super.blurBackground(enable);\n        return this;\n    }"}
{"question": "private SequenceInputStream GenerateSequenceInputStream(string znodes, bool regressionZnodes)\n{\n    List<Stream> sequenceInputStreamCollector = new List<Stream>();\n    foreach (string znode in znodes.Split(','))\n    {\n        GetDataInputStream(znode, sequenceInputStreamCollector, regressionZnodes);\n    }\n    return new SequenceInputStream(sequenceInputStreamCollector);\n}", "answer": "private SequenceInputStream generateSequenceInputStream(String znodes, boolean regressionZnodes)\n            throws KeeperException, InterruptedException {\n        List<InputStream> seqenceInputStreamCollector = new ArrayList<InputStream>();\n        for (String znode : znodes.split(\",\")) {\n            getDataInputStream(znode, seqenceInputStreamCollector, regressionZnodes);\n        }\n        return new SequenceInputStream(Collections.enumeration(seqenceInputStreamCollector));\n    }"}
{"question": "[Test]\npublic void TestNonAsciiContentLength()\n{\n    SetUpServer();\n    Execute(\"test\");\n    Execute(\"\\u4E00\"); // Unicode CJK ideograph for one\n}", "answer": "@Test(groups = { \"standalone\", \"default_provider\" })\n\tpublic void testNonAsciiContentLength() throws Exception {\n\t\tsetUpServer();\n\t\texecute(\"test\");\n\t\texecute(\"\\u4E00\"); // Unicode CJK ideograph for one\n\t}"}
{"question": "public override void WriteMarshallable(WireOut wireOut)\n{\n    wireOut.Write(() => \"valueType\").TypeLiteral(valueType);\n}", "answer": "@Override\n    public void writeMarshallable(@NotNull WireOut wireOut) {\n        wireOut.write(() -> \"valueType\").typeLiteral(valueType);\n    }"}
{"question": "protected RefineHTTPClient[] RefineClients(string hosts)\n{\n    string[] list = hosts.Split(',');\n    RefineHTTPClient[] clients = new RefineHTTPClient[list.Length];\n    for (int i = 0; i < clients.Length; i++)\n    {\n        clients[i] = new RefineHTTPClient(new Uri(\"http://\" + list[i]));\n    }\n    return clients;\n}", "answer": "protected RefineHTTPClient[] refineClients(String hosts) throws URISyntaxException {\n        String[] list = hosts.split(\",\");\n        RefineHTTPClient[] clients = new RefineHTTPClient[list.length];\n        for (int i = 0; i < clients.length; i++) {\n            clients[i] = new RefineHTTPClient(new URI(\"http://\" + list[i]));\n        }\n        return clients;\n    }"}
{"question": "public override void OnWeiboException(WeiboException e)\n{\n    Toast.MakeText(LoginActivity.this, \"Auth exception : \" + e.Message, ToastLength.Long).Show();\n    ProgressDialogUtils.Dismiss();\n}", "answer": "@Override\n        public void onWeiboException(WeiboException e) {\n            Toast.makeText(LoginActivity.this, \n                    \"Auth exception : \" + e.getMessage(), Toast.LENGTH_LONG).show();\n            ProgressDialogUtils.dismiss();\n        }"}
{"question": "public override Dictionary<int, long> Call()\n{\n    LOGGER.Info($\"Sum on {Instance.GetCluster().GetLocalMember()}\");\n    return Impl.MiniCube == null ? null : Impl.MiniCube.Count(indName, groupDimName, filterDims);\n}", "answer": "@Override\n        public Map<Integer, Long> call() throws Exception {\n            \n            LOGGER.info(\"Sum on {}\", instance.getCluster().getLocalMember());\n            return impl.miniCube == null ? null : impl.miniCube.count(indName, groupDimName, filterDims);\n        }"}
{"question": "[Test]\npublic void TestMap()\n{\n    var map = AsMappable.AsMappable(new MyEntity(10, \"hello\")).ToMap();\n    Console.WriteLine(map);\n    Assert.That(map[\"num\"], Is.EqualTo(10));\n    Assert.That(map[\"str\"], Is.EqualTo(\"hello\"));\n}", "answer": "@Test\n\tpublic void testMap(){\n\t\tMap<String,?> map = AsMappable.asMappable(new MyEntity(10,\"hello\")).toMap();\n\t\tSystem.out.println(map);\n\t\tassertThat(map.get(\"num\"),equalTo(10));\n\t\tassertThat(map.get(\"str\"),equalTo(\"hello\"));\n\t}"}
{"question": "protected override void PrintEffectDetails()\n{\n    effectDetails.Append(string.Format(\"Video effect = {0}\\n\", GetVideoEffectName(effectIndex)));\n}", "answer": "@Override\n    protected void printEffectDetails() {\n        effectDetails.append(String.format(\"Video effect = %s\\n\", getVideoEffectName(effectIndex)));\n    }"}
{"question": "public override void Call(params object[] args)\n{\n    Socket.this.OnHeartbeat(args.Length > 0 ? (long)args[0] : 0);\n}", "answer": "@Override\n        public void call(Object... args) {\n            Socket.this.onHeartbeat(args.length > 0 ? (Long)args[0]: 0);\n        }"}
{"question": "private void OnError(Exception err)\n{\n    logger.Fine(string.Format(\"socket error {0}\", err));\n    Socket.PriorWebsocketSuccess = false;\n    this.Emit(EVENT_ERROR, err);\n    this.OnClose(\"transport error\", err);\n}", "answer": "private void onError(Exception err) {\n        logger.fine(String.format(\"socket error %s\", err));\n        Socket.priorWebsocketSuccess = false;\n        this.emit(EVENT_ERROR, err);\n        this.onClose(\"transport error\", err);\n    }"}
{"question": "List<string> FilterUpgrades(List<string> upgrades)\n{\n    List<string> filteredUpgrades = new List<string>();\n    foreach (string upgrade in upgrades)\n    {\n        if (this.transports.Contains(upgrade))\n        {\n            filteredUpgrades.Add(upgrade);\n        }\n    }\n    return filteredUpgrades;\n}", "answer": "List<String > filterUpgrades(List<String> upgrades) {\n        List<String> filteredUpgrades = new ArrayList<String>();\n        for (String upgrade : upgrades) {\n            if (this.transports.contains(upgrade)) {\n                filteredUpgrades.add(upgrade);\n            }\n        }\n        return filteredUpgrades;\n    }"}
{"question": "public override bool IsAuthorized(WebContext context, List<CommonProfile> profiles)\n{\n    context.SetResponseHeader(\"X-Content-Type-Options\", \"nosniff\");\n    return true;\n}", "answer": "@Override\n    public boolean isAuthorized(final WebContext context, final List<CommonProfile> profiles) throws HttpAction {\n        context.setResponseHeader(\"X-Content-Type-Options\", \"nosniff\");\n        return true;\n    }"}
{"question": "public override Contact Obtain(string md5)\n{\n    foreach (Contact c in contacts)\n    {\n        if (c.GetMd5() == md5) return c;\n    }\n    return null;\n}", "answer": "@Override public Contact obtain(String md5) {\n    for (Contact c : contacts) {\n      if (c.getMd5().equals(md5)) return c;\n    }\n    return null;\n  }"}
{"question": "public override IObservable<List<string>> Call()\n{\n    // Mock up loading delay.\n    Thread.Sleep(500);\n    return Observable.Return(data);\n}", "answer": "@Override public Observable<List<String>> call() {\n        // Mock up loading delay.\n        SystemClock.sleep(500);\n        return Observable.just(data);\n      }"}
{"question": "public override TokenStream TokenStream(string fieldName, TextReader reader)\n{\n    return CreateComponents(fieldName, reader).GetTokenStream();\n}", "answer": "@Override\n  public final TokenStream tokenStream(final String fieldName,\n      final Reader reader) {\n    return createComponents(fieldName, reader).getTokenStream();\n  }"}
{"question": "protected override void PostSubmit()\n{\n    CompareResultsByLinesInMemory(string.Join(\"\\n\", RESULTS), resultPath);\n}", "answer": "@Override\n\tprotected void postSubmit() throws Exception {\n\t\tcompareResultsByLinesInMemory(Joiner.on('\\n').join(RESULTS), resultPath);\n\t}"}
{"question": "private void StartThreadNotification()\n{\n    lock (mLock)\n    {\n        if (mRefreshThread != null && mRefreshThread.IsAlive && !mRefreshThread.IsEnded())\n        {\n            return;\n        }\n        mRefreshThread = new RefreshThread();\n        mRefreshThread.Start();\n    }\n}", "answer": "private void startThreadNotification() {\n\t\tsynchronized (mLock) {\n\t\t\tif (mRefreshThread != null && mRefreshThread.isAlive() && !mRefreshThread.isEnded()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmRefreshThread = new RefreshThread();\n\t\t\tmRefreshThread.start();\n\t\t}\n\t}"}
{"question": "public ResultSet ExecuteQuery()\n{\n    try\n    {\n        Command select = FromTokens();\n        return mayflyConnection.Query(select);\n    }\n    catch (MayflyException e)\n    {\n        throw e.AsSqlException();\n    }\n}", "answer": "public ResultSet executeQuery() throws SQLException {\n        try {\n            Command select = fromTokens();\n            return mayflyConnection.query(select);\n        } catch (MayflyException e) {\n            throw e.asSqlException();\n        }\n    }"}
{"question": "[TestMethod]\n[ExpectedException(typeof(AssertionError))]\npublic void Should_throw_error_if_actual_is_null()\n{\n    assertions = new ConcreteComparableAssert(null);\n    assertions.IsGreaterThan(other);\n}", "answer": "@Test\n  public void should_throw_error_if_actual_is_null() {\n    assertions = new ConcreteComparableAssert(null);\n    thrown.expect(AssertionError.class);\n    assertions.isGreaterThan(other);\n  }"}
{"question": "private void Error(Element e, string msg, params object[] args)\n{\n    messager.PrintMessage(Diagnostic.Kind.Error, string.Format(msg, args), e);\n}", "answer": "private void error(Element e, String msg, Object... args) {\n        messager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args), e);\n    }"}
{"question": "View Next(RecyclerView.Recycler recycler)\n{\n    if (mScrapList != null)\n    {\n        return NextFromLimitedList();\n    }\n    View view = recycler.GetViewForPosition(mCurrentPosition);\n    mCurrentPosition += mItemDirection;\n    return view;\n}", "answer": "View next(RecyclerView.Recycler recycler) {\n            if (mScrapList != null) {\n                return nextFromLimitedList();\n            }\n            final View view = recycler.getViewForPosition(mCurrentPosition);\n            mCurrentPosition += mItemDirection;\n            return view;\n        }"}
{"question": "protected override ICollection<Type> NodePlugins()\n{\n    return new List<Type> { typeof(ClusteringPlugin) };\n}", "answer": "@Override\n    protected Collection<Class<? extends Plugin>> nodePlugins() {\n      return Arrays.<Class<? extends Plugin>> asList(ClusteringPlugin.class);\n    }"}
{"question": "protected override ICollection<Type> TransportClientPlugins()\n{\n    return NodePlugins();\n}", "answer": "@Override\n    protected Collection<Class<? extends Plugin>> transportClientPlugins() {\n      return nodePlugins();\n    }"}
{"question": "public override bool IsTarget(object itemObject)\n{\n    return itemObject is string;\n}", "answer": "@Override\n    public boolean isTarget(Object itemObject) {\n        return itemObject instanceof String;\n    }"}
{"question": "public override SpinnerItem CreateAssemblyItem(ViewGroup parent)\n{\n    return new SpinnerItem(Android.Resource.Layout.SimpleListItem1, parent);\n}", "answer": "@Override\n    public SpinnerItem createAssemblyItem(ViewGroup parent) {\n        return new SpinnerItem(android.R.layout.simple_list_item_1, parent);\n    }"}
{"question": "public void AddArc(GraphNode<E> node, int distance, int terrain)\n{\n    arcList.Add(new Arc<E>(node, distance, terrain));\n}", "answer": "public void addArc(GraphNode<E> node, int distance, int terrain) {\n\t\tarcList.add(new Arc<E>(node, distance, terrain));\n\t}"}
{"question": "RegistrationApiResponse ReadJsonStream(Stream stream)\n{\n    using (var reader = new StreamReader(stream, Encoding.UTF8))\n    {\n        return ReadMessage(reader);\n    }\n}", "answer": "RegistrationApiResponse readJsonStream(InputStream stream) throws IOException {\n            JsonReader reader;\n            reader = new JsonReader(new InputStreamReader(stream, \"UTF-8\"));\n            try {\n                return readMessage(reader);\n            } finally {\n                reader.close();\n            }\n        }"}
{"question": "protected override void OnSizeChanged(int w, int h, int oldw, int oldh)\n{\n    base.OnSizeChanged(w, h, oldw, oldh);\n    mWidth = h > w ? w : h;\n    mHeight = h > w ? h : w;\n    mRect = new RectangleF(0, 0, mWidth, mWidth);\n}", "answer": "@Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        mWidth = h > w ? w : h;\n        mHeight = h > w ? h : w;\n        mRect = new RectF(0, 0, mWidth, mWidth);\n    }"}
{"question": "public static synchronized void Reload()\n{\n    map = new Dictionary<Type, object>();\n    customProperties = LoadFile(CUSTOM_TUNING_FILE_NAME);\n    defaultProperties = LoadFile(DEFAULT_TUNING_FILE_NAME);\n}", "answer": "public static synchronized void reload() {\n    map = new HashMap<Class<?>, Object>();\n    customProperties = loadFile(CUSTOM_TUNING_FILE_NAME);\n    defaultProperties = loadFile(DEFAULT_TUNING_FILE_NAME);\n  }"}
{"question": "public void AddCourses(List<Course> courses)\n{\n    if (courses != null)\n    {\n        SQLiteDatabase courseDatabase = GetWritableDatabase();\n        foreach (Course course in courses)\n        {\n            AddCourse(courseDatabase, course);\n        }\n        courseDatabase.Close();\n    }\n}", "answer": "public void addCourses(List<Course> courses) {\n\t\tif (courses != null) {\n\t\t\tSQLiteDatabase courseDatabase = getWritableDatabase();\n\t\t\tfor (Course course : courses) {\n\t\t\t\taddCourse(courseDatabase, course);\n\t\t\t}\n\t\t\tcourseDatabase.close();\n\t\t}\n\t}"}
{"question": "public List<long> CheckConflict(Course course)\n{\n    SQLiteDatabase courseDatabase = GetReadableDatabase();\n    List<long> retList = CheckConflict(courseDatabase, course);\n    courseDatabase.Close();\n    return retList;\n}", "answer": "public List<Long> checkConflict(@NonNull Course course) {\n\t\tSQLiteDatabase courseDatabase = getReadableDatabase();\n\t\tList<Long> retList = checkConflict(courseDatabase, course);\n\t\tcourseDatabase.close();\n\t\treturn retList;\n\t}"}
{"question": "public DateTime ParseDate(string str)\n{\n    try\n    {\n        return dateFormat.Parse(str);\n    }\n    catch (System.FormatException e)\n    {\n        throw new System.Exception(e.Message, e);\n    }\n}", "answer": "public Date parseDate(String str) {\n    try {\n      return dateFormat.parse(str);\n    } catch (java.text.ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }"}
{"question": "public string EscapeString(string str)\n{\n    return System.Web.HttpUtility.UrlEncode(str).Replace(\"+\", \"%20\");\n}", "answer": "public String escapeString(String str) {\n    try {\n      return URLEncoder.encode(str, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n    } catch (UnsupportedEncodingException e) {\n      return str;\n    }\n  }"}
{"question": "private void UpdateParamsForAuth(string[] authNames, List<Pair> queryParams, Dictionary<string, string> headerParams)\n{\n    foreach (string authName in authNames)\n    {\n        Authentication auth = authentications[authName];\n        if (auth == null) throw new Exception(\"Authentication undefined: \" + authName);\n        auth.ApplyToParams(queryParams, headerParams);\n    }\n}", "answer": "private void updateParamsForAuth(String[] authNames, List<Pair> queryParams, Map<String, String> headerParams) {\n    for (String authName : authNames) {\n      Authentication auth = authentications.get(authName);\n      if (auth == null) throw new RuntimeException(\"Authentication undefined: \" + authName);\n      auth.applyToParams(queryParams, headerParams);\n    }\n  }"}
{"question": "[Test]\npublic void NoChanges()\n{\n    List<Todo> original = BuildTodoList();\n    List<Todo> modified = BuildTodoList();\n\n    Patch diff = Diff.Diff(original, modified);\n    Assert.AreEqual(0, diff.Size());\n}", "answer": "@Test\n\tpublic void noChanges() throws Exception {\n\t\tList<Todo> original = buildTodoList();\n\t\tList<Todo> modified = buildTodoList();\n\n\t\tPatch diff = Diff.diff(original, modified);\n\t\tassertEquals(0, diff.size());\n\t}"}
{"question": "protected override void OnPreExecute()\n{\n    dialog = ProgressDialog.Show(context, \"\", context.GetString(Resource.String.msg_personal_loading));\n    dialog.Cancelable = true;\n}", "answer": "@Override\n\tprotected void onPreExecute() {\n\t\tdialog = ProgressDialog.show(context, \"\", context.getString(R.string.msg_personal_loading));\n\t\tdialog.setCancelable(true);\n\t}"}
{"question": "public static LongBuffer Allocate(int capacity)\n{\n    if (capacity < 0)\n    {\n        throw new ArgumentException();\n    }\n    return BufferFactory.NewLongBuffer(capacity);\n}", "answer": "public static LongBuffer allocate(int capacity) {\n        if (capacity < 0) {\n            throw new IllegalArgumentException();\n        }\n        return BufferFactory.newLongBuffer(capacity);\n    }"}
{"question": "public override object Answer(InvocationOnMock invocation)\n{\n    IEnumerable<string> i = (IEnumerable<string>)invocation.GetArguments()[0];\n    foreach (string key in i)\n    {\n        removed.Add(key);\n    }\n    return null;\n}", "answer": "@Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        Iterable<String> i = (Iterable) invocation.getArguments()[0];\n        for (String key : i) {\n          removed.add(key);\n        }\n        return null;\n      }"}
{"question": "private string ToKey(string str)\n{\n    if (str == null || str.Length < 4)\n        throw new InvalidCommandNameException(\"Error: bad syntax\");\n\n    return str.Substring(0, 4).ToUpper();\n}", "answer": "private String toKey(String string) throws InvalidCommandNameException\n\t{\n\t\tif (string == null || string.length() < 4)\n\t\t\tthrow new InvalidCommandNameException(\"Error: bad syntax\");\n\n\t\treturn string.substring(0, 4).toUpperCase(Locale.ENGLISH);\n\t}"}
{"question": "public void Free()\n{\n    mStackSize--;\n    if (mStackSize < 0)\n    {\n        throw new IndexOutOfRangeException(mStackSize.ToString());\n    }\n}", "answer": "public void free() {\n            mStackSize--;\n            if (mStackSize < 0) {\n                throw new ArrayIndexOutOfBoundsException(mStackSize);\n            }\n        }"}
{"question": "public long TestInline()\n{\n    long l = DateTime.Now.Ticks;\n    F();\n    return DateTime.Now.Ticks - l;\n}", "answer": "public long testInline() {\n\t\tlong l = System.nanoTime();\n\t\tf();\n\t\treturn System.nanoTime() - l;\n\t}"}
{"question": "private static bool IsNumber(string source)\n{\n    try\n    {\n        double.Parse(source);\n    }\n    catch (FormatException)\n    {\n        return false;\n    }\n    return true;\n}", "answer": "private static boolean isNumber(String source) {\n        try {\n            Double.parseDouble(source);\n        } catch (NumberFormatException nfe) {\n            return false;\n        }\n        return true;\n    }"}
{"question": "public int ReadLen()\n{\n    string line = in.ReadLine();\n    return line == null ? 0 : int.Parse(line);\n}", "answer": "public int readLen() throws IOException {\n        final String line = in.readLine();\n        return line == null ? 0 : Integer.parseInt(line);\n    }"}
{"question": "public void WriteLen(int len)\n{\n    out.Write(\"\" + len);\n    out.WriteLine();\n    out.Flush();\n}", "answer": "public void writeLen(int len) throws IOException {\n        out.write(\"\" + len);\n        out.newLine();\n        out.flush();\n    }"}
{"question": "public override Type BeanType() {\n    return typeof(IborFixingDepositTemplate);\n}", "answer": "@Override\n    public Class<? extends IborFixingDepositTemplate> beanType() {\n      return IborFixingDepositTemplate.class;\n    }"}
{"question": "protected override void PropertySet(object bean, string propertyName, object newValue, bool quiet)\n{\n    MetaProperty(propertyName);\n    if (quiet)\n    {\n        return;\n    }\n    throw new NotSupportedException(\"Property cannot be written: \" + propertyName);\n}", "answer": "@Override\n    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {\n      metaProperty(propertyName);\n      if (quiet) {\n        return;\n      }\n      throw new UnsupportedOperationException(\"Property cannot be written: \" + propertyName);\n    }"}
{"question": "[Test]\npublic void AreaIsAlwaysPositive(){\n    qt()\n        .ForAll(AnyCylinder())\n        .Assuming(cylinder => cylinder.Height > 0 && cylinder.Radius > 0)\n        .Check(cylinder => cylinder.Area().CompareTo(BigDecimal.Zero) > 1000);\n}", "answer": "@Test\npublic void areaIsAlwaysPositive() {\n      qt()\n      .forAll(anyCylinder())\n      .assuming(cylinder -> cylinder.height > 0 && cylinder.radius > 0)\n      .check(cylinder -> cylinder.area().compareTo(BigDecimal.ZERO) > 1000); \n    }"}
{"question": "protected override void AttachEntity(Attribute entity)\n{\n    base.AttachEntity(entity);\n    entity.__setDaoSession(daoSession);\n}", "answer": "@Override\n    protected void attachEntity(Attribute entity) {\n        super.attachEntity(entity);\n        entity.__setDaoSession(daoSession);\n    }"}
{"question": "public override void ReadEntity(DbDataReader cursor, Attribute entity, int offset)\n{\n    entity.Id = cursor.IsDBNull(offset + 0) ? null : (long?)cursor.GetInt64(offset + 0);\n    entity.Value = cursor.IsDBNull(offset + 1) ? null : cursor.GetString(offset + 1);\n    entity.ValueLocal = cursor.IsDBNull(offset + 2) ? null : cursor.GetString(offset + 2);\n    entity.AttributableId = cursor.IsDBNull(offset + 3) ? null : (long?)cursor.GetInt64(offset + 3);\n    entity.AttributableType = cursor.IsDBNull(offset + 4) ? null : cursor.GetString(offset + 4);\n    entity.AttributeTypeId = cursor.IsDBNull(offset + 5) ? null : (long?)cursor.GetInt64(offset + 5);\n}", "answer": "@Override\n    public void readEntity(Cursor cursor, Attribute entity, int offset) {\n        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));\n        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));\n        entity.setValueLocal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));\n        entity.setAttributableId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));\n        entity.setAttributableType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));\n        entity.setAttributeTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));\n     }"}
{"question": "public override void WriteTo(StreamOutput out)\n{\n    base.WriteTo(out);\n    AllocationCommands.WriteTo(commands, out);\n    out.WriteBoolean(dryRun);\n}", "answer": "@Override\n    public void writeTo(StreamOutput out) throws IOException {\n        super.writeTo(out);\n        AllocationCommands.writeTo(commands, out);\n        out.writeBoolean(dryRun);\n    }"}
{"question": "public override int GetHashCode()\n{\n    return base.GetHashCode() ^ (value?.GetHashCode() ?? 0);\n}", "answer": "@Override\n    public int hashCode() {\n        return super.hashCode() ^ Objects.hashCode(value);\n    }"}
{"question": "public override CommentedConfigurationNode CreateEmptyNode(ConfigurationOptions options)\n{\n    options = options.SetAcceptedTypes(new HashSet<Type> { typeof(Dictionary<,>), typeof(List<>), typeof(double), typeof(float),\n        typeof(long), typeof(int), typeof(bool), typeof(string), typeof(byte[]) });\n    return SimpleCommentedConfigurationNode.Root(options);\n}", "answer": "@Override\n    public CommentedConfigurationNode createEmptyNode(ConfigurationOptions options) {\n        options = options.setAcceptedTypes(ImmutableSet.of(Map.class, List.class, Double.class, Float.class,\n                Long.class, Integer.class, Boolean.class, String.class, byte[].class));\n        return SimpleCommentedConfigurationNode.root(options);\n    }"}
{"question": "public override void PreloadBitmap(CacheUrlKey key)\n{\n    var loader = new BitmapLoader(mLoaderConfig, key, AccessPolicy.PRE_FETCH, null);\n    BitmapCacheBase.SubmitInExecutor(loader);\n}", "answer": "@Override\n    public void preloadBitmap(@NonNull CacheUrlKey key) {\n        final BitmapLoader loader = new BitmapLoader(mLoaderConfig, key, AccessPolicy.PRE_FETCH,\n                null);\n        BitmapCacheBase.submitInExecutor(loader);\n    }"}
{"question": "void FlagStartAsync(string operation)\n{\n    if (mAsyncInProgress) throw new InvalidOperationException(\"Can't start async operation (\" +\n            operation + \") because another async operation(\" + mAsyncOperation + \") is in progress.\");\n    mAsyncOperation = operation;\n    mAsyncInProgress = true;\n    Logger.D(\"Starting async operation: \", operation);\n}", "answer": "void flagStartAsync(String operation) {\n        if (mAsyncInProgress) throw new IllegalStateException(\"Can't start async operation (\" +\n                operation + \") because another async operation(\" + mAsyncOperation + \") is in progress.\");\n        mAsyncOperation = operation;\n        mAsyncInProgress = true;\n        Logger.d(\"Starting async operation: \", operation);\n    }"}
{"question": "public void OnLoadingDrawableSet(Drawable imageDrawable)\n{\n    if (null != imageDrawable)\n    {\n        mRotationPivotX = (int)Math.Round(imageDrawable.IntrinsicWidth / 2f);\n        mRotationPivotY = (int)Math.Round(imageDrawable.IntrinsicHeight / 2f);\n    }\n}", "answer": "public void onLoadingDrawableSet(Drawable imageDrawable) {\n\t\tif (null != imageDrawable) {\n\t\t\tmRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);\n\t\t\tmRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);\n\t\t}\n\t}"}
{"question": "public static PhoneType ValueOf(Google.Protobuf.Reflection.EnumValueDescriptor desc)\n{\n    if (desc.Type != GetDescriptor())\n    {\n        throw new System.ArgumentException(\"EnumValueDescriptor is not for this type.\");\n    }\n    return VALUES[desc.Index];\n}", "answer": "public static PhoneType valueOf(\n          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {\n        if (desc.getType() != getDescriptor()) {\n          throw new java.lang.IllegalArgumentException(\n            \"EnumValueDescriptor is not for this type.\");\n        }\n        return VALUES[desc.getIndex()];\n      }"}
{"question": "private void EnableFields(Control[] controls, bool b)\n{\n    foreach (Control control in controls)\n    {\n        control.Enabled = b;\n    }\n}", "answer": "private void enableFields(Component[] components, boolean b)\n    {\n        for (Component component : components)\n        {\n            component.setEnabled(b) ;\n        }\n    }"}
{"question": "protected override bool AreContentsTheSame(GroupToggle item1, GroupToggle item2)\n{\n    Group group1 = item1.GetGroup();\n    Group group2 = item2.GetGroup();\n    return (group1.Id().Equals(group2.Id())\n        && group1.Label().Equals(group2.Label()));\n}", "answer": "@Override\n    protected boolean areContentsTheSame(GroupToggle item1, GroupToggle item2) {\n        Group group1 = item1.getGroup();\n        Group group2 = item2.getGroup();\n        return (group1.id().equals(group2.id())\n            && group1.label().equals(group2.label()));\n    }"}
{"question": "public override bool EnterPageSelector(CssPageSelectorNode node)\n{\n    buffer.Append(node.GetType().ToString());\n    foreach (CssValueNode param in node.GetParameters())\n    {\n        buffer.Append(' ');\n        buffer.Append(param.GetValue());\n    }\n    return true;\n}", "answer": "@Override\n  public boolean enterPageSelector(CssPageSelectorNode node) {\n    buffer.append(node.getType().toString());\n    for (CssValueNode param : node.getParameters()) {\n      buffer.append(' ');\n      buffer.append(param.getValue());\n    }\n    return true;\n  }"}
{"question": "private void HandleFault(FaultEvent @event)\n{\n    Log(\"FaultEvent: op=\" + @event.token.op + \" detail=\" + @event.fault.faultDetail + \" string=\" + @event.fault.faultString);\n    Assert.Fail(\"there shouldn't be any fault \" + @event.fault.ToString());\n    Assert.HasPendingTest = false;\n}", "answer": "private function handleFault(event:FaultEvent):void\n        {   \n            log(\"FaultEvent: op=\" + event.token.op + \" detail=\" + event.fault.faultDetail + \" string=\" + event.fault.faultString);\n            Assert.fail(\"there shouldn't be any fault \" + event.fault.toString());\n            Assert.hasPendingTest = false;    \n        }"}
{"question": "protected override MessageApi.SendMessageResult DoInBackground(params object[] args)\n{\n    var messageResult = WearableClass.MessageApi.SendMessage(googleApiClient, id, path, payload).Await();\n    return messageResult;\n}", "answer": "@Override\n    protected MessageApi.SendMessageResult doInBackground(Object... args) {\n\n        final MessageApi.SendMessageResult messageResult =\n                Wearable.MessageApi.sendMessage(googleApiClient, id, path, payload).await();\n\n        return messageResult;\n    }"}
{"question": "public override void Virtualize(OVXSwitch sw, List<OFAction> approvedActions, OVXMatch match)\n{\n    approvedActions.Add(this);\n}", "answer": "@Override\n    public void virtualize(final OVXSwitch sw,\n            final List<OFAction> approvedActions, final OVXMatch match)\n            throws ActionVirtualizationDenied {\n        approvedActions.add(this);\n    }"}
{"question": "public override void WriteObject(BufferOutput buffer, Serializer serializer)\n{\n    buffer.WriteLong(primitive);\n    serializer.WriteObject(object, buffer);\n    buffer.WriteUTF8(str);\n}", "answer": "@Override\n    public void writeObject(BufferOutput<?> buffer, Serializer serializer) {\n      buffer.writeLong(primitive);\n      serializer.writeObject(object, buffer);\n      buffer.writeUTF8(string);\n    }"}
{"question": "public bool Implies(ProtectionDomain domain, Permission permission)\n{\n    CodeSource codeSource = domain.GetCodeSource();\n    return codeSource != null && codeSource.Equals(ourCodeSource) || policy.Implies(domain, permission);\n}", "answer": "public boolean implies(final ProtectionDomain domain, final Permission permission) {\n        final CodeSource codeSource = domain.getCodeSource();\n        return codeSource != null && codeSource.equals(ourCodeSource) || policy.implies(domain, permission);\n    }"}
