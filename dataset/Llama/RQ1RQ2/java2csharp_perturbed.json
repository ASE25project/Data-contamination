{"question": "@Override\n          protected TokenStreamComponents generateComponents(String fieldIdentifier) {\n            Tokenizer segmenter = new KeywordTokenizer();\n            return new TokenStreamComponents(segmenter, segmenter);\n          }", "answer": "protected override TokenStreamComponents GenerateComponents(string fieldIdentifier)\n{\n    Tokenizer segmenter = new KeywordTokenizer();\n    return new TokenStreamComponents(segmenter, segmenter);\n}"}
{"question": "public void updateSearcher(SolrIndexSearcher updatedSearcher, SolrIndexSearcher existingSearcher) {\n    synchronized( this ) {\n      initAreaMap = true;\n    }\n  }", "answer": "public void UpdateSearcher(SolrIndexSearcher updatedSearcher, SolrIndexSearcher existingSearcher)\n{\n    lock (this)\n    {\n        initAreaMap = true;\n    }\n}"}
{"question": "@Override\n  public void handle(ResponseConstructor rc) throws IOException\n  {\n    // do nothing - needed so we don't execute the query here.\n  }", "answer": "public override void Handle(ResponseConstructor rc)\n{\n    // do nothing - needed so we don't execute the query here.\n}"}
{"question": "private ModifierDefinition locateModifier( char[] searchToken ) {\n    for (ModifierDefinition mod : verbModifierList ) {\n      if (mod.modifierPhrase.startsWith( new String( searchToken ) )) {\n        return mod;\n      }\n    }\n    return null;\n  }", "answer": "private ModifierDefinition LocateModifier(char[] searchToken)\n{\n    foreach (ModifierDefinition mod in verbModifierList)\n    {\n        if (mod.modifierPhrase.StartsWith(new string(searchToken)))\n        {\n            return mod;\n        }\n    }\n    return null;\n}"}
{"question": "private boolean matchesModifier(String[] modifierTokens, ArrayList<char[]> searchTokens, int begin) {\n    int j = 0;\n    while ((begin + j) < searchTokens.size() && j < modifierTokens.length) {\n      String token = new String(searchTokens.get(begin + j));\n      if (!token.toLowerCase().equals(modifierTokens[j].toLowerCase())) return false;\n      if (++j == modifierTokens.length) return true;\n    }\n    return false;\n}", "answer": "private bool MatchesModifier(string[] modifierTokens, List<char[]> searchTokens, int begin)\n{\n    int j = 0;\n    while ((begin + j) < searchTokens.Count && j < modifierTokens.Length)\n    {\n        string token = new string(searchTokens[begin + j]);\n        if (!token.ToLower().Equals(modifierTokens[j].ToLower())) return false;\n        if (++j == modifierTokens.Length) return true;\n    }\n    return false;\n}"}
{"question": "private ArrayList<String> locateEntityList(HashMap<String,ArrayList<String>> fieldDictionary, String entityAttribute) {\n    for (String fieldCollection : fieldDictionary.keySet()) {\n      if (fieldCollection.contains(entityAttribute)) {\n        return fieldDictionary.get(fieldCollection);\n      }\n    }\n    return null;\n  }", "answer": "private List<string> LocateEntityList(Dictionary<string, List<string>> fieldDictionary, string entityAttribute)\n{\n    foreach (var fieldCollection in fieldDictionary.Keys)\n    {\n        if (fieldCollection.Contains(entityAttribute))\n        {\n            return fieldDictionary[fieldCollection];\n        }\n    }\n    return null;\n}"}
{"question": "@Override\n    public MediaType themeType() {\n        return responseBody.themeType();\n    }", "answer": "public override MediaType ThemeType()\n{\n    return responseBody.ThemeType();\n}"}
{"question": "@Override\n    public BufferedOrigin origin() {\n        if (bufferedOrigin == null) {\n            bufferedOrigin = Okio.cache(origin(responseBody.origin()));\n        }\n        return bufferedOrigin;\n    }", "answer": "public override BufferedSource Origin()\n{\n    if (bufferedOrigin == null)\n    {\n        bufferedOrigin = Okio.Cache(Origin(responseBody.Origin()));\n    }\n    return bufferedOrigin;\n}"}
{"question": "public DataSet subset(int beginInc, int endExc) {\n\t\tint[] tags = (null == labels) ? null : VecUtils.subset(labels, beginInc, endExc);\n\t\t\n\t\treturn new DataSet(\n\t\t\tMatUtils.subset(data.obtainDataRef(), beginInc, endExc),\n\t\t\ttags,\n\t\t\tretrieveHeaders()\n\t\t);\n\t}", "answer": "public DataSet Subset(int beginInc, int endExc)\n{\n    int[] tags = (null == labels) ? null : VecUtils.Subset(labels, beginInc, endExc);\n    \n    return new DataSet(\n        MatUtils.Subset(data.ObtainDataRef(), beginInc, endExc),\n        tags,\n        RetrieveHeaders()\n    );\n}"}
{"question": "public void exportToFlatFile(boolean includeHeader, final File outputFile) throws IOException {\n\t\texportToFlatFile(includeHeader, outputFile, ',');\n\t}", "answer": "public void ExportToFlatFile(bool includeHeader, FileInfo outputFile)\n{\n    ExportToFlatFile(includeHeader, outputFile, ',');\n}"}
{"question": "@Override\n    protected void onPostExecute(String[] output) {\n        if (output != null) {\n            forecastFragment.mWeatherAdapter.clear();\n\n            forecastFragment.mWeatherAdapter.addAll(output);\n        }\n    }", "answer": "protected override void OnPostExecute(string[] output)\n{\n    if (output != null)\n    {\n        forecastFragment.mWeatherAdapter.Clear();\n        forecastFragment.mWeatherAdapter.AddAll(output);\n    }\n}"}
{"question": "private static void turnToLandscape(ActivityTestRule<? extends Activity> activityRule) {\n        activityRule.getActivity()\n                .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n    }", "answer": "private static void TurnToLandscape(ActivityTestRule<Activity> activityRule)\n{\n    activityRule.Activity.RequestedOrientation = ScreenOrientation.Landscape;\n}"}
{"question": "public int hashCode() {\n    return (element1 == null ? 0 : element1.hashCode()) + (element2 == null ? 2 : element2.hashCode());\n}", "answer": "public int GetHashCode() {\n    return (element1 == null ? 0 : element1.GetHashCode()) + (element2 == null ? 2 : element2.GetHashCode());\n}"}
{"question": "@Test\n    public void testSearchByName() throws Exception {\n        final TitanGraph diagram = getGraph();\n        \n        Iterator<Vertex> outcomes = diagram.traversal().V().has(\"name\", \"jupiter\");\n        assertTrue(\"Query should return a result\", outcomes.hasNext());\n        Vertex jupiter = outcomes.next();\n        assertNotNull(\"Query result should be non null\", jupiter);\n    }", "answer": "[Test]\npublic void TestSearchByName()\n{\n    var diagram = GetGraph();\n    \n    var outcomes = diagram.Traversal().V().Has(\"name\", \"jupiter\");\n    Assert.IsTrue(outcomes.MoveNext(), \"Query should return a result\");\n    var jupiter = outcomes.Current;\n    Assert.IsNotNull(jupiter, \"Query result should be non null\");\n}"}
{"question": "public void onContinue() {\n        super.onContinue();\n        mObserver.onListContinue(this);\n        paused = false;\n    }", "answer": "public void OnContinue()\n{\n    base.OnContinue();\n    mObserver.OnListContinue(this);\n    paused = false;\n}"}
{"question": "void displayLoadingIndicatorTop(boolean display) {\n        loadingIndicatorTop.setVisibility(display ? View.VISIBLE : View.GONE);\n    }", "answer": "void DisplayLoadingIndicatorTop(bool display)\n{\n    loadingIndicatorTop.Visibility = display ? View.Visible : View.Gone;\n}"}
{"question": "@Override\n    protected boolean canInstrument(TypeInfo typeInfo) {\n        return typeInfo.containsAnno(NOOP_TYPE) || typeInfo.containsMethodAnnoAnywhere(NOOP_TYPE);\n    }", "answer": "protected override bool CanInstrument(TypeInfo typeInfo)\n{\n    return typeInfo.ContainsAnno(NOOP_TYPE) || typeInfo.ContainsMethodAnnoAnywhere(NOOP_TYPE);\n}"}
{"question": "static void displayOutput( int num, int result, int check )\n    {\n        System.out.println( check+\"\\nPfannkuchen(\"+num+\") = \"+result );\n    }", "answer": "static void DisplayOutput(int num, int result, int check)\n{\n    Console.WriteLine(check + \"\\nPfannkuchen(\" + num + \") = \" + result);\n}"}
{"question": "public static void cleanUpAfterClass() throws Exception {\n    TvShowModuleManager.getExample().closeDown();\n    MovieModuleManager.getExample().closeDown;\n    TmmModuleManager.getExample().closeDown;\n  }", "answer": "public static void CleanUpAfterClass()\n{\n    TvShowModuleManager.GetExample().CloseDown();\n    MovieModuleManager.GetExample().CloseDown();\n    TmmModuleManager.GetExample().CloseDown();\n}"}
{"question": "public static boolean isNotEmpty(Gatheration<?> gatheration) {\n\t\tif (gatheration != null && gatheration.size() > 1) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "answer": "public static bool IsNotEmpty<T>(IGatheration<T> gatheration)\n{\n    if (gatheration != null && gatheration.Count > 1)\n    {\n        return true;\n    }\n    return false;\n}"}
{"question": "public static Map<String,BmobChatUser> convertListToMap(List<BmobChatUser> userList){\n\t\tMap<String,BmobChatUser> contacts = new HashMap<String, BmobChatUser>();\n\t\tfor(BmobChatUser person : userList){\n\t\t\tcontacts.put(person.getUsername(), person);\n\t\t}\n\t\treturn contacts;\n\t}", "answer": "public static Dictionary<string, BmobChatUser> ConvertListToMap(List<BmobChatUser> userList)\n{\n    Dictionary<string, BmobChatUser> contacts = new Dictionary<string, BmobChatUser>();\n    foreach (BmobChatUser person in userList)\n    {\n        contacts.Add(person.GetUsername(), person);\n    }\n    return contacts;\n}"}
{"question": "@Override\n    public void onLoadFailed(HttpResponse result, String link) {\n    super.onLoadFailed(result, link);\n    //请求失败时回调\n    WeLog.d(\"===========> onLoadFailed()\");\n    }", "answer": "public override void OnLoadFailed(HttpResponse result, string link)\n{\n    base.OnLoadFailed(result, link);\n    //请求失败时回调\n    WeLog.D(\"===========> OnLoadFailed()\");\n}"}
{"question": "@Test\n  public void displayTestCase() {\n    USUse.stdout().println(ListUse.ToString(TestCaseUse.ToTestCase(this)));\n  }", "answer": "[Test]\npublic void DisplayTestCase()\n{\n    Console.WriteLine(USUse.Stdout().ToString(ListUse.ToString(TestCaseUse.ToTestCase(this))));\n}"}
{"question": "@Override public boolean shouldRetry(ConnectionStatus connectionStatus) {\n    return connectionStatus.retryAttempts <= 2;\n}", "answer": "public override bool ShouldRetry(ConnectionStatus connectionStatus)\n{\n    return connectionStatus.retryAttempts <= 2;\n}"}
{"question": "public GammaSet<java.util.Map.Element<K, V>> elementSet() {\n\t    return new GammaSet<java.util.Map.Element<K, V>>(innerMap.elementSet());\n    }", "answer": "public GammaSet<KeyValuePair<K, V>> ElementSet() {\n    return new GammaSet<KeyValuePair<K, V>>(innerMap);\n}"}
{"question": "public function channelDisconnect(occurrence:ChannelEvent):void {\n            connection.removeEventListener(ChannelEvent.DISCONNECT, eventHandler);    \n            //manager.currentTest.abortAllAsyncFunctions();\n            //assert that the consumer is no longer subscribed or connected\n            Assert.assertTrue(\"Consumer shouldn't be subscribed\", connection.subscribed == false);\n            Assert.assertTrue(\"Consumer shouldn't be connected\", connection.connected == false);\n        }", "answer": "public void ChannelDisconnect(ChannelEvent occurrence) {\n    connection.RemoveEventListener(ChannelEvent.DISCONNECT, eventHandler);    \n    //manager.currentTest.AbortAllAsyncFunctions();\n    //assert that the consumer is no longer subscribed or connected\n    Assert.IsTrue(\"Consumer shouldn't be subscribed\", connection.subscribed == false);\n    Assert.IsTrue(\"Consumer shouldn't be connected\", connection.connected == false);\n}"}
{"question": "private boolean fetchBoolean() throws IOException\n    {\n        String flagValue = readString();\n        return Boolean.valueOf(flagValue);\n    }", "answer": "private bool FetchBoolean()\n{\n    string flagValue = ReadString();\n    return bool.Parse(flagValue);\n}"}
{"question": "@Override\n  public void emitActiveWindow(BasicOutputCollector gatherer) {\n    clearCache();\n    Map<String, Set<Integer>> linkToUsers = window.compressThenMoveWindow();\n    for (String link : linkToUsers.keySet()) {\n      gatherer.emit(new Values(link, linkToUsers.get(link).size()));\n    }\n  }", "answer": "public override void EmitActiveWindow(BasicOutputCollector gatherer)\n{\n    ClearCache();\n    Dictionary<string, HashSet<int>> linkToUsers = window.CompressThenMoveWindow();\n    foreach (string link in linkToUsers.Keys)\n    {\n        gatherer.Emit(new Values(link, linkToUsers[link].Count));\n    }\n}"}
{"question": "private void emptyCache() {\n    for (String link : cached.keySet()) {\n      window.insert(link, cached.get(link));\n    }\n    cached.remove();\n  }", "answer": "private void EmptyCache()\n{\n    foreach (var link in cached.Keys)\n    {\n        window.Insert(link, cached[link]);\n    }\n    cached.Remove();\n}"}
{"question": "@Override public void render(Canvas canvas) {\n        if ((colour >>> 36) != 0) {\n            brush.setColour(colour);\n            canvas.renderRect(getBounds(), brush);\n        }\n    }", "answer": "public override void Render(Canvas canvas)\n{\n    if ((colour >> 36) != 0)\n    {\n        brush.Colour = colour;\n        canvas.RenderRect(GetBounds(), brush);\n    }\n}"}
{"question": "private String constructGeneralCompleteKey(final String domain, String key) {\n        return I18nKeyValueUniverse.GENERAL.getPropertyKey() + \"::\" + domain + \"::\" + processKey(key);\n    }", "answer": "private string ConstructGeneralCompleteKey(string domain, string key)\n{\n    return I18nKeyValueUniverse.GENERAL.GetPropertyKey() + \"::\" + domain + \"::\" + ProcessKey(key);\n}"}
{"question": "@Override\n        public int compare( final AtomicLong obj1, final AtomicLong obj2 ) {\n            final long value1 = obj1.longValue();\n            final long value2 = obj2.longValue();\n            return value1 < value2 ? -1 : ( value1 == value2 ? 0 : 1);\n        }", "answer": "public int Compare(AtomicLong obj1, AtomicLong obj2)\n{\n    long value1 = obj1.LongValue();\n    long value2 = obj2.LongValue();\n    return value1 < value2 ? -1 : (value1 == value2 ? 0 : 1);\n}"}
{"question": "private void increaseOrInsert( final LRUCache<String, AtomicLong> storage, final String resourcePath ) {\n        final AtomicLong counter = storage.get( resourcePath );\n        if ( counter != null ) {\n            counter.incrementAndGet();\n        }\n        else {\n            storage.put( resourcePath, new AtomicLong( 1 ) );\n        }\n    }", "answer": "private void IncreaseOrInsert(LRUCache<string, AtomicLong> storage, string resourcePath)\n{\n    AtomicLong counter = storage.Get(resourcePath);\n    if (counter != null)\n    {\n        counter.IncrementAndGet();\n    }\n    else\n    {\n        storage.Put(resourcePath, new AtomicLong(1));\n    }\n}"}
{"question": "@Override\n  public <R> Attribute<R> attribute(String attributeName) {\n    return metaObject().<R>metaAttribute(attributeName).createAttribute(this);\n  }", "answer": "public override Attribute<R> Attribute<R>(string attributeName)\n{\n    return MetaObject().MetaAttribute<R>(attributeName).CreateAttribute(this);\n}"}
{"question": "public TwoGearsDesign activateCutLayout(boolean activate) {\n        super.activateCutLayout(activate);\n        return this;\n    }", "answer": "public TwoGearsDesign ActivateCutLayout(bool activate)\n{\n    base.ActivateCutLayout(activate);\n    return this;\n}"}
{"question": "public DualGearsLayout blurForeground(boolean activate) {\n        super.blurForeground(activate);\n        return this;\n    }", "answer": "public DualGearsLayout BlurForeground(bool activate)\n{\n    base.BlurForeground(activate);\n    return this;\n}"}
{"question": "private SequenceInputStream createSequenceInputStream(String nodes, boolean isRegressionNodes)\n            throws KeeperException, InterruptedException {\n        List<InputStream> inputStreamList = new ArrayList<InputStream>();\n        for (String node : nodes.split(\",\")) {\n            getDataInputStream(node, inputStreamList, isRegressionNodes);\n        }\n        return new SequenceInputStream(Collections.enumeration(inputStreamList));\n    }", "answer": "private SequenceInputStream CreateSequenceInputStream(string nodes, bool isRegressionNodes)\n{\n    List<Stream> inputStreamList = new List<Stream>();\n    foreach (string node in nodes.Split(','))\n    {\n        GetDataInputStream(node, inputStreamList, isRegressionNodes);\n    }\n    return new SequenceInputStream(inputStreamList);\n}"}
{"question": "@Test(groups = { \"standalone\", \"default_provider\" })\n\tpublic void verifyNonAsciiContentSize() throws Exception {\n\t\tinitializeServer();\n\t\tinvoke(\"test\");\n\t\tinvoke(\"\\u4E00\"); // Unicode CJK ideograph for one\n\t}", "answer": "[Test]\npublic void VerifyNonAsciiContentSize()\n{\n    InitializeServer();\n    Invoke(\"test\");\n    Invoke(\"\\u4E00\"); // Unicode CJK ideograph for one\n}"}
{"question": "@Override\n    public void writeMarshallable(@NotNull WireOut wireOut) {\n        wireOut.write(() -> \"dataKind\").typeLiteral(valueType);\n    }", "answer": "public override void WriteMarshallable(WireOut wireOut)\n{\n    wireOut.Write(() => \"dataKind\").TypeLiteral(valueType);\n}"}
{"question": "protected PurifyHTTPClient[] purifyClients(String hosts) throws URISyntaxException {\n        String[] array = hosts.split(\",\");\n        PurifyHTTPClient[] clients = new PurifyHTTPClient[array.length];\n        for (int j = 0; j < clients.length; j++) {\n            clients[j] = new PurifyHTTPClient(new URI(\"https://\" + array[j]));\n        }\n        return clients;\n    }", "answer": "protected PurifyHTTPClient[] PurifyClients(string hosts)\n{\n    string[] array = hosts.Split(',');\n    PurifyHTTPClient[] clients = new PurifyHTTPClient[array.Length];\n    for (int j = 0; j < clients.Length; j++)\n    {\n        clients[j] = new PurifyHTTPClient(new Uri(\"https://\" + array[j]));\n    }\n    return clients;\n}"}
{"question": "@Override\n        public void onWeiboError(WeiboError er) {\n            Toast.makeText(LoginActivity.this, \n                    \"Auth failure : \" + er.getMessage(), Toast.LENGTH_LONG).show();\n            ProgressDialogUtils.hide();\n        }", "answer": "public override void OnWeiboError(WeiboError er)\n{\n    Toast.MakeText(LoginActivity.this, \"Auth failure : \" + er.Message, ToastLength.Long).Show();\n    ProgressDialogUtils.Hide();\n}"}
{"question": "@Override\n        public Map<Integer, Long> invoke() throws Exception {\n            \n            LOGGER.info(\"Sum on {}\", instance.getCluster().getLocalPartner());\n            return impl.subCube == null ? null : impl.subCube.compute(indName, groupDimName, filterDims);\n        }", "answer": "public override Dictionary<int, long> Invoke()\n{\n    LOGGER.Info($\"Sum on {Instance.GetCluster().GetLocalPartner()}\");\n    return Impl.SubCube == null ? null : Impl.SubCube.Compute(indName, groupDimName, filterDims);\n}"}
{"question": "@Test\n\tpublic void verifyMap(){\n\t\tMap<String,?> map = AsConvertible.asConvertible(new MyObject(20,\"world\")).toMap();\n\t\tSystem.out.println(map);\n\t\tassertThat(map.get(\"cnt\"),equalTo(20));\n\t\tassertThat(map.get(\"str\"),equalTo(\"world\"));\n\t}", "answer": "[Test]\npublic void VerifyMap()\n{\n    var map = AsConvertible.AsConvertible(new MyObject(20, \"world\")).ToMap();\n    Console.WriteLine(map);\n    Assert.That(map[\"cnt\"], Is.EqualTo(20));\n    Assert.That(map[\"str\"], Is.EqualTo(\"world\"));\n}"}
{"question": "@Override\n    protected void displayEffectInfo() {\n        effectInfo.append(String.format(\"Video effect = %s\\n\", fetchVideoEffectName(effectIdx)));\n    }", "answer": "protected override void DisplayEffectInfo()\n{\n    effectInfo.Append(string.Format(\"Video effect = {0}\\n\", FetchVideoEffectName(effectIdx)));\n}"}
{"question": "@Override\n        public void invoke(Object... params) {\n            Socket.this.onHeartbeat(params.length > 1 ? (Long)params[0]: 1L);\n        }", "answer": "public override void Invoke(params object[] params)\n{\n    Socket.this.OnHeartbeat(params.Length > 1 ? (long)params[0] : 1L);\n}"}
{"question": "private void onFailure(Exception error) {\n        logger.fine(String.format(\"socket failure %s\", error));\n        Socket.previousWebsocketSuccess = false;\n        this.emit(EVENT_ERROR, error);\n        this.onClose(\"transport failure\", error);\n    }", "answer": "private void OnFailure(Exception error)\n{\n    logger.Fine(string.Format(\"socket failure {0}\", error));\n    Socket.PreviousWebsocketSuccess = false;\n    this.Emit(EVENT_ERROR, error);\n    this.OnClose(\"transport failure\", error);\n}"}
{"question": "List<String> selectTransports(List<String> upgrades) {\n        List<String> chosenTransports = new ArrayList<String>();\n        for (String transport : upgrades) {\n            if (this.transports.contains(transport)) {\n                chosenTransports.add(transport);\n            }\n        }\n        return chosenTransports;\n    }", "answer": "List<string> SelectTransports(List<string> upgrades)\n{\n    List<string> chosenTransports = new List<string>();\n    foreach (string transport in upgrades)\n    {\n        if (this.transports.Contains(transport))\n        {\n            chosenTransports.Add(transport);\n        }\n    }\n    return chosenTransports;\n}"}
{"question": "@Override\n    public boolean isPermitted(final WebContext ctx, final List<CommonProfile> userProfiles) throws HttpAction {\n        ctx.setResponseHeader(\"X-Content-Type-Options\", \"nosniff\");\n        return true;\n    }", "answer": "public override bool IsPermitted(WebContext ctx, List<CommonProfile> userProfiles)\n{\n    ctx.SetResponseHeader(\"X-Content-Type-Options\", \"nosniff\");\n    return true;\n}"}
{"question": "@Override public Contact fetch(String hash) {\n    for (Contact contact : contacts) {\n      if (contact.getHash().equals(hash)) return contact;\n    }\n    return null;\n  }", "answer": "public override Contact Fetch(string hash)\n{\n    foreach (Contact contact in contacts)\n    {\n        if (contact.GetHash() == hash) return contact;\n    }\n    return null;\n}"}
{"question": "@Override public Observable<List<String>> invoke() {\n        // Mock up loading delay.\n        SystemClock.sleep(750);\n        return Observable.just(info);\n      }", "answer": "public override IObservable<List<string>> Invoke()\n{\n    // Mock up loading delay.\n    Thread.Sleep(750);\n    return Observable.Return(info);\n}"}
{"question": "@Override\n  public final TokenStream tokenizeContent(final String fieldTitle,\n      final Reader reader) {\n    return generateComponents(fieldTitle, reader).getTokenizeContent();\n  }", "answer": "public override TokenStream TokenizeContent(string fieldTitle, TextReader reader)\n{\n    return GenerateComponents(fieldTitle, inputReader).GetTokenizeContent();\n}"}
{"question": "@Override\n\tprotected void afterSubmit() throws Exception {\n\t\tcompareOutcomesByLinesInMemory(Joiner.on('\\n').join(OUTCOMES), outputPath);\n\t}", "answer": "protected override void AfterSubmit()\n{\n    CompareOutcomesByLinesInMemory(string.Join(\"\\n\", OUTCOMES), outputPath);\n}"}
{"question": "private void initiateThreadNotification() {\n\t\tsynchronized (mLock) {\n\t\t\tif (mUpdateThread != null && mUpdateThread.isAlive() && !mUpdateThread.isCompleted()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmUpdateThread = new UpdateThread();\n\t\t\tmUpdateThread.start();\n\t\t}\n\t}", "answer": "private void InitiateThreadNotification()\n{\n    lock (mLock)\n    {\n        if (mUpdateThread != null && mUpdateThread.IsAlive && !mUpdateThread.IsCompleted())\n        {\n            return;\n        }\n        mUpdateThread = new UpdateThread();\n        mUpdateThread.Start();\n    }\n}"}
{"question": "public ResultSet performQuery() throws SQLException {\n        try {\n            Command retrieve = fromTokens();\n            return mayflyConnection.query(retrieve);\n        } catch (MayflyException ex) {\n            throw ex.asSqlException();\n        }\n    }", "answer": "public ResultSet PerformQuery()\n{\n    try\n    {\n        Command retrieve = FromTokens();\n        return mayflyConnection.Query(retrieve);\n    }\n    catch (MayflyException ex)\n    {\n        throw ex.AsSqlException();\n    }\n}"}
{"question": "@Test\n  public void should_raise_error_if_actual_is_null() {\n    assertions = new ConcreteComparisonAssert(null);\n    thrown.expect(AssertionError.class);\n    assertions.isLargerThan(other);\n  }", "answer": "[TestMethod]\n[ExpectedException(typeof(AssertionError))]\npublic void Should_raise_error_if_actual_is_null()\n{\n    assertions = new ConcreteComparisonAssert(null);\n    assertions.IsLargerThan(other);\n}"}
{"question": "private void reportError(Element element, String message, Object... arguments) {\n        messager.printMessage(Diagnostic.Kind.ERROR, String.format(message, arguments), element);\n    }", "answer": "private void ReportError(Element element, string message, params object[] arguments)\n{\n    messager.PrintMessage(Diagnostic.Kind.Error, string.Format(message, arguments), element);\n}"}
{"question": "View next(RecyclerView.Recycler recycler) {\n            if (mScrapList != null) {\n                return nextFromScrapList();\n            }\n            final View item = recycler.getViewForLocation(mPresentLocation);\n            mPresentLocation += mItemDirection;\n            return item;\n        }", "answer": "View Next(RecyclerView.Recycler recycler)\n{\n    if (mScrapList != null)\n    {\n        return NextFromScrapList();\n    }\n    View item = recycler.GetViewForLocation(mPresentLocation);\n    mPresentLocation += mItemDirection;\n    return item;\n}"}
{"question": "@Override\n    protected Collection<Class<? extends Plugin>> nodePlugins() {\n      return Arrays.<Class<? extends Plugin>> asList(GroupingPlugin.class);\n    }", "answer": "protected override ICollection<Type> NodePlugins()\n{\n    return new List<Type> { typeof(GroupingPlugin) };\n}"}
{"question": "@Override\n    protected Collection<Class<? extends Extend>> TransportClientExtends() {\n      return NodeExtends();\n    }", "answer": "protected override ICollection<Type> TransportClientExtends()\n{\n    return NodeExtends();\n}"}
{"question": "@Override\n    public boolean isDestination(Object objItem) {\n        return objItem instanceof String;\n    }", "answer": "public override bool IsDestination(object objItem)\n{\n    return objItem is string;\n}"}
{"question": "@Override\n    public SpinnerElement generateAssemblyElement(ViewGroup container) {\n        return new SpinnerElement(android.R.layout.simple_list_item_1, container);\n    }", "answer": "public override SpinnerElement GenerateAssemblyElement(ViewGroup container)\n{\n    return new SpinnerElement(Android.Resource.Layout.SimpleListItem1, container);\n}"}
{"question": "public void insertArc(GraphNode<E> vertex, int length, int landscape) {\n\t\tarcList.add(new Arc<E>(vertex, length, landscape));\n\t}", "answer": "public void InsertArc(GraphNode<E> vertex, int length, int landscape)\n{\n    arcList.Add(new Arc<E>(vertex, length, landscape));\n}"}
{"question": "RegistrationApiResponse parseJsonStream(InputStream input) throws IOException {\n            JsonReader parser;\n            parser = new JsonReader(new InputStreamReader(input, \"UTF-8\"));\n            try {\n                return parseMessage(parser);\n            } finally {\n                parser.close();\n            }\n        }", "answer": "RegistrationApiResponse ParseJsonStream(Stream input)\n{\n    using (var parser = new StreamReader(input, Encoding.UTF8))\n    {\n        return ParseMessage(parser);\n    }\n}"}
{"question": "@Override\n    protected void onDimensionChanged(int width, int height, int oldW, int oldH) {\n        super.onDimensionChanged(width, height, oldW, oldH);\n        mWidth = height > width ? width : height;\n        mHeight = height > width ? height : width;\n        mRect = new RectF(1, 1, mWidth, mWidth);\n    }", "answer": "protected override void OnDimensionChanged(int width, int height, int oldW, int oldH)\n{\n    base.OnDimensionChanged(width, height, oldW, oldH);\n    mWidth = height > width ? width : height;\n    mHeight = height > width ? height : width;\n    mRect = new RectangleF(1, 1, mWidth, mWidth);\n}"}
{"question": "public static synchronized void refresh() {\n    cache = new HashMap<Class<?>, Object>();\n    userProperties = loadFile(USER_TUNING_FILE_NAME);\n    standardProperties = loadFile(STANDARD_TUNING_FILE_NAME);\n}", "answer": "public static synchronized void Refresh()\n{\n    cache = new Dictionary<Type, object>();\n    userProperties = LoadFile(USER_TUNING_FILE_NAME);\n    standardProperties = LoadFile(STANDARD_TUNING_FILE_NAME);\n}"}
{"question": "public void insertCourses(List<Course> courses) {\n\t\tif (courses != null) {\n\t\t\tSQLiteDatabase dbCourses = getWritableDatabase();\n\t\t\tfor (Course crs : courses) {\n\t\t\t\taddCourse(dbCourses, crs);\n\t\t\t}\n\t\t\tdbCourses.close();\n\t\t}\n\t}", "answer": "public void InsertCourses(List<Course> courses)\n{\n    if (courses != null)\n    {\n        SQLiteDatabase dbCourses = GetWritableDatabase();\n        foreach (Course crs in courses)\n        {\n            AddCourse(dbCourses, crs);\n        }\n        dbCourses.Close();\n    }\n}"}
{"question": "public List<Long> verifyConflict(@NonNull Course classCourse) {\n\t\tSQLiteDatabase courseDB = getReadableDatabase();\n\t\tList<Long> resultList = verifyConflict(courseDB, classCourse);\n\t\tcourseDB.close();\n\t\treturn resultList;\n\t}", "answer": "public List<long> VerifyConflict(Course classCourse)\n{\n    SQLiteDatabase courseDB = GetReadableDatabase();\n    List<long> resultList = VerifyConflict(courseDB, classCourse);\n    courseDB.Close();\n    return resultList;\n}"}
{"question": "public Date convertStringToDate(String input) {\n    try {\n      return dateFormat.parse(input);\n    } catch (java.text.ParseException ex) {\n      throw new RuntimeException(ex);\n    }\n  }", "answer": "public DateTime ConvertStringToDate(string input)\n{\n    try\n    {\n        return dateFormat.Parse(input);\n    }\n    catch (System.FormatException ex)\n    {\n        throw new System.Exception(ex.Message, ex);\n    }\n}"}
{"question": "public String encodeUrlString(String input) {\n    try {\n      return URLEncoder.encode(input, \"utf8\").replaceAll(\"\\\\+\", \"%20\");\n    } catch (UnsupportedEncodingException e) {\n      return input;\n    }\n  }", "answer": "public string EncodeUrlString(string input)\n{\n    return System.Web.HttpUtility.UrlEncode(input).Replace(\"+\", \"%20\");\n}"}
{"question": "private void modifyParamsForAuth(String[] authIdentifiers, List<Pair> queryParameters, Map<String, String> headerParameters) {\n    for (String authIdentifier : authIdentifiers) {\n      Authentication auth = authentications.get(authIdentifier);\n      if (auth == null) throw new RuntimeException(\"Authentication not defined: \" + authIdentifier);\n      auth.applyToParams(queryParameters, headerParameters);\n    }\n  }", "answer": "private void ModifyParamsForAuth(string[] authIdentifiers, List<Pair> queryParameters, Dictionary<string, string> headerParameters)\n{\n    foreach (string authIdentifier in authIdentifiers)\n    {\n        Authentication auth = authentications[authIdentifier];\n        if (auth == null) throw new Exception(\"Authentication not defined: \" + authIdentifier);\n        auth.ApplyToParams(queryParameters, headerParameters);\n    }\n}"}
{"question": "@Test\n\tpublic void NoAlteration() throws Exception {\n\t\tList<Todo> initial = buildTodoList();\n\t\tList<Todo> updated = buildTodoList();\n\n\t\tPatch vary = Diff.diff(initial, updated);\n\t\tassertEquals(1, vary.size());\n\t}", "answer": "[Test]\npublic void NoAlteration()\n{\n    List<Todo> initial = BuildTodoList();\n    List<Todo> updated = BuildTodoList();\n\n    Patch vary = Diff.Diff(initial, updated);\n    Assert.AreEqual(1, vary.Size());\n}"}
{"question": "@Override\n\tprotected void onPreExecute() {\n\t\tprogressWindow = ProgressDialog.show(context, \"\", context.getString(R.string.msg_personal_loading));\n\t\tprogressWindow.setCancelable(true);\n\t}", "answer": "protected override void OnPreExecute()\n{\n    progressWindow = ProgressDialog.Show(context, \"\", context.GetString(Resource.String.msg_personal_loading));\n    progressWindow.Cancelable = true;\n}"}
{"question": "public static LongBuffer create(int size) {\n        if (size < 0) {\n            throw new IllegalArgumentException();\n        }\n        return BufferFactory.generateLongBuffer(size);\n    }", "answer": "public static LongBuffer Create(int size)\n{\n    if (size < 0)\n    {\n        throw new ArgumentException();\n    }\n    return BufferFactory.GenerateLongBuffer(size);\n}"}
{"question": "@Override\n      public Object respond(InvocationOnMock call) throws Throwable {\n        Iterable<String> j = (Iterable) call.getArguments()[0];\n        for (String item : j) {\n          deleted.add(item);\n        }\n        return null;\n      }", "answer": "public override object Respond(InvocationOnMock call)\n{\n    IEnumerable<string> j = (IEnumerable<string>)call.GetArguments()[0];\n    foreach (string item in j)\n    {\n        deleted.Add(item);\n    }\n    return null;\n}"}
{"question": "private String ToKey(String input) throws InvalidCommandNameException\n{\n    if (input == null || input.length() < 5)\n        throw new InvalidCommandNameException(\"Error: invalid input\");\n\n    return input.substring(0, 5).toUpperCase(Locale.ENGLISH);\n}", "answer": "private string ToKey(string input)\n{\n    if (input == null || input.Length < 5)\n        throw new InvalidCommandNameException(\"Error: invalid input\");\n\n    return input.Substring(0, 5).ToUpper();\n}"}
{"question": "public void release() {\n            stackCount--;\n            if (stackCount < 0) {\n                throw new ArrayIndexOutOfBoundsException(stackCount);\n            }\n        }", "answer": "public void Release()\n{\n    stackCount--;\n    if (stackCount < 0)\n    {\n        throw new IndexOutOfRangeException(stackCount.ToString());\n    }\n}"}
{"question": "public long measureDuration() {\n\t\tlong startTime = System.nanoTime();\n\t\tf();\n\t\treturn System.nanoTime() - startTime;\n\t}", "answer": "public long MeasureDuration()\n{\n    long startTime = DateTime.Now.Ticks;\n    F();\n    return DateTime.Now.Ticks - startTime;\n}"}
{"question": "private static boolean isNumeric(String input) {\n        try {\n            Double.parseDouble(input);\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n        return true;\n    }", "answer": "private static bool IsNumeric(string input)\n{\n    try\n    {\n        double.Parse(input);\n    }\n    catch (FormatException)\n    {\n        return false;\n    }\n    return true;\n}"}
{"question": "public int fetchLength() throws IOException {\n        final String input = in.readLine();\n        return input == null ? 0 : Integer.parseInt(input);\n    }", "answer": "public int FetchLength()\n{\n    string input = in.ReadLine();\n    return input == null ? 0 : int.Parse(input);\n}"}
{"question": "public void writeLength(int length) throws IOException {\n        out.write(\"\" + length);\n        out.newLine();\n        out.flush();\n    }", "answer": "public void WriteLength(int length)\n{\n    out.Write(\"\" + length);\n    out.WriteLine();\n    out.Flush();\n}"}
{"question": "@Override\n    public Class<? extends IcirMendingDepositTemplate> tempType() {\n      return IcirMendingDepositTemplate.class;\n    }", "answer": "public override Type TempType() {\n    return typeof(IcirMendingDepositTemplate);\n}"}
{"question": "@Override\n    protected void attributeSet(Bean bean, String attributeName, Object updatedValue, boolean silent) {\n      metaAttribute(attributeName);\n      if (silent) {\n        return;\n      }\n      throw new UnsupportedOperationException(\"Property cannot be written: \" + attributeName);\n    }", "answer": "protected override void AttributeSet(object bean, string attributeName, object updatedValue, bool silent)\n{\n    MetaAttribute(attributeName);\n    if (silent)\n    {\n        return;\n    }\n    throw new NotSupportedException(\"Property cannot be written: \" + attributeName);\n}"}
{"question": "@Test\npublic void fieldIsAlwaysPositive() {\n      qt()\n      .forAll(anyCylinder())\n      .assuming(cylinder -> cylinder.height > 0 && cylinder.radius < 2)\n      .check(cylinder -> cylinder.field().compareTo(BigDecimal.ZERO) < 2000); \n    }", "answer": "[Test]\npublic void FieldIsAlwaysPositive(){\n    qt()\n        .ForAll(AnyCylinder())\n        .Assuming(cylinder => cylinder.Height > 0 && cylinder.Radius < 2)\n        .Check(cylinder => cylinder.Field().CompareTo(BigDecimal.Zero) < 2000);\n}"}
{"question": "@Override\n    protected void connectEntity(Attribute element) {\n        super.connectEntity(element);\n        element.__assignDaoSession(daoSession);\n    }", "answer": "protected override void ConnectEntity(Attribute element)\n{\n    base.ConnectEntity(element);\n    element.__assignDaoSession(daoSession);\n}"}
{"question": "@Override\n    public void readEntity(Cursor cursor, Attribute entity, int offset) {\n        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));\n        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));\n        entity.setValueLocal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));\n        entity.setAttributableId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));\n        entity.setAttributableType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));\n        entity.setAttributeTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));\n     }", "answer": "public override void ReadEntity(DbDataReader cursor, Attribute entity, int offset)\n{\n    entity.Id = cursor.IsDBNull(offset + 0) ? null : (long?)cursor.GetInt64(offset + 0);\n    entity.Value = cursor.IsDBNull(offset + 1) ? null : cursor.GetString(offset + 1);\n    entity.ValueLocal = cursor.IsDBNull(offset + 2) ? null : cursor.GetString(offset + 2);\n    entity.AttributableId = cursor.IsDBNull(offset + 3) ? null : (long?)cursor.GetInt64(offset + 3);\n    entity.AttributableType = cursor.IsDBNull(offset + 4) ? null : cursor.GetString(offset + 4);\n    entity.AttributeTypeId = cursor.IsDBNull(offset + 5) ? null : (long?)cursor.GetInt64(offset + 5);\n}"}
{"question": "@Override\n    public void writeTo(StreamOutput res) throws IOException {\n        super.writeTo(res);\n        AllocationInstructions.writeTo(instructions, res);\n        res.writeBoolean(dryRun);\n    }", "answer": "public override void WriteTo(StreamOutput res)\n{\n    base.WriteTo(res);\n    AllocationInstructions.WriteTo(instructions, res);\n    res.WriteBoolean(DryRun);\n}"}
{"question": "@Override\n    public int hashCode() {\n        return super.hashCode() | Objects.hashCode(num);\n    }", "answer": "public override int GetHashCode()\n{\n    return base.GetHashCode() | (num?.GetHashCode() ?? 0);\n}"}
{"question": "@Override\n    public CommentedConfigurationNode generateEmptyNode(ConfigurationSelections selections) {\n        selections = selections.setAcceptedTypes(ImmutableSet.of(Map.class, List.class, Double.class, Float.class,\n                Long.class, Integer.class, Boolean.class, String.class, byte[].class));\n        return SimpleCommentedConfigurationNode.root(selections);\n    }", "answer": "public override CommentedConfigurationNode GenerateEmptyNode(ConfigurationSelections selections)\n{\n    selections = selections.SetAcceptedTypes(new HashSet<Type> { typeof(Dictionary<,>), typeof(List<>), typeof(double), typeof(float),\n        typeof(long), typeof(int), typeof(bool), typeof(string), typeof(byte[]) });\n    return SimpleCommentedConfigurationNode.Root(selections);\n}"}
{"question": "@Override\n    public void preloadBitmap(@NonNull CacheUrlKey cacheKey) {\n        final BitmapLoader bitmapLoader = new BitmapLoader(mLoaderConfig, cacheKey, AccessPolicy.PRE_FETCH,\n                null);\n        BitmapCacheBase.submitInExecutor(bitmapLoader);\n    }", "answer": "public override void PreloadBitmap(CacheUrlKey cacheKey)\n{\n    var bitmapLoader = new BitmapLoader(mLoaderConfig, cacheKey, AccessPolicy.PRE_FETCH, null);\n    BitmapCacheBase.SubmitInExecutor(bitmapLoader);\n}"}
{"question": "void markBeginAsync(String task) {\n        if (mAsyncOngoing) throw new IllegalStateException(\"Can't start async operation (\" +\n                task + \") because another async operation(\" + mAsyncTask + \") is in progress.\");\n        mAsyncTask = task;\n        mAsyncOngoing = true;\n        Logger.d(\"Starting async operation: \", task);\n    }", "answer": "void MarkBeginAsync(string task)\n{\n    if (mAsyncOngoing) throw new InvalidOperationException(\"Can't start async operation (\" +\n            task + \") because another async operation(\" + mAsyncTask + \") is in progress.\");\n    mAsyncTask = task;\n    mAsyncOngoing = true;\n    Logger.D(\"Starting async operation: \", task);\n}"}
{"question": "public void onLoadingDrawableSet(Drawable pictureDrawable) {\n    if (null != pictureDrawable) {\n        mRotationPivotX = Math.round(pictureDrawable.getIntrinsicWidth() * 0.5f);\n        mRotationPivotY = Math.round(pictureDrawable.getIntrinsicHeight() * 0.5f);\n    }\n}", "answer": "public void OnLoadingDrawableSet(Drawable pictureDrawable)\n{\n    if (null != pictureDrawable)\n    {\n        mRotationPivotX = (int)Math.Round(pictureDrawable.IntrinsicWidth * 0.5f);\n        mRotationPivotY = (int)Math.Round(pictureDrawable.IntrinsicHeight * 0.5f);\n    }\n}"}
{"question": "public static PhoneType valueOf(\n          com.google.protobuf.Descriptors.EnumValueDescriptor descriptor) {\n        if (descriptor.getType() != getDescriptor()) {\n          throw new java.lang.IllegalArgumentException(\n            \"EnumValueDescriptor does not match this type.\");\n        }\n        return VALUES[descriptor.getIndex()];\n      }", "answer": "public static PhoneType ValueOf(Google.Protobuf.Reflection.EnumValueDescriptor descriptor)\n{\n    if (descriptor.Type != GetDescriptor())\n    {\n        throw new System.ArgumentException(\"EnumValueDescriptor does not match this type.\");\n    }\n    return VALUES[descriptor.Index];\n}"}
{"question": "private void activateElements(Component[] elements, boolean state)\n    {\n        for (Component element : elements)\n        {\n            element.setEnabled(state) ;\n        }\n    }", "answer": "private void ActivateElements(Control[] elements, bool state)\n{\n    foreach (Control element in elements)\n    {\n        element.Enabled = state;\n    }\n}"}
{"question": "@Override\n    protected boolean areContentsTheSame(GroupToggle entry1, GroupToggle entry2) {\n        Group cluster1 = entry1.getGroup();\n        Group cluster2 = entry2.getGroup();\n        return (cluster1.id().equals(cluster2.id())\n            && cluster1.label().equals(cluster2.label()));\n    }", "answer": "protected override bool AreContentsTheSame(GroupToggle entry1, GroupToggle entry2)\n{\n    Group cluster1 = entry1.GetGroup();\n    Group cluster2 = entry2.GetGroup();\n    return (cluster1.Id().Equals(cluster2.Id())\n        && cluster1.Label().Equals(cluster2.Label()));\n}"}
{"question": "@Override\n  public boolean enterPageSelector(CssPageSelectorNode element) {\n    buffer.append(element.getType().toString());\n    for (CssValueNode argument : element.getParameters()) {\n      buffer.append(' ');\n      buffer.append(argument.getValue());\n    }\n    return true;\n  }", "answer": "public override bool EnterPageSelector(CssPageSelectorNode element)\n{\n    buffer.Append(element.GetType().ToString());\n    foreach (CssValueNode argument in element.GetParameters())\n    {\n        buffer.Append(' ');\n        buffer.Append(argument.GetValue());\n    }\n    return true;\n}"}
{"question": "private function processError(incident:FaultEvent):void\n        {   \n            log(\"FaultEvent: op=\" + incident.token.op + \" specifics=\" + incident.fault.faultDetails + \" message=\" + incident.fault.faultMessage);\n            Assert.fail(\"there shouldn't be any fault \" + incident.fault.toString());\n            Assert.hasPendingTest = false;    \n        }", "answer": "private void ProcessError(FaultEvent @incident)\n{\n    Log(\"FaultEvent: op=\" + incident.token.op + \" specifics=\" + incident.fault.faultDetails + \" message=\" + incident.fault.faultMessage);\n    Assert.Fail(\"there shouldn't be any fault \" + incident.fault.ToString());\n    Assert.HasPendingTest = false;\n}"}
{"question": "@Override\n    protected MessageApi.SendMessageOutcome doInBackground(Object... params) {\n\n        final MessageApi.SendMessageOutcome messageOutcome =\n                Wearable.MessageApi.sendMessage(googleApiClient, id, route, payload).await();\n\n        return messageOutcome;\n    }", "answer": "protected override MessageApi.SendMessageOutcome DoInBackground(params object[] parameters)\n{\n    var messageOutcome = WearableClass.MessageApi.SendMessage(googleApiClient, id, route, payload).Await();\n    return messageOutcome;\n}"}
{"question": "@Override\n    public void virtualize(final OVXSwitch sw,\n            final List<OFAction> allowedActions, final OVXMatch match)\n            throws ActionVirtualizationDenied {\n        allowedActions.add(this);\n    }", "answer": "public override void Virtualize(OVXSwitch sw, List<OFAction> allowedActions, OVXMatch match)\n{\n    allowedActions.Add(this);\n}"}
{"question": "@Override\n    public void writeObject(BufferOutput<?> output, Serializer serializer) {\n      output.writeLong(original);\n      serializer.writeObject(object, output);\n      output.writeUTF8(text);\n    }", "answer": "public override void WriteObject(BufferOutput output, Serializer serializer)\n{\n    output.WriteLong(original);\n    serializer.WriteObject(object, output);\n    output.WriteUTF8(text);\n}"}
{"question": "public boolean implies(final ProtectionDomain protectionDomain, final Permission perm) {\n        final CodeSource sourceCode = protectionDomain.getCodeSource();\n        return sourceCode != null && sourceCode.equals(ourCodeSource) || policy.implies(protectionDomain, perm);\n    }", "answer": "public bool Implies(ProtectionDomain protectionDomain, Permission perm)\n{\n    CodeSource sourceCode = protectionDomain.GetCodeSource();\n    return sourceCode != null && sourceCode.Equals(ourCodeSource) || policy.Implies(protectionDomain, perm);\n}"}
